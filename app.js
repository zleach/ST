

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js from "js.txt" begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/prando.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


"use strict";
var Prando = /** @class */ (function () {
    function Prando(seed) {
        if (seed === void 0) { seed = undefined; }
        if (typeof (seed) === "string") {
            // String seed
            this._seed = this.hashCode(seed);
        }
        else if (typeof (seed) === "number") {
            // Numeric seed
            this._seed = seed;
        }
        else {
            // Pseudo-random seed
            this._seed = Date.now() + Math.random();
        }
        this.reset();
    }
    // ================================================================================================================
    // PUBLIC INTERFACE -----------------------------------------------------------------------------------------------
    /**
     * Generates a pseudo-random number between a lower (inclusive) and a higher (exclusive) bounds.
     *
     * @param min - The minimum number that can be randomly generated.
     * @param pseudoMax - The maximum number that can be randomly generated (exclusive).
     * @return The generated pseudo-random number.
     */
    Prando.prototype.next = function (min, pseudoMax) {
        if (min === void 0) { min = 0; }
        if (pseudoMax === void 0) { pseudoMax = 1; }
        this.recalculate();
        return this.map(this._value, Prando.MIN, Prando.MAX, min, pseudoMax);
    };
    /**
     * Generates a pseudo-random integer number in a range (inclusive).
     *
     * @param min - The minimum number that can be randomly generated.
     * @param max - The maximum number that can be randomly generated.
     * @return The generated pseudo-random number.
     */
    Prando.prototype.nextInt = function (min, max) {
        if (min === void 0) { min = 10; }
        if (max === void 0) { max = 100; }
        this.recalculate();
        return Math.floor(this.map(this._value, Prando.MIN, Prando.MAX, min, max + 1));
    };
    /**
     * Generates a pseudo-random string sequence of a particular length from a specific character range.
     *
     * Note: keep in mind that creating a random string sequence does not guarantee uniqueness; there is always a
     * 1 in (char_length^string_length) chance of collision. For real unique string ids, always check for
     * pre-existing ids, or employ a robust GUID/UUID generator.
     *
     * @param length - Length of the strting to be generated.
     * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).
     * @return The generated string sequence.
     */
    Prando.prototype.nextString = function (length, chars) {
        if (length === void 0) { length = 16; }
        if (chars === void 0) { chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; }
        var str = "";
        while (str.length < length) {
            str += this.nextChar(chars);
        }
        return str;
    };
    /**
     * Generates a pseudo-random string of 1 character specific character range.
     *
     * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).
     * @return The generated character.
     */
    Prando.prototype.nextChar = function (chars) {
        if (chars === void 0) { chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; }
        this.recalculate();
        return chars.substr(this.nextInt(0, chars.length - 1), 1);
    };
    /**
     * Picks a pseudo-random item from an array. The array is left unmodified.
     *
     * Note: keep in mind that while the returned item will be random enough, picking one item from the array at a time
     * does not guarantee nor imply that a sequence of random non-repeating items will be picked. If you want to
     * *pick items in a random order* from an array, instead of *pick one random item from an array*, it's best to
     * apply a *shuffle* transformation to the array instead, then read it linearly.
     *
     * @param array - Array of any type containing one or more candidates for random picking.
     * @return An item from the array.
     */
    Prando.prototype.nextArrayItem = function (array) {
        this.recalculate();
        return array[this.nextInt(0, array.length - 1)];
    };
    /**
     * Generates a pseudo-random boolean.
     *
     * @return A value of true or false.
     */
    Prando.prototype.nextBoolean = function () {
        this.recalculate();
        return this._value > 0.5;
    };
    /**
     * Skips ahead in the sequence of numbers that are being generated. This is equivalent to
     * calling next() a specified number of times, but faster since it doesn't need to map the
     * new random numbers to a range and return it.
     *
     * @param iterations - The number of items to skip ahead.
     */
    Prando.prototype.skip = function (iterations) {
        if (iterations === void 0) { iterations = 1; }
        while (iterations-- > 0) {
            this.recalculate();
        }
    };
    /**
     * Reset the pseudo-random number sequence back to its starting seed. Further calls to next()
     * will then produce the same sequence of numbers it had produced before. This is equivalent to
     * creating a new Prando instance with the same seed as another Prando instance.
     *
     * Example:
     * let rng = new Prando(12345678);
     * console.log(rng.next()); // 0.6177754114889017
     * console.log(rng.next()); // 0.5784605181725837
     * rng.reset();
     * console.log(rng.next()); // 0.6177754114889017 again
     * console.log(rng.next()); // 0.5784605181725837 again
     */
    Prando.prototype.reset = function () {
        this._value = this._seed;
    };
    // ================================================================================================================
    // PRIVATE INTERFACE ----------------------------------------------------------------------------------------------
    Prando.prototype.recalculate = function () {
        // Xorshift*32
        // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper
        this._value ^= this._value << 13;
        this._value ^= this._value >> 17;
        this._value ^= this._value << 5;
    };
    Prando.prototype.map = function (val, minFrom, maxFrom, minTo, maxTo) {
        return ((val - minFrom) / (maxFrom - minFrom)) * (maxTo - minTo) + minTo;
    };
    Prando.prototype.hashCode = function (str) {
        var hash = 0;
        if (str) {
            var l = str.length;
            for (var i = 0; i < l; i++) {
                hash = ((hash << 5) - hash) + str.charCodeAt(i);
                hash |= 0;
            }
        }
        return hash;
    };
    Prando.MIN = -2147483648; // Int32 min
    Prando.MAX = 2147483647; // Int32 max
    return Prando;
}());/* Last merge : Sun Mar 25 22:29:07 PDT 2018  */

/* Merging order :



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/markov.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


- app/game.js
- app/__equipment.json
- app/__items.json
- app/__names_star.json
- app/__names_proper.json
- app/util/romanNumeral.js
- lib/lodash.js
- lib/webfont-loader.js
- lib/tiny-color.js
- lib/numeral.js
- lib/moment.js
- lib/filter_blurX.js
- lib/filter_blurY.js
- lib/hmac-md5.js
- lib/prando.js
- lib/markov.js
- lib/tombola.js
- app/_names.js
- app/_constants.js
- app/_inventoryObject.js
- app/gameObjects/_gameObject.js
- app/systems/_galaxy.js
- app/systems/_system.js
- app/equipment/_equipment.js
- app/equipment/_consumable.js
- app/equipment/reactor.js
- app/equipment/batteries.js
- app/equipment/BasicFuelTank.js
- app/equipment/RepairKit.js
- app/equipment/FuelKit.js
- app/equipment/FTLFuel.js
- app/weapons/_weapon.js
- app/ships/_ship.js
- app/engines/_engine.js
- app/engines/basicEngine.js
- app/engines/smallEngine.js
- app/engines/_thruster.js
/*
Markov.coffee - Markov chains in CoffeeScript.
github.com/SyntaxColoring/Markov-Word-Generator

Released under the MIT license.

Copyright (c) 2013 Max Marrone

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Markov;

Markov = (function() {
  function Markov(sequences, n1, maxLength) {
    this.sequences = sequences != null ? sequences : [];
    this.n = n1 != null ? n1 : 2;
    this.maxLength = maxLength != null ? maxLength : 20;
  }

  Markov.prototype.generate = function() {
    var continuation, currentState, nextElement, result;
    result = [];
    currentState = (function(_this) {
      return function() {
        return result.slice(Math.max(0, result.length - _this.n), result.length);
      };
    })(this);
    continuation = (function(_this) {
      return function() {
        return _this["continue"](currentState());
      };
    })(this);
    while (result.length < this.maxLength && ((nextElement = continuation()) != null)) {
      result.push(nextElement);
    }
    return result;
  };

  Markov.prototype.ngrams = function() {
    var ngramsFromSequence;
    ngramsFromSequence = function(sequence, n) {
      var i, j, ref, results;
      if (n < 1 || n > sequence.length) {
        return [];
      } else {
        results = [];
        for (i = j = 0, ref = sequence.length - n; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results.push(sequence.slice(i, i + n));
        }
        return results;
      }
    };
    return this.sequences.reduce(((function(_this) {
      return function(a, b) {
        return a.concat(ngramsFromSequence(b, _this.n + 1));
      };
    })(this)), []);
  };

  Markov.prototype.tree = function(sequence) {
    var element, j, k, len, len1, ngram, ngrams, node, normalize, reduce, root;
    if (sequence == null) {
      sequence = [];
    }
    ngrams = this.ngrams();
    root = {
      continuations: {},
      count: ngrams.length,
      frequency: 1.0
    };
    for (j = 0, len = ngrams.length; j < len; j++) {
      ngram = ngrams[j];
      node = root;
      for (k = 0, len1 = ngram.length; k < len1; k++) {
        element = ngram[k];
        if (node.continuations[element] == null) {
          node.continuations[element] = {
            continuations: {},
            count: 0
          };
        }
        node = node.continuations[element];
        node.count++;
      }
    }
    normalize = function(node) {
      var child, childName, ref, results;
      ref = node.continuations;
      results = [];
      for (childName in ref) {
        child = ref[childName];
        child.frequency = child.count / node.count;
        results.push(normalize(child));
      }
      return results;
    };
    normalize(root);
    if (typeof sequence === "string") {
      sequence = sequence.split("");
    }
    reduce = function(node, element) {
      var ref;
      if (node != null) {
        return (ref = node.continuations[element]) != null ? ref : null;
      } else {
        return null;
      }
    };
    return sequence.reduce(reduce, root);
  };

  Markov.prototype["continue"] = function(sequence) {
    var continuationName, continuationNode, node, ref, sum, target;
    node = this.tree(sequence);
    if (node != null) {
      target = this.rng.next();
      sum = 0;
      ref = node.continuations;
      for (continuationName in ref) {
        continuationNode = ref[continuationName];
        sum += continuationNode.frequency;
        if (sum >= target) {
          return continuationName;
        }
      }
    }
    return null;
  };

  return Markov;

})();

if (typeof module !== "undefined" && module !== null) {
  module.exports = Markov;
} else {
  this.Markov = Markov;
}

// ---
// generated by coffee-script 1.9.2- app/gameObjects/pickup.js
- app/gameObjects/flake.js
- app/gameObjects/iceFlake.js
- app/gameObjects/asteroid.js
- app/gameObjects/asteroidField.js
- app/gameObjects/nebula.js


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/tombola.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


- app/gameObjects/iceteroid.js
- app/items/flake.js
- app/items/paladium.js
- app/items/metoricIron.js
- app/items/fuel.js
- app/ships/basicMiner.js
- app/ships/fuelTanker.js
- app/ships/shuttle.js
- app/weapons/focusedBeam.js
- app/weapons/basicBlaster.js
- app/planets/_planet.js
- app/planets/basicPlanet.js
- app/planets/basicMoon.js
- app/ships/buoy.js
- app/player.js
- app/hud.js
- app/minimap.js
- app/progressBar.js
- app/gui/_guiScreen.js
- app/gui/arrival.js
- app/gui/inventory.js
- app/gui/exchange.js
- app/gui/button.js
- app/gui/tabItem.js
- app/gui/twoLineButton.js
- app/gui/notification.js
- app/gui/inventoryList.js
- app/gui/map.js
- app/gui/mapScreen.js
- app/economy/_economy.js

*/


//-------------------------------------------------------------------------------------------
//  TOMBOLA SETUP
//-------------------------------------------------------------------------------------------

function Tombola() {
}
var tombola = new Tombola();


//-------------------------------------------------------------------------------------------
//  RANGE ROLL
//-------------------------------------------------------------------------------------------

// Returns a random whole number between 'min' and 'max' //

Tombola.prototype.range = function(min,max) {
    return Math.round(min + (Math.random() * (max - min))); // int
};

// Returns a random float number between 'min' and 'max' //

Tombola.prototype.rangeFloat = function(min,max) {
    return min + (Math.random() * (max - min)); // float
};

// Returns an array populated with random whole numbers between 'min' and 'max' //

Tombola.prototype.rangeArray = function(min,max,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.range(min,max));
    }
    return a; // int array
};

// Returns an array populated with random float numbers between 'min' and 'max' //

Tombola.prototype.rangeFloatArray = function(min,max,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.range(min,max));
    }
    return a; // float array
};


//-------------------------------------------------------------------------------------------
//  DICE ROLL
//-------------------------------------------------------------------------------------------

// Returns a random whole number from simulated dice rolls //

Tombola.prototype.dice = function(die,sides) {
    die = Math.round(die);
    sides = Math.round(sides);
    var t = 0;
    for (var i=0; i<die; i++) {
        t += (1 + Math.floor(Math.random() * sides));
    }
    return t; // int
};

// Returns an array populated with random whole numbers from simulated dice rolls //

Tombola.prototype.diceArray = function(die,sides,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.dice(die,sides));
    }
    return a; // int array
};


//-------------------------------------------------------------------------------------------
//  FUDGE ROLL
//-------------------------------------------------------------------------------------------

// Returns a random whole positive or negative number from simulated fudge dice rolls //
// 'strength' of 1 and 'die' of 3 gives a possible range of -3 to 3 //

Tombola.prototype.fudge = function(die,strength) {
    die = Math.round(die);
    strength = Math.round(strength) || 1;
    var t = 0;
    for (var i=0; i<die; i++) {
        t += (-strength + Math.floor(Math.random() * ((strength * 2) + 1)));
    }
    return t; // int
};

// Returns a random float positive or negative number from simulated fudge dice rolls //
// 'strength' of 0.1 and 'die' of 3 gives a possible range of -0.3 to 0.3 //

Tombola.prototype.fudgeFloat = function(die,strength) {
    die = Math.round(die);
    strength = strength || 1;
    var t = 0;
    for (var i=0; i<die; i++) {
        t += (-strength + (Math.random() * (strength * 2)));
    }
    return t; // float
};

// Returns an array populated with random whole positive or negative numbers from simulated fudge dice rolls //

Tombola.prototype.fudgeArray = function(die,strength,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.fudge(die,strength));
    }
    return a; // int array
};

// Returns an array populated with random float positive or negative numbers from simulated fudge dice rolls //

Tombola.prototype.fudgeFloatArray = function(die,strength,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.fudgeFloat(die,strength));
    }
    return a; // float array
};

//-------------------------------------------------------------------------------------------
//  CHANCE ROLL
//-------------------------------------------------------------------------------------------

// Returns true or false the results of a chance roll //
// a 'chance' of 1 and 'possibility' of 5 means there's a 1 in 5 chance of returning true //

Tombola.prototype.chance = function(chance,possibility) {
    var n = Math.random() * possibility;
    return (n < chance); // bool
};

// Returns an array populated with true or false results from chance rolls //

Tombola.prototype.chanceArray = function(chance,possibility,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.chance(chance,possibility));
    }
    return a; // bool array
};


//-------------------------------------------------------------------------------------------
//  PERCENT ROLL
//-------------------------------------------------------------------------------------------

// Returns true or false the results of a percent roll //
// a 'percent' of 25 means there's a 25% chance of returning true //

Tombola.prototype.percent = function(percent) {
    var n = Math.random() * 100;
    return (n < percent); // bool
};

// Returns an array populated with true or false results from percent rolls //

Tombola.prototype.percentArray = function(percent,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.percent(percent));
    }
    return a; // bool array
};


//-------------------------------------------------------------------------------------------
//  ITEM
//-------------------------------------------------------------------------------------------

// Returns a randomly selected item with equal probability //
// 'items' is an array of items to be chosen from //

Tombola.prototype.item = function(items) {
    var l = items.length;
    var n = Math.floor(Math.random() * l);
    return items[n]; // item
};


//-------------------------------------------------------------------------------------------
//  WEIGHTED NUMBER
//-------------------------------------------------------------------------------------------

// Returns a random whole number with a weighted probability //
// 'weights' is an array of probability weights, four weights would mean a number between 1 - 4 is generated //
// 'weights' of [20,10,10] will return a number between 1 and 3, with 1 being twice as likely an outcome as either 2 or 3 //

Tombola.prototype.weightedNumber = function(weights) {
    var l = weights.length;
    var totalWeight = 0;
    for (var i=0; i<l; i++) {
        totalWeight += weights[i];
    }
    var n = Math.random() * totalWeight;
    var w = 0;
    for (i=0; i<l; i++) {
        w += weights[i];
        if (n <= w) {
            return i+1; // int
        }
    }
};


//-------------------------------------------------------------------------------------------
//  WEIGHTED ITEM
//-------------------------------------------------------------------------------------------

// Returns a randomly selected item with a weighted probability //
// 'items' is an array of items to be chosen from //
// 'weights' is an array of probability weights, setting the probability of each item being selected e.g [5,20,1,0.1] //

Tombola.prototype.weightedItem = function(items,weights) {
    var l = items.length;
    var totalWeight = 0;
    for (var i=0; i<l; i++) {
        totalWeight += weights[i] || 0;
    }
    var n = Math.random() * totalWeight;
    var w = 0;
    for (i=0; i<l; i++) {
        w += weights[i] || 0;
        if (n <= w) {
            return items[i]; // item
        }
    }
};


//-------------------------------------------------------------------------------------------
//  WEIGHTED FUNCTION
//-------------------------------------------------------------------------------------------

// Calls a randomly selected function with a weighted probability //
// 'functions' is an array of functions to be chosen from //
// 'weights' is an array of probability weights, setting the probability of each function being selected e.g [5,20,1,0.1] //

Tombola.prototype.weightedFunction = function(functions,weights) {
    var l = functions.length;
    var totalWeight = 0;
    for (var i=0; i<l; i++) {
        totalWeight += weights[i] || 0;
    }
    var n = Math.random() * totalWeight;
    var w = 0;
    for (i=0; i<l; i++) {
        w += weights[i] || 0;
        if (n <= w) {
            functions[i](); // function call
            break;
        }
    }
};


//-------------------------------------------------------------------------------------------
//  CLUSTER
//-------------------------------------------------------------------------------------------

// Returns an array of whole numbers which are randomly clustered within a min/max range //
// an evenly distributed cluster width is set with 'spread' //

Tombola.prototype.cluster = function(quantity,min,max,spread) {
    var c = this.range(min,max);
    var a = [];
    for (var i=0; i<quantity; i++) {
        a.push(c + this.range(-spread,spread));
    }
    return a; // int array
};

// Returns an array of whole numbers which are randomly clustered within a min/max range //
// uneven cluster width is set with 'die' and 'strength' (die x strength = max possible width) //
// the distribution is more weighted around the center using fudge rolls, more die = greater center weight //

Tombola.prototype.clusterFudge = function(quantity,min,max,die,strength) {
    strength = strength || 1;
    var c = this.range(min,max);
    var a = [];
    for (var i=0; i<quantity; i++) {
        a.push(c + this.fudge(die,strength));
    }
    return a; // int array
};


//-------------------------------------------------------------------------------------------
//  PERSISTENT DECK
//-------------------------------------------------------------------------------------------

// Creates a deck (hat/tombola) which can be drawn from, added to or shuffled //
// 'contents' is an array of items to populate the deck with //


Tombola.prototype.deck = function(contents) {
    return new RandomDeck(contents);
};


function RandomDeck(contents) {
    this.contents = contents || [];
}

// Returns an item from the deck, randomly or at a given index, and removes that item from the deck //
RandomDeck.prototype.draw = function(index) {
    if (this.contents.length>0) {
        index = index || Math.floor(Math.random() * this.contents.length);
        var item = this.contents[index];
        this.contents.splice(index,1);
        return item;
    } else {
        return null;
    }
};

// Returns an item from the deck, randomly or at a given index, the item stays in the deck //
RandomDeck.prototype.look = function(index) {
    if (this.contents.length>0) {
        index = index || Math.floor(Math.random() * this.contents.length);
        return this.contents[index];
    } else {
        return null;
    }
};

// Adds an item to the deck, randomly or at a given index //
RandomDeck.prototype.insert = function(item, index) {
    index = index || Math.round(Math.random() * this.contents.length);
    this.contents.splice(index,0,item);
};

// Shuffles the deck order //
RandomDeck.prototype.shuffle = function() {
    var a = [];
    var l = this.contents.length;
    for (var i=0; i<l; i++) {
        a.push(this.draw());
    }
    this.contents = a;
};

// Returns an array of all contents of the deck //
RandomDeck.prototype.show = function() {
    return this.contents;
};


//-------------------------------------------------------------------------------------------
//  WEIGHTED DECK
//-------------------------------------------------------------------------------------------

// Creates a deck (hat/tombola) which can be drawn from, added to or shuffled //
// 'contents' is an array of items to populate the deck with, 'weights' add weighting to
// the chance, and 'instances' allows for multiple instances of each object. //


Tombola.prototype.weightedDeck = function(contents, options) {
    return new WeightedDeck(contents, options);
};

function WeightedDeck(contents, options) {
    options = options || {};
    this.contents = contents || [];
    this.weights = options.weights || [];
    this.instances = options.instances || [];

    var i;
    if (this.weights.length===0) {
        for (i=0; i<contents.length; i++) {
            this.weights.push(1);
        }
    }
    if (this.instances.length===0) {
        for (i=0; i<contents.length; i++) {
            this.instances.push(1);
        }
    }
}

// Returns an item from the deck, randomly or at a given index, and removes that item from the deck //
WeightedDeck.prototype.draw = function(index) {
    if (this.contents.length>0) {

        // no given index, do random weighting //
        var l = this.contents.length;
        if (!(index >=0 && index<l)) {
            var totalWeight = 0;
            for (var i=0; i<l; i++) {
                totalWeight += this.weights[i] || 0;
            }
            var n = Math.random() * totalWeight;
            var w = 0;
            for (i=0; i<l; i++) {
                w += this.weights[i] || 0;
                if (n <= w) {
                    index = i;
                    break;
                }
            }
        }
        var item = this.contents[index];

        // remove an instance //
        this.instances[index] -= 1;
        if (this.instances[index]<1) {
            this.contents.splice(index,1);
            this.weights.splice(index,1);
            this.instances.splice(index,1);
        }

        return item;
    } else {
        return null;
    }
};

// Returns an item from the deck, randomly or at a given index, the item stays in the deck //
WeightedDeck.prototype.look = function(index) {
    if (this.contents.length>0) {

        // no given index, do random weighting //
        var l = this.contents.length;
        if (!(index >=0 && index<l)) {
            var totalWeight = 0;
            for (var i=0; i<l; i++) {
                totalWeight += this.weights[i] || 0;
            }
            var n = Math.random() * totalWeight;
            var w = 0;
            for (i=0; i<l; i++) {
                w += this.weights[i] || 0;
                if (n <= w) {
                    index = i;
                    break;
                }
            }
        }
        return this.contents[index];
    } else {
        return null;
    }
};

// Adds an item to the deck, randomly or at a given index //
WeightedDeck.prototype.insert = function(item, options) {
    options = options || {};
    var index = options.index || Math.round(Math.random() * this.contents.length);
    var weight = options.weight || 1;
    var instances = options.instances || 1;
    this.contents.splice(index,0,item);
    this.weights.splice(index,0,weight);
    this.instances.splice(index,0,instances);
};

// Shuffles the deck order //
WeightedDeck.prototype.shuffle = function() {
    var a = [];
    var b = [];
    var c = [];
    var l = this.contents.length;
    for (var i=0; i<l; i++) {
        var index = Math.floor(Math.random() * this.contents.length);
        a.push(this.contents[index]);
        b.push(this.weights[index]);
        c.push(this.instances[index]);
        this.contents.splice(index,1);
        this.weights.splice(index,1);
        this.instances.splice(index,1);
    }
    this.contents = a;
    this.weights = b;
    this.instances = c;
};

// Returns an array of all contents of the deck //
WeightedDeck.prototype.show = function() {
    return this.contents;
};


// npm export //
if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = Tombola;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/game.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/_names.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


const screenWidth = 1600/2
const screenHeight = 1000/2

var ITEMS = [];

var game = new Phaser.Game(screenWidth, screenHeight, Phaser.CANVAS, 'screen', {
    gameObjects : [],
    preload : function(){
        this.time.advancedTiming = true

        //this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.fullScreenScaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.game.renderer.renderSession.roundPixels = true;

        Phaser.Canvas.setImageRenderingCrisp(this.game.canvas);
        PIXI.scaleModes.DEFAULT = PIXI.scaleModes.NEAREST        
    },
    create : function(){
        this.loaded = false;
        this.load.onLoadStart.add(this.loadStart, this);
        this.load.onFileComplete.add(this.fileComplete, this);
        this.load.onLoadComplete.add(this.loadComplete, this);
                
        this.loadText = this.add.text(0, 0, 'Loading...', { font: `12px Fira Code`, fill: '#FFFFFF', boundsAlignH: "center", boundsAlignV: "middle"});
        this.loadText.setTextBounds(0, 0, screenWidth, screenHeight);

        this.initialized = false;
        this.init();
    },
    loadStart : function(){
	    this.loadText.setText("Loading...");
    },
    fileComplete : function(progress, cacheKey, success, totalLoaded, totalFiles) {
    	this.loadText.setText("Loading: " + progress + "%");
    },
    loadComplete:function() {
        this.setup();
	    this.loadText.visible = false;
        this.loaded = true;
    },
    init : function(){
        // Planets
        this.planetImages = [
            'planet-1',
            'planet-2',
            'planet-3',
            'planet-4',
            'planet-5',
            'planet-6',
            'planet-7',
            'planet-8',
            'planet-9',
            'planet-10'            
        ]
        for (let planetImage of this.planetImages){
            this.load.image(planetImage, `assets/planets/${planetImage}.png`);
        }
        this.load.image('moon-1', 'assets/moon-1.png');
    
        // Misc
        this.load.image('bullet', 'default_assets/bullets/bullet11.png');
        this.load.image('null', 'assets/FFFFFF-0.png');
        this.load.image('blasterBullet', 'default_assets/bullets/bullet13.png');
        this.load.image('laser', 'default_assets/bullets/bullet05.png');
        this.load.image('laser-sparkle', 'default_assets/particles/red.png');
        this.load.image('stars-distant', 'assets/stars-distant.png');
        this.load.image('stars-mid', 'assets/stars-mid.png');
        this.load.image('stars-near', 'assets/stars-near.png');
        this.load.image('blue_flame', 'assets/engines/blue_flame.png');
        this.load.image('rcs_flame', 'assets/engines/rcs.png');
        this.load.image('cloud', 'default_assets/particles/cloud.png');
        this.load.image('1x1', 'default_assets/particlestorm/particles/1x1.png');
        this.load.image('white', 'default_assets/particlestorm/particles/white.png');
        this.load.image('white-smooth', 'assets/white-smooth.png');
        this.load.image('nebula-cloud', 'assets/nebula-cloud.png');
        this.load.image('smoke-trail', 'default_assets/particlestorm/particles/white-smoke.png');
        this.load.image('dot', 'assets/map-dot.png');
        this.load.image('minimap-ship', 'assets/minimap-ship.png');
        this.load.image('dock-arrow', 'assets/dock-indicator.png');
        this.load.image('nav-arrow', 'assets/nav-arrow.png');
        this.load.image('crate-tiny', 'assets/crate-tiny.png');
        this.load.image('crate-micro', 'assets/crate-micro.png');

        // Alarm
        this.load.spritesheet('master-alarm', 'assets/master-alarm.png', 50, 50);
        this.load.audio('master_alarm', 'assets/audio/alarm.mp3');

        // O2
        this.load.image('oxygen-gauge', 'assets/oxygen-gauge.png');
        this.load.image('gauge-arrow', 'assets/gauge-arrow.png');
        
        // FTL
        this.load.image('ftl-panel', 'assets/ftl-panel.png');

        // Planet Stuff
        this.load.image('planet-arrival-1', 'assets/planet-arrival-1.png');
        
        // Roids
        this.load.image('asteroid-flake-1', 'assets/asteroid-flake-a.png');
        this.load.image('asteroid-flake-2', 'assets/asteroid-flake-b.png');
        this.load.image('asteroid-flake-3', 'assets/asteroid-flake-c.png');
        this.load.image('asteroid-large', 'assets/asteroid-large.png');
        this.load.image('asteroid-medium', 'assets/asteroid-medium.png');
        this.load.image('asteroid-small', 'assets/asteroid-small.png');
        this.load.image('asteroid-tiny', 'assets/asteroid-flake-a.png');

        this.load.image('ice-large-1', 'assets/ice-large-1.png');
        this.load.image('ice-large-2', 'assets/ice-large-2.png');
        this.load.image('ice-large-3', 'assets/ice-large-3.png');
        this.load.image('ice-large-4', 'assets/ice-large-4.png');
        this.load.image('ice-large-5', 'assets/ice-large-5.png');
        
        this.load.image('ice-small-1', 'assets/ice-small-1.png');
        this.load.image('ice-small-2', 'assets/ice-small-2.png');
        this.load.image('ice-small-3', 'assets/ice-small-3.png');
        this.load.image('ice-small-4', 'assets/ice-small-4.png');
        this.load.image('ice-small-5', 'assets/ice-small-5.png');


        // Ships
        this.load.image('mining_ship', 'assets/ships/miner.png');
        this.load.image('fuelTanker', 'assets/ships/fuelTanker.png');
        this.load.image('fuelTanker2', 'assets/ships/fuelTanker2.png');
        this.load.image('shuttle', 'assets/ships/shuttle.png');
        this.load.spritesheet('buoy', 'assets/ships/buoy.png', 21, 55);

        this.load.bitmapFont(
            'pixelmix_8',
            'assets/fonts/pixelmix1.png',
            'assets/fonts/pixelmix1.fnt'
        );

        this.load.bitmapFont(
            'pixelmix_8_leaded',
            'assets/fonts/pixelmix1.png',
            'assets/fonts/pixelmix1.fnt'
        );
        
        // Hud
        this.load.image('minimap-bg', 'assets/minimap-bg.png');
        this.load.image('minimap-dot', 'assets/map-dot.png');
        this.load.image('minimap-mask', 'assets/minimap-mask.png');

        // Audio
        this.load.audio('crash-1', 'assets/audio/crash-1.mp3');
        this.load.audio('crash-2', 'assets/audio/crash-2.mp3');
        this.load.audio('crash-3', 'assets/audio/crash-3.mp3');
        this.load.audio('crash-4', 'assets/audio/crash-4.mp3');
        this.load.audio('crash-5', 'assets/audio/crash-5.mp3');
        this.load.audio('crash-light-1', 'assets/audio/crash-light-1.mp3');
        this.load.audio('crash-light-2', 'assets/audio/crash-light-2.mp3');
        this.load.audio('rock-crash-1', 'assets/audio/rock-crash-1.mp3');
        this.load.audio('rock-crash-2', 'assets/audio/rock-crash-2.mp3');
        this.load.audio('rock-crash-3', 'assets/audio/rock-crash-3.mp3');
        this.load.audio('rock-crash-4', 'assets/audio/rock-crash-4.mp3');
        this.load.audio('rock-crash-5', 'assets/audio/rock-crash-5.mp3');
        this.load.audio('rock-crash-6', 'assets/audio/rock-crash-6.mp3');
        this.load.audio('crash-thud-1', 'assets/audio/crash-thud-1.mp3');
        this.load.audio('crash-thud-2', 'assets/audio/crash-thud-2.mp3');
        this.load.audio('crunch-1', 'assets/audio/crunch-1.mp3');

        this.load.audio('ice-crunch-1', 'assets/audio/ice-crunch-1.mp3');
        this.load.audio('ice-crash-1', 'assets/audio/ice-crash-1.mp3');
        this.load.audio('ice-crash-2', 'assets/audio/ice-crash-2.mp3');
        this.load.audio('ice-crash-3', 'assets/audio/ice-crash-3.mp3');
        this.load.audio('ice-crash-4', 'assets/audio/ice-crash-4.mp3');
        this.load.audio('ice-crash-5', 'assets/audio/ice-crash-5.mp3');
        this.load.audio('ice-crash-6', 'assets/audio/ice-crash-6.mp3');
        this.load.audio('nebula-ambient-1', 'assets/audio/nebula-ambient-1.mp3');

        this.load.audio('rcs-engine', 'assets/audio/rcs.mp3');
        this.load.audio('rcs-loop', 'assets/audio/rcs-loop-2.mp3');
        this.load.audio('hiss-1', 'assets/audio/hiss-1.mp3');
        this.load.audio('hiss-2', 'assets/audio/hiss-2.mp3');
        this.load.audio('hiss-3', 'assets/audio/hiss-3.mp3');
        this.load.audio('hiss-4', 'assets/audio/hiss-4.mp3');
        this.load.audio('hiss-5', 'assets/audio/hiss-5.mp3');

        this.load.audio('ftl-charge', 'assets/audio/ftl-charge.mp3');
        this.load.audio('ftl-jump', 'assets/audio/ftl-jump.mp3');
        this.load.audio('jump-complete', 'assets/audio/jump-complete.mp3');

        this.load.audio('pickup-common-1', 'assets/audio/pickup-common-1.mp3');
        this.load.audio('gui_click', 'assets/audio/Button 3.m4a');
        this.load.audio('gui_click_soft', 'assets/audio/Button 5.m4a');
        this.load.audio('gui_collapse', 'assets/audio/Collapse.m4a');
        this.load.audio('gui_expand', 'assets/audio/Expand.m4a');
        this.load.audio('panel-toggle', 'assets/audio/panel-toggle.mp3');
        this.load.audio('beep-beep', 'assets/audio/Error 1.m4a');
        this.load.audio('blorp', 'assets/audio/Error 4.m4a');
        this.load.audio('cancel', 'assets/audio/Cancel 1.m4a');
        this.load.audio('success', 'assets/audio/Success 3.m4a');
        this.load.audio('gas-leak', 'assets/audio/gas-leak.mp3');
        this.load.audio('basic-engine', 'assets/audio/basic-engine.mp3');
        this.load.audio('title-notification', 'assets/audio/title-notification.mp3');
        this.load.audio('invalid', 'assets/audio/Error 5.m4a');
        this.load.audio('low-fuel-warning', 'assets/audio/low-fuel-warning.mp3');

        this.load.audio('dock-connect', 'assets/audio/dock-connect.mp3');
        this.load.audio('dock-release', 'assets/audio/dock-release.mp3');
        this.load.audio('power-up', 'assets/audio/power-up.mp3');
        this.load.audio('power-down', 'assets/audio/power-down.mp3');

        this.load.audio('equip', 'assets/audio/equip.mp3');
        this.load.audio('unequip', 'assets/audio/unequip.mp3');
        this.load.audio('repair-light', 'assets/audio/repair-light.mp3');
        this.load.audio('jettison', 'assets/audio/jettison.mp3');
        this.load.audio('glug', 'assets/audio/glug.mp3');

        this.load.audio('mining-laser', 'assets/audio/mining-laser.mp3');
        
        this.load.start();
    },
    setup : function(){
        //this.sound.mute = true;
        
        this.cache.getBitmapFont('pixelmix_8').font.lineHeight = 12;
        this.cache.getBitmapFont('pixelmix_8_leaded').font.lineHeight = 16;

        this.game.physics.startSystem(Phaser.Physics.P2JS);
        this.game.physics.p2.restitution = 0.05;
        this.game.physics.p2.setPostBroadphaseCallback(this.broadphaseCallback, this);
        this.game.world.setBounds(0, 0, 1000000, 1000000);
        
        this.ps = this.game.plugins.add(Phaser.ParticleStorm);
        this.game.physics.p2.setImpactEvents(true);
        
        var tildeKey = game.input.keyboard.addKey(Phaser.Keyboard.TILDE);
        tildeKey.onUp.add(this.debug, this);

        var seed = 208;
        window.rng = new Prando(seed);
        this.rng = window.rng;
        this.names = new Names(this.rng);

        // Sounds
        this.soundFX = {};
        this.soundFX.click = game.add.audio('gui_click_soft');                

        //  Tiled scrolling background
        this.bgGroup = this.game.add.group();
        
        this.stars =  this.game.add.group();

        this.starsDistant = this.game.add.tileSprite(0,0, screenWidth, screenHeight, 'stars-distant');
        this.starsDistant.fixedToCamera = true;
        this.stars.add(this.starsDistant);

        this.starsMid = this.game.add.tileSprite(0,0, screenWidth, screenHeight, 'stars-mid');
        this.starsMid.fixedToCamera = true;
        this.stars.add(this.starsMid);

        this.starsNear = this.game.add.tileSprite(0,0, screenWidth, screenHeight, 'stars-near');
        this.starsNear.fixedToCamera = true;
        this.stars.add(this.starsNear);


        // Game World
        // Camera
        this.planets = this.game.add.group();
        this.asteroids = this.game.add.group();
        this.ships = this.game.add.group();

        this.player = new Player(this);

        this.cameraFree = false;
        this.setupCamera(silent = true);

        this.economy = new Economy(this);

        this.galaxy = new Galaxy(this);
        this.galaxy.build();
        this.system = this.galaxy.closestSystemToCenter;

        this.game.world.bringToTop(this.asteroids);
        this.game.world.bringToTop(this.ships);

        // FullSCreen
        var fKey = game.input.keyboard.addKey(Phaser.Keyboard.F);
        fKey.onDown.add(this.fullScreen, this);

        // HUD
        this.hudGroup = this.game.add.group();
        this.hud = new HUD(this);
        
        // GUI
        this.guiGroup = this.game.add.group();
        this.arrivalScreen = new ArrivalScreen(this,this.guiGroup);
        this.inventoryScreen = new InventoryScreen(this,this.guiGroup);
        this.mapScreen = new MapScreen(this,this.guiGroup);
                
        // Weapons
        var miningLaser = InventoryObject.make('mining_laser_1',this);
            miningLaser.equipTo(this.player.ship);
        this.player.ship.addItemsToInventory(1,miningLaser);

        // Engine
        var engine = InventoryObject.make('basic_engine',this);
            engine.equipTo(this.player.ship);
        this.player.ship.addItemsToInventory(1,engine);
        this.player.ship.refuel();

        // Reactor
        var reactor = InventoryObject.make('prospector_reactor',this);
            reactor.equipTo(this.player.ship);
        this.player.ship.addItemsToInventory(1,reactor);
        this.player.ship.recharge();        

        this.player.ship.addItemsToInventory(1, InventoryObject.make('light_repair_kit',this));
        this.player.ship.addItemsToInventory(1, InventoryObject.make('theta_crystal',this));
        this.player.ship.addItemsToInventory(1, InventoryObject.make('theta_crystal',this));

        // Date
        this.starDate = moment("22841207", "YYYYMMDD");
        game.time.events.loop(Phaser.Timer.SECOND * 5, this.tickTime, this);
        this.updateTime();

        // Very top layer
        this.notificationGroup = this.game.add.group(); 
        this.notificationGroup.fixedToCamera = true;
        
        // Kick things off
        this.system.arrive();
        
        // Curtains
        this.curtain = this.game.add.graphics();
        this.curtain.beginFill(0x000000);
        this.curtain.drawRect(0, 0, screenWidth, screenHeight);
        this.curtain.fixedToCamera = true;
    },
    
    register : function(object){
        this.gameObjects.push(object);
    },
    unregister : function(object){
        var index = this.gameObjects.indexOf(object);
        if(index !== -1) {
          this.gameObjects.splice(index, 1);
        }
    },
    tickTime : function(){
        // Tick Tock
        this.starDate = moment(this.starDate).add(1, 'minute');
        this.updateTime();
        // Date
    },
    updateTime : function(){
        this.hud.stardateLabel.setText(moment(this.starDate).format('MMM Do YY HH:mm'));        
    },
    skipTime : function(amount,unit){
        this.starDate = moment(this.starDate).add(amount, unit);     
        this.updateTime();   
    },
    broadphaseCallback : function(body1, body2){
        if(body1.sprite.parentObject == this.player.ship || body2.sprite.parentObject == this.player.ship){
            var ship;
            if(body1.sprite.parentObject == this.player.ship){
                ship = body1.sprite.parentObject;
                thing = body2.sprite.parentObject
            } else {
                ship = body2.sprite.parentObject;                
                thing = body1.sprite.parentObject
            }
                        
            if(ship.dockedToShip === thing) return true; // Ignore being docked.
            
            var shakeAmount = 0;
            if(thing.sprite.body.mass>2){
                shakeAmount = (Math.abs(ship.speed-thing.speed)/2000);            
            }
            var damageAmount = shakeAmount*200
            if(shakeAmount>.001){
                if(shakeAmount>.01){
                    ship.crashSoft_sound();
                    game.camera.shake(.01, 100);
                } else {
                    ship.crash_sound();
                    game.camera.shake(shakeAmount, 100);                    
                }
                
                if(damageAmount>1) ship.inflictDamage(damageAmount);
            } else {
                // No shake
                ship.crashThud_sound();
            }
        }    
        return true;
    },

    log(){
        this.logValue = '';
        var args = Array.prototype.slice.call(arguments);
        args.forEach(function(element) {
            this.logValue = this.logValue + '[' + element + ']' 
        }, this);
    },

    toggleCameraMode : function(){
        this.cameraFree = !this.cameraFree;
        this.setupCamera();
    },
    
    lockCamera : function(){
        // Locked
        this.game.camera.follow(this.player.sprite);            
        this.game.camera.deadzone = null;
        this.game.camera.targetOffset.x = 50;

        this.game.camera.cache = {
            x : this.game.camera.x,
            y : this.game.camera.y,            
        }
    },
    
    freeCamera : function(){
        // Free
        this.game.camera.follow(this.player.sprite);
        var deadzonePadding = 100;
        this.freeDeadzone = new Phaser.Rectangle(
            deadzonePadding,
            deadzonePadding,
            screenWidth-350,
            screenHeight-deadzonePadding*2
        );  
        this.game.camera.deadzone = this.freeDeadzone;
        this.game.camera.focusOnXY(this.player.ship.sprite.x + 50,this.player.ship.sprite.y);

        this.game.camera.cache = {
            x : this.game.camera.x,
            y : this.game.camera.y,            
        }
    },
    
    setupCamera : function(silent){
        if(this.cameraFree){
            this.freeCamera();
            if(!silent) this.hud.message('Camera Free');
        } else {
            this.lockCamera();
            if(!silent) this.hud.message('Camera Locked');            
        }

        this.camera.x = this.game.world.centerX;
        this.camera.y = this.game.world.centerY;

        // Initialize cache
        this.game.camera.cache = {
            x : this.game.camera.x,
            y : this.game.camera.y,            
        }
        
        this.game.camera.deltaX = 0;
        this.game.camera.deltay = 0;
    },
    
    update : function(){
        if(this.loaded){                
            this.game.camera.deltaX = this.game.camera.x - this.game.camera.cache.x;
            this.game.camera.deltaY = this.game.camera.y - this.game.camera.cache.y;            

            // Update all registered objects
            this.gameObjects.forEach(function(gameObject) {
                gameObject.update();
            });
            if(!this.initialized) {
                this.game.add.tween(this.curtain).to({
                    alpha : 0,
                }, 1000, "Quart.easeOut", true, 100);
                this.initialized = true;
            }

            // Move stars
            this.starsDistant.tilePosition.x = -this.game.camera.x*0.3;
            this.starsDistant.tilePosition.y = -this.game.camera.y*0.3;

            this.starsMid.tilePosition.x = -this.game.camera.x*0.325;
            this.starsMid.tilePosition.y = -this.game.camera.y*0.325;

            this.starsNear.tilePosition.x = -this.game.camera.x*0.35;
            this.starsNear.tilePosition.y = -this.game.camera.y*0.35;
                        
            // Update minimap
            this.hud.update();

            // Update Camera
            this.game.camera.cache.x = this.game.camera.x;
            this.game.camera.cache.y = this.game.camera.y;
        }
    },
    fullScreen : function(){
        if (this.game.scale.isFullScreen) {
            this.game.scale.stopFullScreen();
        } else {
            this.game.scale.startFullScreen(false);
        }
    },
    render : function(){
        if(this.logValue!=undefined){
            this.game.debug.text(this.logValue, 32, 32) 
        }
        //this.game.debug.text(game.time.fps +' fps', screenWidth-80, screenHeight-10) 
        //this.game.debug.body(this.player.sprite);
        //this.game.debug.bodyInfo(this.player.sprite,32,32);

/*
        this.player.weapons.forEach(function(weapon) {
            weapon.weapon.debug(32,32,true);
        }, this);
*/

/*
        this.asteroids.forEach(function(asteroid) {
            this.game.debug.body(asteroid);
        }, this);
*/

/*
        this.ships.forEach(function(ship) {
            this.game.debug.body(ship);
            //ship.angle += 5;
        }, this);
*/
    },
    debug : function(){
        debugger;  
    },
});class Names {
    constructor(rng) {
        this.rng = rng;
    }
    
    wordGenerator(){

    }
    static parseName(rawName) {
        return Names.capitalize(rawName.split(' ')[0].toLowerCase())
    }
    
    static parseWords(rawInput) {
        return rawInput.toLowerCase().replace(/[^a-z\s]/g, "").split(/\s/g);
    }

    static capitalize(string){
        return string[0].toUpperCase() + string.slice(1);
    }
    
    static star(){
        var name;

        var markovChain = new Markov;
        markovChain.n = rng.nextInt(5,5);
        markovChain.sequences = Names.parseWords(NAMES_STAR.join('\n'));
        markovChain.rng = rng;        
        
        if(rng.next()>.9){
            markovChain.maxLength = rng.nextInt(3,6);
            var word1 = Names.capitalize(markovChain.generate().join(""))
            markovChain.maxLength = rng.nextInt(4,14);
            var word2 = Names.capitalize(markovChain.generate().join(""))
            name = `${word1} ${word2}`;            
        } else {
            markovChain.maxLength = rng.nextInt(3,14);
            name = Names.capitalize(markovChain.generate().join(""));
        }

        if(rng.next()>.4){
            var greekPrefix = GREEK_ALPHABET[rng.nextInt(0, GREEK_ALPHABET.length-1)]
            name = `${greekPrefix} ${name}`;
        }
        
        return name;
    }

    static outerRimStar(){
        var designation = OUTER_RIM_DESIGNATIONS[rng.nextInt(0, OUTER_RIM_DESIGNATIONS.length-1)]
        var number = rng.nextInt(100,999);
        return `${designation}-${number}`
    }

    static proper(){
        return Names.parseName(NAMES_PROPER[rng.nextInt(0, NAMES_PROPER.length-1)]);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/__equipment.json begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/_constants.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


ITEMS.push(...[
    {
        "_class" : "FocusedBeamWeapon",
		"_slot": "weapon",
		"key": "mining_laser_1",
		"name": "Mining Laser",
		"type": "Focused Beam",
        "description" : "A clunky old class IV mining laser. An essential tool for any miner. This one has seen better days...",
		"rarity": "common",
		"storageClass": "equipment",
		"baseValue": 130,
		"mass": 40,
		"damage" : 1,
		"energyConsumption" : 3,
		"range" : 120,
	},
    {
        "_class" : "BasicEngine",
		"_slot": "engine",
		"key": "basic_engine",
		"name": "R-1B Rocket Engine",
		"type": "Liquid-fuel engine",
        "description" : "The '1B is a workhorse among outer rim pilots. Reliable, simple with modest power. If you take care of her, she'll probably outlive you.",
		"storageClass": "equipment",
		"baseValue": 220,
		"mass": 100,
        "thrust" : 100,
        "maxSpeed" : 150,
        "spoolUpSpeed" : .08,
        "spoolDownSpeed" : .04,
        "fuelConsumption" : .7,
	},
    {
        "_class" : "Reactor",
		"_slot": "equipment",
		"key": "prospector_reactor",
		"name": "CP1 Reactor",
		"type": "Fusion",
        "description" : "Also known as the \"Prospector's Friend\", the CP1 is tuned specifically for focused beam mining lasers. If you're looking for gold, don't leave home without one of these.",
		"storageClass": "equipment",
		"baseValue": 180,
		"mass": 280,
        "chargeRate" : 1,
        "capacity" : 1000,
        "readableChargeRate" : "Slow",
        "bonus" : [
            { 
                "damage" : .25,
                "class" : "FocusedBeamWeapon",
            }
        ]
	},
    {
        "_class" : "BasicFuelTank",
		"_slot": "equipment",
		"key": "small_fuel_tank",
		"name": "Small Fuel Tank",
		"type": "Liquid Fuel",
        "description" : "The Spacesys F1000 external fuel tank adds a modest 1,000 units of fuel to your propulsion system, while the lightweight composite keeps the installation weight low.",
		"storageClass": "equipment",
		"baseValue": 180,
		"mass": 40,
        "fuelCapacity" : 1000,
	},
    {
        "_class" : "RepairKit",
		"_slot": "equipment",
		"key": "light_repair_kit",
		"name": "Light Hull Patch Kit",
        "description" : "A gently used kit containing hull tape, foil and sealant. The absolute minimum to get you home in a pinch. Or try to at least.",
		"storageClass": "equipment",
		"baseValue": 100,
		"mass": 10,
        "repairAmount" : 30,
	},
    {
        "_class" : "RepairKit",
		"_slot": "equipment",
		"key": "med_repair_kit",
		"name": "Repair Equipment",
        "description" : "More than enough to fix any leak, ding or dent in your hull. Welding experience not required, but couldn't hurt.",
		"storageClass": "equipment",
		"baseValue": 300,
		"mass": 25,
        "repairAmount" : 100,
	},

    {
        "_class" : "FuelKit",
		"_slot": "equipment",
		"key": "small_fuel_drum",
		"name": "Small Fuel Drum",
        "description" : "A cylinder of kerosene for use as reserve fuel. Also works well for lighting barbecue pits. Provides 500 units of rocket fuel.",
		"storageClass": "equipment",
        "fuelAmount" : 500,
		"baseValue": 200,
		"mass": 10,
	},
	{
        "_class" : "FTLFuel",
		"_slot": "equipment",
		"key": "theta_crystal",
		"name": "Theta Crystals",
		"type": "FTL Drive Fuel",
        "description" : "A shaphire crystal synthesized from various volatile compounds. Used to power faster than light drives. The metalic storage cylinder reads DANGEROUS.",
		"rarity": "uncommon",
		"storageClass": "equipment",
		"baseValue": 100,
		"mass": 3
	},
]);//alert("5678".toHHMMSS());
function TIME_FORMAT(time) {
    var sec_num = parseInt(time, 10); // don't forget the second param
    var hours   = Math.floor(sec_num / 3600);
    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
    var seconds = sec_num - (hours * 3600) - (minutes * 60);

    if (hours   < 10) {hours   = "0"+hours;}
    if (minutes < 10) {minutes = "0"+minutes;}
    if (seconds < 10) {seconds = "0"+seconds;}
    
    if(time==Infinity || isNaN(time)){
        return '--';
    } else {
        return minutes+':'+seconds;
    }
}

FONT = 'Fira Code';

DISTANCE_FACTOR_PLANETS = 1000;
DISTANCE_FACTOR_SHIPS = .2;
PIXEL_TO_LIGHTYEAR = .1;

AMBIENT_VOLUME = .95;

// Convert from degrees to radians.
Math.radians = function(degrees) {
	return degrees * Math.PI / 180;
}

// Convert from radians to degrees.
Math.degrees = function(radians) {
	return radians * 180 / Math.PI;
}

Array.prototype.lastItem = function() {
    return this[this.length-1];
};

Array.prototype.firstItem = function() {
    return this[0];
};

Array.prototype.clean = function(deleteValue) {
  for (var i = 0; i < this.length; i++) {
    if (this[i] == deleteValue) {         
      this.splice(i, 1);
      i--;
    }
  }
  return this;
};

Number.prototype.between = function(a, b, inclusive) {
  var min = Math.min.apply(Math, [a, b]),
    max = Math.max.apply(Math, [a, b]);
  return inclusive ? this >= min && this <= max : this > min && this < max;
};

Number.prototype.clamp = function(min, max) {
  return Math.min(Math.max(this, min), max);
};

function isEven(n) {
   return n % 2 == 0;
}

function isOdd(n) {
   return Math.abs(n % 2) == 1;
}

function decimalToHexString(number) {
    if (number < 0)
    {
        number = 0xFFFFFFFF + number + 1;
    }

    return number.toString(16).toUpperCase();
}

function extend(a, b){
    for(var key in b)
        if(b.hasOwnProperty(key))
            a[key] = b[key];
    return a;
}


const P2BODY_DEBUG = false;

const DEG_IN_RAD_90 = 1.5708;

const CONTROL_MODE = {
    gui : 'gui',
    play: 'play',
    landed: 'landed',
    exchange: 'exchange',
}

const SCREEN_TRANSITION_STYLE = {
    none : 'none',
    fromBottom : 'fromBottom',
    fromRight : 'fromRight',
}

const CREDIT_PREFIX = {
    short : '$',
    long: 'Credits ',
}

const BUTTON_STYLE = {
    simple : 'simple',
    twoLine : 'twoLine',
}

const NAVIGATION_MODE = {
    free : 'free',
    target : 'target',
    stationKeeping : 'stationKeeping',
    followWaypoints : 'followWaypoints',
}

const CARGO_STORAGE_CLASS = {
    bulk : 'bulk',
    passengers : 'passengers',
    gas : 'gas',
    liquid : 'liquid',
    equipment : 'equipment',
}

const CARGO_STORAGE_CLASS_NAMES = {
    bulk : 'Bulk',
    passengers : 'Passenger',
    gas : 'Gas',
    liquid : 'Liquid',
    equipment : 'Equipment',
}


const ASTEROID_FIELD_SIZE = {
    small : 1400,
    medium : 1800,
    large: 2200,
    huge: 4000
}

const PLANET_SERVICES = {
    refinery : 'refinery',
    fuelDepot : 'fuelDepot',
    shipyard : 'shipyard',
    market : 'market',
    tavern : 'tavern',
    casino : 'casino',
    passengerTerminal : 'passengerTerminal',
}

const PLANET_SERVICES_TITLE = {
    refinery : 'Refinery',
    fuelDepot : 'Fuel Depot',
    shipyard : 'Shipyard',
    market : 'Marketplace',
    tavern : 'Tavern',
    casino : 'Clubhouse',
    passengerTerminal : 'Starport',
}

const PLANET_SERVICES_DESC = {
    refinery : 'Process raw materials',
    fuelDepot : 'Refuel and recharge',
    shipyard : 'Trade and repair ships',
    market : 'Buy, sell & trade goods',
    tavern : 'Drink with the locals',
    casino : 'Members only gambling',
    passengerTerminal : 'Find transport jobs',
}

const PLANET_SERVICES_REQUIREMENTS = [
    {
        service : 'refinery',
        requirement : 'industry',
        level : 6,
    },
    {
        service : 'fuelDepot',
        requirement : 'industry',
        level : 3,
    },
    {
        service : 'shipyard',
        requirement : 'science',
        level : 7,
    },
    {
        service : 'market',
        requirement : 'trade',
        level : 5,
    },
    {
        service : 'tavern',
        requirement : 'culture',
        level : 5,
    },
    {
        service : 'casino',
        requirement : 'culture',
        level : 8,
    },
    {
        service : 'passengerTerminal',
        requirement : 'trade',
        level : 7,
    }
];

PLANET_SPECIALIZATIONS = {
    culture : ['peaceful','tourism','military'],
    industry : ['manufacturing','agriculture'],
    science : ['mining','technology'],
    trade : ['luxury','government'],
}

const WEAPON_TYPES = {
    miningLaser :    'miningLaser',
    kinetic :  'kinetic',
    blaster :  'blaster',
    missleLauncher :  'missleLauncher',
}

const ENGINE_TYPES = {
    rocket :    'rocket',
    reactionControlThruster :  'reactionControlThruster',
}

const RARITY = {
    common :    'common',
    uncommon :  'uncommon',
    rare :      'rare',
    exquisite :      'exquisite',
    exotic : 'exotic',
}

const RARITY_NAMES = {
    common :    'Common',
    uncommon :  'Uncommon',
    rare :      'Rare',
    exquisite : 'Exquisite',
    exotic : 'Exotic',
}

const RARITY_COLOR = {
    common :    0xFFFFFF,
    uncommon :  0x3DD20B,
    rare :      0x2F78FF,
    exquisite : 0x9132C8,
    exotic : 0xCF4747,
}

const RARITY_INDEX = {
    common :    1,
    uncommon :  2,
    rare :      3,
    exquisite : 4,
    exotic : 5,
}

const RARITY_MINING_CHANCE = {
    common :    1,
    uncommon :  .1,
    rare :      .01,
    exquisite :      .001,
    exotic : .0001,
}

const INVENTORY_LIST_CURSOR_STYLE = {
    none : 'none',
    left : 'left',
    right : 'right',
}

const STELLAR_TYPES = [
{
    class : 'O5',
    color : '#9db4ff',
},
{
    class : 'B1',
    color : '#a2b9ff',
},
{
    class : 'B3',
    color : '#a7bcff',
},
{
    class : 'B5',
    color : '#aabfff',
},
{
    class : 'B8',
    color : '#afc3ff',
},
{
    class : 'A1',
    color : '#baccff',
},
{
    class : 'A3',
    color : '#c0d1ff',
},
{
    class : 'A5',
    color : '#cad8ff',
},
{
    class : 'F0',
    color : '#e4e8ff',
},
{
    class : 'F2',
    color : '#edeeff',
},
{
    class : 'F5',
    color : '#fbf8ff',
},
{
    class : 'F8',
    color : '#fff9f9',
},
{
    class : 'G2',
    color : '#fff5ec',
},
{
    class : 'G5',
    color : '#fff4e8',
},
{
    class : 'G8',
    color : '#fff1df',
},
{
    class : 'K0',
    color : '#ffebd1',
},
{
    class : 'K4',
    color : '#ffd7ae',
},
{
    class : 'K7',
    color : '#ffc690',
},
{
    class : 'M2',
    color : '#ffbe7f',
},
{
    class : 'M4',
    color : '#ffbb7b',
},
{
    class : 'M6',
    color : '#ffbb7b',
}    
]

const GREEK_ALPHABET = [
    'Alpha',
    'Beta',
    'Gamma',
    'Delta',
    'Epsilon',
    'Zeta',
    'Eta',
    'Theta',
    'Omicron',
    'Pi',
    'Sigma',
    'Tau',
    'Upsilon',
    'Omega',
]

const OUTER_RIM_DESIGNATIONS = [
    'NCG',
    'HD',
    'NCC',
    'GH',
    'F',
]

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Merging js: app/__items.json begins */

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/* Merging js: app/_inventoryObject.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


ITEMS.push(...[{
		"key": "meteoric_iron",
		"name": "Meteoric Iron",
		"type": "Mineral",
        "description" : "This dark mineral is a prized posession of 'belt miners. Apart from minor amounts of telluric iron, meteoric iron is the only naturally occurring native metal of the element iron on the Earth's surface.",
		"rarity": "uncommon",
		"storageClass": "bulk",
		"baseValue": 32,
		"mass": 15
	},
	{
		"key": "raw_paladium",
		"name": "Raw Paladium",
		"type": "Mineral",
        "description" : "A bright coppery and very hard ore. The interconnects and power relays of modern FTL systems rely on this, and other rare mineral based alloys.",
		"rarity": "rare",
		"storageClass": "bulk",
		"baseValue": 65,
		"mass": 20
	},
	{
		"key": "asteroid_flake",
		"name": "Asteroid Flake",
		"type": "Mineral",  
        "description" : "A blackish grey flake, found after mining most asteroids. If you didn't know any better, you'd think it was worthless dust.",
		"rarity": "common",
		"storageClass": "bulk",
		"baseValue": 12,
		"mass": 10
	},
	{
		"key": "volatile_compounds",
		"name": "Volatile Compounds",
		"type": "Mineral",  
        "description" : "This dense crystalline ice mixed with orgainic compounds shimmers in your hand.",
		"rarity": "rare",
		"storageClass": "bulk",
		"baseValue": 433,
		"mass": 18
	},
	{
		"key": "ionized_gas",
		"name": "Ionized Gases",
		"type": "Gas",  
        "description" : "Plasma and ionised gases have unique properties and display behaviors unlike those of the other states, and the transition between them is mostly a matter of nomenclature and subject to interpretation.",
		"rarity": "common",
		"storageClass": "gas",
		"baseValue": 60,
		"mass": 3
	},
	{
		"key": "space_ice",
		"name": "Space Ice",
		"type": "Frozen Liquid",  
        "description" : "Space ice does not simply grow and melt. During its lifespan, it is very dynamic. Due to the combined action of solar winds, temperature, and ionic temperature fluctuations, space ice expanses typically undergo a significant amount of deformation. Space ice is classified according to whether or not it is able to drift, and according to its age.",
		"rarity": "common",
		"storageClass": "bulk",
		"baseValue": 25,
		"mass": 8
	},
	{
        "_category" : "Commodity",
        "_specialty" : "crops",
		"key": "potatoes",
		"name": "Potatoes",
        "description" : "The potato is a starchy, tuberous crop from the perennial nightshade Solanum tuberosum. Potato may be applied to both the plant and the edible tuber. Potatoes have become a staple food in many parts of the galaxy and an integral part of much of the galactic food supply. Best when cut into strips and deep-fried.",
		"type": "Commodity",
		"rarity": "common",
		"storageClass": "bulk",
		"baseValue": 65,
		"mass": 100
	},
	{
        "_category" : "Commodity",
        "_specialty" : "crops",
		"key": "coffee",
		"name": "Coffee",
        "description" : "Coffee keeps the galaxy running. These beans are the seeds of berries from the Coffea plant. The plant was exported from Earth to planets around the galaxy. Coffee plants are now cultivated on over 70 off world settlements.",
		"type": "Commodity",
		"rarity": "uncommon",
		"storageClass": "bulk",
		"baseValue": 1270,
		"mass": 100
	},
]);// Things you can pickup and sell.
class InventoryObject {
    constructor(game,options) {
        this.game = game;
        
        this.name = 'Unknown Object';
        this.baseValue = 0;
        this.type = 'Unknown'
        this.mass = 0;
        this.rarity = RARITY.common;

        this.infoFields = ['baseValue','mass','rarity','storageClass'];
        this.infoFieldLabels = ['Value','Weight','Rarity','Container'];

        if(options.data) this.initWithData(options.data);
    }
    
    initWithData(data){
        for(var prop in data) this[prop] = data[prop]
    }

    static make(key,game){
        var data = ITEMS.filter(function(e) {
            return e.key == key;
        })[0];
                
        if(!data) return false; // No Key found
        
        if(data._class){
            // Specific Subclass
            return eval("new " + data._class + "(game,{data : data})");
        } else {
            // Generic
            return new InventoryObject(game,{data:data});
        }        
    }

    get buyValue(){
        if(this.containedIn!=undefined){
            return Math.round(this.baseValue * this.containedIn.itemMarkup);
        } else {
            return this.baseValue;
        }
    }

    get readableType(){
        if(this.rarity == RARITY.common){
            return this.type;
        } else {
            return `${RARITY_NAMES[this.rarity]} ${this.type}`
        }
    }

    get readableMass(){
        return `${numeral(this.mass).format('0,0')} kg`
    }
    
    remove(){
        this.parentObject.removeItemFromInventory(this);
    }    
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/_gameObject.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/__names_star.json begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */



var NAMES_STAR = [
    'Abatos',
    'Abyssus',
    'Achylia',
    'Ackenia',
    'Ackisia',
    'Aeneas',
    'Aesculus',
    'Ageenia',
    'Ageicia',
    'Agricola',
    'Agripeta',
    'Aleania',
    'Alvus',
    'Amethystus',
    'Ampelos',
    'Anchises',
    'Andabata',
    'Angilia',
    'Anusia',
    'Aparctias',
    'Aposplenos',
    'Archimandrita',
    'Arelia',
    'Athesia',
    'Athleta',
    'Athylia',
    'Atomus',
    'Auriga',
    'Awycia',
    'Banilia',
    'Baptista',
    'Belinia',
    'Bubsequa',
    'Caelicola',
    'Canonista',
    'Catoblepas',
    'Cedrus',
    'Celtae',
    'Ceracia',
    'Cerasus',
    'Chaocia',
    'Chausia',
    'Cherronesus',
    'Chersonesus',
    'Clepta',
    'Conlega',
    'Cornus',
    'Cupressus',
    'Danenia',
    'Danista',
    'Delos',
    'Drapeta',
    'Druidae',
    'Drysidae',
    'Echenia',
    'Elminia',
    'Eminia',
    'Emisia',
    'Enalia',
    'Enasia',
    'Enenia',
    'Engasia',
    'Engenia',
    'Enginia',
    'Engolia',
    'Erycia',
    'Erynia',
    'Essonia',
    'Estilia',
    'Estonia',
    'Fagus',
    'Fraxinus',
    'Gagates',
    'Galaxias',
    'Garesia',
    'Garycia',
    'Garynia',
    'Gaster',
    'Hatalia',
    'Hatosia',
    'Hinesia',
    'Hinucia',
    'Hippotoxotae',
    'Honycia',
    'Humus',
    'Iania',
    'Idiota',
    'Idololatres',
    'Ightylia',
    'Ildecia',
    'Ildolia',
    'Imocia',
    'Inaelia',
    'Incola',
    'Itasia',
    'Itonia',
    'Kalalia',
    'Kelesia',
    'Kelinia',
    'Kinocia',
    'Lanista',
    'Laurus',
    'Lesbos',
    'Lyeasia',
    'Lyeosia',
    'Malus',
    'Mandragoras',
    'Matricida',
    'Methodos',
    'Mithras',
    'Moabites',
    'Monticola',
    'Morilia',
    'Morus',
    'Mosisia',
    'Myrtus',
    'Nalania',
    'Nauta',
    'Navita',
    'Neanias',
    'Nyalia',
    'Nyania',
    'Nyesia',
    'Oldulia',
    'Oldycia',
    'Onania',
    'Orisia',
    'Ornus',
    'Orocia',
    'Orolia',
    'Orylia',
    'Osynia',
    'Oughesia',
    'Palaestes',
    'Palmatias',
    'Pampinus',
    'Pandectes',
    'Peltastes',
    'Peracia',
    'Persicus',
    'Pinus',
    'Pirata',
    'Platanus',
    'Poeta',
    'Pololia',
    'Polulia',
    'Populus',
    'Propheta',
    'Prunus',
    'Quaecia',
    'Quaisia',
    'Qualia',
    'Queesia',
    'Radisia',
    'Radysia',
    'Rakelia',
    'Rakolia',
    'Ranenia',
    'Raycia',
    'Rayocia',
    'Rilicia',
    'Rodylia',
    'Ruricola',
    'Rynolia',
    'Sacricola',
    'Sambucus',
    'Samesia',
    'Samisia',
    'Satrapa',
    'Sayalia',
    'Scriba',
    'Seralia',
    'Serilia',
    'Shyalia',
    'Shyocia',
    'Shyunia',
    'Sophistes',
    'Sorites',
    'Sulocia',
    'Sycophanta',
    'Taiosia',
    'Taisia',
    'Tasicia',
    'Tasynia',
    'Tata',
    'Taxus',
    'Telirrhizos',
    'Therulia',
    'Tiaylia',
    'Tonocia',
    'Toralia',
    'Transfuga',
    'Turania',
    'Turynia',
    'Tyrannicida',
    'Tyrus',
    'Untalia',
    'Unticia',
    'Untisia',
    'Untysia',
    'Urnilia',
    'Uskilia',
    'Ustysia',
    'Vannus',
    'Vappa',
    'Verynia',
    'Waresia',
    'Xiphias',
    'Zelotes',
    'Serouos',
    'Risoeos',
    'Vehios',
    'Polatia',
    'Shyayos',
    'Shyeos',
    'Nizeios',
    'Rhaisios',
    'Ineayos',
    'Nyaos',
    'Niateios',
    'Yidios',
    'Cevios',
    'Chrazaos',
    'Rolios',
    'Ustayos',
    'Thrisaos',
    'Baneos',
    'Mofios',
    'Kekeios',
    'Asheos',
    'Luilios',
    'Bureos',
    'Cholaios',
    'Iritia',
    'Torutia',
    'Daulios',
    'Ardaeos',
    'Nalios',
    'Smuryos',
    'Tonetia',
    'Eraos',
    'Ustutia',
    'Dymios',
    'Crevaios',
    'Chudeios',
    'Danuos',
    'Ghaotia',
    'Echeatia',
    'Chaitia',
    'Nubios',
    'Angautia',
    'Kimeitia',
    'Joldios',
    'Dracios',
    'Lanios',
    'Toraitia',
    'Rievios',
    'Blunios',
    'Ceuraos',
    'Leykyios',
    'Drayrios',
    'Whiakios',
    'Tinaeos',
    'Iroios',
    'Ightitia',
    'Whiwios',
    'Featuios',
    'Stoogios',
    'Yeriatia',
    'Yorios',
    'Endyos',
    'Swuiloios',
    'Iautia',
    'Polotia',
    'Undeos',
    'Hoetios',
    'Iauos',
    'Siduos',
    'Carios',
    'Hecoios',
    'Needios',
    'Garaos',
    'Delyos',
    'Smuitios',
    'Ireitia',
    'Aldeos',
    'Deleos',
    'Mosuos',
    'Haucios',
    'Sayloios',
    'Strifuos',
    'Stoukios',
    'Leretia',
    'Hinoutia',
    'Ardeos',
    'Ranatia',
    'Likyos',
    'Engoos',
    'Aldaos',
    'Ardoos',
    'Bitios',
    'Ranaios',
    'Isoios',
    'Aleutia',
    'Stefeos',
    'Loreos',
    'Sonoios',
    'Danoitia',
    'Snodios',
    'Croutoos',
    'Clekios',
    'Snasheios',
    'Pauboios',
    'Tuwios',
    'Voreos',
    'Rynaos',
    'Livios',
    'Danoitia',
    'Ageootia',
    'Issauos',
    'Onotia',
    'Nyhios',
    'Woroos',
    'Higeos',
    'Ardaos',
    'Cheitia',
    'Etitia',
    'Engeytia',
    'Acamar',
    'Achernar',
    'Achird',
    'Acrab',
    'Acrux',
    'Acubens',
    'Adhafera',
    'Adhara',
    'Adhil',
    'Ain',
    'Ainalrami',
    'Aladfar',
    'Albaldah',
    'Albali',
    'Albireo',
    'Alchiba',
    'Alcor',
    'Alcyone',
    'Aldebaran',
    'Alderamin',
    'Aldhanab',
    'Aldhibah',
    'Aldulfin',
    'Alfirk',
    'Algedi',
    'Algenib',
    'Algieba',
    'Algol',
    'Algorab',
    'Alhena',
    'Alioth',
    'Aljanah',
    'Alkaid',
    'Alkalurops',
    'Alkaphrah',
    'Alkarab',
    'Alkes',
    'Almaaz',
    'Almach',
    'Alnair',
    'Alnasl',
    'Alnilam',
    'Alnitak',
    'Alniyat',
    'Alphard',
    'Alphecca',
    'Alpheratz',
    'Alrakis',
    'Alrescha',
    'Alsafi',
    'Alsciaukat',
    'Alsephina',
    'Alshain',
    'Alshat',
    'Altair',
    'Altais',
    'Alterf',
    'Aludra',
    'Alula Australis',
    'Alula Borealis',
    'Alya',
    'Alzirr',
    'Ancha',
    'Angetenar',
    'Ankaa',
    'Anser',
    'Antares',
    'Arcturus',
    'Arkab Posterior',
    'Arkab Prior',
    'Arneb',
    'Ascella',
    'Asellus Australis',
    'Asellus Borealis',
    'Aspidiske',
    'Asterope',
    'Athebyne',
    'Atik',
    'Atlas',
    'Atria',
    'Avior',
    'Azelfafage',
    'Azha',
    'Barnard\'s Star',
    'Baten Kaitos',
    'Beemim',
    'Beid',
    'Bellatrix',
    'Betelgeuse',
    'Bharani',
    'Biham',
    'Botein',
    'Brachium',
    'Canopus',
    'Capella',
    'Caph',
    'Castor',
    'Castula',
    'Cebalrai',
    'Celaeno',
    'Cervantes',
    'Chalawan',
    'Chamukuy',
    'Chara',
    'Chertan',
    'Copernicus',
    'Cor Caroli',
    'Cujam',
    'Cursa',
    'Dabih',
    'Dalim',
    'Deneb Algedi',
    'Deneb',
    'Denebola',
    'Diadem',
    'Diphda',
    'Dschubba',
    'Dubhe',
    'Dziban',
    'Edasich',
    'Electra',
    'Elnath',
    'Eltanin',
    'Enif',
    'Errai',
    'Fafnir',
    'Fang',
    'Fomalhaut',
    'Fulu',
    'Furud',
    'Fuyue',
    'Gacrux',
    'Giausar',
    'Gienah',
    'Gomeisa',
    'Grumium',
    'Hadar',
    'Haedus',
    'Hamal',
    'Hassaleh',
    'Hatysa',
    'Helvetios',
    'Homam',
    'Iklil',
    'Intercrus',
    'Izar',
    'Jabbah',
    'Jishui',
    'Kaffaljidhma',
    'Kang',
    'Kaus Australis',
    'Kaus Borealis',
    'Kaus Media',
    'Keid',
    'Khambalia',
    'Kitalpha',
    'Kochab',
    'Kornephoros',
    'Kurhah',
    'Lesath',
    'Libertas',
    'Lich',
    'Lilii Borea',
    'Maasym',
    'Mahasim',
    'Maia',
    'Marfik',
    'Markab',
    'Markeb',
    'Marsic',
    'Matar',
    'Mebsuta',
    'Megrez',
    'Meissa',
    'Mekbuda',
    'Meleph',
    'Menkalinan',
    'Menkar',
    'Menkent',
    'Menkib',
    'Merak',
    'Merga',
    'Meridiana',
    'Merope',
    'Mesarthim',
    'Miaplacidus',
    'Mimosa',
    'Minchir',
    'Minelauva',
    'Mintaka',
    'Mira',
    'Mirach',
    'Miram',
    'Mirfak',
    'Mirzam',
    'Misam',
    'Mizar',
    'Mothallah',
    'Muliphein',
    'Muphrid',
    'Muscida',
    'Musica',
    'Naos',
    'Nashira',
    'Nekkar',
    'Nembus',
    'Nihal',
    'Nunki',
    'Nusakan',
    'Ogma',
    'Peacock',
    'Phact',
    'Phecda',
    'Pherkad',
    'Pipirima',
    'Pleione',
    'Polaris Australis',
    'Polaris',
    'Polis',
    'Pollux',
    'Porrima',
    'Praecipua',
    'Prima Hyadum',
    'Procyon',
    'Propus',
    'Proxima Centauri',
    'Ran',
    'Rasalas',
    'Rasalgethi',
    'Rasalhague',
    'Rastaban',
    'Regulus',
    'Revati',
    'Rigel',
    'Rigil Kentaurus',
    'Rotanev',
    'Ruchbah',
    'Rukbat',
    'Sabik',
    'Saclateni',
    'Sadachbia',
    'Sadalbari',
    'Sadalmelik',
    'Sadalsuud',
    'Sadr',
    'Saiph',
    'Salm',
    'Sargas',
    'Sarin',
    'Sceptrum',
    'Scheat',
    'Schedar',
    'Secunda Hyadum',
    'Segin',
    'Seginus',
    'Sham',
    'Shaula',
    'Sheliak',
    'Sheratan',
    'Sirius',
    'Situla',
    'Skat',
    'Spica',
    'Sualocin',
    'Subra',
    'Suhail',
    'Sulafat',
    'Syrma',
    'Tabit',
    'Taiyangshou',
    'Taiyi',
    'Talitha',
    'Tania Australis',
    'Tania Borealis',
    'Tarazed',
    'Taygeta',
    'Tegmine',
    'Tejat',
    'Terebellum',
    'Theemin',
    'Thuban',
    'Tiaki',
    'Tianguan',
    'Tianyi',
    'Titawin',
    'Tonatiuh',
    'Torcular',
    'Tureis',
    'Unukalhai',
    'Unurgunite',
    'Vega',
    'Veritate',
    'Vindemiatrix',
    'Wasat',
    'Wazn',
    'Wezen',
    'Xamidimura',
    'Xuange',
    'Yed Posterior',
    'Yed Prior',
    'Yildun',
    'Zaniah',
    'Zaurak',
    'Zavijava',
    'Zhang',
    'Zibal',
    'Zosma',
    'Zubenelgenubi',
    'Zubenelhakrabi',
    'Zubeneschamali',
    'Larawag',
    'Ginan',
];class GameObject {
    constructor(game) {
        this._name = 'Unknown Object';
        this.description = '';

        this.game = game;
        this.game.register(this);
    
        this.showInfoDistance = 200;
        this.canNavigateTo = false;
        this.navigationIndex = this.game.gameObjects.length;
        
        // Basics
        this.health = 0;
        this.alive = true;
        this.isInvinsible = false;
        this._targeted = false;

        // Damage Managment        
        this.damageAccumulating = false;
        this.damageAccumulationAmount = 0;        
    
        // Item Managment
        this.itemMarkup = 1;
        this.freeSpace = {};
        this.inventory = [];
        this.itemsAccumulating = false;
        this.itemsAccumulator = [];     

        this.dingSound = game.add.audio('pickup-common-1');

        this.rng = this.game.rng;
    }
    
    setupSprite(sprite){
        this.maxHealth = this.health;
    }
    
    // Targeting
    set targeted(targeted){
        this._targeted = targeted;
        
        if(targeted){
            this.showReticle();
        } else {
            this.hideReticle();
        }

    }

    get targeted(){
        return this._targeted;
    }

    showReticle(){
        
    }
    
    hideReticle(){
        
    }

    
    // Damage
    inflictDamage(amount){
        if(!this.isInvinsible){            
            if(!this.damageAccumulating){
                this.damageAccumulating = true;
                this.damageAccumulationAmount +=amount;
                setTimeout(function(){
                    this.damageAccumulating = false;
                    this.showDamage(this.damageAccumulationAmount);
                    this.damageAccumulationAmount = 0;
                }.bind(this), 250)
            } else {
                this.damageAccumulationAmount +=amount;                
            }
            
            if(this.health>0){
                this.health -= amount;
            } else if(this.health<=0 && this.alive){
                this.kill();
            }        
        }
    }
    
    get healthPercentage(){
        return this.health/this.maxHealth;
    }
        
    showDamage(amount){
        var x = this.sprite.x + game.rnd.integerInRange(-this.sprite.width/5, this.sprite.width/5);

        var damageText = this.game.add.text(
            x,
            this.sprite.y, 
            Math.round(amount), 
            { font: `18px ${FONT}`, fill: "#eeed00", align: 'center' }, 
        );
        damageText.anchor.x = 0.5;
        damageText.alpha = 0;
                
        var fadeIn = this.game.add.tween(damageText).to( { alpha: 1 }, 200, "Quart.easeOut", false);
    	var moveUp = this.game.add.tween(damageText).to( { y: '-30' }, 800, "Quart.easeOut", true);
        var fadeOut = this.game.add.tween(damageText).to( { alpha: 0 }, 300, "Quart.easeOut", false, 150);        
    
        fadeIn.chain(fadeOut);
        fadeIn.start();

        game.time.events.add(Phaser.Timer.SECOND * 2, this.destroyObject, damageText);
    }
    
    hit(bullet){
        // Usually specific per object.
    }
    
    // Items
    collectNumberOfItems(amount,item){
        if(this.addItemsToInventory(amount,item)){
            if(!this.itemsAccumulating){
                this.itemsAccumulating = true;
                this.itemsAccumulator[item.name] = { item: item, amount: amount };
                
                setTimeout(function(){
                    this.itemsAccumulating = false;
                    this.showItemsCollected(this.itemsAccumulator);
                    this.itemsAccumulator = [];
                }.bind(this), 500)
            } else {
                if(this.itemsAccumulator[item.name]==undefined){
                    this.itemsAccumulator[item.name] = { item: item, amount: amount };
                } else {
                    this.itemsAccumulator[item.name]['amount'] +=amount;                
                }
            }
            return true;
        } else {
            return false;
        }
    }
        
    showItemsCollected(items){
        var context = this;
        Object.keys(items).forEach(function(key,index) {
            var verticalSpacing = 18;
            var itemGroup = items[key];
            var itemMessage = `+${itemGroup.amount} ${itemGroup.item.name}`;

            var itemText = this.game.add.text(
                this.sprite.x,
                this.sprite.y-(verticalSpacing*index), 
                itemMessage, 
                { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'center' }, 
            );
            itemText.stroke = '#000000';
            itemText.strokeThickness = 3;
            itemText.tint = RARITY_COLOR[itemGroup.item.rarity];
        
            var fadeIn = this.game.add.tween(itemText).to( { alpha: 1 }, 300, "Quart.easeOut", false);
        	var moveUp = this.game.add.tween(itemText).to( { y: '-30' }, 300, "Quart.easeOut", true);
            var fadeOut = this.game.add.tween(itemText).to( { alpha: 0 }, 300, "Quart.easeOut", false, 1000);        
    
            fadeIn.chain(fadeOut);
            fadeIn.start();

            game.time.events.add(Phaser.Timer.SECOND * 2, this.destroyObject, itemText);
        }.bind(this));
        
        this.dingSound.play();
    }

    // Inventory
    usedSpaceForStorageClass(storageClass){
        return numeral(this.specs.storage[storageClass]-this.freeSpace[storageClass]).format('0a')
    }

    freeSpaceForStorageClass(storageClass){
        return numeral(this.freeSpace[storageClass]).format('0a')
    }

    maxSpaceForStorageClass(storageClass){
        return numeral(this.specs.storage[storageClass]).format('0a')        
    }

    calculateFreeSpaceForStorageClass(storageClass){
        return this.freeSpace[storageClass];
    }
    
    hasEnoughSpaceForItemOfStorageClassWithMass(storageClass,mass){
        if(this.calculateFreeSpaceForStorageClass(storageClass) >= mass){
            return true;
        } else {
            return false;
        }
    }
    
    addItemsToInventory(amount,item){        
        for (var i = 0; i < amount; i++) { 
            if(this.hasEnoughSpaceForItemOfStorageClassWithMass(item.storageClass,item.mass)){
                item.containedIn = this;
                
                this.inventory.push(item);
                this.freeSpace[item.storageClass] -= item.mass;
                return true;
            } else {
                this.game.hud.message('Not Enough Cargo Space');
                return false;
            }
        }
    }

    removeItemsFromInventory(items){
        var removedItems = [];
        for (let item of items) {
            removedItems.push(item);
            this.removeItemFromInventory(item);
        }
        return removedItems;
    }

    removeItemFromInventory(item){
        var index = this.inventory.indexOf(item);
        if (index > -1) {
            this.inventory.splice(index, 1);
        }
        return true;
    }

    // Cargo
    emptyCargoHold(){
        this.inventory = [];

        this.freeSpace[CARGO_STORAGE_CLASS.bulk] = this.specs.storage.bulk;
        this.freeSpace[CARGO_STORAGE_CLASS.passengers] = this.specs.storage.passengers;
        this.freeSpace[CARGO_STORAGE_CLASS.gas] = this.specs.storage.gas;
        this.freeSpace[CARGO_STORAGE_CLASS.liquid] = this.specs.storage.liquid;
        this.freeSpace[CARGO_STORAGE_CLASS.equipment] = this.specs.storage.equipment;
    }
    
    // Lifecycle
    kill(){
        this.alive = false;
        this.game.unregister(this);        

        if(this.sprite!=undefined){
            //this.sprite.body.kill();
            this.sprite.kill();
        }
    }

    destroy(){
        this.game.unregister(this);        
        if(this.sprite!=undefined){
            this.sprite.destroy();
        }
        delete this;
    }

    destroyEmitter(){
        debugger;
        this.destroy();        
    } 

    destroyObject(){
        this.destroy();        
    } 

    // Misc
    get name(){ return this._name; }
    set name(name){
        this._name = name;
    }
    
    get speed(){
        var body = this.sprite.body
        var vx, vy;
        
        vx = body.data.velocity[0];
        vy = body.data.velocity[1];
        
        return vx * vx + vy * vy;
    }
    
    
    // Hashing and whatnot
    get hash(){
        var fullHash = Math.abs(CryptoJS.MD5(this._seed + this.name).words[0]);
        var hashString = fullHash.toString().slice(0,5);
        return hashString;
    }

    determineItemFromArray(array){
        return array[this.rng.nextInt(0, array.length-1)];
    }

    determineFloatBetween(min,max){
        return this.rng.next(min, max);
    }

    determineIntegerBetween(min,max){
        return this.rng.nextInt(min, max);
    }

    determinePercent(){
        return this.rng.next();
    }
    
    cleanup(){
        
    }

    update(){
        this.game.counter++;
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/__names_proper.json begins */
/* Merging js: app/systems/_galaxy.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




class Galaxy extends GameObject{
    constructor(game) {
        super(game);

        this.name = Names.star();

        this.settings = {
            starsAmount : 50,
            mapWidth : 3000,
            mapHeight : 3000,
        }    
    }
    
    build(){
        this.starSystems = [];
        for (var i = 0; i < this.settings.starsAmount; i++) { 
            var system = new StarSystem(this.game);
            this.starSystems.push(system);
        }
    }
    
    get closestSystemToCenter() {
        return _.sortBy(this.starSystems,'distanceFromGalacticCenter').firstItem();
    }
}var NAMES_PROPER = [
'SMITH          1.006  1.006      1',
'JOHNSON        0.810  1.816      2',
'WILLIAMS       0.699  2.515      3',
'JONES          0.621  3.136      4',
'BROWN          0.621  3.757      5',
'DAVIS          0.480  4.237      6',
'MILLER         0.424  4.660      7',
'WILSON         0.339  5.000      8',
'MOORE          0.312  5.312      9',
'TAYLOR         0.311  5.623     10',
'ANDERSON       0.311  5.934     11',
'THOMAS         0.311  6.245     12',
'JACKSON        0.310  6.554     13',
'WHITE          0.279  6.834     14',
'HARRIS         0.275  7.109     15',
'MARTIN         0.273  7.382     16',
'THOMPSON       0.269  7.651     17',
'GARCIA         0.254  7.905     18',
'MARTINEZ       0.234  8.140     19',
'ROBINSON       0.233  8.372     20',
'CLARK          0.231  8.603     21',
'RODRIGUEZ      0.229  8.832     22',
'LEWIS          0.226  9.058     23',
'LEE            0.220  9.278     24',
'WALKER         0.219  9.497     25',
'HALL           0.200  9.698     26',
'ALLEN          0.199  9.897     27',
'YOUNG          0.193 10.090     28',
'HERNANDEZ      0.192 10.282     29',
'KING           0.190 10.472     30',
'WRIGHT         0.189 10.662     31',
'LOPEZ          0.187 10.849     32',
'HILL           0.187 11.035     33',
'SCOTT          0.185 11.220     34',
'GREEN          0.183 11.403     35',
'ADAMS          0.174 11.577     36',
'BAKER          0.171 11.748     37',
'GONZALEZ       0.166 11.915     38',
'NELSON         0.162 12.077     39',
'CARTER         0.162 12.239     40',
'MITCHELL       0.160 12.399     41',
'PEREZ          0.155 12.554     42',
'ROBERTS        0.153 12.707     43',
'TURNER         0.152 12.859     44',
'PHILLIPS       0.149 13.008     45',
'CAMPBELL       0.149 13.157     46',
'PARKER         0.146 13.302     47',
'EVANS          0.141 13.443     48',
'EDWARDS        0.137 13.580     49',
'COLLINS        0.134 13.714     50',
'STEWART        0.133 13.847     51',
'SANCHEZ        0.130 13.977     52',
'MORRIS         0.125 14.102     53',
'ROGERS         0.123 14.225     54',
'REED           0.122 14.347     55',
'COOK           0.120 14.467     56',
'MORGAN         0.118 14.585     57',
'BELL           0.117 14.702     58',
'MURPHY         0.117 14.819     59',
'BAILEY         0.115 14.934     60',
'RIVERA         0.113 15.047     61',
'COOPER         0.113 15.160     62',
'RICHARDSON     0.112 15.272     63',
'COX            0.110 15.382     64',
'HOWARD         0.110 15.492     65',
'WARD           0.108 15.600     66',
'TORRES         0.108 15.708     67',
'PETERSON       0.107 15.815     68',
'GRAY           0.106 15.921     69',
'RAMIREZ        0.105 16.026     70',
'JAMES          0.105 16.131     71',
'WATSON         0.103 16.233     72',
'BROOKS         0.103 16.336     73',
'KELLY          0.102 16.438     74',
'SANDERS        0.100 16.537     75',
'PRICE          0.099 16.637     76',
'BENNETT        0.099 16.736     77',
'WOOD           0.098 16.834     78',
'BARNES         0.097 16.931     79',
'ROSS           0.096 17.027     80',
'HENDERSON      0.095 17.122     81',
'COLEMAN        0.095 17.217     82',
'JENKINS        0.095 17.312     83',
'PERRY          0.094 17.406     84',
'POWELL         0.093 17.499     85',
'LONG           0.092 17.591     86',
'PATTERSON      0.092 17.684     87',
'HUGHES         0.092 17.776     88',
'FLORES         0.092 17.868     89',
'WASHINGTON     0.092 17.959     90',
'BUTLER         0.091 18.050     91',
'SIMMONS        0.091 18.141     92',
'FOSTER         0.091 18.231     93',
'GONZALES       0.087 18.318     94',
'BRYANT         0.087 18.405     95',
'ALEXANDER      0.085 18.490     96',
'RUSSELL        0.085 18.574     97',
'GRIFFIN        0.084 18.659     98',
'DIAZ           0.084 18.742     99',
'HAYES          0.083 18.825    100',
'MYERS          0.083 18.908    101',
'FORD           0.082 18.990    102',
'HAMILTON       0.082 19.072    103',
'GRAHAM         0.082 19.154    104',
'SULLIVAN       0.081 19.234    105',
'WALLACE        0.081 19.315    106',
'WOODS          0.080 19.395    107',
'COLE           0.080 19.476    108',
'WEST           0.080 19.555    109',
'JORDAN         0.078 19.634    110',
'OWENS          0.078 19.711    111',
'REYNOLDS       0.078 19.789    112',
'FISHER         0.077 19.866    113',
'ELLIS          0.077 19.943    114',
'HARRISON       0.076 20.019    115',
'GIBSON         0.075 20.094    116',
'MCDONALD       0.075 20.169    117',
'CRUZ           0.075 20.244    118',
'MARSHALL       0.075 20.319    119',
'ORTIZ          0.075 20.394    120',
'GOMEZ          0.075 20.468    121',
'MURRAY         0.074 20.543    122',
'FREEMAN        0.074 20.617    123',
'WELLS          0.073 20.690    124',
'WEBB           0.072 20.762    125',
'SIMPSON        0.070 20.832    126',
'STEVENS        0.070 20.902    127',
'TUCKER         0.070 20.971    128',
'PORTER         0.069 21.041    129',
'HUNTER         0.069 21.110    130',
'HICKS          0.069 21.178    131',
'CRAWFORD       0.068 21.246    132',
'HENRY          0.068 21.314    133',
'BOYD           0.068 21.381    134',
'MASON          0.068 21.449    135',
'MORALES        0.067 21.516    136',
'KENNEDY        0.067 21.582    137',
'WARREN         0.067 21.649    138',
'DIXON          0.066 21.715    139',
'RAMOS          0.066 21.782    140',
'REYES          0.066 21.848    141',
'BURNS          0.065 21.913    142',
'GORDON         0.065 21.978    143',
'SHAW           0.065 22.043    144',
'HOLMES         0.065 22.108    145',
'RICE           0.064 22.172    146',
'ROBERTSON      0.064 22.236    147',
'HUNT           0.063 22.299    148',
'BLACK          0.063 22.362    149',
'DANIELS        0.062 22.425    150',
'PALMER         0.062 22.487    151',
'MILLS          0.061 22.547    152',
'NICHOLS        0.060 22.607    153',
'GRANT          0.060 22.667    154',
'KNIGHT         0.060 22.727    155',
'FERGUSON       0.059 22.786    156',
'ROSE           0.059 22.845    157',
'STONE          0.059 22.904    158',
'HAWKINS        0.059 22.963    159',
'DUNN           0.058 23.022    160',
'PERKINS        0.058 23.079    161',
'HUDSON         0.058 23.137    162',
'SPENCER        0.057 23.194    163',
'GARDNER        0.057 23.251    164',
'STEPHENS       0.057 23.308    165',
'PAYNE          0.057 23.365    166',
'PIERCE         0.056 23.421    167',
'BERRY          0.056 23.477    168',
'MATTHEWS       0.056 23.533    169',
'ARNOLD         0.056 23.589    170',
'WAGNER         0.055 23.645    171',
'WILLIS         0.055 23.700    172',
'RAY            0.055 23.755    173',
'WATKINS        0.055 23.811    174',
'OLSON          0.055 23.866    175',
'CARROLL        0.055 23.921    176',
'DUNCAN         0.055 23.976    177',
'SNYDER         0.055 24.031    178',
'HART           0.054 24.086    179',
'CUNNINGHAM     0.054 24.140    180',
'BRADLEY        0.054 24.194    181',
'LANE           0.054 24.247    182',
'ANDREWS        0.054 24.301    183',
'RUIZ           0.054 24.355    184',
'HARPER         0.054 24.408    185',
'FOX            0.053 24.462    186',
'RILEY          0.053 24.515    187',
'ARMSTRONG      0.053 24.568    188',
'CARPENTER      0.053 24.621    189',
'WEAVER         0.053 24.673    190',
'GREENE         0.053 24.726    191',
'LAWRENCE       0.052 24.779    192',
'ELLIOTT        0.052 24.831    193',
'CHAVEZ         0.052 24.883    194',
'SIMS           0.052 24.936    195',
'AUSTIN         0.052 24.988    196',
'PETERS         0.052 25.040    197',
'KELLEY         0.052 25.092    198',
'FRANKLIN       0.051 25.143    199',
'LAWSON         0.051 25.195    200',
'FIELDS         0.051 25.246    201',
'GUTIERREZ      0.051 25.297    202',
'RYAN           0.051 25.348    203',
'SCHMIDT        0.051 25.400    204',
'CARR           0.051 25.451    205',
'VASQUEZ        0.051 25.502    206',
'CASTILLO       0.051 25.552    207',
'WHEELER        0.051 25.603    208',
'CHAPMAN        0.050 25.653    209',
'OLIVER         0.050 25.703    210',
'MONTGOMERY     0.049 25.753    211',
'RICHARDS       0.049 25.802    212',
'WILLIAMSON     0.049 25.851    213',
'JOHNSTON       0.049 25.900    214',
'BANKS          0.048 25.948    215',
'MEYER          0.048 25.996    216',
'BISHOP         0.048 26.045    217',
'MCCOY          0.048 26.093    218',
'HOWELL         0.048 26.140    219',
'ALVAREZ        0.048 26.188    220',
'MORRISON       0.048 26.235    221',
'HANSEN         0.047 26.283    222',
'FERNANDEZ      0.047 26.330    223',
'GARZA          0.047 26.377    224',
'HARVEY         0.047 26.424    225',
'LITTLE         0.046 26.470    226',
'BURTON         0.046 26.516    227',
'STANLEY        0.046 26.562    228',
'NGUYEN         0.046 26.608    229',
'GEORGE         0.046 26.653    230',
'JACOBS         0.046 26.699    231',
'REID           0.046 26.745    232',
'KIM            0.045 26.790    233',
'FULLER         0.045 26.835    234',
'LYNCH          0.045 26.880    235',
'DEAN           0.045 26.925    236',
'GILBERT        0.045 26.970    237',
'GARRETT        0.045 27.015    238',
'ROMERO         0.045 27.059    239',
'WELCH          0.044 27.104    240',
'LARSON         0.044 27.148    241',
'FRAZIER        0.044 27.192    242',
'BURKE          0.044 27.235    243',
'HANSON         0.043 27.279    244',
'DAY            0.043 27.322    245',
'MENDOZA        0.043 27.365    246',
'MORENO         0.043 27.407    247',
'BOWMAN         0.043 27.450    248',
'MEDINA         0.042 27.492    249',
'FOWLER         0.042 27.535    250',
'BREWER         0.042 27.577    251',
'HOFFMAN        0.042 27.619    252',
'CARLSON        0.042 27.661    253',
'SILVA          0.042 27.703    254',
'PEARSON        0.042 27.744    255',
'HOLLAND        0.042 27.786    256',
'DOUGLAS        0.041 27.827    257',
'FLEMING        0.041 27.868    258',
'JENSEN         0.041 27.909    259',
'VARGAS         0.041 27.950    260',
'BYRD           0.041 27.991    261',
'DAVIDSON       0.041 28.032    262',
'HOPKINS        0.041 28.072    263',
'MAY            0.040 28.113    264',
'TERRY          0.040 28.153    265',
'HERRERA        0.040 28.193    266',
'WADE           0.040 28.233    267',
'SOTO           0.040 28.273    268',
'WALTERS        0.040 28.313    269',
'CURTIS         0.040 28.352    270',
'NEAL           0.039 28.392    271',
'CALDWELL       0.039 28.431    272',
'LOWE           0.039 28.471    273',
'JENNINGS       0.039 28.510    274',
'BARNETT        0.039 28.549    275',
'GRAVES         0.039 28.588    276',
'JIMENEZ        0.039 28.628    277',
'HORTON         0.039 28.667    278',
'SHELTON        0.039 28.706    279',
'BARRETT        0.039 28.745    280',
'OBRIEN         0.039 28.783    281',
'CASTRO         0.039 28.822    282',
'SUTTON         0.038 28.860    283',
'GREGORY        0.038 28.899    284',
'MCKINNEY       0.038 28.937    285',
'LUCAS          0.038 28.975    286',
'MILES          0.038 29.013    287',
'CRAIG          0.038 29.051    288',
'RODRIQUEZ      0.037 29.088    289',
'CHAMBERS       0.037 29.126    290',
'HOLT           0.037 29.163    291',
'LAMBERT        0.037 29.200    292',
'FLETCHER       0.037 29.237    293',
'WATTS          0.037 29.274    294',
'BATES          0.037 29.311    295',
'HALE           0.037 29.348    296',
'RHODES         0.037 29.385    297',
'PENA           0.037 29.421    298',
'BECK           0.037 29.458    299',
'NEWMAN         0.036 29.494    300',
'HAYNES         0.036 29.531    301',
'MCDANIEL       0.036 29.567    302',
'MENDEZ         0.036 29.603    303',
'BUSH           0.036 29.639    304',
'VAUGHN         0.036 29.675    305',
'PARKS          0.035 29.711    306',
'DAWSON         0.035 29.746    307',
'SANTIAGO       0.035 29.781    308',
'NORRIS         0.035 29.817    309',
'HARDY          0.035 29.852    310',
'LOVE           0.035 29.887    311',
'STEELE         0.035 29.921    312',
'CURRY          0.035 29.956    313',
'POWERS         0.035 29.991    314',
'SCHULTZ        0.035 30.025    315',
'BARKER         0.035 30.060    316',
'GUZMAN         0.034 30.094    317',
'PAGE           0.034 30.129    318',
'MUNOZ          0.034 30.163    319',
'BALL           0.034 30.197    320',
'KELLER         0.034 30.231    321',
'CHANDLER       0.034 30.265    322',
'WEBER          0.034 30.299    323',
'LEONARD        0.034 30.333    324',
'WALSH          0.033 30.366    325',
'LYONS          0.033 30.400    326',
'RAMSEY         0.033 30.433    327',
'WOLFE          0.033 30.466    328',
'SCHNEIDER      0.033 30.499    329',
'MULLINS        0.033 30.532    330',
'BENSON         0.033 30.565    331',
'SHARP          0.033 30.598    332',
'BOWEN          0.033 30.631    333',
'DANIEL         0.033 30.663    334',
'BARBER         0.032 30.696    335',
'CUMMINGS       0.032 30.728    336',
'HINES          0.032 30.760    337',
'BALDWIN        0.032 30.793    338',
'GRIFFITH       0.032 30.824    339',
'VALDEZ         0.032 30.856    340',
'HUBBARD        0.032 30.888    341',
'SALAZAR        0.032 30.920    342',
'REEVES         0.032 30.951    343',
'WARNER         0.031 30.983    344',
'STEVENSON      0.031 31.014    345',
'BURGESS        0.031 31.045    346',
'SANTOS         0.031 31.076    347',
'TATE           0.031 31.107    348',
'CROSS          0.031 31.138    349',
'GARNER         0.031 31.169    350',
'MANN           0.031 31.200    351',
'MACK           0.031 31.231    352',
'MOSS           0.031 31.262    353',
'THORNTON       0.031 31.292    354',
'DENNIS         0.031 31.323    355',
'MCGEE          0.031 31.354    356',
'FARMER         0.030 31.384    357',
'DELGADO        0.030 31.415    358',
'AGUILAR        0.030 31.445    359',
'VEGA           0.030 31.475    360',
'GLOVER         0.030 31.505    361',
'MANNING        0.030 31.535    362',
'COHEN          0.030 31.566    363',
'HARMON         0.030 31.596    364',
'RODGERS        0.030 31.626    365',
'ROBBINS        0.030 31.656    366',
'NEWTON         0.030 31.686    367',
'TODD           0.030 31.716    368',
'BLAIR          0.030 31.746    369',
'HIGGINS        0.030 31.776    370',
'INGRAM         0.030 31.806    371',
'REESE          0.030 31.836    372',
'CANNON         0.030 31.865    373',
'STRICKLAND     0.030 31.895    374',
'TOWNSEND       0.030 31.925    375',
'POTTER         0.030 31.955    376',
'GOODWIN        0.030 31.984    377',
'WALTON         0.030 32.014    378',
'ROWE           0.029 32.043    379',
'HAMPTON        0.029 32.073    380',
'ORTEGA         0.029 32.102    381',
'PATTON         0.029 32.131    382',
'SWANSON        0.029 32.161    383',
'JOSEPH         0.029 32.190    384',
'FRANCIS        0.029 32.219    385',
'GOODMAN        0.029 32.248    386',
'MALDONADO      0.029 32.277    387',
'YATES          0.029 32.305    388',
'BECKER         0.029 32.334    389',
'ERICKSON       0.029 32.363    390',
'HODGES         0.029 32.392    391',
'RIOS           0.029 32.421    392',
'CONNER         0.029 32.449    393',
'ADKINS         0.029 32.478    394',
'WEBSTER        0.028 32.506    395',
'NORMAN         0.028 32.535    396',
'MALONE         0.028 32.563    397',
'HAMMOND        0.028 32.591    398',
'FLOWERS        0.028 32.620    399',
'COBB           0.028 32.648    400',
'MOODY          0.028 32.676    401',
'QUINN          0.028 32.704    402',
'BLAKE          0.028 32.732    403',
'MAXWELL        0.028 32.759    404',
'POPE           0.028 32.787    405',
'FLOYD          0.027 32.814    406',
'OSBORNE        0.027 32.842    407',
'PAUL           0.027 32.869    408',
'MCCARTHY       0.027 32.896    409',
'GUERRERO       0.027 32.924    410',
'LINDSEY        0.027 32.951    411',
'ESTRADA        0.027 32.978    412',
'SANDOVAL       0.027 33.005    413',
'GIBBS          0.027 33.032    414',
'TYLER          0.027 33.059    415',
'GROSS          0.027 33.086    416',
'FITZGERALD     0.027 33.113    417',
'STOKES         0.027 33.140    418',
'DOYLE          0.027 33.167    419',
'SHERMAN        0.027 33.193    420',
'SAUNDERS       0.027 33.220    421',
'WISE           0.027 33.247    422',
'COLON          0.027 33.274    423',
'GILL           0.027 33.300    424',
'ALVARADO       0.027 33.327    425',
'GREER          0.026 33.353    426',
'PADILLA        0.026 33.380    427',
'SIMON          0.026 33.406    428',
'WATERS         0.026 33.432    429',
'NUNEZ          0.026 33.459    430',
'BALLARD        0.026 33.485    431',
'SCHWARTZ       0.026 33.511    432',
'MCBRIDE        0.026 33.536    433',
'HOUSTON        0.026 33.562    434',
'CHRISTENSEN    0.026 33.588    435',
'KLEIN          0.026 33.614    436',
'PRATT          0.026 33.640    437',
'BRIGGS         0.026 33.666    438',
'PARSONS        0.026 33.692    439',
'MCLAUGHLIN     0.026 33.717    440',
'ZIMMERMAN      0.026 33.743    441',
'FRENCH         0.026 33.769    442',
'BUCHANAN       0.026 33.794    443',
'MORAN          0.026 33.820    444',
'COPELAND       0.025 33.845    445',
'ROY            0.025 33.871    446',
'PITTMAN        0.025 33.896    447',
'BRADY          0.025 33.922    448',
'MCCORMICK      0.025 33.947    449',
'HOLLOWAY       0.025 33.972    450',
'BROCK          0.025 33.998    451',
'POOLE          0.025 34.023    452',
'FRANK          0.025 34.048    453',
'LOGAN          0.025 34.073    454',
'OWEN           0.025 34.098    455',
'BASS           0.025 34.122    456',
'MARSH          0.025 34.147    457',
'DRAKE          0.025 34.172    458',
'WONG           0.025 34.197    459',
'JEFFERSON      0.025 34.221    460',
'PARK           0.025 34.246    461',
'MORTON         0.025 34.271    462',
'ABBOTT         0.025 34.295    463',
'SPARKS         0.025 34.320    464',
'PATRICK        0.024 34.344    465',
'NORTON         0.024 34.369    466',
'HUFF           0.024 34.393    467',
'CLAYTON        0.024 34.417    468',
'MASSEY         0.024 34.442    469',
'LLOYD          0.024 34.466    470',
'FIGUEROA       0.024 34.490    471',
'CARSON         0.024 34.514    472',
'BOWERS         0.024 34.538    473',
'ROBERSON       0.024 34.563    474',
'BARTON         0.024 34.587    475',
'TRAN           0.024 34.611    476',
'LAMB           0.024 34.635    477',
'HARRINGTON     0.024 34.659    478',
'CASEY          0.024 34.683    479',
'BOONE          0.024 34.706    480',
'CORTEZ         0.024 34.730    481',
'CLARKE         0.024 34.754    482',
'MATHIS         0.024 34.778    483',
'SINGLETON      0.024 34.801    484',
'WILKINS        0.024 34.825    485',
'CAIN           0.024 34.849    486',
'BRYAN          0.024 34.872    487',
'UNDERWOOD      0.024 34.896    488',
'HOGAN          0.024 34.920    489',
'MCKENZIE       0.023 34.943    490',
'COLLIER        0.023 34.966    491',
'LUNA           0.023 34.990    492',
'PHELPS         0.023 35.013    493',
'MCGUIRE        0.023 35.036    494',
'ALLISON        0.023 35.059    495',
'BRIDGES        0.023 35.083    496',
'WILKERSON      0.023 35.106    497',
'NASH           0.023 35.129    498',
'SUMMERS        0.023 35.152    499',
'ATKINS         0.023 35.175    500',
'WILCOX         0.023 35.198    501',
'PITTS          0.023 35.221    502',
'CONLEY         0.023 35.244    503',
'MARQUEZ        0.023 35.267    504',
'BURNETT        0.023 35.290    505',
'RICHARD        0.023 35.313    506',
'COCHRAN        0.023 35.335    507',
'CHASE          0.023 35.358    508',
'DAVENPORT      0.023 35.381    509',
'HOOD           0.023 35.404    510',
'GATES          0.023 35.427    511',
'CLAY           0.023 35.449    512',
'AYALA          0.023 35.472    513',
'SAWYER         0.023 35.495    514',
'ROMAN          0.023 35.517    515',
'VAZQUEZ        0.023 35.540    516',
'DICKERSON      0.023 35.562    517',
'HODGE          0.022 35.585    518',
'ACOSTA         0.022 35.607    519',
'FLYNN          0.022 35.630    520',
'ESPINOZA       0.022 35.652    521',
'NICHOLSON      0.022 35.675    522',
'MONROE         0.022 35.697    523',
'WOLF           0.022 35.719    524',
'MORROW         0.022 35.741    525',
'KIRK           0.022 35.763    526',
'RANDALL        0.022 35.785    527',
'ANTHONY        0.022 35.807    528',
'WHITAKER       0.022 35.829    529',
'OCONNOR        0.022 35.851    530',
'SKINNER        0.022 35.873    531',
'WARE           0.022 35.895    532',
'MOLINA         0.022 35.916    533',
'KIRBY          0.022 35.938    534',
'HUFFMAN        0.022 35.960    535',
'BRADFORD       0.022 35.982    536',
'CHARLES        0.022 36.003    537',
'GILMORE        0.022 36.025    538',
'DOMINGUEZ      0.022 36.046    539',
'ONEAL          0.022 36.068    540',
'BRUCE          0.022 36.090    541',
'LANG           0.021 36.111    542',
'COMBS          0.021 36.132    543',
'KRAMER         0.021 36.154    544',
'HEATH          0.021 36.175    545',
'HANCOCK        0.021 36.196    546',
'GALLAGHER      0.021 36.218    547',
'GAINES         0.021 36.239    548',
'SHAFFER        0.021 36.260    549',
'SHORT          0.021 36.281    550',
'WIGGINS        0.021 36.302    551',
'MATHEWS        0.021 36.323    552',
'MCCLAIN        0.021 36.344    553',
'FISCHER        0.021 36.365    554',
'WALL           0.021 36.386    555',
'SMALL          0.021 36.407    556',
'MELTON         0.021 36.428    557',
'HENSLEY        0.021 36.449    558',
'BOND           0.021 36.470    559',
'DYER           0.021 36.491    560',
'CAMERON        0.021 36.511    561',
'GRIMES         0.021 36.532    562',
'CONTRERAS      0.021 36.553    563',
'CHRISTIAN      0.021 36.573    564',
'WYATT          0.021 36.594    565',
'BAXTER         0.021 36.615    566',
'SNOW           0.021 36.635    567',
'MOSLEY         0.021 36.656    568',
'SHEPHERD       0.021 36.677    569',
'LARSEN         0.021 36.697    570',
'HOOVER         0.021 36.718    571',
'BEASLEY        0.020 36.738    572',
'GLENN          0.020 36.758    573',
'PETERSEN       0.020 36.779    574',
'WHITEHEAD      0.020 36.799    575',
'MEYERS         0.020 36.819    576',
'KEITH          0.020 36.840    577',
'GARRISON       0.020 36.860    578',
'VINCENT        0.020 36.880    579',
'SHIELDS        0.020 36.900    580',
'HORN           0.020 36.920    581',
'SAVAGE         0.020 36.941    582',
'OLSEN          0.020 36.961    583',
'SCHROEDER      0.020 36.981    584',
'HARTMAN        0.020 37.001    585',
'WOODARD        0.020 37.021    586',
'MUELLER        0.020 37.041    587',
'KEMP           0.020 37.061    588',
'DELEON         0.020 37.081    589',
'BOOTH          0.020 37.101    590',
'PATEL          0.020 37.121    591',
'CALHOUN        0.020 37.140    592',
'WILEY          0.020 37.160    593',
'EATON          0.020 37.180    594',
'CLINE          0.020 37.200    595',
'NAVARRO        0.020 37.220    596',
'HARRELL        0.020 37.240    597',
'LESTER         0.020 37.259    598',
'HUMPHREY       0.020 37.279    599',
'PARRISH        0.020 37.299    600',
'DURAN          0.020 37.318    601',
'HUTCHINSON     0.020 37.338    602',
'HESS           0.020 37.358    603',
'DORSEY         0.020 37.377    604',
'BULLOCK        0.020 37.397    605',
'ROBLES         0.020 37.416    606',
'BEARD          0.019 37.436    607',
'DALTON         0.019 37.455    608',
'AVILA          0.019 37.475    609',
'VANCE          0.019 37.494    610',
'RICH           0.019 37.514    611',
'BLACKWELL      0.019 37.533    612',
'YORK           0.019 37.552    613',
'JOHNS          0.019 37.572    614',
'BLANKENSHIP    0.019 37.591    615',
'TREVINO        0.019 37.610    616',
'SALINAS        0.019 37.630    617',
'CAMPOS         0.019 37.649    618',
'PRUITT         0.019 37.668    619',
'MOSES          0.019 37.688    620',
'CALLAHAN       0.019 37.707    621',
'GOLDEN         0.019 37.726    622',
'MONTOYA        0.019 37.745    623',
'HARDIN         0.019 37.764    624',
'GUERRA         0.019 37.783    625',
'MCDOWELL       0.019 37.802    626',
'CAREY          0.019 37.821    627',
'STAFFORD       0.019 37.840    628',
'GALLEGOS       0.019 37.859    629',
'HENSON         0.019 37.878    630',
'WILKINSON      0.019 37.897    631',
'BOOKER         0.019 37.916    632',
'MERRITT        0.019 37.935    633',
'MIRANDA        0.019 37.953    634',
'ATKINSON       0.019 37.972    635',
'ORR            0.019 37.991    636',
'DECKER         0.019 38.010    637',
'HOBBS          0.019 38.028    638',
'PRESTON        0.019 38.047    639',
'TANNER         0.019 38.066    640',
'KNOX           0.019 38.084    641',
'PACHECO        0.019 38.103    642',
'STEPHENSON     0.018 38.121    643',
'GLASS          0.018 38.140    644',
'ROJAS          0.018 38.158    645',
'SERRANO        0.018 38.176    646',
'MARKS          0.018 38.195    647',
'HICKMAN        0.018 38.213    648',
'ENGLISH        0.018 38.231    649',
'SWEENEY        0.018 38.249    650',
'STRONG         0.018 38.267    651',
'PRINCE         0.018 38.285    652',
'MCCLURE        0.018 38.304    653',
'CONWAY         0.018 38.322    654',
'WALTER         0.018 38.340    655',
'ROTH           0.018 38.358    656',
'MAYNARD        0.018 38.376    657',
'FARRELL        0.018 38.394    658',
'LOWERY         0.018 38.411    659',
'HURST          0.018 38.429    660',
'NIXON          0.018 38.447    661',
'WEISS          0.018 38.465    662',
'TRUJILLO       0.018 38.483    663',
'ELLISON        0.018 38.500    664',
'SLOAN          0.018 38.518    665',
'JUAREZ         0.018 38.536    666',
'WINTERS        0.018 38.553    667',
'MCLEAN         0.018 38.571    668',
'RANDOLPH       0.018 38.588    669',
'LEON           0.018 38.606    670',
'BOYER          0.018 38.624    671',
'VILLARREAL     0.018 38.641    672',
'MCCALL         0.018 38.659    673',
'GENTRY         0.018 38.676    674',
'CARRILLO       0.017 38.694    675',
'KENT           0.017 38.711    676',
'AYERS          0.017 38.729    677',
'LARA           0.017 38.746    678',
'SHANNON        0.017 38.763    679',
'SEXTON         0.017 38.781    680',
'PACE           0.017 38.798    681',
'HULL           0.017 38.815    682',
'LEBLANC        0.017 38.833    683',
'BROWNING       0.017 38.850    684',
'VELASQUEZ      0.017 38.867    685',
'LEACH          0.017 38.884    686',
'CHANG          0.017 38.901    687',
'HOUSE          0.017 38.918    688',
'SELLERS        0.017 38.936    689',
'HERRING        0.017 38.953    690',
'NOBLE          0.017 38.970    691',
'FOLEY          0.017 38.987    692',
'BARTLETT       0.017 39.004    693',
'MERCADO        0.017 39.021    694',
'LANDRY         0.017 39.037    695',
'DURHAM         0.017 39.054    696',
'WALLS          0.017 39.071    697',
'BARR           0.017 39.088    698',
'MCKEE          0.017 39.105    699',
'BAUER          0.017 39.122    700',
'RIVERS         0.017 39.139    701',
'EVERETT        0.017 39.155    702',
'BRADSHAW       0.017 39.172    703',
'PUGH           0.017 39.189    704',
'VELEZ          0.017 39.206    705',
'RUSH           0.017 39.222    706',
'ESTES          0.017 39.239    707',
'DODSON         0.017 39.255    708',
'MORSE          0.017 39.272    709',
'SHEPPARD       0.017 39.289    710',
'WEEKS          0.017 39.305    711',
'CAMACHO        0.017 39.322    712',
'BEAN           0.017 39.338    713',
'BARRON         0.017 39.355    714',
'LIVINGSTON     0.017 39.371    715',
'MIDDLETON      0.016 39.388    716',
'SPEARS         0.016 39.404    717',
'BRANCH         0.016 39.420    718',
'BLEVINS        0.016 39.437    719',
'CHEN           0.016 39.453    720',
'KERR           0.016 39.469    721',
'MCCONNELL      0.016 39.486    722',
'HATFIELD       0.016 39.502    723',
'HARDING        0.016 39.518    724',
'ASHLEY         0.016 39.535    725',
'SOLIS          0.016 39.551    726',
'HERMAN         0.016 39.567    727',
'FROST          0.016 39.583    728',
'GILES          0.016 39.599    729',
'BLACKBURN      0.016 39.616    730',
'WILLIAM        0.016 39.632    731',
'PENNINGTON     0.016 39.648    732',
'WOODWARD       0.016 39.664    733',
'FINLEY         0.016 39.680    734',
'MCINTOSH       0.016 39.696    735',
'KOCH           0.016 39.713    736',
'BEST           0.016 39.729    737',
'SOLOMON        0.016 39.745    738',
'MCCULLOUGH     0.016 39.761    739',
'DUDLEY         0.016 39.777    740',
'NOLAN          0.016 39.793    741',
'BLANCHARD      0.016 39.809    742',
'RIVAS          0.016 39.825    743',
'BRENNAN        0.016 39.841    744',
'MEJIA          0.016 39.856    745',
'KANE           0.016 39.872    746',
'BENTON         0.016 39.888    747',
'JOYCE          0.016 39.904    748',
'BUCKLEY        0.016 39.920    749',
'HALEY          0.016 39.936    750',
'VALENTINE      0.016 39.952    751',
'MADDOX         0.016 39.967    752',
'RUSSO          0.016 39.983    753',
'MCKNIGHT       0.016 39.999    754',
'BUCK           0.016 40.015    755',
'MOON           0.016 40.030    756',
'MCMILLAN       0.016 40.046    757',
'CROSBY         0.016 40.062    758',
'BERG           0.016 40.077    759',
'DOTSON         0.016 40.093    760',
'MAYS           0.016 40.109    761',
'ROACH          0.016 40.124    762',
'CHURCH         0.016 40.140    763',
'CHAN           0.016 40.155    764',
'RICHMOND       0.016 40.171    765',
'MEADOWS        0.016 40.187    766',
'FAULKNER       0.016 40.202    767',
'ONEILL         0.016 40.218    768',
'KNAPP          0.016 40.233    769',
'KLINE          0.015 40.248    770',
'BARRY          0.015 40.264    771',
'OCHOA          0.015 40.279    772',
'JACOBSON       0.015 40.295    773',
'GAY            0.015 40.310    774',
'AVERY          0.015 40.326    775',
'HENDRICKS      0.015 40.341    776',
'HORNE          0.015 40.356    777',
'SHEPARD        0.015 40.372    778',
'HEBERT         0.015 40.387    779',
'CHERRY         0.015 40.402    780',
'CARDENAS       0.015 40.418    781',
'MCINTYRE       0.015 40.433    782',
'WHITNEY        0.015 40.448    783',
'WALLER         0.015 40.463    784',
'HOLMAN         0.015 40.478    785',
'DONALDSON      0.015 40.494    786',
'CANTU          0.015 40.509    787',
'TERRELL        0.015 40.524    788',
'MORIN          0.015 40.539    789',
'GILLESPIE      0.015 40.555    790',
'FUENTES        0.015 40.570    791',
'TILLMAN        0.015 40.585    792',
'SANFORD        0.015 40.600    793',
'BENTLEY        0.015 40.615    794',
'PECK           0.015 40.630    795',
'KEY            0.015 40.645    796',
'SALAS          0.015 40.660    797',
'ROLLINS        0.015 40.676    798',
'GAMBLE         0.015 40.691    799',
'DICKSON        0.015 40.706    800',
'BATTLE         0.015 40.721    801',
'SANTANA        0.015 40.736    802',
'CABRERA        0.015 40.751    803',
'CERVANTES      0.015 40.766    804',
'HOWE           0.015 40.781    805',
'HINTON         0.015 40.796    806',
'HURLEY         0.015 40.811    807',
'SPENCE         0.015 40.825    808',
'ZAMORA         0.015 40.840    809',
'YANG           0.015 40.855    810',
'MCNEIL         0.015 40.870    811',
'SUAREZ         0.015 40.885    812',
'CASE           0.015 40.900    813',
'PETTY          0.015 40.915    814',
'GOULD          0.015 40.929    815',
'MCFARLAND      0.015 40.944    816',
'SAMPSON        0.015 40.959    817',
'CARVER         0.015 40.974    818',
'BRAY           0.015 40.989    819',
'ROSARIO        0.015 41.003    820',
'MACDONALD      0.015 41.018    821',
'STOUT          0.015 41.033    822',
'HESTER         0.015 41.047    823',
'MELENDEZ       0.015 41.062    824',
'DILLON         0.015 41.077    825',
'FARLEY         0.015 41.091    826',
'HOPPER         0.015 41.106    827',
'GALLOWAY       0.015 41.121    828',
'POTTS          0.015 41.135    829',
'BERNARD        0.015 41.150    830',
'JOYNER         0.014 41.164    831',
'STEIN          0.014 41.179    832',
'AGUIRRE        0.014 41.193    833',
'OSBORN         0.014 41.208    834',
'MERCER         0.014 41.222    835',
'BENDER         0.014 41.236    836',
'FRANCO         0.014 41.251    837',
'ROWLAND        0.014 41.265    838',
'SYKES          0.014 41.280    839',
'BENJAMIN       0.014 41.294    840',
'TRAVIS         0.014 41.308    841',
'PICKETT        0.014 41.323    842',
'CRANE          0.014 41.337    843',
'SEARS          0.014 41.351    844',
'MAYO           0.014 41.365    845',
'DUNLAP         0.014 41.379    846',
'HAYDEN         0.014 41.394    847',
'WILDER         0.014 41.408    848',
'MCKAY          0.014 41.422    849',
'COFFEY         0.014 41.436    850',
'MCCARTY        0.014 41.450    851',
'EWING          0.014 41.464    852',
'COOLEY         0.014 41.478    853',
'VAUGHAN        0.014 41.492    854',
'BONNER         0.014 41.506    855',
'COTTON         0.014 41.520    856',
'HOLDER         0.014 41.534    857',
'STARK          0.014 41.548    858',
'FERRELL        0.014 41.562    859',
'CANTRELL       0.014 41.575    860',
'FULTON         0.014 41.589    861',
'LYNN           0.014 41.603    862',
'LOTT           0.014 41.617    863',
'CALDERON       0.014 41.631    864',
'ROSA           0.014 41.644    865',
'POLLARD        0.014 41.658    866',
'HOOPER         0.014 41.672    867',
'BURCH          0.014 41.686    868',
'MULLEN         0.014 41.700    869',
'FRY            0.014 41.713    870',
'RIDDLE         0.014 41.727    871',
'LEVY           0.014 41.741    872',
'DAVID          0.014 41.754    873',
'DUKE           0.014 41.768    874',
'ODONNELL       0.014 41.782    875',
'GUY            0.014 41.795    876',
'MICHAEL        0.014 41.809    877',
'BRITT          0.014 41.823    878',
'FREDERICK      0.014 41.836    879',
'DAUGHERTY      0.014 41.850    880',
'BERGER         0.014 41.864    881',
'DILLARD        0.014 41.877    882',
'ALSTON         0.014 41.891    883',
'JARVIS         0.014 41.904    884',
'FRYE           0.014 41.918    885',
'RIGGS          0.014 41.932    886',
'CHANEY         0.014 41.945    887',
'ODOM           0.013 41.959    888',
'DUFFY          0.013 41.972    889',
'FITZPATRICK    0.013 41.986    890',
'VALENZUELA     0.013 41.999    891',
'MERRILL        0.013 42.012    892',
'MAYER          0.013 42.026    893',
'ALFORD         0.013 42.039    894',
'MCPHERSON      0.013 42.053    895',
'ACEVEDO        0.013 42.066    896',
'DONOVAN        0.013 42.079    897',
'BARRERA        0.013 42.093    898',
'ALBERT         0.013 42.106    899',
'COTE           0.013 42.119    900',
'REILLY         0.013 42.133    901',
'COMPTON        0.013 42.146    902',
'RAYMOND        0.013 42.159    903',
'MOONEY         0.013 42.173    904',
'MCGOWAN        0.013 42.186    905',
'CRAFT          0.013 42.199    906',
'CLEVELAND      0.013 42.212    907',
'CLEMONS        0.013 42.226    908',
'WYNN           0.013 42.239    909',
'NIELSEN        0.013 42.252    910',
'BAIRD          0.013 42.265    911',
'STANTON        0.013 42.278    912',
'SNIDER         0.013 42.292    913',
'ROSALES        0.013 42.305    914',
'BRIGHT         0.013 42.318    915',
'WITT           0.013 42.331    916',
'STUART         0.013 42.344    917',
'HAYS           0.013 42.357    918',
'HOLDEN         0.013 42.371    919',
'RUTLEDGE       0.013 42.384    920',
'KINNEY         0.013 42.397    921',
'CLEMENTS       0.013 42.410    922',
'CASTANEDA      0.013 42.423    923',
'SLATER         0.013 42.436    924',
'HAHN           0.013 42.449    925',
'EMERSON        0.013 42.462    926',
'CONRAD         0.013 42.475    927',
'BURKS          0.013 42.488    928',
'DELANEY        0.013 42.501    929',
'PATE           0.013 42.514    930',
'LANCASTER      0.013 42.527    931',
'SWEET          0.013 42.540    932',
'JUSTICE        0.013 42.552    933',
'TYSON          0.013 42.565    934',
'SHARPE         0.013 42.578    935',
'WHITFIELD      0.013 42.591    936',
'TALLEY         0.013 42.604    937',
'MACIAS         0.013 42.617    938',
'IRWIN          0.013 42.629    939',
'BURRIS         0.013 42.642    940',
'RATLIFF        0.013 42.655    941',
'MCCRAY         0.013 42.668    942',
'MADDEN         0.013 42.681    943',
'KAUFMAN        0.013 42.693    944',
'BEACH          0.013 42.706    945',
'GOFF           0.013 42.719    946',
'CASH           0.013 42.732    947',
'BOLTON         0.013 42.744    948',
'MCFADDEN       0.013 42.757    949',
'LEVINE         0.013 42.770    950',
'GOOD           0.013 42.782    951',
'BYERS          0.013 42.795    952',
'KIRKLAND       0.013 42.808    953',
'KIDD           0.013 42.821    954',
'WORKMAN        0.013 42.833    955',
'CARNEY         0.013 42.846    956',
'DALE           0.013 42.859    957',
'MCLEOD         0.013 42.871    958',
'HOLCOMB        0.013 42.884    959',
'ENGLAND        0.013 42.896    960',
'FINCH          0.013 42.909    961',
'HEAD           0.012 42.921    962',
'BURT           0.012 42.934    963',
'HENDRIX        0.012 42.946    964',
'SOSA           0.012 42.959    965',
'HANEY          0.012 42.971    966',
'FRANKS         0.012 42.984    967',
'SARGENT        0.012 42.996    968',
'NIEVES         0.012 43.009    969',
'DOWNS          0.012 43.021    970',
'RASMUSSEN      0.012 43.033    971',
'BIRD           0.012 43.046    972',
'HEWITT         0.012 43.058    973',
'LINDSAY        0.012 43.071    974',
'LE             0.012 43.083    975',
'FOREMAN        0.012 43.095    976',
'VALENCIA       0.012 43.108    977',
'ONEIL          0.012 43.120    978',
'DELACRUZ       0.012 43.132    979',
'VINSON         0.012 43.145    980',
'DEJESUS        0.012 43.157    981',
'HYDE           0.012 43.169    982',
'FORBES         0.012 43.182    983',
'GILLIAM        0.012 43.194    984',
'GUTHRIE        0.012 43.206    985',
'WOOTEN         0.012 43.218    986',
'HUBER          0.012 43.231    987',
'BARLOW         0.012 43.243    988',
'BOYLE          0.012 43.255    989',
'MCMAHON        0.012 43.267    990',
'BUCKNER        0.012 43.279    991',
'ROCHA          0.012 43.291    992',
'PUCKETT        0.012 43.303    993',
'LANGLEY        0.012 43.315    994',
'KNOWLES        0.012 43.328    995',
'COOKE          0.012 43.340    996',
'VELAZQUEZ      0.012 43.352    997',
'WHITLEY        0.012 43.364    998',
'NOEL           0.012 43.376    999',
'VANG           0.012 43.388   1000',
'SHEA           0.012 43.399   1001',
'ROUSE          0.012 43.411   1002',
'HARTLEY        0.012 43.423   1003',
'MAYFIELD       0.012 43.435   1004',
'ELDER          0.012 43.447   1005',
'RANKIN         0.012 43.459   1006',
'HANNA          0.012 43.471   1007',
'COWAN          0.012 43.483   1008',
'LUCERO         0.012 43.495   1009',
'ARROYO         0.012 43.507   1010',
'SLAUGHTER      0.012 43.519   1011',
'HAAS           0.012 43.531   1012',
'OCONNELL       0.012 43.542   1013',
'MINOR          0.012 43.554   1014',
'KENDRICK       0.012 43.566   1015',
'SHIRLEY        0.012 43.578   1016',
'KENDALL        0.012 43.590   1017',
'BOUCHER        0.012 43.602   1018',
'ARCHER         0.012 43.613   1019',
'BOGGS          0.012 43.625   1020',
'ODELL          0.012 43.637   1021',
'DOUGHERTY      0.012 43.649   1022',
'ANDERSEN       0.012 43.661   1023',
'NEWELL         0.012 43.672   1024',
'CROWE          0.012 43.684   1025',
'WANG           0.012 43.696   1026',
'FRIEDMAN       0.012 43.708   1027',
'BLAND          0.012 43.719   1028',
'SWAIN          0.012 43.731   1029',
'HOLLEY         0.012 43.743   1030',
'FELIX          0.012 43.754   1031',
'PEARCE         0.012 43.766   1032',
'CHILDS         0.012 43.778   1033',
'YARBROUGH      0.012 43.789   1034',
'GALVAN         0.012 43.801   1035',
'PROCTOR        0.012 43.812   1036',
'MEEKS          0.012 43.824   1037',
'LOZANO         0.012 43.836   1038',
'MORA           0.012 43.847   1039',
'RANGEL         0.012 43.859   1040',
'BACON          0.012 43.870   1041',
'VILLANUEVA     0.012 43.882   1042',
'SCHAEFER       0.012 43.893   1043',
'ROSADO         0.012 43.905   1044',
'HELMS          0.012 43.917   1045',
'BOYCE          0.012 43.928   1046',
'GOSS           0.012 43.940   1047',
'STINSON        0.011 43.951   1048',
'SMART          0.011 43.963   1049',
'LAKE           0.011 43.974   1050',
'IBARRA         0.011 43.986   1051',
'HUTCHINS       0.011 43.997   1052',
'COVINGTON      0.011 44.009   1053',
'REYNA          0.011 44.020   1054',
'GREGG          0.011 44.032   1055',
'WERNER         0.011 44.043   1056',
'CROWLEY        0.011 44.054   1057',
'HATCHER        0.011 44.066   1058',
'MACKEY         0.011 44.077   1059',
'BUNCH          0.011 44.089   1060',
'WOMACK         0.011 44.100   1061',
'POLK           0.011 44.111   1062',
'JAMISON        0.011 44.123   1063',
'DODD           0.011 44.134   1064',
'CHILDRESS      0.011 44.146   1065',
'CHILDERS       0.011 44.157   1066',
'CAMP           0.011 44.168   1067',
'VILLA          0.011 44.180   1068',
'DYE            0.011 44.191   1069',
'SPRINGER       0.011 44.202   1070',
'MAHONEY        0.011 44.214   1071',
'DAILEY         0.011 44.225   1072',
'BELCHER        0.011 44.236   1073',
'LOCKHART       0.011 44.248   1074',
'GRIGGS         0.011 44.259   1075',
'COSTA          0.011 44.270   1076',
'CONNOR         0.011 44.281   1077',
'BRANDT         0.011 44.293   1078',
'WINTER         0.011 44.304   1079',
'WALDEN         0.011 44.315   1080',
'MOSER          0.011 44.326   1081',
'TRACY          0.011 44.338   1082',
'TATUM          0.011 44.349   1083',
'MCCANN         0.011 44.360   1084',
'AKERS          0.011 44.371   1085',
'LUTZ           0.011 44.382   1086',
'PRYOR          0.011 44.393   1087',
'LAW            0.011 44.404   1088',
'OROZCO         0.011 44.415   1089',
'MCALLISTER     0.011 44.427   1090',
'LUGO           0.011 44.438   1091',
'DAVIES         0.011 44.449   1092',
'SHOEMAKER      0.011 44.460   1093',
'MADISON        0.011 44.471   1094',
'RUTHERFORD     0.011 44.482   1095',
'NEWSOME        0.011 44.493   1096',
'MAGEE          0.011 44.504   1097',
'CHAMBERLAIN    0.011 44.515   1098',
'BLANTON        0.011 44.526   1099',
'SIMMS          0.011 44.537   1100',
'GODFREY        0.011 44.548   1101',
'FLANAGAN       0.011 44.559   1102',
'CRUM           0.011 44.570   1103',
'CORDOVA        0.011 44.581   1104',
'ESCOBAR        0.011 44.592   1105',
'DOWNING        0.011 44.603   1106',
'SINCLAIR       0.011 44.614   1107',
'DONAHUE        0.011 44.625   1108',
'KRUEGER        0.011 44.636   1109',
'MCGINNIS       0.011 44.647   1110',
'GORE           0.011 44.658   1111',
'FARRIS         0.011 44.669   1112',
'WEBBER         0.011 44.680   1113',
'CORBETT        0.011 44.691   1114',
'ANDRADE        0.011 44.701   1115',
'STARR          0.011 44.712   1116',
'LYON           0.011 44.723   1117',
'YODER          0.011 44.734   1118',
'HASTINGS       0.011 44.745   1119',
'MCGRATH        0.011 44.756   1120',
'SPIVEY         0.011 44.767   1121',
'KRAUSE         0.011 44.778   1122',
'HARDEN         0.011 44.788   1123',
'CRABTREE       0.011 44.799   1124',
'KIRKPATRICK    0.011 44.810   1125',
'HOLLIS         0.011 44.821   1126',
'BRANDON        0.011 44.832   1127',
'ARRINGTON      0.011 44.843   1128',
'ERVIN          0.011 44.853   1129',
'CLIFTON        0.011 44.864   1130',
'RITTER         0.011 44.875   1131',
'MCGHEE         0.011 44.886   1132',
'BOLDEN         0.011 44.897   1133',
'MALONEY        0.011 44.907   1134',
'GAGNON         0.011 44.918   1135',
'DUNBAR         0.011 44.929   1136',
'PONCE          0.011 44.940   1137',
'PIKE           0.011 44.950   1138',
'MAYES          0.011 44.961   1139',
'HEARD          0.011 44.972   1140',
'BEATTY         0.011 44.983   1141',
'MOBLEY         0.011 44.993   1142',
'KIMBALL        0.011 45.004   1143',
'BUTTS          0.011 45.015   1144',
'MONTES         0.011 45.026   1145',
'HERBERT        0.011 45.036   1146',
'GRADY          0.011 45.047   1147',
'ELDRIDGE       0.011 45.058   1148',
'BRAUN          0.011 45.068   1149',
'HAMM           0.011 45.079   1150',
'GIBBONS        0.011 45.090   1151',
'SEYMOUR        0.011 45.100   1152',
'MOYER          0.011 45.111   1153',
'MANLEY         0.011 45.122   1154',
'HERRON         0.011 45.132   1155',
'PLUMMER        0.011 45.143   1156',
'ELMORE         0.011 45.153   1157',
'CRAMER         0.011 45.164   1158',
'GARY           0.011 45.175   1159',
'RUCKER         0.011 45.185   1160',
'HILTON         0.011 45.196   1161',
'BLUE           0.011 45.206   1162',
'PIERSON        0.011 45.217   1163',
'FONTENOT       0.011 45.227   1164',
'FIELD          0.011 45.238   1165',
'RUBIO          0.011 45.248   1166',
'GRACE          0.011 45.259   1167',
'GOLDSTEIN      0.011 45.269   1168',
'ELKINS         0.011 45.280   1169',
'WILLS          0.010 45.290   1170',
'NOVAK          0.010 45.301   1171',
'JOHN           0.010 45.311   1172',
'HICKEY         0.010 45.322   1173',
'WORLEY         0.010 45.332   1174',
'GORMAN         0.010 45.343   1175',
'KATZ           0.010 45.353   1176',
'DICKINSON      0.010 45.364   1177',
'BROUSSARD      0.010 45.374   1178',
'FRITZ          0.010 45.384   1179',
'WOODRUFF       0.010 45.395   1180',
'CROW           0.010 45.405   1181',
'CHRISTOPHER    0.010 45.416   1182',
'BRITTON        0.010 45.426   1183',
'FORREST        0.010 45.436   1184',
'NANCE          0.010 45.447   1185',
'LEHMAN         0.010 45.457   1186',
'BINGHAM        0.010 45.467   1187',
'ZUNIGA         0.010 45.478   1188',
'WHALEY         0.010 45.488   1189',
'SHAFER         0.010 45.498   1190',
'COFFMAN        0.010 45.509   1191',
'STEWARD        0.010 45.519   1192',
'DELAROSA       0.010 45.529   1193',
'NIX            0.010 45.540   1194',
'NEELY          0.010 45.550   1195',
'NUMBERS        0.010 45.560   1196',
'MATA           0.010 45.571   1197',
'MANUEL         0.010 45.581   1198',
'DAVILA         0.010 45.591   1199',
'MCCABE         0.010 45.601   1200',
'KESSLER        0.010 45.612   1201',
'EMERY          0.010 45.622   1202',
'BOWLING        0.010 45.632   1203',
'HINKLE         0.010 45.643   1204',
'WELSH          0.010 45.653   1205',
'PAGAN          0.010 45.663   1206',
'GOLDBERG       0.010 45.673   1207',
'GOINS          0.010 45.683   1208',
'CROUCH         0.010 45.694   1209',
'CUEVAS         0.010 45.704   1210',
'QUINONES       0.010 45.714   1211',
'MCDERMOTT      0.010 45.724   1212',
'HENDRICKSON    0.010 45.734   1213',
'SAMUELS        0.010 45.745   1214',
'DENTON         0.010 45.755   1215',
'BERGERON       0.010 45.765   1216',
'LAM            0.010 45.775   1217',
'IVEY           0.010 45.785   1218',
'LOCKE          0.010 45.795   1219',
'HAINES         0.010 45.805   1220',
'THURMAN        0.010 45.815   1221',
'SNELL          0.010 45.825   1222',
'HOSKINS        0.010 45.836   1223',
'BYRNE          0.010 45.846   1224',
'MILTON         0.010 45.856   1225',
'WINSTON        0.010 45.866   1226',
'ARTHUR         0.010 45.876   1227',
'ARIAS          0.010 45.886   1228',
'STANFORD       0.010 45.896   1229',
'ROE            0.010 45.906   1230',
'CORBIN         0.010 45.916   1231',
'BELTRAN        0.010 45.926   1232',
'CHAPPELL       0.010 45.936   1233',
'HURT           0.010 45.946   1234',
'DOWNEY         0.010 45.956   1235',
'DOOLEY         0.010 45.966   1236',
'TUTTLE         0.010 45.976   1237',
'COUCH          0.010 45.986   1238',
'PAYTON         0.010 45.996   1239',
'MCELROY        0.010 46.006   1240',
'CROCKETT       0.010 46.016   1241',
'GROVES         0.010 46.026   1242',
'CLEMENT        0.010 46.036   1243',
'LESLIE         0.010 46.046   1244',
'CARTWRIGHT     0.010 46.055   1245',
'DICKEY         0.010 46.065   1246',
'MCGILL         0.010 46.075   1247',
'DUBOIS         0.010 46.085   1248',
'MUNIZ          0.010 46.095   1249',
'ERWIN          0.010 46.105   1250',
'SELF           0.010 46.115   1251',
'TOLBERT        0.010 46.125   1252',
'DEMPSEY        0.010 46.134   1253',
'CISNEROS       0.010 46.144   1254',
'SEWELL         0.010 46.154   1255',
'LATHAM         0.010 46.164   1256',
'GARLAND        0.010 46.174   1257',
'VIGIL          0.010 46.183   1258',
'TAPIA          0.010 46.193   1259',
'STERLING       0.010 46.203   1260',
'RAINEY         0.010 46.213   1261',
'NORWOOD        0.010 46.223   1262',
'LACY           0.010 46.232   1263',
'STROUD         0.010 46.242   1264',
'MEADE          0.010 46.252   1265',
'AMOS           0.010 46.262   1266',
'TIPTON         0.010 46.271   1267',
'LORD           0.010 46.281   1268',
'KUHN           0.010 46.291   1269',
'HILLIARD       0.010 46.301   1270',
'BONILLA        0.010 46.311   1271',
'TEAGUE         0.010 46.320   1272',
'COURTNEY       0.010 46.330   1273',
'GUNN           0.010 46.340   1274',
'HO             0.010 46.349   1275',
'GREENWOOD      0.010 46.359   1276',
'CORREA         0.010 46.369   1277',
'REECE          0.010 46.378   1278',
'WESTON         0.010 46.388   1279',
'POE            0.010 46.398   1280',
'TRENT          0.010 46.407   1281',
'PINEDA         0.010 46.417   1282',
'PHIPPS         0.010 46.427   1283',
'FREY           0.010 46.436   1284',
'KAISER         0.010 46.446   1285',
'AMES           0.010 46.456   1286',
'PAIGE          0.010 46.465   1287',
'GUNTER         0.010 46.475   1288',
'SCHMITT        0.010 46.484   1289',
'MILLIGAN       0.010 46.494   1290',
'ESPINOSA       0.010 46.503   1291',
'CARLTON        0.010 46.513   1292',
'BOWDEN         0.010 46.523   1293',
'VICKERS        0.010 46.532   1294',
'LOWRY          0.010 46.542   1295',
'PRITCHARD      0.010 46.551   1296',
'COSTELLO       0.010 46.561   1297',
'PIPER          0.009 46.570   1298',
'MCCLELLAN      0.009 46.580   1299',
'LOVELL         0.009 46.589   1300',
'DREW           0.009 46.599   1301',
'SHEEHAN        0.009 46.608   1302',
'QUICK          0.009 46.617   1303',
'HATCH          0.009 46.627   1304',
'DOBSON         0.009 46.636   1305',
'SINGH          0.009 46.646   1306',
'JEFFRIES       0.009 46.655   1307',
'HOLLINGSWORTH  0.009 46.665   1308',
'SORENSEN       0.009 46.674   1309',
'MEZA           0.009 46.684   1310',
'FINK           0.009 46.693   1311',
'DONNELLY       0.009 46.702   1312',
'BURRELL        0.009 46.712   1313',
'BRUNO          0.009 46.721   1314',
'TOMLINSON      0.009 46.731   1315',
'COLBERT        0.009 46.740   1316',
'BILLINGS       0.009 46.749   1317',
'RITCHIE        0.009 46.759   1318',
'HELTON         0.009 46.768   1319',
'SUTHERLAND     0.009 46.777   1320',
'PEOPLES        0.009 46.787   1321',
'MCQUEEN        0.009 46.796   1322',
'GASTON         0.009 46.806   1323',
'THOMASON       0.009 46.815   1324',
'MCKINLEY       0.009 46.824   1325',
'GIVENS         0.009 46.834   1326',
'CROCKER        0.009 46.843   1327',
'VOGEL          0.009 46.852   1328',
'ROBISON        0.009 46.862   1329',
'DUNHAM         0.009 46.871   1330',
'COKER          0.009 46.880   1331',
'SWARTZ         0.009 46.890   1332',
'KEYS           0.009 46.899   1333',
'LILLY          0.009 46.908   1334',
'LADNER         0.009 46.917   1335',
'HANNAH         0.009 46.927   1336',
'WILLARD        0.009 46.936   1337',
'RICHTER        0.009 46.945   1338',
'HARGROVE       0.009 46.955   1339',
'EDMONDS        0.009 46.964   1340',
'BRANTLEY       0.009 46.973   1341',
'ALBRIGHT       0.009 46.982   1342',
'MURDOCK        0.009 46.992   1343',
'BOSWELL        0.009 47.001   1344',
'MULLER         0.009 47.010   1345',
'QUINTERO       0.009 47.019   1346',
'PADGETT        0.009 47.028   1347',
'KENNEY         0.009 47.038   1348',
'DALY           0.009 47.047   1349',
'CONNOLLY       0.009 47.056   1350',
'PIERRE         0.009 47.065   1351',
'INMAN          0.009 47.074   1352',
'QUINTANA       0.009 47.084   1353',
'LUND           0.009 47.093   1354',
'BARNARD        0.009 47.102   1355',
'VILLEGAS       0.009 47.111   1356',
'SIMONS         0.009 47.120   1357',
'LAND           0.009 47.129   1358',
'HUGGINS        0.009 47.138   1359',
'TIDWELL        0.009 47.148   1360',
'SANDERSON      0.009 47.157   1361',
'BULLARD        0.009 47.166   1362',
'MCCLENDON      0.009 47.175   1363',
'DUARTE         0.009 47.184   1364',
'DRAPER         0.009 47.193   1365',
'MEREDITH       0.009 47.202   1366',
'MARRERO        0.009 47.211   1367',
'DWYER          0.009 47.220   1368',
'ABRAMS         0.009 47.230   1369',
'STOVER         0.009 47.239   1370',
'GOODE          0.009 47.248   1371',
'FRASER         0.009 47.257   1372',
'CREWS          0.009 47.266   1373',
'BERNAL         0.009 47.275   1374',
'SMILEY         0.009 47.284   1375',
'GODWIN         0.009 47.293   1376',
'FISH           0.009 47.302   1377',
'CONKLIN        0.009 47.311   1378',
'MCNEAL         0.009 47.320   1379',
'BACA           0.009 47.329   1380',
'ESPARZA        0.009 47.338   1381',
'CROWDER        0.009 47.347   1382',
'BOWER          0.009 47.356   1383',
'NICHOLAS       0.009 47.365   1384',
'CHUNG          0.009 47.374   1385',
'BREWSTER       0.009 47.383   1386',
'MCNEILL        0.009 47.392   1387',
'DICK           0.009 47.401   1388',
'RODRIGUES      0.009 47.409   1389',
'LEAL           0.009 47.418   1390',
'COATES         0.009 47.427   1391',
'RAINES         0.009 47.436   1392',
'MCCAIN         0.009 47.445   1393',
'MCCORD         0.009 47.454   1394',
'MINER          0.009 47.463   1395',
'HOLBROOK       0.009 47.472   1396',
'SWIFT          0.009 47.481   1397',
'DUKES          0.009 47.489   1398',
'CARLISLE       0.009 47.498   1399',
'ALDRIDGE       0.009 47.507   1400',
'ACKERMAN       0.009 47.516   1401',
'STARKS         0.009 47.525   1402',
'RICKS          0.009 47.533   1403',
'HOLLIDAY       0.009 47.542   1404',
'FERRIS         0.009 47.551   1405',
'HAIRSTON       0.009 47.560   1406',
'SHEFFIELD      0.009 47.569   1407',
'LANGE          0.009 47.577   1408',
'FOUNTAIN       0.009 47.586   1409',
'MARINO         0.009 47.595   1410',
'DOSS           0.009 47.604   1411',
'BETTS          0.009 47.612   1412',
'KAPLAN         0.009 47.621   1413',
'CARMICHAEL     0.009 47.630   1414',
'BLOOM          0.009 47.639   1415',
'RUFFIN         0.009 47.647   1416',
'PENN           0.009 47.656   1417',
'KERN           0.009 47.665   1418',
'BOWLES         0.009 47.673   1419',
'SIZEMORE       0.009 47.682   1420',
'LARKIN         0.009 47.691   1421',
'DUPREE         0.009 47.699   1422',
'JEWELL         0.009 47.708   1423',
'SILVER         0.009 47.717   1424',
'SEALS          0.009 47.726   1425',
'METCALF        0.009 47.734   1426',
'HUTCHISON      0.009 47.743   1427',
'HENLEY         0.009 47.751   1428',
'FARR           0.009 47.760   1429',
'CASTLE         0.009 47.769   1430',
'MCCAULEY       0.009 47.777   1431',
'HANKINS        0.009 47.786   1432',
'GUSTAFSON      0.009 47.795   1433',
'DEAL           0.009 47.803   1434',
'CURRAN         0.009 47.812   1435',
'ASH            0.009 47.821   1436',
'WADDELL        0.009 47.829   1437',
'RAMEY          0.009 47.838   1438',
'CATES          0.009 47.847   1439',
'POLLOCK        0.009 47.855   1440',
'MAJOR          0.009 47.864   1441',
'IRVIN          0.009 47.872   1442',
'CUMMINS        0.009 47.881   1443',
'MESSER         0.009 47.890   1444',
'HELLER         0.009 47.898   1445',
'DEWITT         0.009 47.907   1446',
'LIN            0.009 47.915   1447',
'FUNK           0.009 47.924   1448',
'CORNETT        0.009 47.932   1449',
'PALACIOS       0.009 47.941   1450',
'GALINDO        0.009 47.949   1451',
'CANO           0.009 47.958   1452',
'HATHAWAY       0.009 47.966   1453',
'SINGER         0.008 47.975   1454',
'PHAM           0.008 47.983   1455',
'ENRIQUEZ       0.008 47.992   1456',
'AARON          0.008 48.000   1457',
'SALGADO        0.008 48.009   1458',
'PELLETIER      0.008 48.017   1459',
'PAINTER        0.008 48.026   1460',
'WISEMAN        0.008 48.034   1461',
'BLOUNT         0.008 48.043   1462',
'HAND           0.008 48.051   1463',
'FELICIANO      0.008 48.059   1464',
'TEMPLE         0.008 48.068   1465',
'HOUSER         0.008 48.076   1466',
'DOHERTY        0.008 48.085   1467',
'MEAD           0.008 48.093   1468',
'MCGRAW         0.008 48.101   1469',
'TONEY          0.008 48.110   1470',
'SWAN           0.008 48.118   1471',
'MELVIN         0.008 48.126   1472',
'CAPPS          0.008 48.135   1473',
'BLANCO         0.008 48.143   1474',
'BLACKMON       0.008 48.152   1475',
'WESLEY         0.008 48.160   1476',
'THOMSON        0.008 48.168   1477',
'MCMANUS        0.008 48.177   1478',
'FAIR           0.008 48.185   1479',
'BURKETT        0.008 48.193   1480',
'POST           0.008 48.202   1481',
'GLEASON        0.008 48.210   1482',
'RUDOLPH        0.008 48.218   1483',
'OTT            0.008 48.227   1484',
'DICKENS        0.008 48.235   1485',
'CORMIER        0.008 48.243   1486',
'VOSS           0.008 48.251   1487',
'RUSHING        0.008 48.260   1488',
'ROSENBERG      0.008 48.268   1489',
'HURD           0.008 48.276   1490',
'DUMAS          0.008 48.285   1491',
'BENITEZ        0.008 48.293   1492',
'ARELLANO       0.008 48.301   1493',
'STORY          0.008 48.309   1494',
'MARIN          0.008 48.318   1495',
'CAUDILL        0.008 48.326   1496',
'BRAGG          0.008 48.334   1497',
'JARAMILLO      0.008 48.343   1498',
'HUERTA         0.008 48.351   1499',
'GIPSON         0.008 48.359   1500',
'COLVIN         0.008 48.367   1501',
'BIGGS          0.008 48.376   1502',
'VELA           0.008 48.384   1503',
'PLATT          0.008 48.392   1504',
'CASSIDY        0.008 48.400   1505',
'TOMPKINS       0.008 48.408   1506',
'MCCOLLUM       0.008 48.417   1507',
'KAY            0.008 48.425   1508',
'GABRIEL        0.008 48.433   1509',
'DOLAN          0.008 48.441   1510',
'DALEY          0.008 48.450   1511',
'CRUMP          0.008 48.458   1512',
'STREET         0.008 48.466   1513',
'SNEED          0.008 48.474   1514',
'KILGORE        0.008 48.482   1515',
'GROVE          0.008 48.491   1516',
'GRIMM          0.008 48.499   1517',
'DAVISON        0.008 48.507   1518',
'BRUNSON        0.008 48.515   1519',
'PRATER         0.008 48.523   1520',
'MARCUM         0.008 48.531   1521',
'DEVINE         0.008 48.540   1522',
'KYLE           0.008 48.548   1523',
'DODGE          0.008 48.556   1524',
'STRATTON       0.008 48.564   1525',
'ROSAS          0.008 48.572   1526',
'CHOI           0.008 48.580   1527',
'TRIPP          0.008 48.589   1528',
'LEDBETTER      0.008 48.597   1529',
'LAY            0.008 48.605   1530',
'HIGHTOWER      0.008 48.613   1531',
'HAYWOOD        0.008 48.621   1532',
'FELDMAN        0.008 48.629   1533',
'EPPS           0.008 48.637   1534',
'YEAGER         0.008 48.645   1535',
'POSEY          0.008 48.653   1536',
'SYLVESTER      0.008 48.662   1537',
'SCRUGGS        0.008 48.670   1538',
'COPE           0.008 48.678   1539',
'STUBBS         0.008 48.686   1540',
'RICHEY         0.008 48.694   1541',
'OVERTON        0.008 48.702   1542',
'TROTTER        0.008 48.710   1543',
'SPRAGUE        0.008 48.718   1544',
'CORDERO        0.008 48.726   1545',
'BUTCHER        0.008 48.734   1546',
'BURGER         0.008 48.742   1547',
'STILES         0.008 48.750   1548',
'BURGOS         0.008 48.758   1549',
'WOODSON        0.008 48.766   1550',
'HORNER         0.008 48.774   1551',
'BASSETT        0.008 48.782   1552',
'PURCELL        0.008 48.790   1553',
'HASKINS        0.008 48.798   1554',
'GEE            0.008 48.806   1555',
'AKINS          0.008 48.814   1556',
'ABRAHAM        0.008 48.823   1557',
'HOYT           0.008 48.830   1558',
'ZIEGLER        0.008 48.838   1559',
'SPAULDING      0.008 48.846   1560',
'HADLEY         0.008 48.854   1561',
'GRUBBS         0.008 48.862   1562',
'SUMNER         0.008 48.870   1563',
'MURILLO        0.008 48.878   1564',
'ZAVALA         0.008 48.886   1565',
'SHOOK          0.008 48.894   1566',
'LOCKWOOD       0.008 48.902   1567',
'JARRETT        0.008 48.910   1568',
'DRISCOLL       0.008 48.918   1569',
'DAHL           0.008 48.926   1570',
'THORPE         0.008 48.934   1571',
'SHERIDAN       0.008 48.942   1572',
'REDMOND        0.008 48.949   1573',
'PUTNAM         0.008 48.957   1574',
'MCWILLIAMS     0.008 48.965   1575',
'MCRAE          0.008 48.973   1576',
'CORNELL        0.008 48.981   1577',
'FELTON         0.008 48.989   1578',
'ROMANO         0.008 48.997   1579',
'JOINER         0.008 49.005   1580',
'SADLER         0.008 49.012   1581',
'HEDRICK        0.008 49.020   1582',
'HAGER          0.008 49.028   1583',
'HAGEN          0.008 49.036   1584',
'FITCH          0.008 49.044   1585',
'COULTER        0.008 49.052   1586',
'THACKER        0.008 49.059   1587',
'MANSFIELD      0.008 49.067   1588',
'LANGSTON       0.008 49.075   1589',
'GUIDRY         0.008 49.083   1590',
'FERREIRA       0.008 49.091   1591',
'CORLEY         0.008 49.098   1592',
'CONN           0.008 49.106   1593',
'ROSSI          0.008 49.114   1594',
'LACKEY         0.008 49.122   1595',
'CODY           0.008 49.130   1596',
'BAEZ           0.008 49.137   1597',
'SAENZ          0.008 49.145   1598',
'MCNAMARA       0.008 49.153   1599',
'DARNELL        0.008 49.160   1600',
'MICHEL         0.008 49.168   1601',
'MCMULLEN       0.008 49.176   1602',
'MCKENNA        0.008 49.184   1603',
'MCDONOUGH      0.008 49.191   1604',
'LINK           0.008 49.199   1605',
'ENGEL          0.008 49.207   1606',
'BROWNE         0.008 49.215   1607',
'ROPER          0.008 49.222   1608',
'PEACOCK        0.008 49.230   1609',
'EUBANKS        0.008 49.238   1610',
'DRUMMOND       0.008 49.245   1611',
'STRINGER       0.008 49.253   1612',
'PRITCHETT      0.008 49.261   1613',
'PARHAM         0.008 49.268   1614',
'MIMS           0.008 49.276   1615',
'LANDERS        0.008 49.284   1616',
'HAM            0.008 49.291   1617',
'GRAYSON        0.008 49.299   1618',
'STACY          0.008 49.307   1619',
'SCHAFER        0.008 49.314   1620',
'EGAN           0.008 49.322   1621',
'TIMMONS        0.008 49.330   1622',
'OHARA          0.008 49.337   1623',
'KEEN           0.008 49.345   1624',
'HAMLIN         0.008 49.353   1625',
'FINN           0.008 49.360   1626',
'CORTES         0.008 49.368   1627',
'MCNAIR         0.008 49.376   1628',
'LOUIS          0.008 49.383   1629',
'CLIFFORD       0.008 49.391   1630',
'NADEAU         0.008 49.398   1631',
'MOSELEY        0.008 49.406   1632',
'MICHAUD        0.008 49.414   1633',
'ROSEN          0.008 49.421   1634',
'OAKES          0.008 49.429   1635',
'KURTZ          0.008 49.436   1636',
'JEFFERS        0.008 49.444   1637',
'CALLOWAY       0.008 49.452   1638',
'BEAL           0.008 49.459   1639',
'BAUTISTA       0.008 49.467   1640',
'WINN           0.008 49.474   1641',
'SUGGS          0.008 49.482   1642',
'STERN          0.008 49.490   1643',
'STAPLETON      0.008 49.497   1644',
'LYLES          0.008 49.505   1645',
'LAIRD          0.008 49.512   1646',
'MONTANO        0.008 49.520   1647',
'DIAMOND        0.008 49.527   1648',
'DAWKINS        0.008 49.535   1649',
'ROLAND         0.008 49.543   1650',
'HAGAN          0.008 49.550   1651',
'GOLDMAN        0.008 49.558   1652',
'BRYSON         0.008 49.565   1653',
'BARAJAS        0.008 49.573   1654',
'LOVETT         0.008 49.580   1655',
'SEGURA         0.008 49.588   1656',
'METZ           0.008 49.595   1657',
'LOCKETT        0.008 49.603   1658',
'LANGFORD       0.008 49.610   1659',
'HINSON         0.008 49.618   1660',
'EASTMAN        0.008 49.625   1661',
'ROCK           0.008 49.633   1662',
'HOOKS          0.008 49.640   1663',
'WOODY          0.007 49.648   1664',
'SMALLWOOD      0.007 49.655   1665',
'SHAPIRO        0.007 49.663   1666',
'CROWELL        0.007 49.670   1667',
'WHALEN         0.007 49.678   1668',
'TRIPLETT       0.007 49.685   1669',
'HOOKER         0.007 49.693   1670',
'CHATMAN        0.007 49.700   1671',
'ALDRICH        0.007 49.708   1672',
'CAHILL         0.007 49.715   1673',
'YOUNGBLOOD     0.007 49.723   1674',
'YBARRA         0.007 49.730   1675',
'STALLINGS      0.007 49.738   1676',
'SHEETS         0.007 49.745   1677',
'SAMUEL         0.007 49.752   1678',
'REEDER         0.007 49.760   1679',
'PERSON         0.007 49.767   1680',
'PACK           0.007 49.775   1681',
'LACEY          0.007 49.782   1682',
'CONNELLY       0.007 49.790   1683',
'BATEMAN        0.007 49.797   1684',
'ABERNATHY      0.007 49.804   1685',
'WINKLER        0.007 49.812   1686',
'WILKES         0.007 49.819   1687',
'MASTERS        0.007 49.827   1688',
'HACKETT        0.007 49.834   1689',
'GRANGER        0.007 49.841   1690',
'GILLIS         0.007 49.849   1691',
'SCHMITZ        0.007 49.856   1692',
'SAPP           0.007 49.863   1693',
'NAPIER         0.007 49.871   1694',
'SOUZA          0.007 49.878   1695',
'LANIER         0.007 49.886   1696',
'GOMES          0.007 49.893   1697',
'WEIR           0.007 49.900   1698',
'OTERO          0.007 49.908   1699',
'LEDFORD        0.007 49.915   1700',
'BURROUGHS      0.007 49.922   1701',
'BABCOCK        0.007 49.930   1702',
'VENTURA        0.007 49.937   1703',
'SIEGEL         0.007 49.944   1704',
'DUGAN          0.007 49.952   1705',
'CLINTON        0.007 49.959   1706',
'CHRISTIE       0.007 49.966   1707',
'BLEDSOE        0.007 49.974   1708',
'ATWOOD         0.007 49.981   1709',
'WRAY           0.007 49.988   1710',
'VARNER         0.007 49.996   1711',
'SPANGLER       0.007 50.003   1712',
'OTTO           0.007 50.010   1713',
'ANAYA          0.007 50.017   1714',
'STALEY         0.007 50.025   1715',
'KRAFT          0.007 50.032   1716',
'FOURNIER       0.007 50.039   1717',
'EDDY           0.007 50.047   1718',
'BELANGER       0.007 50.054   1719',
'WOLFF          0.007 50.061   1720',
'THORNE         0.007 50.069   1721',
'BYNUM          0.007 50.076   1722',
'BURNETTE       0.007 50.083   1723',
'BOYKIN         0.007 50.090   1724',
'SWENSON        0.007 50.098   1725',
'PURVIS         0.007 50.105   1726',
'PINA           0.007 50.112   1727',
'KHAN           0.007 50.119   1728',
'DUVALL         0.007 50.127   1729',
'DARBY          0.007 50.134   1730',
'XIONG          0.007 50.141   1731',
'KAUFFMAN       0.007 50.148   1732',
'ALI            0.007 50.156   1733',
'YU             0.007 50.163   1734',
'HEALY          0.007 50.170   1735',
'ENGLE          0.007 50.177   1736',
'CORONA         0.007 50.185   1737',
'BENOIT         0.007 50.192   1738',
'VALLE          0.007 50.199   1739',
'STEINER        0.007 50.206   1740',
'SPICER         0.007 50.214   1741',
'SHAVER         0.007 50.221   1742',
'RANDLE         0.007 50.228   1743',
'LUNDY          0.007 50.235   1744',
'DOW            0.007 50.242   1745',
'CHIN           0.007 50.250   1746',
'CALVERT        0.007 50.257   1747',
'STATON         0.007 50.264   1748',
'NEFF           0.007 50.271   1749',
'KEARNEY        0.007 50.278   1750',
'DARDEN         0.007 50.286   1751',
'OAKLEY         0.007 50.293   1752',
'MEDEIROS       0.007 50.300   1753',
'MCCRACKEN      0.007 50.307   1754',
'CRENSHAW       0.007 50.314   1755',
'BLOCK          0.007 50.322   1756',
'BEAVER         0.007 50.329   1757',
'PERDUE         0.007 50.336   1758',
'DILL           0.007 50.343   1759',
'WHITTAKER      0.007 50.350   1760',
'TOBIN          0.007 50.357   1761',
'CORNELIUS      0.007 50.365   1762',
'WASHBURN       0.007 50.372   1763',
'HOGUE          0.007 50.379   1764',
'GOODRICH       0.007 50.386   1765',
'EASLEY         0.007 50.393   1766',
'BRAVO          0.007 50.400   1767',
'DENNISON       0.007 50.407   1768',
'VERA           0.007 50.414   1769',
'SHIPLEY        0.007 50.422   1770',
'KERNS          0.007 50.429   1771',
'JORGENSEN      0.007 50.436   1772',
'CRAIN          0.007 50.443   1773',
'ABEL           0.007 50.450   1774',
'VILLALOBOS     0.007 50.457   1775',
'MAURER         0.007 50.464   1776',
'LONGORIA       0.007 50.471   1777',
'KEENE          0.007 50.478   1778',
'COON           0.007 50.485   1779',
'SIERRA         0.007 50.492   1780',
'WITHERSPOON    0.007 50.499   1781',
'STAPLES        0.007 50.506   1782',
'PETTIT         0.007 50.513   1783',
'KINCAID        0.007 50.520   1784',
'EASON          0.007 50.528   1785',
'MADRID         0.007 50.535   1786',
'ECHOLS         0.007 50.542   1787',
'LUSK           0.007 50.549   1788',
'WU             0.007 50.556   1789',
'STAHL          0.007 50.563   1790',
'CURRIE         0.007 50.570   1791',
'THAYER         0.007 50.577   1792',
'SHULTZ         0.007 50.584   1793',
'SHERWOOD       0.007 50.591   1794',
'MCNALLY        0.007 50.598   1795',
'SEAY           0.007 50.604   1796',
'NORTH          0.007 50.611   1797',
'MAHER          0.007 50.618   1798',
'KENNY          0.007 50.625   1799',
'HOPE           0.007 50.632   1800',
'GAGNE          0.007 50.639   1801',
'BARROW         0.007 50.646   1802',
'NAVA           0.007 50.653   1803',
'MYLES          0.007 50.660   1804',
'MORELAND       0.007 50.667   1805',
'HONEYCUTT      0.007 50.674   1806',
'HEARN          0.007 50.681   1807',
'DIGGS          0.007 50.688   1808',
'CARON          0.007 50.695   1809',
'WHITTEN        0.007 50.702   1810',
'WESTBROOK      0.007 50.709   1811',
'STOVALL        0.007 50.716   1812',
'RAGLAND        0.007 50.723   1813',
'QUEEN          0.007 50.730   1814',
'MUNSON         0.007 50.736   1815',
'MEIER          0.007 50.743   1816',
'LOONEY         0.007 50.750   1817',
'KIMBLE         0.007 50.757   1818',
'JOLLY          0.007 50.764   1819',
'HOBSON         0.007 50.771   1820',
'LONDON         0.007 50.778   1821',
'GODDARD        0.007 50.785   1822',
'CULVER         0.007 50.792   1823',
'BURR           0.007 50.799   1824',
'PRESLEY        0.007 50.806   1825',
'NEGRON         0.007 50.813   1826',
'CONNELL        0.007 50.819   1827',
'TOVAR          0.007 50.826   1828',
'MARCUS         0.007 50.833   1829',
'HUDDLESTON     0.007 50.840   1830',
'HAMMER         0.007 50.847   1831',
'ASHBY          0.007 50.854   1832',
'SALTER         0.007 50.861   1833',
'ROOT           0.007 50.868   1834',
'PENDLETON      0.007 50.875   1835',
'OLEARY         0.007 50.881   1836',
'NICKERSON      0.007 50.888   1837',
'MYRICK         0.007 50.895   1838',
'JUDD           0.007 50.902   1839',
'JACOBSEN       0.007 50.909   1840',
'ELLIOT         0.007 50.916   1841',
'BAIN           0.007 50.923   1842',
'ADAIR          0.007 50.929   1843',
'STARNES        0.007 50.936   1844',
'SHELDON        0.007 50.943   1845',
'MATOS          0.007 50.950   1846',
'LIGHT          0.007 50.957   1847',
'BUSBY          0.007 50.964   1848',
'HERNDON        0.007 50.971   1849',
'HANLEY         0.007 50.977   1850',
'BELLAMY        0.007 50.984   1851',
'JACK           0.007 50.991   1852',
'DOTY           0.007 50.998   1853',
'BARTLEY        0.007 51.005   1854',
'YAZZIE         0.007 51.011   1855',
'ROWELL         0.007 51.018   1856',
'PARSON         0.007 51.025   1857',
'GIFFORD        0.007 51.032   1858',
'CULLEN         0.007 51.039   1859',
'CHRISTIANSEN   0.007 51.045   1860',
'BENAVIDES      0.007 51.052   1861',
'BARNHART       0.007 51.059   1862',
'TALBOT         0.007 51.066   1863',
'MOCK           0.007 51.072   1864',
'CRANDALL       0.007 51.079   1865',
'CONNORS        0.007 51.086   1866',
'BONDS          0.007 51.093   1867',
'WHITT          0.007 51.099   1868',
'GAGE           0.007 51.106   1869',
'BERGMAN        0.007 51.113   1870',
'ARREDONDO      0.007 51.120   1871',
'ADDISON        0.007 51.126   1872',
'MARION         0.007 51.133   1873',
'LUJAN          0.007 51.140   1874',
'DOWDY          0.007 51.147   1875',
'JERNIGAN       0.007 51.153   1876',
'HUYNH          0.007 51.160   1877',
'BOUCHARD       0.007 51.167   1878',
'DUTTON         0.007 51.173   1879',
'RHOADES        0.007 51.180   1880',
'OUELLETTE      0.007 51.187   1881',
'KISER          0.007 51.193   1882',
'RUBIN          0.007 51.200   1883',
'HERRINGTON     0.007 51.207   1884',
'HARE           0.007 51.213   1885',
'DENNY          0.007 51.220   1886',
'BLACKMAN       0.007 51.227   1887',
'BABB           0.007 51.233   1888',
'ALLRED         0.007 51.240   1889',
'RUDD           0.007 51.247   1890',
'PAULSON        0.007 51.253   1891',
'OGDEN          0.007 51.260   1892',
'KOENIG         0.007 51.267   1893',
'JACOB          0.007 51.273   1894',
'IRVING         0.007 51.280   1895',
'GEIGER         0.007 51.287   1896',
'BEGAY          0.007 51.293   1897',
'PARRA          0.007 51.300   1898',
'CHAMPION       0.007 51.306   1899',
'LASSITER       0.007 51.313   1900',
'HAWK           0.007 51.320   1901',
'ESPOSITO       0.007 51.326   1902',
'CHO            0.007 51.333   1903',
'WALDRON        0.007 51.340   1904',
'VERNON         0.007 51.346   1905',
'RANSOM         0.007 51.353   1906',
'PRATHER        0.007 51.359   1907',
'KEENAN         0.007 51.366   1908',
'JEAN           0.007 51.373   1909',
'GROVER         0.007 51.379   1910',
'CHACON         0.007 51.386   1911',
'VICK           0.007 51.392   1912',
'SANDS          0.007 51.399   1913',
'ROARK          0.007 51.405   1914',
'PARR           0.007 51.412   1915',
'MAYBERRY       0.007 51.419   1916',
'GREENBERG      0.007 51.425   1917',
'COLEY          0.007 51.432   1918',
'BRUNER         0.007 51.438   1919',
'WHITMAN        0.007 51.445   1920',
'SKAGGS         0.007 51.451   1921',
'SHIPMAN        0.007 51.458   1922',
'MEANS          0.007 51.465   1923',
'LEARY          0.007 51.471   1924',
'HUTTON         0.007 51.478   1925',
'ROMO           0.007 51.484   1926',
'MEDRANO        0.007 51.491   1927',
'LADD           0.007 51.497   1928',
'KRUSE          0.007 51.504   1929',
'FRIEND         0.007 51.511   1930',
'DARLING        0.007 51.517   1931',
'ASKEW          0.007 51.524   1932',
'VALENTIN       0.007 51.530   1933',
'SCHULZ         0.007 51.537   1934',
'ALFARO         0.007 51.543   1935',
'TABOR          0.007 51.550   1936',
'MOHR           0.007 51.556   1937',
'GALLO          0.007 51.563   1938',
'BERMUDEZ       0.007 51.569   1939',
'PEREIRA        0.007 51.576   1940',
'ISAAC          0.007 51.582   1941',
'BLISS          0.007 51.589   1942',
'REAVES         0.006 51.595   1943',
'FLINT          0.006 51.602   1944',
'COMER          0.006 51.608   1945',
'BOSTON         0.006 51.615   1946',
'WOODALL        0.006 51.621   1947',
'NAQUIN         0.006 51.628   1948',
'GUEVARA        0.006 51.634   1949',
'EARL           0.006 51.641   1950',
'DELONG         0.006 51.647   1951',
'CARRIER        0.006 51.654   1952',
'PICKENS        0.006 51.660   1953',
'BRAND          0.006 51.666   1954',
'TILLEY         0.006 51.673   1955',
'SCHAFFER       0.006 51.679   1956',
'READ           0.006 51.686   1957',
'LIM            0.006 51.692   1958',
'KNUTSON        0.006 51.699   1959',
'FENTON         0.006 51.705   1960',
'DORAN          0.006 51.712   1961',
'CHU            0.006 51.718   1962',
'VOGT           0.006 51.724   1963',
'VANN           0.006 51.731   1964',
'PRESCOTT       0.006 51.737   1965',
'MCLAIN         0.006 51.744   1966',
'LANDIS         0.006 51.750   1967',
'CORCORAN       0.006 51.757   1968',
'AMBROSE        0.006 51.763   1969',
'ZAPATA         0.006 51.769   1970',
'HYATT          0.006 51.776   1971',
'HEMPHILL       0.006 51.782   1972',
'FAULK          0.006 51.789   1973',
'CALL           0.006 51.795   1974',
'DOVE           0.006 51.801   1975',
'BOUDREAUX      0.006 51.808   1976',
'ARAGON         0.006 51.814   1977',
'WHITLOCK       0.006 51.821   1978',
'TREJO          0.006 51.827   1979',
'TACKETT        0.006 51.833   1980',
'SHEARER        0.006 51.840   1981',
'SALDANA        0.006 51.846   1982',
'HANKS          0.006 51.852   1983',
'GOLD           0.006 51.859   1984',
'DRIVER         0.006 51.865   1985',
'MCKINNON       0.006 51.871   1986',
'KOEHLER        0.006 51.878   1987',
'CHAMPAGNE      0.006 51.884   1988',
'BOURGEOIS      0.006 51.891   1989',
'POOL           0.006 51.897   1990',
'KEYES          0.006 51.903   1991',
'GOODSON        0.006 51.910   1992',
'FOOTE          0.006 51.916   1993',
'EARLY          0.006 51.922   1994',
'LUNSFORD       0.006 51.929   1995',
'GOLDSMITH      0.006 51.935   1996',
'FLOOD          0.006 51.941   1997',
'WINSLOW        0.006 51.948   1998',
'SAMS           0.006 51.954   1999',
'REAGAN         0.006 51.960   2000',
'MCCLOUD        0.006 51.967   2001',
'HOUGH          0.006 51.973   2002',
'ESQUIVEL       0.006 51.979   2003',
'NAYLOR         0.006 51.985   2004',
'LOOMIS         0.006 51.992   2005',
'CORONADO       0.006 51.998   2006',
'LUDWIG         0.006 52.004   2007',
'BRASWELL       0.006 52.011   2008',
'BEARDEN        0.006 52.017   2009',
'SHERRILL       0.006 52.023   2010',
'HUANG          0.006 52.029   2011',
'FAGAN          0.006 52.036   2012',
'EZELL          0.006 52.042   2013',
'EDMONDSON      0.006 52.048   2014',
'CYR            0.006 52.054   2015',
'CRONIN         0.006 52.061   2016',
'NUNN           0.006 52.067   2017',
'LEMON          0.006 52.073   2018',
'GUILLORY       0.006 52.079   2019',
'GRIER          0.006 52.086   2020',
'DUBOSE         0.006 52.092   2021',
'TRAYLOR        0.006 52.098   2022',
'RYDER          0.006 52.104   2023',
'DOBBINS        0.006 52.111   2024',
'COYLE          0.006 52.117   2025',
'APONTE         0.006 52.123   2026',
'WHITMORE       0.006 52.129   2027',
'SMALLS         0.006 52.136   2028',
'ROWAN          0.006 52.142   2029',
'MALLOY         0.006 52.148   2030',
'CARDONA        0.006 52.154   2031',
'BRAXTON        0.006 52.160   2032',
'BORDEN         0.006 52.167   2033',
'HUMPHRIES      0.006 52.173   2034',
'CARRASCO       0.006 52.179   2035',
'RUFF           0.006 52.185   2036',
'METZGER        0.006 52.191   2037',
'HUNTLEY        0.006 52.198   2038',
'HINOJOSA       0.006 52.204   2039',
'FINNEY         0.006 52.210   2040',
'MADSEN         0.006 52.216   2041',
'HONG           0.006 52.222   2042',
'HILLS          0.006 52.228   2043',
'ERNST          0.006 52.235   2044',
'DOZIER         0.006 52.241   2045',
'BURKHART       0.006 52.247   2046',
'BOWSER         0.006 52.253   2047',
'PERALTA        0.006 52.259   2048',
'DAIGLE         0.006 52.265   2049',
'WHITTINGTON    0.006 52.272   2050',
'SORENSON       0.006 52.278   2051',
'SAUCEDO        0.006 52.284   2052',
'ROCHE          0.006 52.290   2053',
'REDDING        0.006 52.296   2054',
'LOYD           0.006 52.302   2055',
'FUGATE         0.006 52.308   2056',
'AVALOS         0.006 52.315   2057',
'WAITE          0.006 52.321   2058',
'LIND           0.006 52.327   2059',
'HUSTON         0.006 52.333   2060',
'HAY            0.006 52.339   2061',
'BENEDICT       0.006 52.345   2062',
'HAWTHORNE      0.006 52.351   2063',
'HAMBY          0.006 52.357   2064',
'BOYLES         0.006 52.363   2065',
'BOLES          0.006 52.370   2066',
'REGAN          0.006 52.376   2067',
'FAUST          0.006 52.382   2068',
'CROOK          0.006 52.388   2069',
'BEAM           0.006 52.394   2070',
'BARGER         0.006 52.400   2071',
'HINDS          0.006 52.406   2072',
'GALLARDO       0.006 52.412   2073',
'ELIAS          0.006 52.418   2074',
'WILLOUGHBY     0.006 52.424   2075',
'WILLINGHAM     0.006 52.430   2076',
'WILBURN        0.006 52.436   2077',
'ECKERT         0.006 52.442   2078',
'BUSCH          0.006 52.448   2079',
'ZEPEDA         0.006 52.455   2080',
'WORTHINGTON    0.006 52.461   2081',
'TINSLEY        0.006 52.467   2082',
'RUSS           0.006 52.473   2083',
'LI             0.006 52.479   2084',
'HOFF           0.006 52.485   2085',
'HAWLEY         0.006 52.491   2086',
'CARMONA        0.006 52.497   2087',
'VARELA         0.006 52.503   2088',
'RECTOR         0.006 52.509   2089',
'NEWCOMB        0.006 52.515   2090',
'MALLORY        0.006 52.521   2091',
'KINSEY         0.006 52.527   2092',
'DUBE           0.006 52.533   2093',
'WHATLEY        0.006 52.539   2094',
'STRANGE        0.006 52.545   2095',
'RAGSDALE       0.006 52.551   2096',
'IVY            0.006 52.557   2097',
'BERNSTEIN      0.006 52.563   2098',
'BECERRA        0.006 52.569   2099',
'YOST           0.006 52.575   2100',
'MATTSON        0.006 52.581   2101',
'LY             0.006 52.587   2102',
'FELDER         0.006 52.593   2103',
'CHEEK          0.006 52.599   2104',
'LUKE           0.006 52.605   2105',
'HANDY          0.006 52.611   2106',
'GROSSMAN       0.006 52.617   2107',
'GAUTHIER       0.006 52.623   2108',
'ESCOBEDO       0.006 52.629   2109',
'BRADEN         0.006 52.635   2110',
'BECKMAN        0.006 52.641   2111',
'MOTT           0.006 52.647   2112',
'HILLMAN        0.006 52.653   2113',
'GIL            0.006 52.659   2114',
'FLAHERTY       0.006 52.665   2115',
'DYKES          0.006 52.671   2116',
'DOE            0.006 52.677   2117',
'STOCKTON       0.006 52.683   2118',
'STEARNS        0.006 52.688   2119',
'LOFTON         0.006 52.694   2120',
'KITCHEN        0.006 52.700   2121',
'COATS          0.006 52.706   2122',
'CAVAZOS        0.006 52.712   2123',
'BEAVERS        0.006 52.718   2124',
'BARRIOS        0.006 52.724   2125',
'TANG           0.006 52.730   2126',
'PARISH         0.006 52.736   2127',
'MOSHER         0.006 52.742   2128',
'LINCOLN        0.006 52.748   2129',
'CARDWELL       0.006 52.754   2130',
'COLES          0.006 52.760   2131',
'BURNHAM        0.006 52.766   2132',
'WELLER         0.006 52.772   2133',
'LEMONS         0.006 52.777   2134',
'BEEBE          0.006 52.783   2135',
'AGUILERA       0.006 52.789   2136',
'RING           0.006 52.795   2137',
'PARNELL        0.006 52.801   2138',
'HARMAN         0.006 52.807   2139',
'COUTURE        0.006 52.813   2140',
'ALLEY          0.006 52.819   2141',
'SCHUMACHER     0.006 52.825   2142',
'REDD           0.006 52.830   2143',
'DOBBS          0.006 52.836   2144',
'BLUM           0.006 52.842   2145',
'BLALOCK        0.006 52.848   2146',
'MERCHANT       0.006 52.854   2147',
'ENNIS          0.006 52.860   2148',
'DENSON         0.006 52.866   2149',
'COTTRELL       0.006 52.871   2150',
'CHESTER        0.006 52.877   2151',
'BRANNON        0.006 52.883   2152',
'BAGLEY         0.006 52.889   2153',
'AVILES         0.006 52.895   2154',
'WATT           0.006 52.901   2155',
'SOUSA          0.006 52.906   2156',
'ROSENTHAL      0.006 52.912   2157',
'ROONEY         0.006 52.918   2158',
'DIETZ          0.006 52.924   2159',
'BLANK          0.006 52.930   2160',
'PAQUETTE       0.006 52.936   2161',
'MCCLELLAND     0.006 52.941   2162',
'DUFF           0.006 52.947   2163',
'VELASCO        0.006 52.953   2164',
'LENTZ          0.006 52.959   2165',
'GRUBB          0.006 52.965   2166',
'BURROWS        0.006 52.970   2167',
'BARBOUR        0.006 52.976   2168',
'ULRICH         0.006 52.982   2169',
'SHOCKLEY       0.006 52.988   2170',
'RADER          0.006 52.994   2171',
'GERMAN         0.006 52.999   2172',
'BEYER          0.006 53.005   2173',
'MIXON          0.006 53.011   2174',
'LAYTON         0.006 53.017   2175',
'ALTMAN         0.006 53.022   2176',
'ALONZO         0.006 53.028   2177',
'WEATHERS       0.006 53.034   2178',
'TITUS          0.006 53.040   2179',
'STONER         0.006 53.046   2180',
'SQUIRES        0.006 53.051   2181',
'SHIPP          0.006 53.057   2182',
'PRIEST         0.006 53.063   2183',
'LIPSCOMB       0.006 53.069   2184',
'CUTLER         0.006 53.074   2185',
'CABALLERO      0.006 53.080   2186',
'ZIMMER         0.006 53.086   2187',
'WILLETT        0.006 53.092   2188',
'THURSTON       0.006 53.097   2189',
'STOREY         0.006 53.103   2190',
'MEDLEY         0.006 53.109   2191',
'LYLE           0.006 53.114   2192',
'EPPERSON       0.006 53.120   2193',
'SHAH           0.006 53.126   2194',
'MCMILLIAN      0.006 53.132   2195',
'BAGGETT        0.006 53.137   2196',
'TORREZ         0.006 53.143   2197',
'LAWS           0.006 53.149   2198',
'HIRSCH         0.006 53.155   2199',
'DENT           0.006 53.160   2200',
'COREY          0.006 53.166   2201',
'POIRIER        0.006 53.172   2202',
'PEACHEY        0.006 53.177   2203',
'JACQUES        0.006 53.183   2204',
'FARRAR         0.006 53.189   2205',
'CREECH         0.006 53.194   2206',
'BARTH          0.006 53.200   2207',
'TRIMBLE        0.006 53.206   2208',
'FRANCE         0.006 53.211   2209',
'DUPRE          0.006 53.217   2210',
'ALBRECHT       0.006 53.223   2211',
'SAMPLE         0.006 53.228   2212',
'LAWLER         0.006 53.234   2213',
'CRISP          0.006 53.240   2214',
'CONROY         0.006 53.245   2215',
'CHADWICK       0.006 53.251   2216',
'WETZEL         0.006 53.257   2217',
'NESBITT        0.006 53.262   2218',
'MURRY          0.006 53.268   2219',
'JAMESON        0.006 53.274   2220',
'WILHELM        0.006 53.279   2221',
'PATTEN         0.006 53.285   2222',
'MINTON         0.006 53.291   2223',
'MATSON         0.006 53.296   2224',
'KIMBROUGH      0.006 53.302   2225',
'IVERSON        0.006 53.307   2226',
'GUINN          0.006 53.313   2227',
'GALE           0.006 53.319   2228',
'FORTUNE        0.006 53.324   2229',
'CROFT          0.006 53.330   2230',
'TOTH           0.006 53.336   2231',
'PULLIAM        0.006 53.341   2232',
'NUGENT         0.006 53.347   2233',
'NEWBY          0.006 53.352   2234',
'LITTLEJOHN     0.006 53.358   2235',
'DIAS           0.006 53.364   2236',
'CANALES        0.006 53.369   2237',
'BERNIER        0.006 53.375   2238',
'BARON          0.006 53.380   2239',
'BARNEY         0.006 53.386   2240',
'SINGLETARY     0.006 53.392   2241',
'RENTERIA       0.006 53.397   2242',
'PRUETT         0.006 53.403   2243',
'MCHUGH         0.006 53.408   2244',
'MABRY          0.006 53.414   2245',
'LANDRUM        0.006 53.420   2246',
'BROWER         0.006 53.425   2247',
'WELDON         0.006 53.431   2248',
'STODDARD       0.006 53.436   2249',
'RUTH           0.006 53.442   2250',
'CAGLE          0.006 53.448   2251',
'STJOHN         0.006 53.453   2252',
'SCALES         0.006 53.459   2253',
'KOHLER         0.006 53.464   2254',
'KELLOGG        0.006 53.470   2255',
'HOPSON         0.006 53.475   2256',
'GANT           0.006 53.481   2257',
'THARP          0.006 53.486   2258',
'GANN           0.006 53.492   2259',
'ZEIGLER        0.006 53.498   2260',
'PRINGLE        0.006 53.503   2261',
'HAMMONS        0.006 53.509   2262',
'FAIRCHILD      0.006 53.514   2263',
'DEATON         0.006 53.520   2264',
'CHAVIS         0.006 53.525   2265',
'CARNES         0.006 53.531   2266',
'ROWLEY         0.006 53.536   2267',
'MATLOCK        0.006 53.542   2268',
'LIBBY          0.006 53.547   2269',
'KEARNS         0.006 53.553   2270',
'IRIZARRY       0.006 53.558   2271',
'CARRINGTON     0.006 53.564   2272',
'STARKEY        0.006 53.569   2273',
'PEPPER         0.006 53.575   2274',
'LOPES          0.006 53.580   2275',
'JARRELL        0.006 53.586   2276',
'FAY            0.006 53.591   2277',
'CRAVEN         0.006 53.597   2278',
'BEVERLY        0.006 53.602   2279',
'BAUM           0.006 53.608   2280',
'SPAIN          0.005 53.613   2281',
'LITTLEFIELD    0.005 53.619   2282',
'LINN           0.005 53.624   2283',
'HUMPHREYS      0.005 53.630   2284',
'HOOK           0.005 53.635   2285',
'HIGH           0.005 53.641   2286',
'ETHERIDGE      0.005 53.646   2287',
'CUELLAR        0.005 53.652   2288',
'CHASTAIN       0.005 53.657   2289',
'CHANCE         0.005 53.663   2290',
'BUNDY          0.005 53.668   2291',
'SPEER          0.005 53.674   2292',
'SKELTON        0.005 53.679   2293',
'QUIROZ         0.005 53.685   2294',
'PYLE           0.005 53.690   2295',
'PORTILLO       0.005 53.696   2296',
'PONDER         0.005 53.701   2297',
'MOULTON        0.005 53.706   2298',
'MACHADO        0.005 53.712   2299',
'LIU            0.005 53.717   2300',
'KILLIAN        0.005 53.723   2301',
'HUTSON         0.005 53.728   2302',
'HITCHCOCK      0.005 53.734   2303',
'ELLSWORTH      0.005 53.739   2304',
'DOWLING        0.005 53.745   2305',
'CLOUD          0.005 53.750   2306',
'BURDICK        0.005 53.756   2307',
'SPANN          0.005 53.761   2308',
'PEDERSEN       0.005 53.767   2309',
'LEVIN          0.005 53.772   2310',
'LEGGETT        0.005 53.778   2311',
'HAYWARD        0.005 53.783   2312',
'HACKER         0.005 53.788   2313',
'DIETRICH       0.005 53.794   2314',
'BEAULIEU       0.005 53.799   2315',
'BARKSDALE      0.005 53.805   2316',
'WAKEFIELD      0.005 53.810   2317',
'SNOWDEN        0.005 53.816   2318',
'PARIS          0.005 53.821   2319',
'BRISCOE        0.005 53.827   2320',
'BOWIE          0.005 53.832   2321',
'BERMAN         0.005 53.837   2322',
'OGLE           0.005 53.843   2323',
'MCGREGOR       0.005 53.848   2324',
'LAUGHLIN       0.005 53.854   2325',
'HELM           0.005 53.859   2326',
'BURDEN         0.005 53.864   2327',
'WHEATLEY       0.005 53.870   2328',
'SCHREIBER      0.005 53.875   2329',
'PRESSLEY       0.005 53.881   2330',
'PARRIS         0.005 53.886   2331',
'NG             0.005 53.892   2332',
'ALANIZ         0.005 53.897   2333',
'AGEE           0.005 53.902   2334',
'URBAN          0.005 53.908   2335',
'SWANN          0.005 53.913   2336',
'SNODGRASS      0.005 53.919   2337',
'SCHUSTER       0.005 53.924   2338',
'RADFORD        0.005 53.929   2339',
'MONK           0.005 53.935   2340',
'MATTINGLY      0.005 53.940   2341',
'MAIN           0.005 53.945   2342',
'LAMAR          0.005 53.951   2343',
'HARP           0.005 53.956   2344',
'GIRARD         0.005 53.962   2345',
'CHENEY         0.005 53.967   2346',
'YANCEY         0.005 53.972   2347',
'WAGONER        0.005 53.978   2348',
'RIDLEY         0.005 53.983   2349',
'LOMBARDO       0.005 53.988   2350',
'LAU            0.005 53.994   2351',
'HUDGINS        0.005 53.999   2352',
'GASKINS        0.005 54.005   2353',
'DUCKWORTH      0.005 54.010   2354',
'COE            0.005 54.015   2355',
'COBURN         0.005 54.021   2356',
'WILLEY         0.005 54.026   2357',
'PRADO          0.005 54.031   2358',
'NEWBERRY       0.005 54.037   2359',
'MAGANA         0.005 54.042   2360',
'HAMMONDS       0.005 54.048   2361',
'ELAM           0.005 54.053   2362',
'WHIPPLE        0.005 54.058   2363',
'SLADE          0.005 54.064   2364',
'SERNA          0.005 54.069   2365',
'OJEDA          0.005 54.074   2366',
'LILES          0.005 54.080   2367',
'DORMAN         0.005 54.085   2368',
'DIEHL          0.005 54.090   2369',
'ANGEL          0.005 54.096   2370',
'UPTON          0.005 54.101   2371',
'REARDON        0.005 54.106   2372',
'MICHAELS       0.005 54.112   2373',
'KELSEY         0.005 54.117   2374',
'GOETZ          0.005 54.122   2375',
'ELLER          0.005 54.128   2376',
'BAUMAN         0.005 54.133   2377',
'BAER           0.005 54.138   2378',
'AUGUSTINE      0.005 54.144   2379',
'LAYNE          0.005 54.149   2380',
'HUMMEL         0.005 54.154   2381',
'BRENNER        0.005 54.159   2382',
'AMAYA          0.005 54.165   2383',
'ADAMSON        0.005 54.170   2384',
'ORNELAS        0.005 54.175   2385',
'DOWELL         0.005 54.181   2386',
'CLOUTIER       0.005 54.186   2387',
'CHRISTY        0.005 54.191   2388',
'CASTELLANOS    0.005 54.197   2389',
'WING           0.005 54.202   2390',
'WELLMAN        0.005 54.207   2391',
'SAYLOR         0.005 54.212   2392',
'OROURKE        0.005 54.218   2393',
'MOYA           0.005 54.223   2394',
'MONTALVO       0.005 54.228   2395',
'KILPATRICK     0.005 54.234   2396',
'HARLEY         0.005 54.239   2397',
'DURBIN         0.005 54.244   2398',
'SHELL          0.005 54.249   2399',
'OLDHAM         0.005 54.255   2400',
'KANG           0.005 54.260   2401',
'GARVIN         0.005 54.265   2402',
'FOSS           0.005 54.270   2403',
'BRANHAM        0.005 54.276   2404',
'BARTHOLOMEW    0.005 54.281   2405',
'TEMPLETON      0.005 54.286   2406',
'MAGUIRE        0.005 54.291   2407',
'HOLTON         0.005 54.297   2408',
'ALONSO         0.005 54.302   2409',
'RIDER          0.005 54.307   2410',
'MONAHAN        0.005 54.312   2411',
'MCCORMACK      0.005 54.318   2412',
'BEATY          0.005 54.323   2413',
'ANDERS         0.005 54.328   2414',
'STREETER       0.005 54.333   2415',
'NIETO          0.005 54.338   2416',
'NIELSON        0.005 54.344   2417',
'MOFFETT        0.005 54.349   2418',
'LANKFORD       0.005 54.354   2419',
'KEATING        0.005 54.359   2420',
'HECK           0.005 54.365   2421',
'GATLIN         0.005 54.370   2422',
'DELATORRE      0.005 54.375   2423',
'CALLAWAY       0.005 54.380   2424',
'ADCOCK         0.005 54.385   2425',
'WORRELL        0.005 54.391   2426',
'UNGER          0.005 54.396   2427',
'ROBINETTE      0.005 54.401   2428',
'NOWAK          0.005 54.406   2429',
'JETER          0.005 54.411   2430',
'BRUNNER        0.005 54.417   2431',
'ASHTON         0.005 54.422   2432',
'STEEN          0.005 54.427   2433',
'PARROTT        0.005 54.432   2434',
'OVERSTREET     0.005 54.437   2435',
'NOBLES         0.005 54.443   2436',
'MONTANEZ       0.005 54.448   2437',
'LUTHER         0.005 54.453   2438',
'CLEVENGER      0.005 54.458   2439',
'BRINKLEY       0.005 54.463   2440',
'TRAHAN         0.005 54.468   2441',
'QUARLES        0.005 54.474   2442',
'PICKERING      0.005 54.479   2443',
'PEDERSON       0.005 54.484   2444',
'JANSEN         0.005 54.489   2445',
'GRANTHAM       0.005 54.494   2446',
'GILCHRIST      0.005 54.499   2447',
'CRESPO         0.005 54.505   2448',
'AIKEN          0.005 54.510   2449',
'SCHELL         0.005 54.515   2450',
'SCHAEFFER      0.005 54.520   2451',
'LORENZ         0.005 54.525   2452',
'LEYVA          0.005 54.530   2453',
'HARMS          0.005 54.536   2454',
'DYSON          0.005 54.541   2455',
'WALLIS         0.005 54.546   2456',
'PEASE          0.005 54.551   2457',
'LEAVITT        0.005 54.556   2458',
'HYMAN          0.005 54.561   2459',
'CHENG          0.005 54.566   2460',
'CAVANAUGH      0.005 54.571   2461',
'BATTS          0.005 54.577   2462',
'WARDEN         0.005 54.582   2463',
'SEAMAN         0.005 54.587   2464',
'ROCKWELL       0.005 54.592   2465',
'QUEZADA        0.005 54.597   2466',
'PAXTON         0.005 54.602   2467',
'LINDER         0.005 54.607   2468',
'HOUCK          0.005 54.612   2469',
'FONTAINE       0.005 54.618   2470',
'DURANT         0.005 54.623   2471',
'CARUSO         0.005 54.628   2472',
'ADLER          0.005 54.633   2473',
'PIMENTEL       0.005 54.638   2474',
'MIZE           0.005 54.643   2475',
'LYTLE          0.005 54.648   2476',
'DONALD         0.005 54.653   2477',
'CLEARY         0.005 54.658   2478',
'CASON          0.005 54.664   2479',
'ACKER          0.005 54.669   2480',
'SWITZER        0.005 54.674   2481',
'SALMON         0.005 54.679   2482',
'ISAACS         0.005 54.684   2483',
'HIGGINBOTHAM   0.005 54.689   2484',
'HAN            0.005 54.694   2485',
'WATERMAN       0.005 54.699   2486',
'VANDYKE        0.005 54.704   2487',
'STAMPER        0.005 54.709   2488',
'SISK           0.005 54.714   2489',
'SHULER         0.005 54.719   2490',
'RIDDICK        0.005 54.724   2491',
'REDMAN         0.005 54.730   2492',
'MCMAHAN        0.005 54.735   2493',
'LEVESQUE       0.005 54.740   2494',
'HATTON         0.005 54.745   2495',
'BRONSON        0.005 54.750   2496',
'BOLLINGER      0.005 54.755   2497',
'ARNETT         0.005 54.760   2498',
'OKEEFE         0.005 54.765   2499',
'GERBER         0.005 54.770   2500',
'GANNON         0.005 54.775   2501',
'FARNSWORTH     0.005 54.780   2502',
'BAUGHMAN       0.005 54.785   2503',
'SILVERMAN      0.005 54.790   2504',
'SATTERFIELD    0.005 54.795   2505',
'ROYAL          0.005 54.800   2506',
'MCCRARY        0.005 54.805   2507',
'KOWALSKI       0.005 54.810   2508',
'JOY            0.005 54.816   2509',
'GRIGSBY        0.005 54.821   2510',
'GRECO          0.005 54.826   2511',
'CABRAL         0.005 54.831   2512',
'TROUT          0.005 54.836   2513',
'RINEHART       0.005 54.841   2514',
'MAHON          0.005 54.846   2515',
'LINTON         0.005 54.851   2516',
'GOODEN         0.005 54.856   2517',
'CURLEY         0.005 54.861   2518',
'BAUGH          0.005 54.866   2519',
'WYMAN          0.005 54.871   2520',
'WEINER         0.005 54.876   2521',
'SCHWAB         0.005 54.881   2522',
'SCHULER        0.005 54.886   2523',
'MORRISSEY      0.005 54.891   2524',
'MAHAN          0.005 54.896   2525',
'COY            0.005 54.901   2526',
'BUNN           0.005 54.906   2527',
'ANDREW         0.005 54.911   2528',
'THRASHER       0.005 54.916   2529',
'SPEAR          0.005 54.921   2530',
'WAGGONER       0.005 54.926   2531',
'SHELLEY        0.005 54.931   2532',
'ROBERT         0.005 54.936   2533',
'QUALLS         0.005 54.941   2534',
'PURDY          0.005 54.946   2535',
'MCWHORTER      0.005 54.951   2536',
'MAULDIN        0.005 54.956   2537',
'MARK           0.005 54.961   2538',
'JORDON         0.005 54.966   2539',
'GILMAN         0.005 54.971   2540',
'PERRYMAN       0.005 54.976   2541',
'NEWSOM         0.005 54.981   2542',
'MENARD         0.005 54.985   2543',
'MARTINO        0.005 54.990   2544',
'GRAF           0.005 54.995   2545',
'BILLINGSLEY    0.005 55.000   2546',
'ARTIS          0.005 55.005   2547',
'SIMPKINS       0.005 55.010   2548',
'SALISBURY      0.005 55.015   2549',
'QUINTANILLA    0.005 55.020   2550',
'GILLILAND      0.005 55.025   2551',
'FRALEY         0.005 55.030   2552',
'FOUST          0.005 55.035   2553',
'CROUSE         0.005 55.040   2554',
'SCARBOROUGH    0.005 55.045   2555',
'NGO            0.005 55.050   2556',
'GRISSOM        0.005 55.055   2557',
'FULTZ          0.005 55.060   2558',
'RICO           0.005 55.065   2559',
'MARLOW         0.005 55.069   2560',
'MARKHAM        0.005 55.074   2561',
'MADRIGAL       0.005 55.079   2562',
'LAWTON         0.005 55.084   2563',
'BARFIELD       0.005 55.089   2564',
'WHITING        0.005 55.094   2565',
'VARNEY         0.005 55.099   2566',
'SCHWARZ        0.005 55.104   2567',
'HUEY           0.005 55.109   2568',
'GOOCH          0.005 55.114   2569',
'ARCE           0.005 55.119   2570',
'WHEAT          0.005 55.123   2571',
'TRUONG         0.005 55.128   2572',
'POULIN         0.005 55.133   2573',
'MACKENZIE      0.005 55.138   2574',
'LEONE          0.005 55.143   2575',
'HURTADO        0.005 55.148   2576',
'SELBY          0.005 55.153   2577',
'GAITHER        0.005 55.158   2578',
'FORTNER        0.005 55.162   2579',
'CULPEPPER      0.005 55.167   2580',
'COUGHLIN       0.005 55.172   2581',
'BRINSON        0.005 55.177   2582',
'BOUDREAU       0.005 55.182   2583',
'BARKLEY        0.005 55.187   2584',
'BALES          0.005 55.192   2585',
'STEPP          0.005 55.196   2586',
'HOLM           0.005 55.201   2587',
'TAN            0.005 55.206   2588',
'SCHILLING      0.005 55.211   2589',
'MORRELL        0.005 55.216   2590',
'KAHN           0.005 55.221   2591',
'HEATON         0.005 55.225   2592',
'GAMEZ          0.005 55.230   2593',
'DOUGLASS       0.005 55.235   2594',
'CAUSEY         0.005 55.240   2595',
'BROTHERS       0.005 55.245   2596',
'TURPIN         0.005 55.250   2597',
'SHANKS         0.005 55.254   2598',
'SCHRADER       0.005 55.259   2599',
'MEEK           0.005 55.264   2600',
'ISOM           0.005 55.269   2601',
'HARDISON       0.005 55.274   2602',
'CARRANZA       0.005 55.278   2603',
'YANEZ          0.005 55.283   2604',
'WAY            0.005 55.288   2605',
'SCROGGINS      0.005 55.293   2606',
'SCHOFIELD      0.005 55.298   2607',
'RUNYON         0.005 55.302   2608',
'RATCLIFF       0.005 55.307   2609',
'MURRELL        0.005 55.312   2610',
'MOELLER        0.005 55.317   2611',
'IRBY           0.005 55.322   2612',
'CURRIER        0.005 55.326   2613',
'BUTTERFIELD    0.005 55.331   2614',
'YEE            0.005 55.336   2615',
'RALSTON        0.005 55.341   2616',
'PULLEN         0.005 55.346   2617',
'PINSON         0.005 55.350   2618',
'ESTEP          0.005 55.355   2619',
'EAST           0.005 55.360   2620',
'CARBONE        0.005 55.365   2621',
'LANCE          0.005 55.370   2622',
'HAWKS          0.005 55.374   2623',
'ELLINGTON      0.005 55.379   2624',
'CASILLAS       0.005 55.384   2625',
'SPURLOCK       0.005 55.389   2626',
'SIKES          0.005 55.393   2627',
'MOTLEY         0.005 55.398   2628',
'MCCARTNEY      0.005 55.403   2629',
'KRUGER         0.005 55.408   2630',
'ISBELL         0.005 55.412   2631',
'HOULE          0.005 55.417   2632',
'FRANCISCO      0.005 55.422   2633',
'BURK           0.005 55.427   2634',
'BONE           0.005 55.431   2635',
'TOMLIN         0.005 55.436   2636',
'SHELBY         0.005 55.441   2637',
'QUIGLEY        0.005 55.446   2638',
'NEUMANN        0.005 55.450   2639',
'LOVELACE       0.005 55.455   2640',
'FENNELL        0.005 55.460   2641',
'COLBY          0.005 55.465   2642',
'CHEATHAM       0.005 55.469   2643',
'BUSTAMANTE     0.005 55.474   2644',
'SKIDMORE       0.005 55.479   2645',
'HIDALGO        0.005 55.483   2646',
'FORMAN         0.005 55.488   2647',
'CULP           0.005 55.493   2648',
'BOWENS         0.005 55.498   2649',
'BETANCOURT     0.005 55.502   2650',
'AQUINO         0.005 55.507   2651',
'ROBB           0.005 55.512   2652',
'REA            0.005 55.516   2653',
'MILNER         0.005 55.521   2654',
'MARTEL         0.005 55.526   2655',
'GRESHAM        0.005 55.531   2656',
'WILES          0.005 55.535   2657',
'RICKETTS       0.005 55.540   2658',
'GAVIN          0.005 55.545   2659',
'DOWD           0.005 55.549   2660',
'COLLAZO        0.005 55.554   2661',
'BOSTIC         0.005 55.559   2662',
'BLAKELY        0.005 55.563   2663',
'SHERROD        0.005 55.568   2664',
'POWER          0.005 55.573   2665',
'KENYON         0.005 55.577   2666',
'GANDY          0.005 55.582   2667',
'EBERT          0.005 55.587   2668',
'DELOACH        0.005 55.591   2669',
'CARY           0.005 55.596   2670',
'BULL           0.005 55.601   2671',
'ALLARD         0.005 55.606   2672',
'SAUER          0.005 55.610   2673',
'ROBINS         0.005 55.615   2674',
'OLIVARES       0.005 55.619   2675',
'GILLETTE       0.005 55.624   2676',
'CHESTNUT       0.005 55.629   2677',
'BOURQUE        0.005 55.633   2678',
'PAINE          0.005 55.638   2679',
'LYMAN          0.005 55.643   2680',
'HITE           0.005 55.647   2681',
'HAUSER         0.005 55.652   2682',
'DEVORE         0.005 55.657   2683',
'CRAWLEY        0.005 55.661   2684',
'CHAPA          0.005 55.666   2685',
'VU             0.005 55.671   2686',
'TOBIAS         0.005 55.675   2687',
'TALBERT        0.005 55.680   2688',
'POINDEXTER     0.005 55.684   2689',
'MILLARD        0.005 55.689   2690',
'MEADOR         0.005 55.694   2691',
'MCDUFFIE       0.005 55.698   2692',
'MATTOX         0.005 55.703   2693',
'KRAUS          0.005 55.708   2694',
'HARKINS        0.005 55.712   2695',
'CHOATE         0.005 55.717   2696',
'BESS           0.005 55.721   2697',
'WREN           0.005 55.726   2698',
'SLEDGE         0.005 55.731   2699',
'SANBORN        0.005 55.735   2700',
'OUTLAW         0.005 55.740   2701',
'KINDER         0.005 55.745   2702',
'GEARY          0.005 55.749   2703',
'CORNWELL       0.005 55.754   2704',
'BARCLAY        0.005 55.758   2705',
'ADAM           0.005 55.763   2706',
'ABNEY          0.005 55.768   2707',
'SEWARD         0.005 55.772   2708',
'RHOADS         0.005 55.777   2709',
'HOWLAND        0.005 55.781   2710',
'FORTIER        0.005 55.786   2711',
'EASTER         0.005 55.791   2712',
'BENNER         0.005 55.795   2713',
'VINES          0.005 55.800   2714',
'TUBBS          0.005 55.804   2715',
'TROUTMAN       0.005 55.809   2716',
'RAPP           0.005 55.813   2717',
'NOE            0.005 55.818   2718',
'MCCURDY        0.005 55.823   2719',
'HARDER         0.005 55.827   2720',
'DELUCA         0.005 55.832   2721',
'WESTMORELAND   0.005 55.836   2722',
'SOUTH          0.005 55.841   2723',
'HAVENS         0.005 55.845   2724',
'GUAJARDO       0.005 55.850   2725',
'ELY            0.005 55.855   2726',
'CLARY          0.005 55.859   2727',
'SEAL           0.005 55.864   2728',
'MEEHAN         0.005 55.868   2729',
'HERZOG         0.005 55.873   2730',
'GUILLEN        0.005 55.877   2731',
'ASHCRAFT       0.005 55.882   2732',
'WAUGH          0.005 55.886   2733',
'RENNER         0.005 55.891   2734',
'MILAM          0.005 55.895   2735',
'JUNG           0.005 55.900   2736',
'ELROD          0.005 55.905   2737',
'CHURCHILL      0.005 55.909   2738',
'BUFORD         0.005 55.914   2739',
'BREAUX         0.005 55.918   2740',
'BOLIN          0.005 55.923   2741',
'ASHER          0.005 55.927   2742',
'WINDHAM        0.005 55.932   2743',
'TIRADO         0.005 55.936   2744',
'PEMBERTON      0.005 55.941   2745',
'NOLEN          0.005 55.945   2746',
'NOLAND         0.005 55.950   2747',
'KNOTT          0.005 55.954   2748',
'EMMONS         0.005 55.959   2749',
'CORNISH        0.005 55.963   2750',
'CHRISTENSON    0.005 55.968   2751',
'BROWNLEE       0.005 55.972   2752',
'BARBEE         0.005 55.977   2753',
'WALDROP        0.004 55.981   2754',
'PITT           0.004 55.986   2755',
'OLVERA         0.004 55.990   2756',
'LOMBARDI       0.004 55.995   2757',
'GRUBER         0.004 55.999   2758',
'GAFFNEY        0.004 56.004   2759',
'EGGLESTON      0.004 56.008   2760',
'BANDA          0.004 56.013   2761',
'ARCHULETA      0.004 56.017   2762',
'STILL          0.004 56.022   2763',
'SLONE          0.004 56.026   2764',
'PREWITT        0.004 56.031   2765',
'PFEIFFER       0.004 56.035   2766',
'NETTLES        0.004 56.040   2767',
'MENA           0.004 56.044   2768',
'MCADAMS        0.004 56.049   2769',
'HENNING        0.004 56.053   2770',
'GARDINER       0.004 56.058   2771',
'CROMWELL       0.004 56.062   2772',
'CHISHOLM       0.004 56.067   2773',
'BURLESON       0.004 56.071   2774',
'BOX            0.004 56.076   2775',
'VEST           0.004 56.080   2776',
'OGLESBY        0.004 56.085   2777',
'MCCARTER       0.004 56.089   2778',
'MALCOLM        0.004 56.093   2779',
'LUMPKIN        0.004 56.098   2780',
'LARUE          0.004 56.102   2781',
'GREY           0.004 56.107   2782',
'WOFFORD        0.004 56.111   2783',
'VANHORN        0.004 56.116   2784',
'THORN          0.004 56.120   2785',
'TEEL           0.004 56.125   2786',
'SWAFFORD       0.004 56.129   2787',
'STCLAIR        0.004 56.134   2788',
'STANFIELD      0.004 56.138   2789',
'OCAMPO         0.004 56.142   2790',
'HERRMANN       0.004 56.147   2791',
'HANNON         0.004 56.151   2792',
'ARSENAULT      0.004 56.156   2793',
'ROUSH          0.004 56.160   2794',
'MCALISTER      0.004 56.165   2795',
'HIATT          0.004 56.169   2796',
'GUNDERSON      0.004 56.174   2797',
'FORSYTHE       0.004 56.178   2798',
'DUGGAN         0.004 56.182   2799',
'DELVALLE       0.004 56.187   2800',
'CINTRON        0.004 56.191   2801',
'WILKS          0.004 56.196   2802',
'WEINSTEIN      0.004 56.200   2803',
'URIBE          0.004 56.205   2804',
'RIZZO          0.004 56.209   2805',
'NOYES          0.004 56.213   2806',
'MCLENDON       0.004 56.218   2807',
'GURLEY         0.004 56.222   2808',
'BETHEA         0.004 56.227   2809',
'WINSTEAD       0.004 56.231   2810',
'MAPLES         0.004 56.235   2811',
'HARRY          0.004 56.240   2812',
'GUYTON         0.004 56.244   2813',
'GIORDANO       0.004 56.249   2814',
'ALDERMAN       0.004 56.253   2815',
'VALDES         0.004 56.258   2816',
'POLANCO        0.004 56.262   2817',
'PAPPAS         0.004 56.266   2818',
'LIVELY         0.004 56.271   2819',
'GROGAN         0.004 56.275   2820',
'GRIFFITHS      0.004 56.279   2821',
'BOBO           0.004 56.284   2822',
'AREVALO        0.004 56.288   2823',
'WHITSON        0.004 56.293   2824',
'SOWELL         0.004 56.297   2825',
'RENDON         0.004 56.301   2826',
'MATTHEW        0.004 56.306   2827',
'JULIAN         0.004 56.310   2828',
'FERNANDES      0.004 56.314   2829',
'FARROW         0.004 56.319   2830',
'EDMOND         0.004 56.323   2831',
'BENAVIDEZ      0.004 56.328   2832',
'AYRES          0.004 56.332   2833',
'ALICEA         0.004 56.336   2834',
'STUMP          0.004 56.341   2835',
'SMALLEY        0.004 56.345   2836',
'SEITZ          0.004 56.349   2837',
'SCHULTE        0.004 56.354   2838',
'GILLEY         0.004 56.358   2839',
'GALLANT        0.004 56.362   2840',
'DEWEY          0.004 56.367   2841',
'CASPER         0.004 56.371   2842',
'CANFIELD       0.004 56.376   2843',
'WOLFORD        0.004 56.380   2844',
'OMALLEY        0.004 56.384   2845',
'MCNUTT         0.004 56.389   2846',
'MCNULTY        0.004 56.393   2847',
'MCGOVERN       0.004 56.397   2848',
'HARDMAN        0.004 56.402   2849',
'HARBIN         0.004 56.406   2850',
'COWART         0.004 56.410   2851',
'CHAVARRIA      0.004 56.415   2852',
'BRINK          0.004 56.419   2853',
'BECKETT        0.004 56.423   2854',
'BAGWELL        0.004 56.428   2855',
'ARMSTEAD       0.004 56.432   2856',
'ANGLIN         0.004 56.436   2857',
'ABREU          0.004 56.441   2858',
'REYNOSO        0.004 56.445   2859',
'KREBS          0.004 56.449   2860',
'JETT           0.004 56.454   2861',
'HOFFMANN       0.004 56.458   2862',
'GREENFIELD     0.004 56.462   2863',
'FORTE          0.004 56.467   2864',
'BURNEY         0.004 56.471   2865',
'BROOME         0.004 56.475   2866',
'SISSON         0.004 56.480   2867',
'PARENT         0.004 56.484   2868',
'JUDE           0.004 56.488   2869',
'YOUNGER        0.004 56.492   2870',
'TRAMMELL       0.004 56.497   2871',
'PARTRIDGE      0.004 56.501   2872',
'MARVIN         0.004 56.505   2873',
'MACE           0.004 56.510   2874',
'LOMAX          0.004 56.514   2875',
'LEMIEUX        0.004 56.518   2876',
'GOSSETT        0.004 56.522   2877',
'FRANTZ         0.004 56.527   2878',
'FOGLE          0.004 56.531   2879',
'COONEY         0.004 56.535   2880',
'BROUGHTON      0.004 56.540   2881',
'PENCE          0.004 56.544   2882',
'PAULSEN        0.004 56.548   2883',
'NEIL           0.004 56.552   2884',
'MUNCY          0.004 56.557   2885',
'MCARTHUR       0.004 56.561   2886',
'HOLLINS        0.004 56.565   2887',
'EDWARD         0.004 56.570   2888',
'BEAUCHAMP      0.004 56.574   2889',
'WITHERS        0.004 56.578   2890',
'OSORIO         0.004 56.582   2891',
'MULLIGAN       0.004 56.587   2892',
'HOYLE          0.004 56.591   2893',
'FOY            0.004 56.595   2894',
'DOCKERY        0.004 56.599   2895',
'COCKRELL       0.004 56.604   2896',
'BEGLEY         0.004 56.608   2897',
'AMADOR         0.004 56.612   2898',
'ROBY           0.004 56.616   2899',
'RAINS          0.004 56.621   2900',
'LINDQUIST      0.004 56.625   2901',
'GENTILE        0.004 56.629   2902',
'EVERHART       0.004 56.633   2903',
'BOHANNON       0.004 56.638   2904',
'WYLIE          0.004 56.642   2905',
'THAO           0.004 56.646   2906',
'SOMMERS        0.004 56.650   2907',
'PURNELL        0.004 56.655   2908',
'PALMA          0.004 56.659   2909',
'FORTIN         0.004 56.663   2910',
'DUNNING        0.004 56.667   2911',
'BREEDEN        0.004 56.671   2912',
'VAIL           0.004 56.676   2913',
'PHELAN         0.004 56.680   2914',
'PHAN           0.004 56.684   2915',
'MARX           0.004 56.688   2916',
'COSBY          0.004 56.693   2917',
'COLBURN        0.004 56.697   2918',
'CHONG          0.004 56.701   2919',
'BOLING         0.004 56.705   2920',
'BIDDLE         0.004 56.709   2921',
'LEDESMA        0.004 56.714   2922',
'GADDIS         0.004 56.718   2923',
'DENNEY         0.004 56.722   2924',
'CHOW           0.004 56.726   2925',
'BUENO          0.004 56.730   2926',
'BERRIOS        0.004 56.735   2927',
'WICKER         0.004 56.739   2928',
'TOLLIVER       0.004 56.743   2929',
'THIBODEAUX     0.004 56.747   2930',
'NAGLE          0.004 56.751   2931',
'LAVOIE         0.004 56.755   2932',
'FISK           0.004 56.760   2933',
'DO             0.004 56.764   2934',
'CRIST          0.004 56.768   2935',
'BARBOSA        0.004 56.772   2936',
'REEDY          0.004 56.776   2937',
'MARCH          0.004 56.781   2938',
'LOCKLEAR       0.004 56.785   2939',
'KOLB           0.004 56.789   2940',
'HIMES          0.004 56.793   2941',
'BEHRENS        0.004 56.797   2942',
'BECKWITH       0.004 56.801   2943',
'BECKHAM        0.004 56.806   2944',
'WEEMS          0.004 56.810   2945',
'WAHL           0.004 56.814   2946',
'SHORTER        0.004 56.818   2947',
'SHACKELFORD    0.004 56.822   2948',
'REES           0.004 56.826   2949',
'MUSE           0.004 56.830   2950',
'FREE           0.004 56.835   2951',
'CERDA          0.004 56.839   2952',
'VALADEZ        0.004 56.843   2953',
'THIBODEAU      0.004 56.847   2954',
'SAAVEDRA       0.004 56.851   2955',
'RIDGEWAY       0.004 56.855   2956',
'REITER         0.004 56.859   2957',
'MCHENRY        0.004 56.864   2958',
'MAJORS         0.004 56.868   2959',
'LACHANCE       0.004 56.872   2960',
'KEATON         0.004 56.876   2961',
'ISRAEL         0.004 56.880   2962',
'FERRARA        0.004 56.884   2963',
'FALCON         0.004 56.888   2964',
'CLEMENS        0.004 56.892   2965',
'BLOCKER        0.004 56.897   2966',
'APPLEGATE      0.004 56.901   2967',
'PAZ            0.004 56.905   2968',
'NEEDHAM        0.004 56.909   2969',
'MOJICA         0.004 56.913   2970',
'KUYKENDALL     0.004 56.917   2971',
'HAMEL          0.004 56.921   2972',
'ESCAMILLA      0.004 56.925   2973',
'DOUGHTY        0.004 56.930   2974',
'BURCHETT       0.004 56.934   2975',
'AINSWORTH      0.004 56.938   2976',
'WILBUR         0.004 56.942   2977',
'VIDAL          0.004 56.946   2978',
'UPCHURCH       0.004 56.950   2979',
'THIGPEN        0.004 56.954   2980',
'STRAUSS        0.004 56.958   2981',
'SPRUILL        0.004 56.962   2982',
'SOWERS         0.004 56.967   2983',
'RIGGINS        0.004 56.971   2984',
'RICKER         0.004 56.975   2985',
'MCCOMBS        0.004 56.979   2986',
'HARLOW         0.004 56.983   2987',
'GARNETT        0.004 56.987   2988',
'BUFFINGTON     0.004 56.991   2989',
'YI             0.004 56.995   2990',
'SOTELO         0.004 56.999   2991',
'OLIVAS         0.004 57.003   2992',
'NEGRETE        0.004 57.007   2993',
'MOREY          0.004 57.012   2994',
'MACON          0.004 57.016   2995',
'LOGSDON        0.004 57.020   2996',
'LAPOINTE       0.004 57.024   2997',
'FLORENCE       0.004 57.028   2998',
'CATHEY         0.004 57.032   2999',
'BIGELOW        0.004 57.036   3000',
'BELLO          0.004 57.040   3001',
'WESTFALL       0.004 57.044   3002',
'STUBBLEFIELD   0.004 57.048   3003',
'PEAK           0.004 57.052   3004',
'LINDLEY        0.004 57.056   3005',
'JEFFREY        0.004 57.060   3006',
'HEIN           0.004 57.065   3007',
'HAWES          0.004 57.069   3008',
'FARRINGTON     0.004 57.073   3009',
'EDGE           0.004 57.077   3010',
'BREEN          0.004 57.081   3011',
'BIRCH          0.004 57.085   3012',
'WILDE          0.004 57.089   3013',
'STEED          0.004 57.093   3014',
'SEPULVEDA      0.004 57.097   3015',
'REINHARDT      0.004 57.101   3016',
'PROFFITT       0.004 57.105   3017',
'MINTER         0.004 57.109   3018',
'MESSINA        0.004 57.113   3019',
'MCNABB         0.004 57.117   3020',
'MAIER          0.004 57.121   3021',
'KEELER         0.004 57.125   3022',
'GAMBOA         0.004 57.130   3023',
'DONOHUE        0.004 57.134   3024',
'DEXTER         0.004 57.138   3025',
'BASHAM         0.004 57.142   3026',
'SHINN          0.004 57.146   3027',
'ORLANDO        0.004 57.150   3028',
'CROOKS         0.004 57.154   3029',
'COTA           0.004 57.158   3030',
'BORDERS        0.004 57.162   3031',
'BILLS          0.004 57.166   3032',
'BACHMAN        0.004 57.170   3033',
'TISDALE        0.004 57.174   3034',
'TAVARES        0.004 57.178   3035',
'SCHMID         0.004 57.182   3036',
'PICKARD        0.004 57.186   3037',
'JASPER         0.004 57.190   3038',
'GULLEY         0.004 57.194   3039',
'FONSECA        0.004 57.198   3040',
'DELOSSANTOS    0.004 57.202   3041',
'CONDON         0.004 57.206   3042',
'CLANCY         0.004 57.210   3043',
'BATISTA        0.004 57.214   3044',
'WICKS          0.004 57.218   3045',
'WADSWORTH      0.004 57.222   3046',
'NEW            0.004 57.226   3047',
'MARTELL        0.004 57.230   3048',
'LO             0.004 57.234   3049',
'LITTLETON      0.004 57.238   3050',
'ISON           0.004 57.242   3051',
'HAAG           0.004 57.246   3052',
'FOLSOM         0.004 57.250   3053',
'BRUMFIELD      0.004 57.254   3054',
'BROYLES        0.004 57.258   3055',
'BRITO          0.004 57.262   3056',
'MIRELES        0.004 57.266   3057',
'MCDONNELL      0.004 57.270   3058',
'LECLAIR        0.004 57.274   3059',
'HAMBLIN        0.004 57.278   3060',
'GOUGH          0.004 57.282   3061',
'FANNING        0.004 57.286   3062',
'BINDER         0.004 57.290   3063',
'WINFIELD       0.004 57.294   3064',
'WHITWORTH      0.004 57.298   3065',
'SORIANO        0.004 57.302   3066',
'PALUMBO        0.004 57.306   3067',
'NEWKIRK        0.004 57.310   3068',
'MANGUM         0.004 57.314   3069',
'HUTCHERSON     0.004 57.318   3070',
'COMSTOCK       0.004 57.322   3071',
'CECIL          0.004 57.326   3072',
'CARLIN         0.004 57.330   3073',
'BEALL          0.004 57.334   3074',
'BAIR           0.004 57.338   3075',
'WENDT          0.004 57.342   3076',
'WATTERS        0.004 57.346   3077',
'WALLING        0.004 57.350   3078',
'PUTMAN         0.004 57.354   3079',
'OTOOLE         0.004 57.358   3080',
'OLIVA          0.004 57.362   3081',
'MORLEY         0.004 57.366   3082',
'MARES          0.004 57.370   3083',
'LEMUS          0.004 57.373   3084',
'KEENER         0.004 57.377   3085',
'JEFFERY        0.004 57.381   3086',
'HUNDLEY        0.004 57.385   3087',
'DIAL           0.004 57.389   3088',
'DAMICO         0.004 57.393   3089',
'BILLUPS        0.004 57.397   3090',
'STROTHER       0.004 57.401   3091',
'MCFARLANE      0.004 57.405   3092',
'LAMM           0.004 57.409   3093',
'EAVES          0.004 57.413   3094',
'CRUTCHER       0.004 57.417   3095',
'CARABALLO      0.004 57.421   3096',
'CANTY          0.004 57.425   3097',
'ATWELL         0.004 57.429   3098',
'TAFT           0.004 57.433   3099',
'SILER          0.004 57.437   3100',
'RUST           0.004 57.441   3101',
'RAWLS          0.004 57.444   3102',
'RAWLINGS       0.004 57.448   3103',
'PRIETO         0.004 57.452   3104',
'NILES          0.004 57.456   3105',
'MCNEELY        0.004 57.460   3106',
'MCAFEE         0.004 57.464   3107',
'HULSEY         0.004 57.468   3108',
'HARLAN         0.004 57.472   3109',
'HACKNEY        0.004 57.476   3110',
'GALVEZ         0.004 57.480   3111',
'ESCALANTE      0.004 57.484   3112',
'DELAGARZA      0.004 57.488   3113',
'CRIDER         0.004 57.492   3114',
'CHARLTON       0.004 57.496   3115',
'BANDY          0.004 57.499   3116',
'WILBANKS       0.004 57.503   3117',
'STOWE          0.004 57.507   3118',
'STEINBERG      0.004 57.511   3119',
'SAMSON         0.004 57.515   3120',
'RENFRO         0.004 57.519   3121',
'MASTERSON      0.004 57.523   3122',
'MASSIE         0.004 57.527   3123',
'LANHAM         0.004 57.531   3124',
'HASKELL        0.004 57.535   3125',
'HAMRICK        0.004 57.539   3126',
'FORT           0.004 57.542   3127',
'DEHART         0.004 57.546   3128',
'CARD           0.004 57.550   3129',
'BURDETTE       0.004 57.554   3130',
'BRANSON        0.004 57.558   3131',
'BOURNE         0.004 57.562   3132',
'BABIN          0.004 57.566   3133',
'ALEMAN         0.004 57.570   3134',
'WORTHY         0.004 57.574   3135',
'TIBBS          0.004 57.578   3136',
'SWEAT          0.004 57.582   3137',
'SMOOT          0.004 57.585   3138',
'SLACK          0.004 57.589   3139',
'PARADIS        0.004 57.593   3140',
'PACKARD        0.004 57.597   3141',
'MULL           0.004 57.601   3142',
'LUCE           0.004 57.605   3143',
'HOUGHTON       0.004 57.609   3144',
'GANTT          0.004 57.613   3145',
'FURMAN         0.004 57.617   3146',
'DANNER         0.004 57.620   3147',
'CHRISTIANSON   0.004 57.624   3148',
'BURGE          0.004 57.628   3149',
'BRODERICK      0.004 57.632   3150',
'ASHFORD        0.004 57.636   3151',
'ARNDT          0.004 57.640   3152',
'ALMEIDA        0.004 57.644   3153',
'STALLWORTH     0.004 57.648   3154',
'SHADE          0.004 57.652   3155',
'SEARCY         0.004 57.656   3156',
'SAGER          0.004 57.659   3157',
'NOONAN         0.004 57.663   3158',
'MCLEMORE       0.004 57.667   3159',
'MCINTIRE       0.004 57.671   3160',
'MAXEY          0.004 57.675   3161',
'LAVIGNE        0.004 57.679   3162',
'JOBE           0.004 57.683   3163',
'IRELAND        0.004 57.687   3164',
'FERRER         0.004 57.690   3165',
'FALK           0.004 57.694   3166',
'EDGAR          0.004 57.698   3167',
'COFFIN         0.004 57.702   3168',
'BYRNES         0.004 57.706   3169',
'ARANDA         0.004 57.710   3170',
'APODACA        0.004 57.714   3171',
'STAMPS         0.004 57.718   3172',
'ROUNDS         0.004 57.721   3173',
'PEEK           0.004 57.725   3174',
'OLMSTEAD       0.004 57.729   3175',
'LEWANDOWSKI    0.004 57.733   3176',
'KAMINSKI       0.004 57.737   3177',
'HER            0.004 57.741   3178',
'DUNAWAY        0.004 57.745   3179',
'BRUNS          0.004 57.748   3180',
'BRACKETT       0.004 57.752   3181',
'AMATO          0.004 57.756   3182',
'REICH          0.004 57.760   3183',
'MCCLUNG        0.004 57.764   3184',
'LACROIX        0.004 57.768   3185',
'KOONTZ         0.004 57.772   3186',
'HERRICK        0.004 57.775   3187',
'HARDESTY       0.004 57.779   3188',
'FLANDERS       0.004 57.783   3189',
'COUSINS        0.004 57.787   3190',
'CLOSE          0.004 57.791   3191',
'CATO           0.004 57.795   3192',
'CADE           0.004 57.799   3193',
'VICKERY        0.004 57.802   3194',
'SHANK          0.004 57.806   3195',
'NAGEL          0.004 57.810   3196',
'DUPUIS         0.004 57.814   3197',
'CROTEAU        0.004 57.818   3198',
'COTTER         0.004 57.821   3199',
'CABLE          0.004 57.825   3200',
'STUCKEY        0.004 57.829   3201',
'STINE          0.004 57.833   3202',
'PORTERFIELD    0.004 57.837   3203',
'PAULEY         0.004 57.841   3204',
'NYE            0.004 57.844   3205',
'MOFFITT        0.004 57.848   3206',
'LU             0.004 57.852   3207',
'KNUDSEN        0.004 57.856   3208',
'HARDWICK       0.004 57.860   3209',
'GOFORTH        0.004 57.863   3210',
'DUPONT         0.004 57.867   3211',
'BLUNT          0.004 57.871   3212',
'BARROWS        0.004 57.875   3213',
'BARNHILL       0.004 57.879   3214',
'SHULL          0.004 57.883   3215',
'RASH           0.004 57.886   3216',
'RALPH          0.004 57.890   3217',
'PENNY          0.004 57.894   3218',
'LORENZO        0.004 57.898   3219',
'LOFTIS         0.004 57.902   3220',
'LEMAY          0.004 57.905   3221',
'KITCHENS       0.004 57.909   3222',
'HORVATH        0.004 57.913   3223',
'GRENIER        0.004 57.917   3224',
'FUCHS          0.004 57.921   3225',
'FAIRBANKS      0.004 57.924   3226',
'CULBERTSON     0.004 57.928   3227',
'CALKINS        0.004 57.932   3228',
'BURNSIDE       0.004 57.936   3229',
'BEATTIE        0.004 57.940   3230',
'ASHWORTH       0.004 57.943   3231',
'ALBERTSON      0.004 57.947   3232',
'WERTZ          0.004 57.951   3233',
'VO             0.004 57.955   3234',
'VAUGHT         0.004 57.958   3235',
'VALLEJO        0.004 57.962   3236',
'TYREE          0.004 57.966   3237',
'TURK           0.004 57.970   3238',
'TUCK           0.004 57.974   3239',
'TIJERINA       0.004 57.977   3240',
'SAGE           0.004 57.981   3241',
'PICARD         0.004 57.985   3242',
'PETERMAN       0.004 57.989   3243',
'OTIS           0.004 57.993   3244',
'MARROQUIN      0.004 57.996   3245',
'MARR           0.004 58.000   3246',
'LANTZ          0.004 58.004   3247',
'HOANG          0.004 58.008   3248',
'DEMARCO        0.004 58.011   3249',
'DAILY          0.004 58.015   3250',
'CONE           0.004 58.019   3251',
'BERUBE         0.004 58.023   3252',
'BARNETTE       0.004 58.027   3253',
'WHARTON        0.004 58.030   3254',
'STINNETT       0.004 58.034   3255',
'SLOCUM         0.004 58.038   3256',
'SCANLON        0.004 58.042   3257',
'SANDER         0.004 58.045   3258',
'PINTO          0.004 58.049   3259',
'MANCUSO        0.004 58.053   3260',
'LIMA           0.004 58.057   3261',
'JUDGE          0.004 58.060   3262',
'HEADLEY        0.004 58.064   3263',
'EPSTEIN        0.004 58.068   3264',
'COUNTS         0.004 58.072   3265',
'CLARKSON       0.004 58.076   3266',
'CARNAHAN       0.004 58.079   3267',
'BRICE          0.004 58.083   3268',
'BOREN          0.004 58.087   3269',
'ARTEAGA        0.004 58.091   3270',
'ADAME          0.004 58.094   3271',
'ZOOK           0.004 58.098   3272',
'WHITTLE        0.004 58.102   3273',
'WHITEHURST     0.004 58.106   3274',
'WENZEL         0.004 58.109   3275',
'SAXTON         0.004 58.113   3276',
'RHEA           0.004 58.117   3277',
'REDDICK        0.004 58.121   3278',
'PUENTE         0.004 58.124   3279',
'HAZEL          0.004 58.128   3280',
'HANDLEY        0.004 58.132   3281',
'HAGGERTY       0.004 58.136   3282',
'EARLEY         0.004 58.139   3283',
'DEVLIN         0.004 58.143   3284',
'DALLAS         0.004 58.147   3285',
'CHAFFIN        0.004 58.151   3286',
'CADY           0.004 58.154   3287',
'AHMED          0.004 58.158   3288',
'ACUNA          0.004 58.162   3289',
'SOLANO         0.004 58.166   3290',
'SIGLER         0.004 58.169   3291',
'POLLACK        0.004 58.173   3292',
'PENDERGRASS    0.004 58.177   3293',
'OSTRANDER      0.004 58.181   3294',
'JANES          0.004 58.184   3295',
'FRANCOIS       0.004 58.188   3296',
'FINE           0.004 58.192   3297',
'CRUTCHFIELD    0.004 58.196   3298',
'CORDELL        0.004 58.199   3299',
'CHAMBERLIN     0.004 58.203   3300',
'BRUBAKER       0.004 58.207   3301',
'BAPTISTE       0.004 58.211   3302',
'WILLSON        0.004 58.214   3303',
'REIS           0.004 58.218   3304',
'NEELEY         0.004 58.222   3305',
'MULLIN         0.004 58.225   3306',
'MERCIER        0.004 58.229   3307',
'LIRA           0.004 58.233   3308',
'LAYMAN         0.004 58.237   3309',
'KEELING        0.004 58.240   3310',
'HIGDON         0.004 58.244   3311',
'GUEST          0.004 58.248   3312',
'FORRESTER      0.004 58.251   3313',
'ESPINAL        0.004 58.255   3314',
'DION           0.004 58.259   3315',
'CHAPIN         0.004 58.263   3316',
'CARL           0.004 58.266   3317',
'WARFIELD       0.004 58.270   3318',
'TOLEDO         0.004 58.274   3319',
'PULIDO         0.004 58.277   3320',
'PEEBLES        0.004 58.281   3321',
'NAGY           0.004 58.285   3322',
'MONTAGUE       0.004 58.289   3323',
'MELLO          0.004 58.292   3324',
'LEAR           0.004 58.296   3325',
'JAEGER         0.004 58.300   3326',
'HOGG           0.004 58.303   3327',
'GRAFF          0.004 58.307   3328',
'FURR           0.004 58.311   3329',
'DERRICK        0.004 58.314   3330',
'CAVE           0.004 58.318   3331',
'CANADA         0.004 58.322   3332',
'SOLIZ          0.004 58.326   3333',
'POORE          0.004 58.329   3334',
'MENDENHALL     0.004 58.333   3335',
'MCLAURIN       0.004 58.337   3336',
'MAESTAS        0.004 58.340   3337',
'LOW            0.004 58.344   3338',
'GABLE          0.004 58.348   3339',
'BELT           0.004 58.351   3340',
'BARRAZA        0.004 58.355   3341',
'TILLERY        0.004 58.359   3342',
'SNEAD          0.004 58.362   3343',
'POND           0.004 58.366   3344',
'NEILL          0.004 58.370   3345',
'MCCULLOCH      0.004 58.373   3346',
'MCCORKLE       0.004 58.377   3347',
'LIGHTFOOT      0.004 58.381   3348',
'HUTCHINGS      0.004 58.384   3349',
'HOLLOMAN       0.004 58.388   3350',
'HARNESS        0.004 58.392   3351',
'DORN           0.004 58.395   3352',
'COUNCIL        0.004 58.399   3353',
'BOCK           0.004 58.403   3354',
'ZIELINSKI      0.004 58.406   3355',
'TURLEY         0.004 58.410   3356',
'TREADWELL      0.004 58.414   3357',
'STPIERRE       0.004 58.417   3358',
'STARLING       0.004 58.421   3359',
'SOMERS         0.004 58.425   3360',
'OSWALD         0.004 58.428   3361',
'MERRICK        0.004 58.432   3362',
'MARQUIS        0.004 58.436   3363',
'IVORY          0.004 58.439   3364',
'EASTERLING     0.004 58.443   3365',
'BIVENS         0.004 58.447   3366',
'TRUITT         0.004 58.450   3367',
'POSTON         0.004 58.454   3368',
'PARRY          0.004 58.458   3369',
'ONTIVEROS      0.004 58.461   3370',
'OLIVAREZ       0.004 58.465   3371',
'NEVILLE        0.004 58.469   3372',
'MOREAU         0.004 58.472   3373',
'MEDLIN         0.004 58.476   3374',
'MA             0.004 58.479   3375',
'LENZ           0.004 58.483   3376',
'KNOWLTON       0.004 58.487   3377',
'FAIRLEY        0.004 58.490   3378',
'COBBS          0.004 58.494   3379',
'CHISOLM        0.004 58.498   3380',
'BANNISTER      0.004 58.501   3381',
'WOODWORTH      0.004 58.505   3382',
'TOLER          0.004 58.509   3383',
'OCASIO         0.004 58.512   3384',
'NORIEGA        0.004 58.516   3385',
'NEUMAN         0.004 58.519   3386',
'MOYE           0.004 58.523   3387',
'MILBURN        0.004 58.527   3388',
'MCCLANAHAN     0.004 58.530   3389',
'LILLEY         0.004 58.534   3390',
'HANES          0.004 58.538   3391',
'FLANNERY       0.004 58.541   3392',
'DELLINGER      0.004 58.545   3393',
'DANIELSON      0.004 58.548   3394',
'CONTI          0.004 58.552   3395',
'BLODGETT       0.004 58.556   3396',
'BEERS          0.004 58.559   3397',
'WEATHERFORD    0.004 58.563   3398',
'STRAIN         0.004 58.567   3399',
'KARR           0.004 58.570   3400',
'HITT           0.004 58.574   3401',
'DENHAM         0.004 58.577   3402',
'CUSTER         0.004 58.581   3403',
'COBLE          0.004 58.585   3404',
'CLOUGH         0.004 58.588   3405',
'CASTEEL        0.004 58.592   3406',
'BOLDUC         0.004 58.595   3407',
'BATCHELOR      0.004 58.599   3408',
'AMMONS         0.004 58.603   3409',
'WHITLOW        0.004 58.606   3410',
'TIERNEY        0.004 58.610   3411',
'STATEN         0.004 58.613   3412',
'SIBLEY         0.004 58.617   3413',
'SEIFERT        0.004 58.621   3414',
'SCHUBERT       0.004 58.624   3415',
'SALCEDO        0.004 58.628   3416',
'MATTISON       0.004 58.631   3417',
'LANEY          0.004 58.635   3418',
'HAGGARD        0.004 58.639   3419',
'GROOMS         0.004 58.642   3420',
'DIX            0.004 58.646   3421',
'DEES           0.004 58.649   3422',
'CROMER         0.004 58.653   3423',
'COOKS          0.004 58.656   3424',
'COLSON         0.004 58.660   3425',
'CASWELL        0.004 58.664   3426',
'ZARATE         0.004 58.667   3427',
'SWISHER        0.004 58.671   3428',
'STACEY         0.004 58.674   3429',
'SHIN           0.004 58.678   3430',
'RAGAN          0.004 58.682   3431',
'PRIDGEN        0.004 58.685   3432',
'MCVEY          0.004 58.689   3433',
'MATHENY        0.004 58.692   3434',
'LEIGH          0.004 58.696   3435',
'LAFLEUR        0.004 58.699   3436',
'FRANZ          0.004 58.703   3437',
'FERRARO        0.004 58.707   3438',
'DUGGER         0.004 58.710   3439',
'WHITESIDE      0.004 58.714   3440',
'RIGSBY         0.004 58.717   3441',
'MCMURRAY       0.004 58.721   3442',
'LEHMANN        0.004 58.724   3443',
'LARGE          0.004 58.728   3444',
'JACOBY         0.004 58.732   3445',
'HILDEBRAND     0.004 58.735   3446',
'HENDRICK       0.004 58.739   3447',
'HEADRICK       0.004 58.742   3448',
'GOAD           0.004 58.746   3449',
'FINCHER        0.004 58.749   3450',
'DRURY          0.004 58.753   3451',
'BORGES         0.004 58.756   3452',
'ARCHIBALD      0.004 58.760   3453',
'ALBERS         0.004 58.764   3454',
'WOODCOCK       0.004 58.767   3455',
'TRAPP          0.004 58.771   3456',
'SOARES         0.004 58.774   3457',
'SEATON         0.004 58.778   3458',
'RICHIE         0.004 58.781   3459',
'MONSON         0.004 58.785   3460',
'LUCKETT        0.004 58.788   3461',
'LINDBERG       0.004 58.792   3462',
'KOPP           0.004 58.795   3463',
'KEETON         0.004 58.799   3464',
'HSU            0.004 58.803   3465',
'HEALEY         0.004 58.806   3466',
'GARVEY         0.004 58.810   3467',
'GADDY          0.004 58.813   3468',
'FAIN           0.004 58.817   3469',
'BURCHFIELD     0.004 58.820   3470',
'BADGER         0.004 58.824   3471',
'WENTWORTH      0.004 58.827   3472',
'STRAND         0.004 58.831   3473',
'STACK          0.004 58.834   3474',
'SPOONER        0.004 58.838   3475',
'SAUCIER        0.004 58.841   3476',
'SALES          0.004 58.845   3477',
'RUBY           0.004 58.849   3478',
'RICCI          0.004 58.852   3479',
'PLUNKETT       0.004 58.856   3480',
'PANNELL        0.004 58.859   3481',
'NESS           0.004 58.863   3482',
'LEGER          0.004 58.866   3483',
'HOY            0.004 58.870   3484',
'FREITAS        0.004 58.873   3485',
'FONG           0.004 58.877   3486',
'ELIZONDO       0.004 58.880   3487',
'DUVAL          0.004 58.884   3488',
'CHUN           0.004 58.887   3489',
'CALVIN         0.004 58.891   3490',
'BEAUDOIN       0.004 58.894   3491',
'URBINA         0.004 58.898   3492',
'STOCK          0.004 58.901   3493',
'RICKARD        0.004 58.905   3494',
'PARTIN         0.004 58.908   3495',
'MOE            0.004 58.912   3496',
'MCGREW         0.004 58.916   3497',
'MCCLINTOCK     0.004 58.919   3498',
'LEDOUX         0.004 58.923   3499',
'FORSYTH        0.004 58.926   3500',
'FAISON         0.004 58.930   3501',
'DEVRIES        0.004 58.933   3502',
'BERTRAND       0.004 58.937   3503',
'WASSON         0.003 58.940   3504',
'TILTON         0.003 58.944   3505',
'SCARBROUGH     0.003 58.947   3506',
'PRIDE          0.003 58.951   3507',
'OH             0.003 58.954   3508',
'LEUNG          0.003 58.958   3509',
'LARRY          0.003 58.961   3510',
'IRVINE         0.003 58.965   3511',
'GARBER         0.003 58.968   3512',
'DENNING        0.003 58.972   3513',
'CORRAL         0.003 58.975   3514',
'COLLEY         0.003 58.979   3515',
'CASTLEBERRY    0.003 58.982   3516',
'BOWLIN         0.003 58.986   3517',
'BOGAN          0.003 58.989   3518',
'BEALE          0.003 58.993   3519',
'BAINES         0.003 58.996   3520',
'TRUE           0.003 59.000   3521',
'TRICE          0.003 59.003   3522',
'RAYBURN        0.003 59.007   3523',
'PARKINSON      0.003 59.010   3524',
'PAK            0.003 59.013   3525',
'NUNES          0.003 59.017   3526',
'MCMILLEN       0.003 59.020   3527',
'LEAHY          0.003 59.024   3528',
'LEA            0.003 59.027   3529',
'KIMMEL         0.003 59.031   3530',
'HIGGS          0.003 59.034   3531',
'FULMER         0.003 59.038   3532',
'CARDEN         0.003 59.041   3533',
'BEDFORD        0.003 59.045   3534',
'TAGGART        0.003 59.048   3535',
'SPEARMAN       0.003 59.052   3536',
'REGISTER       0.003 59.055   3537',
'PRICHARD       0.003 59.059   3538',
'MORRILL        0.003 59.062   3539',
'KOONCE         0.003 59.066   3540',
'HEINZ          0.003 59.069   3541',
'HEDGES         0.003 59.073   3542',
'GUENTHER       0.003 59.076   3543',
'GRICE          0.003 59.079   3544',
'FINDLEY        0.003 59.083   3545',
'EARLE          0.003 59.086   3546',
'DOVER          0.003 59.090   3547',
'CREIGHTON      0.003 59.093   3548',
'BOOTHE         0.003 59.097   3549',
'BAYER          0.003 59.100   3550',
'ARREOLA        0.003 59.104   3551',
'VITALE         0.003 59.107   3552',
'VALLES         0.003 59.111   3553',
'SEE            0.003 59.114   3554',
'RANEY          0.003 59.118   3555',
'PETER          0.003 59.121   3556',
'OSGOOD         0.003 59.124   3557',
'LOWELL         0.003 59.128   3558',
'HANLON         0.003 59.131   3559',
'BURLEY         0.003 59.135   3560',
'BOUNDS         0.003 59.138   3561',
'WORDEN         0.003 59.142   3562',
'WEATHERLY      0.003 59.145   3563',
'VETTER         0.003 59.149   3564',
'TANAKA         0.003 59.152   3565',
'STILTNER       0.003 59.155   3566',
'SELL           0.003 59.159   3567',
'NEVAREZ        0.003 59.162   3568',
'MOSBY          0.003 59.166   3569',
'MONTERO        0.003 59.169   3570',
'MELANCON       0.003 59.173   3571',
'HARTER         0.003 59.176   3572',
'HAMER          0.003 59.179   3573',
'GOBLE          0.003 59.183   3574',
'GLADDEN        0.003 59.186   3575',
'GIST           0.003 59.190   3576',
'GINN           0.003 59.193   3577',
'AKIN           0.003 59.197   3578',
'ZARAGOZA       0.003 59.200   3579',
'TOWNS          0.003 59.203   3580',
'TARVER         0.003 59.207   3581',
'SAMMONS        0.003 59.210   3582',
'ROYSTER        0.003 59.214   3583',
'OREILLY        0.003 59.217   3584',
'MUIR           0.003 59.221   3585',
'MOREHEAD       0.003 59.224   3586',
'LUSTER         0.003 59.227   3587',
'KINGSLEY       0.003 59.231   3588',
'KELSO          0.003 59.234   3589',
'GRISHAM        0.003 59.238   3590',
'GLYNN          0.003 59.241   3591',
'BAUMANN        0.003 59.244   3592',
'ALVES          0.003 59.248   3593',
'YOUNT          0.003 59.251   3594',
'TAMAYO         0.003 59.255   3595',
'TAM            0.003 59.258   3596',
'PATERSON       0.003 59.261   3597',
'OATES          0.003 59.265   3598',
'MENENDEZ       0.003 59.268   3599',
'LONGO          0.003 59.272   3600',
'HARGIS         0.003 59.275   3601',
'GREENLEE       0.003 59.278   3602',
'GILLEN         0.003 59.282   3603',
'DESANTIS       0.003 59.285   3604',
'CONOVER        0.003 59.289   3605',
'BREEDLOVE      0.003 59.292   3606',
'WAYNE          0.003 59.295   3607',
'SUMPTER        0.003 59.299   3608',
'SCHERER        0.003 59.302   3609',
'RUPP           0.003 59.306   3610',
'REICHERT       0.003 59.309   3611',
'HEREDIA        0.003 59.312   3612',
'FALLON         0.003 59.316   3613',
'CREEL          0.003 59.319   3614',
'COHN           0.003 59.323   3615',
'CLEMMONS       0.003 59.326   3616',
'CASAS          0.003 59.329   3617',
'BICKFORD       0.003 59.333   3618',
'BELTON         0.003 59.336   3619',
'BACH           0.003 59.339   3620',
'WILLIFORD      0.003 59.343   3621',
'WHITCOMB       0.003 59.346   3622',
'TENNANT        0.003 59.350   3623',
'SUTTER         0.003 59.353   3624',
'STULL          0.003 59.356   3625',
'SESSIONS       0.003 59.360   3626',
'MCCALLUM       0.003 59.363   3627',
'MANSON         0.003 59.366   3628',
'LANGLOIS       0.003 59.370   3629',
'KEEL           0.003 59.373   3630',
'KEEGAN         0.003 59.377   3631',
'EMANUEL        0.003 59.380   3632',
'DANGELO        0.003 59.383   3633',
'DANCY          0.003 59.387   3634',
'DAMRON         0.003 59.390   3635',
'CLAPP          0.003 59.393   3636',
'CLANTON        0.003 59.397   3637',
'BANKSTON       0.003 59.400   3638',
'TRINIDAD       0.003 59.404   3639',
'OLIVEIRA       0.003 59.407   3640',
'MINTZ          0.003 59.410   3641',
'MCINNIS        0.003 59.414   3642',
'MARTENS        0.003 59.417   3643',
'MABE           0.003 59.420   3644',
'LASTER         0.003 59.424   3645',
'JOLLEY         0.003 59.427   3646',
'IRISH          0.003 59.430   3647',
'HILDRETH       0.003 59.434   3648',
'HEFNER         0.003 59.437   3649',
'GLASER         0.003 59.440   3650',
'DUCKETT        0.003 59.444   3651',
'DEMERS         0.003 59.447   3652',
'BROCKMAN       0.003 59.450   3653',
'BLAIS          0.003 59.454   3654',
'BACK           0.003 59.457   3655',
'ALCORN         0.003 59.461   3656',
'AGNEW          0.003 59.464   3657',
'TOLIVER        0.003 59.467   3658',
'TICE           0.003 59.471   3659',
'SONG           0.003 59.474   3660',
'SEELEY         0.003 59.477   3661',
'NAJERA         0.003 59.481   3662',
'MUSSER         0.003 59.484   3663',
'MCFALL         0.003 59.487   3664',
'LAPLANTE       0.003 59.491   3665',
'GALVIN         0.003 59.494   3666',
'FAJARDO        0.003 59.497   3667',
'DOAN           0.003 59.501   3668',
'COYNE          0.003 59.504   3669',
'COPLEY         0.003 59.507   3670',
'CLAWSON        0.003 59.511   3671',
'CHEUNG         0.003 59.514   3672',
'BARONE         0.003 59.517   3673',
'WYNNE          0.003 59.521   3674',
'WOODLEY        0.003 59.524   3675',
'TREMBLAY       0.003 59.527   3676',
'STOLL          0.003 59.531   3677',
'SPARROW        0.003 59.534   3678',
'SPARKMAN       0.003 59.537   3679',
'SCHWEITZER     0.003 59.541   3680',
'SASSER         0.003 59.544   3681',
'SAMPLES        0.003 59.547   3682',
'RONEY          0.003 59.551   3683',
'RAMON          0.003 59.554   3684',
'LEGG           0.003 59.557   3685',
'LAI            0.003 59.561   3686',
'JOE            0.003 59.564   3687',
'HEIM           0.003 59.567   3688',
'FARIAS         0.003 59.570   3689',
'CONCEPCION     0.003 59.574   3690',
'COLWELL        0.003 59.577   3691',
'CHRISTMAN      0.003 59.580   3692',
'BRATCHER       0.003 59.584   3693',
'ALBA           0.003 59.587   3694',
'WINCHESTER     0.003 59.590   3695',
'UPSHAW         0.003 59.594   3696',
'SOUTHERLAND    0.003 59.597   3697',
'SORRELL        0.003 59.600   3698',
'SHAY           0.003 59.604   3699',
'SELLS          0.003 59.607   3700',
'MOUNT          0.003 59.610   3701',
'MCCLOSKEY      0.003 59.614   3702',
'MARTINDALE     0.003 59.617   3703',
'LUTTRELL       0.003 59.620   3704',
'LOVELESS       0.003 59.623   3705',
'LOVEJOY        0.003 59.627   3706',
'LINARES        0.003 59.630   3707',
'LATIMER        0.003 59.633   3708',
'HOLLY          0.003 59.637   3709',
'EMBRY          0.003 59.640   3710',
'COOMBS         0.003 59.643   3711',
'BRATTON        0.003 59.647   3712',
'BOSTICK        0.003 59.650   3713',
'BOSS           0.003 59.653   3714',
'VENABLE        0.003 59.657   3715',
'TUGGLE         0.003 59.660   3716',
'TORO           0.003 59.663   3717',
'STAGGS         0.003 59.666   3718',
'SANDLIN        0.003 59.670   3719',
'JEFFERIES      0.003 59.673   3720',
'HECKMAN        0.003 59.676   3721',
'GRIFFIS        0.003 59.680   3722',
'CRAYTON        0.003 59.683   3723',
'CLEM           0.003 59.686   3724',
'BUTTON         0.003 59.689   3725',
'BROWDER        0.003 59.693   3726',
'ALLAN          0.003 59.696   3727',
'THORTON        0.003 59.699   3728',
'STURGILL       0.003 59.703   3729',
'SPROUSE        0.003 59.706   3730',
'ROYER          0.003 59.709   3731',
'ROUSSEAU       0.003 59.712   3732',
'RIDENOUR       0.003 59.716   3733',
'POGUE          0.003 59.719   3734',
'PERALES        0.003 59.722   3735',
'PEEPLES        0.003 59.725   3736',
'METZLER        0.003 59.729   3737',
'MESA           0.003 59.732   3738',
'MCCUTCHEON     0.003 59.735   3739',
'MCBEE          0.003 59.739   3740',
'JAY            0.003 59.742   3741',
'HORNSBY        0.003 59.745   3742',
'HEFFNER        0.003 59.748   3743',
'CORRIGAN       0.003 59.752   3744',
'ARMIJO         0.003 59.755   3745',
'VUE            0.003 59.758   3746',
'ROMEO          0.003 59.761   3747',
'PLANTE         0.003 59.765   3748',
'PEYTON         0.003 59.768   3749',
'PAREDES        0.003 59.771   3750',
'MACKLIN        0.003 59.774   3751',
'HUSSEY         0.003 59.778   3752',
'HODGSON        0.003 59.781   3753',
'GRANADOS       0.003 59.784   3754',
'FRIAS          0.003 59.788   3755',
'CARMAN         0.003 59.791   3756',
'BRENT          0.003 59.794   3757',
'BECNEL         0.003 59.797   3758',
'BATTEN         0.003 59.801   3759',
'ALMANZA        0.003 59.804   3760',
'TURNEY         0.003 59.807   3761',
'TEAL           0.003 59.810   3762',
'STURGEON       0.003 59.814   3763',
'MEEKER         0.003 59.817   3764',
'MCDANIELS      0.003 59.820   3765',
'LIMON          0.003 59.823   3766',
'KEENEY         0.003 59.827   3767',
'KEE            0.003 59.830   3768',
'HUTTO          0.003 59.833   3769',
'HOLGUIN        0.003 59.836   3770',
'GORHAM         0.003 59.840   3771',
'FISHMAN        0.003 59.843   3772',
'FIERRO         0.003 59.846   3773',
'BLANCHETTE     0.003 59.849   3774',
'RODRIGUE       0.003 59.852   3775',
'REDDY          0.003 59.856   3776',
'OSBURN         0.003 59.859   3777',
'ODEN           0.003 59.862   3778',
'LERMA          0.003 59.865   3779',
'KIRKWOOD       0.003 59.869   3780',
'KEEFER         0.003 59.872   3781',
'HAUGEN         0.003 59.875   3782',
'HAMMETT        0.003 59.878   3783',
'CHALMERS       0.003 59.882   3784',
'CARLOS         0.003 59.885   3785',
'BRINKMAN       0.003 59.888   3786',
'BAUMGARTNER    0.003 59.891   3787',
'ZHANG          0.003 59.894   3788',
'VALERIO        0.003 59.898   3789',
'TELLEZ         0.003 59.901   3790',
'STEFFEN        0.003 59.904   3791',
'SHUMATE        0.003 59.907   3792',
'SAULS          0.003 59.910   3793',
'RIPLEY         0.003 59.914   3794',
'KEMPER         0.003 59.917   3795',
'JACKS          0.003 59.920   3796',
'GUFFEY         0.003 59.923   3797',
'EVERS          0.003 59.927   3798',
'CRADDOCK       0.003 59.930   3799',
'CARVALHO       0.003 59.933   3800',
'BLAYLOCK       0.003 59.936   3801',
'BANUELOS       0.003 59.939   3802',
'BALDERAS       0.003 59.943   3803',
'WOODEN         0.003 59.946   3804',
'WHEATON        0.003 59.949   3805',
'TURNBULL       0.003 59.952   3806',
'SHUMAN         0.003 59.955   3807',
'POINTER        0.003 59.959   3808',
'MOSIER         0.003 59.962   3809',
'MCCUE          0.003 59.965   3810',
'LIGON          0.003 59.968   3811',
'KOZLOWSKI      0.003 59.971   3812',
'JOHANSEN       0.003 59.975   3813',
'INGLE          0.003 59.978   3814',
'HERR           0.003 59.981   3815',
'BRIONES        0.003 59.984   3816',
'SOUTHERN       0.003 59.987   3817',
'SNIPES         0.003 59.990   3818',
'RICKMAN        0.003 59.994   3819',
'PIPKIN         0.003 59.997   3820',
'PEACE          0.003 60.000   3821',
'PANTOJA        0.003 60.003   3822',
'OROSCO         0.003 60.006   3823',
'MONIZ          0.003 60.010   3824',
'LAWLESS        0.003 60.013   3825',
'KUNKEL         0.003 60.016   3826',
'HIBBARD        0.003 60.019   3827',
'GALARZA        0.003 60.022   3828',
'ENOS           0.003 60.025   3829',
'BUSSEY         0.003 60.029   3830',
'SETTLE         0.003 60.032   3831',
'SCHOTT         0.003 60.035   3832',
'SALCIDO        0.003 60.038   3833',
'PERREAULT      0.003 60.041   3834',
'MCDOUGAL       0.003 60.044   3835',
'MCCOOL         0.003 60.048   3836',
'HAIGHT         0.003 60.051   3837',
'GARRIS         0.003 60.054   3838',
'FERRY          0.003 60.057   3839',
'EASTON         0.003 60.060   3840',
'CONYERS        0.003 60.063   3841',
'ATHERTON       0.003 60.067   3842',
'WIMBERLY       0.003 60.070   3843',
'UTLEY          0.003 60.073   3844',
'STEPHEN        0.003 60.076   3845',
'SPELLMAN       0.003 60.079   3846',
'SMITHSON       0.003 60.082   3847',
'SLAGLE         0.003 60.085   3848',
'SKIPPER        0.003 60.089   3849',
'RITCHEY        0.003 60.092   3850',
'RAND           0.003 60.095   3851',
'PETIT          0.003 60.098   3852',
'OSULLIVAN      0.003 60.101   3853',
'OAKS           0.003 60.104   3854',
'NUTT           0.003 60.108   3855',
'MCVAY          0.003 60.111   3856',
'MCCREARY       0.003 60.114   3857',
'MAYHEW         0.003 60.117   3858',
'KNOLL          0.003 60.120   3859',
'JEWETT         0.003 60.123   3860',
'HARWOOD        0.003 60.126   3861',
'HAILEY         0.003 60.130   3862',
'CARDOZA        0.003 60.133   3863',
'ASHE           0.003 60.136   3864',
'ARRIAGA        0.003 60.139   3865',
'ANDRES         0.003 60.142   3866',
'ZELLER         0.003 60.145   3867',
'WIRTH          0.003 60.148   3868',
'WHITMIRE       0.003 60.152   3869',
'STAUFFER       0.003 60.155   3870',
'SPRING         0.003 60.158   3871',
'ROUNTREE       0.003 60.161   3872',
'REDDEN         0.003 60.164   3873',
'MCCAFFREY      0.003 60.167   3874',
'MARTZ          0.003 60.170   3875',
'LOVING         0.003 60.173   3876',
'LAROSE         0.003 60.177   3877',
'LANGDON        0.003 60.180   3878',
'HUMES          0.003 60.183   3879',
'GASKIN         0.003 60.186   3880',
'FABER          0.003 60.189   3881',
'DOLL           0.003 60.192   3882',
'DEVITO         0.003 60.195   3883',
'CASS           0.003 60.199   3884',
'ALMOND         0.003 60.202   3885',
'WINGFIELD      0.003 60.205   3886',
'WINGATE        0.003 60.208   3887',
'VILLAREAL      0.003 60.211   3888',
'TYNER          0.003 60.214   3889',
'SMOTHERS       0.003 60.217   3890',
'SEVERSON       0.003 60.220   3891',
'RENO           0.003 60.223   3892',
'PENNELL        0.003 60.227   3893',
'MAUPIN         0.003 60.230   3894',
'LEIGHTON       0.003 60.233   3895',
'JANSSEN        0.003 60.236   3896',
'HASSELL        0.003 60.239   3897',
'HALLMAN        0.003 60.242   3898',
'HALCOMB        0.003 60.245   3899',
'FOLSE          0.003 60.248   3900',
'FITZSIMMONS    0.003 60.251   3901',
'FAHEY          0.003 60.255   3902',
'CRANFORD       0.003 60.258   3903',
'BOLEN          0.003 60.261   3904',
'BATTLES        0.003 60.264   3905',
'BATTAGLIA      0.003 60.267   3906',
'WOOLDRIDGE     0.003 60.270   3907',
'WEED           0.003 60.273   3908',
'TRASK          0.003 60.276   3909',
'ROSSER         0.003 60.279   3910',
'REGALADO       0.003 60.283   3911',
'MCEWEN         0.003 60.286   3912',
'KEEFE          0.003 60.289   3913',
'FUQUA          0.003 60.292   3914',
'ECHEVARRIA     0.003 60.295   3915',
'DOMINGO        0.003 60.298   3916',
'DANG           0.003 60.301   3917',
'CARO           0.003 60.304   3918',
'BOYNTON        0.003 60.307   3919',
'ANDRUS         0.003 60.310   3920',
'WILD           0.003 60.314   3921',
'VIERA          0.003 60.317   3922',
'VANMETER       0.003 60.320   3923',
'TABER          0.003 60.323   3924',
'SPRADLIN       0.003 60.326   3925',
'SEIBERT        0.003 60.329   3926',
'PROVOST        0.003 60.332   3927',
'PRENTICE       0.003 60.335   3928',
'OLIPHANT       0.003 60.338   3929',
'LAPORTE        0.003 60.341   3930',
'HWANG          0.003 60.344   3931',
'HATCHETT       0.003 60.347   3932',
'HASS           0.003 60.351   3933',
'GREINER        0.003 60.354   3934',
'FREEDMAN       0.003 60.357   3935',
'COVERT         0.003 60.360   3936',
'CHILTON        0.003 60.363   3937',
'BYARS          0.003 60.366   3938',
'WIESE          0.003 60.369   3939',
'VENEGAS        0.003 60.372   3940',
'SWANK          0.003 60.375   3941',
'SHRADER        0.003 60.378   3942',
'RODERICK       0.003 60.381   3943',
'ROBERGE        0.003 60.384   3944',
'MULLIS         0.003 60.387   3945',
'MORTENSEN      0.003 60.391   3946',
'MCCUNE         0.003 60.394   3947',
'MARLOWE        0.003 60.397   3948',
'KIRCHNER       0.003 60.400   3949',
'KECK           0.003 60.403   3950',
'ISAACSON       0.003 60.406   3951',
'HOSTETLER      0.003 60.409   3952',
'HALVERSON      0.003 60.412   3953',
'GUNTHER        0.003 60.415   3954',
'GRISWOLD       0.003 60.418   3955',
'GERARD         0.003 60.421   3956',
'FENNER         0.003 60.424   3957',
'DURDEN         0.003 60.427   3958',
'BLACKWOOD      0.003 60.430   3959',
'BERTRAM        0.003 60.433   3960',
'AHRENS         0.003 60.437   3961',
'SAWYERS        0.003 60.440   3962',
'SAVOY          0.003 60.443   3963',
'NABORS         0.003 60.446   3964',
'MCSWAIN        0.003 60.449   3965',
'MACKAY         0.003 60.452   3966',
'LOY            0.003 60.455   3967',
'LAVENDER       0.003 60.458   3968',
'LASH           0.003 60.461   3969',
'LABBE          0.003 60.464   3970',
'JESSUP         0.003 60.467   3971',
'HUBERT         0.003 60.470   3972',
'FULLERTON      0.003 60.473   3973',
'DONNELL        0.003 60.476   3974',
'CRUSE          0.003 60.479   3975',
'CRITTENDEN     0.003 60.482   3976',
'CORREIA        0.003 60.485   3977',
'CENTENO        0.003 60.488   3978',
'CAUDLE         0.003 60.491   3979',
'CANADY         0.003 60.495   3980',
'CALLENDER      0.003 60.498   3981',
'ALARCON        0.003 60.501   3982',
'AHERN          0.003 60.504   3983',
'WINFREY        0.003 60.507   3984',
'TRIBBLE        0.003 60.510   3985',
'TOM            0.003 60.513   3986',
'STYLES         0.003 60.516   3987',
'SALLEY         0.003 60.519   3988',
'RODEN          0.003 60.522   3989',
'MUSGROVE       0.003 60.525   3990',
'MINNICK        0.003 60.528   3991',
'FORTENBERRY    0.003 60.531   3992',
'CARRION        0.003 60.534   3993',
'BUNTING        0.003 60.537   3994',
'BETHEL         0.003 60.540   3995',
'BATISTE        0.003 60.543   3996',
'WOO            0.003 60.546   3997',
'WHITED         0.003 60.549   3998',
'UNDERHILL      0.003 60.552   3999',
'STILLWELL      0.003 60.555   4000',
'SILVIA         0.003 60.558   4001',
'RAUCH          0.003 60.561   4002',
'PIPPIN         0.003 60.564   4003',
'PERRIN         0.003 60.567   4004',
'MESSENGER      0.003 60.570   4005',
'MANCINI        0.003 60.573   4006',
'LISTER         0.003 60.576   4007',
'KINARD         0.003 60.579   4008',
'HARTMANN       0.003 60.582   4009',
'FLECK          0.003 60.585   4010',
'BROADWAY       0.003 60.588   4011',
'WILT           0.003 60.591   4012',
'TREADWAY       0.003 60.594   4013',
'THORNHILL      0.003 60.598   4014',
'SPEED          0.003 60.601   4015',
'SPALDING       0.003 60.604   4016',
'SAM            0.003 60.607   4017',
'RAFFERTY       0.003 60.610   4018',
'PITRE          0.003 60.613   4019',
'PATINO         0.003 60.616   4020',
'ORDONEZ        0.003 60.619   4021',
'LINKOUS        0.003 60.622   4022',
'KELLEHER       0.003 60.625   4023',
'HOMAN          0.003 60.628   4024',
'HOLIDAY        0.003 60.631   4025',
'GALBRAITH      0.003 60.634   4026',
'FEENEY         0.003 60.637   4027',
'DORRIS         0.003 60.640   4028',
'CURTIN         0.003 60.643   4029',
'COWARD         0.003 60.646   4030',
'CAMARILLO      0.003 60.649   4031',
'BUSS           0.003 60.652   4032',
'BUNNELL        0.003 60.655   4033',
'BOLT           0.003 60.658   4034',
'BEELER         0.003 60.661   4035',
'AUTRY          0.003 60.664   4036',
'ALCALA         0.003 60.667   4037',
'WITTE          0.003 60.670   4038',
'WENTZ          0.003 60.673   4039',
'STIDHAM        0.003 60.676   4040',
'SHIVELY        0.003 60.679   4041',
'NUNLEY         0.003 60.682   4042',
'MEACHAM        0.003 60.685   4043',
'MARTINS        0.003 60.688   4044',
'LEMKE          0.003 60.691   4045',
'LEFEBVRE       0.003 60.694   4046',
'KAYE           0.003 60.696   4047',
'HYNES          0.003 60.699   4048',
'HOROWITZ       0.003 60.702   4049',
'HOPPE          0.003 60.705   4050',
'HOLCOMBE       0.003 60.708   4051',
'ESTRELLA       0.003 60.711   4052',
'DUNNE          0.003 60.714   4053',
'DERR           0.003 60.717   4054',
'COCHRANE       0.003 60.720   4055',
'BRITTAIN       0.003 60.723   4056',
'BEDARD         0.003 60.726   4057',
'BEAUREGARD     0.003 60.729   4058',
'TORRENCE       0.003 60.732   4059',
'STRUNK         0.003 60.735   4060',
'SORIA          0.003 60.738   4061',
'SIMONSON       0.003 60.741   4062',
'SHUMAKER       0.003 60.744   4063',
'SCOGGINS       0.003 60.747   4064',
'PACKER         0.003 60.750   4065',
'OCONNER        0.003 60.753   4066',
'MORIARTY       0.003 60.756   4067',
'LEROY          0.003 60.759   4068',
'KUNTZ          0.003 60.762   4069',
'IVES           0.003 60.765   4070',
'HUTCHESON      0.003 60.768   4071',
'HORAN          0.003 60.771   4072',
'HALES          0.003 60.774   4073',
'GARMON         0.003 60.777   4074',
'FITTS          0.003 60.780   4075',
'DELL           0.003 60.783   4076',
'BOHN           0.003 60.786   4077',
'ATCHISON       0.003 60.789   4078',
'WORTH          0.003 60.792   4079',
'WISNIEWSKI     0.003 60.795   4080',
'WILL           0.003 60.798   4081',
'VANWINKLE      0.003 60.801   4082',
'STURM          0.003 60.804   4083',
'SALLEE         0.003 60.807   4084',
'PROSSER        0.003 60.810   4085',
'MOEN           0.003 60.812   4086',
'LUNDBERG       0.003 60.815   4087',
'KUNZ           0.003 60.818   4088',
'KOHL           0.003 60.821   4089',
'KEANE          0.003 60.824   4090',
'JORGENSON      0.003 60.827   4091',
'JAYNES         0.003 60.830   4092',
'FUNDERBURK     0.003 60.833   4093',
'FREED          0.003 60.836   4094',
'FRAME          0.003 60.839   4095',
'DURR           0.003 60.842   4096',
'CREAMER        0.003 60.845   4097',
'COSGROVE       0.003 60.848   4098',
'CANDELARIA     0.003 60.851   4099',
'BERLIN         0.003 60.854   4100',
'BATSON         0.003 60.857   4101',
'VANHOOSE       0.003 60.860   4102',
'THOMSEN        0.003 60.863   4103',
'TEETER         0.003 60.866   4104',
'SOMMER         0.003 60.869   4105',
'SMYTH          0.003 60.872   4106',
'SENA           0.003 60.874   4107',
'REDMON         0.003 60.877   4108',
'ORELLANA       0.003 60.880   4109',
'MANESS         0.003 60.883   4110',
'LENNON         0.003 60.886   4111',
'HEFLIN         0.003 60.889   4112',
'GOULET         0.003 60.892   4113',
'FRICK          0.003 60.895   4114',
'FORNEY         0.003 60.898   4115',
'DOLLAR         0.003 60.901   4116',
'BUNKER         0.003 60.904   4117',
'ASBURY         0.003 60.907   4118',
'AGUIAR         0.003 60.910   4119',
'TALBOTT        0.003 60.913   4120',
'SOUTHARD       0.003 60.916   4121',
'PLEASANT       0.003 60.919   4122',
'MOWERY         0.003 60.921   4123',
'MEARS          0.003 60.924   4124',
'LEMMON         0.003 60.927   4125',
'KRIEGER        0.003 60.930   4126',
'HICKSON        0.003 60.933   4127',
'GRACIA         0.003 60.936   4128',
'ELSTON         0.003 60.939   4129',
'DUONG          0.003 60.942   4130',
'DELGADILLO     0.003 60.945   4131',
'DAYTON         0.003 60.948   4132',
'DASILVA        0.003 60.951   4133',
'CONAWAY        0.003 60.954   4134',
'CATRON         0.003 60.957   4135',
'BRUTON         0.003 60.960   4136',
'BRADBURY       0.003 60.962   4137',
'BORDELON       0.003 60.965   4138',
'BIVINS         0.003 60.968   4139',
'BITTNER        0.003 60.971   4140',
'BERGSTROM      0.003 60.974   4141',
'BEALS          0.003 60.977   4142',
'ABELL          0.003 60.980   4143',
'WHELAN         0.003 60.983   4144',
'TRAVERS        0.003 60.986   4145',
'TEJADA         0.003 60.989   4146',
'PULLEY         0.003 60.992   4147',
'PINO           0.003 60.995   4148',
'NORFLEET       0.003 60.997   4149',
'NEALY          0.003 61.000   4150',
'MAES           0.003 61.003   4151',
'LOPER          0.003 61.006   4152',
'HELD           0.003 61.009   4153',
'GERALD         0.003 61.012   4154',
'GATEWOOD       0.003 61.015   4155',
'FRIERSON       0.003 61.018   4156',
'FREUND         0.003 61.021   4157',
'FINNEGAN       0.003 61.024   4158',
'CUPP           0.003 61.027   4159',
'COVEY          0.003 61.029   4160',
'CATALANO       0.003 61.032   4161',
'BOEHM          0.003 61.035   4162',
'BADER          0.003 61.038   4163',
'YOON           0.003 61.041   4164',
'WALSTON        0.003 61.044   4165',
'TENNEY         0.003 61.047   4166',
'SIPES          0.003 61.050   4167',
'ROLLER         0.003 61.053   4168',
'RAWLINS        0.003 61.056   4169',
'MEDLOCK        0.003 61.058   4170',
'MCCASKILL      0.003 61.061   4171',
'MCCALLISTER    0.003 61.064   4172',
'MARCOTTE       0.003 61.067   4173',
'MACLEAN        0.003 61.070   4174',
'HUGHEY         0.003 61.073   4175',
'HENKE          0.003 61.076   4176',
'HARWELL        0.003 61.079   4177',
'GLADNEY        0.003 61.082   4178',
'GILSON         0.003 61.084   4179',
'DEW            0.003 61.087   4180',
'CHISM          0.003 61.090   4181',
'CASKEY         0.003 61.093   4182',
'BRANDENBURG    0.003 61.096   4183',
'BAYLOR         0.003 61.099   4184',
'VILLASENOR     0.003 61.102   4185',
'VEAL           0.003 61.105   4186',
'VAN            0.003 61.108   4187',
'THATCHER       0.003 61.110   4188',
'STEGALL        0.003 61.113   4189',
'SHORE          0.003 61.116   4190',
'PETRIE         0.003 61.119   4191',
'NOWLIN         0.003 61.122   4192',
'NAVARRETE      0.003 61.125   4193',
'MUHAMMAD       0.003 61.128   4194',
'LOMBARD        0.003 61.131   4195',
'LOFTIN         0.003 61.133   4196',
'LEMASTER       0.003 61.136   4197',
'KROLL          0.003 61.139   4198',
'KOVACH         0.003 61.142   4199',
'KIMBRELL       0.003 61.145   4200',
'KIDWELL        0.003 61.148   4201',
'HERSHBERGER    0.003 61.151   4202',
'FULCHER        0.003 61.154   4203',
'ENG            0.003 61.156   4204',
'CANTWELL       0.003 61.159   4205',
'BUSTOS         0.003 61.162   4206',
'BOLAND         0.003 61.165   4207',
'BOBBITT        0.003 61.168   4208',
'BINKLEY        0.003 61.171   4209',
'WESTER         0.003 61.174   4210',
'WEIS           0.003 61.177   4211',
'VERDIN         0.003 61.179   4212',
'TONG           0.003 61.182   4213',
'TILLER         0.003 61.185   4214',
'SISCO          0.003 61.188   4215',
'SHARKEY        0.003 61.191   4216',
'SEYMORE        0.003 61.194   4217',
'ROSENBAUM      0.003 61.197   4218',
'ROHR           0.003 61.199   4219',
'QUINONEZ       0.003 61.202   4220',
'PINKSTON       0.003 61.205   4221',
'NATION         0.003 61.208   4222',
'MALLEY         0.003 61.211   4223',
'LOGUE          0.003 61.214   4224',
'LESSARD        0.003 61.217   4225',
'LERNER         0.003 61.220   4226',
'LEBRON         0.003 61.222   4227',
'KRAUSS         0.003 61.225   4228',
'KLINGER        0.003 61.228   4229',
'HALSTEAD       0.003 61.231   4230',
'HALLER         0.003 61.234   4231',
'GETZ           0.003 61.237   4232',
'BURROW         0.003 61.240   4233',
'BRANT          0.003 61.242   4234',
'ALGER          0.003 61.245   4235',
'VICTOR         0.003 61.248   4236',
'SHORES         0.003 61.251   4237',
'SCULLY         0.003 61.254   4238',
'POUNDS         0.003 61.257   4239',
'PFEIFER        0.003 61.259   4240',
'PERRON         0.003 61.262   4241',
'NELMS          0.003 61.265   4242',
'MUNN           0.003 61.268   4243',
'MCMASTER       0.003 61.271   4244',
'MCKENNEY       0.003 61.274   4245',
'MANNS          0.003 61.277   4246',
'KNUDSON        0.003 61.279   4247',
'HUTCHENS       0.003 61.282   4248',
'HUSKEY         0.003 61.285   4249',
'GOEBEL         0.003 61.288   4250',
'FLAGG          0.003 61.291   4251',
'CUSHMAN        0.003 61.294   4252',
'CLICK          0.003 61.296   4253',
'CASTELLANO     0.003 61.299   4254',
'CARDER         0.003 61.302   4255',
'BUMGARNER      0.003 61.305   4256',
'BLAINE         0.003 61.308   4257',
'BIBLE          0.003 61.311   4258',
'WAMPLER        0.003 61.314   4259',
'SPINKS         0.003 61.316   4260',
'ROBSON         0.003 61.319   4261',
'NEEL           0.003 61.322   4262',
'MCREYNOLDS     0.003 61.325   4263',
'MATHIAS        0.003 61.328   4264',
'MAAS           0.003 61.331   4265',
'LOERA          0.003 61.333   4266',
'KASPER         0.003 61.336   4267',
'JOSE           0.003 61.339   4268',
'JENSON         0.003 61.342   4269',
'FLOREZ         0.003 61.345   4270',
'COONS          0.003 61.348   4271',
'BUCKINGHAM     0.003 61.350   4272',
'BROGAN         0.003 61.353   4273',
'BERRYMAN       0.003 61.356   4274',
'WILMOTH        0.003 61.359   4275',
'WILHITE        0.003 61.362   4276',
'THRASH         0.003 61.364   4277',
'SHEPHARD       0.003 61.367   4278',
'SEIDEL         0.003 61.370   4279',
'SCHULZE        0.003 61.373   4280',
'ROLDAN         0.003 61.376   4281',
'PETTIS         0.003 61.379   4282',
'OBRYAN         0.003 61.381   4283',
'MAKI           0.003 61.384   4284',
'MACKIE         0.003 61.387   4285',
'HATLEY         0.003 61.390   4286',
'FRAZER         0.003 61.393   4287',
'FIORE          0.003 61.395   4288',
'FALLS          0.003 61.398   4289',
'CHESSER        0.003 61.401   4290',
'BUI            0.003 61.404   4291',
'BOTTOMS        0.003 61.407   4292',
'BISSON         0.003 61.409   4293',
'BENEFIELD      0.003 61.412   4294',
'ALLMAN         0.003 61.415   4295',
'WILKE          0.003 61.418   4296',
'TRUDEAU        0.003 61.421   4297',
'TIMM           0.003 61.423   4298',
'SHIFFLETT      0.003 61.426   4299',
'RAU            0.003 61.429   4300',
'MUNDY          0.003 61.432   4301',
'MILLIKEN       0.003 61.435   4302',
'MAYERS         0.003 61.437   4303',
'LEAKE          0.003 61.440   4304',
'KOHN           0.003 61.443   4305',
'HUNTINGTON     0.003 61.446   4306',
'HORSLEY        0.003 61.449   4307',
'HERMANN        0.003 61.451   4308',
'GUERIN         0.003 61.454   4309',
'FRYER          0.003 61.457   4310',
'FRIZZELL       0.003 61.460   4311',
'FORET          0.003 61.463   4312',
'FLEMMING       0.003 61.465   4313',
'FIFE           0.003 61.468   4314',
'CRISWELL       0.003 61.471   4315',
'CARBAJAL       0.003 61.474   4316',
'BOZEMAN        0.003 61.477   4317',
'BOISVERT       0.003 61.479   4318',
'ARCHIE         0.003 61.482   4319',
'ANTONIO        0.003 61.485   4320',
'ANGULO         0.003 61.488   4321',
'WALLEN         0.003 61.491   4322',
'TAPP           0.003 61.493   4323',
'SILVERS        0.003 61.496   4324',
'RAMSAY         0.003 61.499   4325',
'OSHEA          0.003 61.502   4326',
'ORTA           0.003 61.505   4327',
'MOLL           0.003 61.507   4328',
'MCKEEVER       0.003 61.510   4329',
'MCGEHEE        0.003 61.513   4330',
'LUCIANO        0.003 61.516   4331',
'LINVILLE       0.003 61.518   4332',
'KIEFER         0.003 61.521   4333',
'KETCHUM        0.003 61.524   4334',
'HOWERTON       0.003 61.527   4335',
'GROCE          0.003 61.530   4336',
'GAYLORD        0.003 61.532   4337',
'GASS           0.003 61.535   4338',
'FUSCO          0.003 61.538   4339',
'CORBITT        0.003 61.541   4340',
'BLYTHE         0.003 61.543   4341',
'BETZ           0.003 61.546   4342',
'BARTELS        0.003 61.549   4343',
'AMARAL         0.003 61.552   4344',
'AIELLO         0.003 61.555   4345',
'YOO            0.003 61.557   4346',
'WEDDLE         0.003 61.560   4347',
'TROY           0.003 61.563   4348',
'SUN            0.003 61.566   4349',
'SPERRY         0.003 61.568   4350',
'SEILER         0.003 61.571   4351',
'RUNYAN         0.003 61.574   4352',
'RALEY          0.003 61.577   4353',
'OVERBY         0.003 61.579   4354',
'OSTEEN         0.003 61.582   4355',
'OLDS           0.003 61.585   4356',
'MCKEOWN        0.003 61.588   4357',
'MAURO          0.003 61.591   4358',
'MATNEY         0.003 61.593   4359',
'LAUER          0.003 61.596   4360',
'LATTIMORE      0.003 61.599   4361',
'HINDMAN        0.003 61.602   4362',
'HARTWELL       0.003 61.604   4363',
'FREDRICKSON    0.003 61.607   4364',
'FREDERICKS     0.003 61.610   4365',
'ESPINO         0.003 61.613   4366',
'CLEGG          0.003 61.615   4367',
'CARSWELL       0.003 61.618   4368',
'CAMBELL        0.003 61.621   4369',
'BURKHOLDER     0.003 61.624   4370',
'AUGUST         0.003 61.627   4371',
'WOODBURY       0.003 61.629   4372',
'WELKER         0.003 61.632   4373',
'TOTTEN         0.003 61.635   4374',
'THORNBURG      0.003 61.638   4375',
'THERIAULT      0.003 61.640   4376',
'STITT          0.003 61.643   4377',
'STAMM          0.003 61.646   4378',
'STACKHOUSE     0.003 61.649   4379',
'SIMONE         0.003 61.651   4380',
'SCHOLL         0.003 61.654   4381',
'SAXON          0.003 61.657   4382',
'RIFE           0.003 61.660   4383',
'RAZO           0.003 61.662   4384',
'QUINLAN        0.003 61.665   4385',
'PINKERTON      0.003 61.668   4386',
'OLIVO          0.003 61.671   4387',
'NESMITH        0.003 61.673   4388',
'NALL           0.003 61.676   4389',
'MATTOS         0.003 61.679   4390',
'LEAK           0.003 61.682   4391',
'LAFFERTY       0.003 61.684   4392',
'JUSTUS         0.003 61.687   4393',
'GIRON          0.003 61.690   4394',
'GEER           0.003 61.693   4395',
'FIELDER        0.003 61.695   4396',
'EAGLE          0.003 61.698   4397',
'DRAYTON        0.003 61.701   4398',
'DORTCH         0.003 61.704   4399',
'CONNERS        0.003 61.706   4400',
'CONGER         0.003 61.709   4401',
'CHAU           0.003 61.712   4402',
'BOATWRIGHT     0.003 61.715   4403',
'BILLIOT        0.003 61.717   4404',
'BARDEN         0.003 61.720   4405',
'ARMENTA        0.003 61.723   4406',
'ANTOINE        0.003 61.726   4407',
'TIBBETTS       0.003 61.728   4408',
'STEADMAN       0.003 61.731   4409',
'SLATTERY       0.003 61.734   4410',
'SIDES          0.003 61.736   4411',
'RINALDI        0.003 61.739   4412',
'RAYNOR         0.003 61.742   4413',
'RAYFORD        0.003 61.745   4414',
'PINCKNEY       0.003 61.747   4415',
'PETTIGREW      0.003 61.750   4416',
'NICKEL         0.003 61.753   4417',
'MILNE          0.003 61.756   4418',
'MATTESON       0.003 61.758   4419',
'HALSEY         0.003 61.761   4420',
'GONSALVES      0.003 61.764   4421',
'FELLOWS        0.003 61.767   4422',
'DURAND         0.003 61.769   4423',
'DESIMONE       0.003 61.772   4424',
'COWLEY         0.003 61.775   4425',
'COWLES         0.003 61.777   4426',
'BRILL          0.003 61.780   4427',
'BARHAM         0.003 61.783   4428',
'BARELA         0.003 61.786   4429',
'BARBA          0.003 61.788   4430',
'ASHMORE        0.003 61.791   4431',
'WITHROW        0.003 61.794   4432',
'VALENTI        0.003 61.797   4433',
'TEJEDA         0.003 61.799   4434',
'SPRIGGS        0.003 61.802   4435',
'SAYRE          0.003 61.805   4436',
'SALERNO        0.003 61.807   4437',
'PLACE          0.003 61.810   4438',
'PELTIER        0.003 61.813   4439',
'PEEL           0.003 61.816   4440',
'MERRIMAN       0.003 61.818   4441',
'MATHESON       0.003 61.821   4442',
'LOWMAN         0.003 61.824   4443',
'LINDSTROM      0.003 61.826   4444',
'HYLAND         0.003 61.829   4445',
'HOMER          0.003 61.832   4446',
'HA             0.003 61.835   4447',
'GIROUX         0.003 61.837   4448',
'FRIES          0.003 61.840   4449',
'FRASIER        0.003 61.843   4450',
'EARLS          0.003 61.846   4451',
'DUGAS          0.003 61.848   4452',
'DAMON          0.003 61.851   4453',
'DABNEY         0.003 61.854   4454',
'COLLADO        0.003 61.856   4455',
'BRISENO        0.003 61.859   4456',
'BAXLEY         0.003 61.862   4457',
'ANDRE          0.003 61.865   4458',
'WORD           0.003 61.867   4459',
'WHYTE          0.003 61.870   4460',
'WENGER         0.003 61.873   4461',
'VANOVER        0.003 61.875   4462',
'VANBUREN       0.003 61.878   4463',
'THIEL          0.003 61.881   4464',
'SCHINDLER      0.003 61.883   4465',
'SCHILLER       0.003 61.886   4466',
'RIGBY          0.003 61.889   4467',
'POMEROY        0.003 61.892   4468',
'PASSMORE       0.003 61.894   4469',
'MARBLE         0.003 61.897   4470',
'MANZO          0.003 61.900   4471',
'MAHAFFEY       0.003 61.902   4472',
'LINDGREN       0.003 61.905   4473',
'LAFLAMME       0.003 61.908   4474',
'GREATHOUSE     0.003 61.911   4475',
'FITE           0.003 61.913   4476',
'FERRARI        0.003 61.916   4477',
'CALABRESE      0.003 61.919   4478',
'BAYNE          0.003 61.921   4479',
'YAMAMOTO       0.003 61.924   4480',
'WICK           0.003 61.927   4481',
'TOWNES         0.003 61.929   4482',
'THAMES         0.003 61.932   4483',
'STEEL          0.003 61.935   4484',
'REINHART       0.003 61.937   4485',
'PEELER         0.003 61.940   4486',
'NARANJO        0.003 61.943   4487',
'MONTEZ         0.003 61.945   4488',
'MCDADE         0.003 61.948   4489',
'MAST           0.003 61.951   4490',
'MARKLEY        0.003 61.954   4491',
'MARCHAND       0.003 61.956   4492',
'LEEPER         0.003 61.959   4493',
'KONG           0.003 61.962   4494',
'KELLUM         0.003 61.964   4495',
'HUDGENS        0.003 61.967   4496',
'HENNESSEY      0.003 61.970   4497',
'HADDEN         0.003 61.972   4498',
'GUESS          0.003 61.975   4499',
'GAINEY         0.003 61.978   4500',
'COPPOLA        0.003 61.980   4501',
'BORREGO        0.003 61.983   4502',
'BOLLING        0.003 61.986   4503',
'BEANE          0.003 61.988   4504',
'AULT           0.003 61.991   4505',
'SLATON         0.003 61.994   4506',
'POLAND         0.003 61.997   4507',
'PAPE           0.003 61.999   4508',
'NULL           0.003 62.002   4509',
'MULKEY         0.003 62.005   4510',
'LIGHTNER       0.003 62.007   4511',
'LANGER         0.003 62.010   4512',
'HILLARD        0.003 62.013   4513',
'GLASGOW        0.003 62.015   4514',
'FABIAN         0.003 62.018   4515',
'ETHRIDGE       0.003 62.021   4516',
'ENRIGHT        0.003 62.023   4517',
'DEROSA         0.003 62.026   4518',
'BASKIN         0.003 62.029   4519',
'ALFRED         0.003 62.031   4520',
'WEINBERG       0.003 62.034   4521',
'TURMAN         0.003 62.037   4522',
'TINKER         0.003 62.039   4523',
'SOMERVILLE     0.003 62.042   4524',
'PARDO          0.003 62.045   4525',
'NOLL           0.003 62.047   4526',
'LASHLEY        0.003 62.050   4527',
'INGRAHAM       0.003 62.052   4528',
'HILLER         0.003 62.055   4529',
'HENDON         0.003 62.058   4530',
'GLAZE          0.003 62.060   4531',
'FLORA          0.003 62.063   4532',
'COTHRAN        0.003 62.066   4533',
'COOKSEY        0.003 62.068   4534',
'CONTE          0.003 62.071   4535',
'CARRICO        0.003 62.074   4536',
'APPLE          0.003 62.076   4537',
'ABNER          0.003 62.079   4538',
'WOOLEY         0.003 62.082   4539',
'SWOPE          0.003 62.084   4540',
'SUMMERLIN      0.003 62.087   4541',
'STURGIS        0.003 62.090   4542',
'STURDIVANT     0.003 62.092   4543',
'STOTT          0.003 62.095   4544',
'SPURGEON       0.003 62.097   4545',
'SPILLMAN       0.003 62.100   4546',
'SPEIGHT        0.003 62.103   4547',
'ROUSSEL        0.003 62.105   4548',
'POPP           0.003 62.108   4549',
'NUTTER         0.003 62.111   4550',
'MCKEON         0.003 62.113   4551',
'MAZZA          0.003 62.116   4552',
'MAGNUSON       0.003 62.119   4553',
'LANNING        0.003 62.121   4554',
'KOZAK          0.003 62.124   4555',
'JANKOWSKI      0.003 62.127   4556',
'HEYWARD        0.003 62.129   4557',
'FORSTER        0.003 62.132   4558',
'CORWIN         0.003 62.134   4559',
'CALLAGHAN      0.003 62.137   4560',
'BAYS           0.003 62.140   4561',
'WORTHAM        0.003 62.142   4562',
'USHER          0.003 62.145   4563',
'THERIOT        0.003 62.148   4564',
'SAYERS         0.003 62.150   4565',
'SABO           0.003 62.153   4566',
'RUPERT         0.003 62.155   4567',
'POLING         0.003 62.158   4568',
'NATHAN         0.003 62.161   4569',
'LOYA           0.003 62.163   4570',
'LIEBERMAN      0.003 62.166   4571',
'LEVI           0.003 62.169   4572',
'LAROCHE        0.003 62.171   4573',
'LABELLE        0.003 62.174   4574',
'HOWES          0.003 62.176   4575',
'HARR           0.003 62.179   4576',
'GARAY          0.003 62.182   4577',
'FOGARTY        0.003 62.184   4578',
'EVERSON        0.003 62.187   4579',
'DURKIN         0.003 62.190   4580',
'DOMINQUEZ      0.003 62.192   4581',
'CHAVES         0.003 62.195   4582',
'CHAMBLISS      0.003 62.197   4583',
'ALFONSO        0.003 62.200   4584',
'WITCHER        0.003 62.203   4585',
'WILBER         0.003 62.205   4586',
'VIEIRA         0.003 62.208   4587',
'VANDIVER       0.003 62.210   4588',
'TERRILL        0.003 62.213   4589',
'STOKER         0.003 62.216   4590',
'SCHREINER      0.003 62.218   4591',
'NESTOR         0.003 62.221   4592',
'MOORMAN        0.003 62.224   4593',
'LIDDELL        0.003 62.226   4594',
'LEW            0.003 62.229   4595',
'LAWHORN        0.003 62.231   4596',
'KRUG           0.003 62.234   4597',
'IRONS          0.003 62.237   4598',
'HYLTON         0.003 62.239   4599',
'HOLLENBECK     0.003 62.242   4600',
'HERRIN         0.003 62.244   4601',
'HEMBREE        0.003 62.247   4602',
'HAIR           0.003 62.250   4603',
'GOOLSBY        0.003 62.252   4604',
'GOODIN         0.003 62.255   4605',
'GILMER         0.003 62.257   4606',
'FOLTZ          0.003 62.260   4607',
'DINKINS        0.003 62.263   4608',
'DAUGHTRY       0.003 62.265   4609',
'CABAN          0.003 62.268   4610',
'BRIM           0.003 62.270   4611',
'BRILEY         0.003 62.273   4612',
'BILODEAU       0.003 62.276   4613',
'BEAR           0.003 62.278   4614',
'WYANT          0.003 62.281   4615',
'VERGARA        0.003 62.283   4616',
'TALLENT        0.003 62.286   4617',
'SWEARINGEN     0.003 62.289   4618',
'STROUP         0.003 62.291   4619',
'SHERRY         0.003 62.294   4620',
'SCRIBNER       0.003 62.296   4621',
'ROGER          0.003 62.299   4622',
'QUILLEN        0.003 62.302   4623',
'PITMAN         0.003 62.304   4624',
'MONACO         0.003 62.307   4625',
'MCCANTS        0.003 62.309   4626',
'MAXFIELD       0.003 62.312   4627',
'MARTINSON      0.003 62.315   4628',
'LANDON         0.003 62.317   4629',
'HOLTZ          0.003 62.320   4630',
'FLOURNOY       0.003 62.322   4631',
'BROOKINS       0.003 62.325   4632',
'BRODY          0.003 62.327   4633',
'BAUMGARDNER    0.003 62.330   4634',
'ANGELO         0.003 62.333   4635',
'STRAUB         0.003 62.335   4636',
'SILLS          0.003 62.338   4637',
'ROYBAL         0.003 62.340   4638',
'ROUNDTREE      0.003 62.343   4639',
'OSWALT         0.003 62.346   4640',
'MONEY          0.003 62.348   4641',
'MCGRIFF        0.003 62.351   4642',
'MCDOUGALL      0.003 62.353   4643',
'MCCLEARY       0.003 62.356   4644',
'MAGGARD        0.003 62.358   4645',
'GRAGG          0.003 62.361   4646',
'GOODING        0.003 62.364   4647',
'GODINEZ        0.003 62.366   4648',
'DOOLITTLE      0.003 62.369   4649',
'DONATO         0.003 62.371   4650',
'COWELL         0.003 62.374   4651',
'CASSELL        0.003 62.376   4652',
'BRACKEN        0.003 62.379   4653',
'APPEL          0.003 62.382   4654',
'AHMAD          0.003 62.384   4655',
'ZAMBRANO       0.003 62.387   4656',
'REUTER         0.003 62.389   4657',
'PEREA          0.003 62.392   4658',
'OLIVE          0.003 62.394   4659',
'NAKAMURA       0.003 62.397   4660',
'MONAGHAN       0.003 62.400   4661',
'MICKENS        0.003 62.402   4662',
'MCCLINTON      0.003 62.405   4663',
'MCCLARY        0.003 62.407   4664',
'MARLER         0.003 62.410   4665',
'KISH           0.003 62.412   4666',
'JUDKINS        0.003 62.415   4667',
'GILBREATH      0.003 62.417   4668',
'FREESE         0.003 62.420   4669',
'FLANIGAN       0.003 62.423   4670',
'FELTS          0.003 62.425   4671',
'ERDMANN        0.003 62.428   4672',
'DODDS          0.003 62.430   4673',
'CHEW           0.003 62.433   4674',
'BROWNELL       0.003 62.435   4675',
'BRAZIL         0.003 62.438   4676',
'BOATRIGHT      0.003 62.440   4677',
'BARRETO        0.003 62.443   4678',
'SLAYTON        0.003 62.446   4679',
'SANDBERG       0.003 62.448   4680',
'SALDIVAR       0.003 62.451   4681',
'PETTWAY        0.003 62.453   4682',
'ODUM           0.003 62.456   4683',
'NARVAEZ        0.003 62.458   4684',
'MOULTRIE       0.003 62.461   4685',
'MONTEMAYOR     0.003 62.463   4686',
'MERRELL        0.003 62.466   4687',
'LEES           0.003 62.468   4688',
'KEYSER         0.003 62.471   4689',
'HOKE           0.003 62.474   4690',
'HARDAWAY       0.003 62.476   4691',
'HANNAN         0.003 62.479   4692',
'GILBERTSON     0.003 62.481   4693',
'FOGG           0.003 62.484   4694',
'DUMONT         0.003 62.486   4695',
'DEBERRY        0.003 62.489   4696',
'COGGINS        0.003 62.491   4697',
'CARRERA        0.003 62.494   4698',
'BUXTON         0.003 62.496   4699',
'BUCHER         0.003 62.499   4700',
'BROADNAX       0.003 62.502   4701',
'BEESON         0.003 62.504   4702',
'ARAUJO         0.003 62.507   4703',
'APPLETON       0.003 62.509   4704',
'AMUNDSON       0.003 62.512   4705',
'AGUAYO         0.003 62.514   4706',
'ACKLEY         0.003 62.517   4707',
'YOCUM          0.003 62.519   4708',
'WORSHAM        0.003 62.522   4709',
'SHIVERS        0.003 62.524   4710',
'SHELLY         0.003 62.527   4711',
'SANCHES        0.003 62.529   4712',
'SACCO          0.003 62.532   4713',
'ROBEY          0.003 62.535   4714',
'RHODEN         0.003 62.537   4715',
'PENDER         0.003 62.540   4716',
'OCHS           0.003 62.542   4717',
'MCCURRY        0.003 62.545   4718',
'MADERA         0.003 62.547   4719',
'LUONG          0.003 62.550   4720',
'LUIS           0.003 62.552   4721',
'KNOTTS         0.003 62.555   4722',
'JACKMAN        0.003 62.557   4723',
'HEINRICH       0.003 62.560   4724',
'HARGRAVE       0.003 62.562   4725',
'GAULT          0.003 62.565   4726',
'FOREST         0.003 62.567   4727',
'COMEAUX        0.003 62.570   4728',
'CHITWOOD       0.003 62.572   4729',
'CHILD          0.003 62.575   4730',
'CARAWAY        0.003 62.577   4731',
'BOETTCHER      0.003 62.580   4732',
'BERNHARDT      0.003 62.583   4733',
'BARRIENTOS     0.003 62.585   4734',
'ZINK           0.003 62.588   4735',
'WICKHAM        0.003 62.590   4736',
'WHITEMAN       0.003 62.593   4737',
'THORP          0.003 62.595   4738',
'STILLMAN       0.003 62.598   4739',
'SETTLES        0.003 62.600   4740',
'SCHOONOVER     0.003 62.603   4741',
'ROQUE          0.003 62.605   4742',
'RIDDELL        0.003 62.608   4743',
'REY            0.003 62.610   4744',
'PILCHER        0.003 62.613   4745',
'PHIFER         0.003 62.615   4746',
'NOVOTNY        0.003 62.618   4747',
'MAPLE          0.003 62.620   4748',
'MACLEOD        0.003 62.623   4749',
'HARDEE         0.003 62.625   4750',
'HAASE          0.003 62.628   4751',
'GRIDER         0.003 62.630   4752',
'FREDRICK       0.003 62.633   4753',
'EARNEST        0.003 62.635   4754',
'DOUCETTE       0.003 62.638   4755',
'CLAUSEN        0.003 62.640   4756',
'CHRISTMAS      0.003 62.643   4757',
'BEVINS         0.003 62.645   4758',
'BEAMON         0.003 62.648   4759',
'BADILLO        0.003 62.650   4760',
'TOLLEY         0.002 62.653   4761',
'TINDALL        0.002 62.655   4762',
'SOULE          0.002 62.658   4763',
'SNOOK          0.002 62.660   4764',
'SEBASTIAN      0.002 62.663   4765',
'SEALE          0.002 62.665   4766',
'PITCHER        0.002 62.668   4767',
'PINKNEY        0.002 62.670   4768',
'PELLEGRINO     0.002 62.673   4769',
'NOWELL         0.002 62.675   4770',
'NEMETH         0.002 62.678   4771',
'NAIL           0.002 62.680   4772',
'MONDRAGON      0.002 62.683   4773',
'MCLANE         0.002 62.685   4774',
'LUNDGREN       0.002 62.688   4775',
'INGALLS        0.002 62.690   4776',
'HUDSPETH       0.002 62.693   4777',
'HIXSON         0.002 62.695   4778',
'GEARHART       0.002 62.698   4779',
'FURLONG        0.002 62.700   4780',
'DOWNES         0.002 62.703   4781',
'DIONNE         0.002 62.705   4782',
'DIBBLE         0.002 62.708   4783',
'DEYOUNG        0.002 62.710   4784',
'CORNEJO        0.002 62.713   4785',
'CAMARA         0.002 62.715   4786',
'BROOKSHIRE     0.002 62.718   4787',
'BOYETTE        0.002 62.720   4788',
'WOLCOTT        0.002 62.723   4789',
'TRACEY         0.002 62.725   4790',
'SURRATT        0.002 62.728   4791',
'SELLARS        0.002 62.730   4792',
'SEGAL          0.002 62.733   4793',
'SALYER         0.002 62.735   4794',
'REEVE          0.002 62.738   4795',
'RAUSCH         0.002 62.740   4796',
'PHILIPS        0.002 62.743   4797',
'LABONTE        0.002 62.745   4798',
'HARO           0.002 62.748   4799',
'GOWER          0.002 62.750   4800',
'FREELAND       0.002 62.753   4801',
'FAWCETT        0.002 62.755   4802',
'EADS           0.002 62.757   4803',
'DRIGGERS       0.002 62.760   4804',
'DONLEY         0.002 62.762   4805',
'COLLETT        0.002 62.765   4806',
'CAGE           0.002 62.767   4807',
'BROMLEY        0.002 62.770   4808',
'BOATMAN        0.002 62.772   4809',
'BALLINGER      0.002 62.775   4810',
'BALDRIDGE      0.002 62.777   4811',
'VOLZ           0.002 62.780   4812',
'TROMBLEY       0.002 62.782   4813',
'STONGE         0.002 62.785   4814',
'SILAS          0.002 62.787   4815',
'SHANAHAN       0.002 62.790   4816',
'RIVARD         0.002 62.792   4817',
'RHYNE          0.002 62.795   4818',
'PEDROZA        0.002 62.797   4819',
'MATIAS         0.002 62.799   4820',
'MALLARD        0.002 62.802   4821',
'JAMIESON       0.002 62.804   4822',
'HEDGEPETH      0.002 62.807   4823',
'HARTNETT       0.002 62.809   4824',
'ESTEVEZ        0.002 62.812   4825',
'ESKRIDGE       0.002 62.814   4826',
'DENMAN         0.002 62.817   4827',
'CHIU           0.002 62.819   4828',
'CHINN          0.002 62.822   4829',
'CATLETT        0.002 62.824   4830',
'CARMACK        0.002 62.827   4831',
'BUIE           0.002 62.829   4832',
'BOOK           0.002 62.832   4833',
'BECHTEL        0.002 62.834   4834',
'BEARDSLEY      0.002 62.836   4835',
'BARD           0.002 62.839   4836',
'BALLOU         0.002 62.841   4837',
'WINDSOR        0.002 62.844   4838',
'ULMER          0.002 62.846   4839',
'STORM          0.002 62.849   4840',
'SKEEN          0.002 62.851   4841',
'ROBLEDO        0.002 62.854   4842',
'RINCON         0.002 62.856   4843',
'REITZ          0.002 62.859   4844',
'PIAZZA         0.002 62.861   4845',
'PEARL          0.002 62.863   4846',
'MUNGER         0.002 62.866   4847',
'MOTEN          0.002 62.868   4848',
'MCMICHAEL      0.002 62.871   4849',
'LOFTUS         0.002 62.873   4850',
'LEDET          0.002 62.876   4851',
'KERSEY         0.002 62.878   4852',
'GROFF          0.002 62.881   4853',
'FOWLKES        0.002 62.883   4854',
'FOLK           0.002 62.885   4855',
'CRUMPTON       0.002 62.888   4856',
'COLLETTE       0.002 62.890   4857',
'CLOUSE         0.002 62.893   4858',
'BETTIS         0.002 62.895   4859',
'VILLAGOMEZ     0.002 62.898   4860',
'TIMMERMAN      0.002 62.900   4861',
'STROM          0.002 62.903   4862',
'SAUL           0.002 62.905   4863',
'SANTORO        0.002 62.907   4864',
'RODDY          0.002 62.910   4865',
'PHILLIP        0.002 62.912   4866',
'PENROD         0.002 62.915   4867',
'MUSSELMAN      0.002 62.917   4868',
'MACPHERSON     0.002 62.920   4869',
'LEBOEUF        0.002 62.922   4870',
'HARLESS        0.002 62.924   4871',
'HADDAD         0.002 62.927   4872',
'GUIDO          0.002 62.929   4873',
'GOLDING        0.002 62.932   4874',
'FULKERSON      0.002 62.934   4875',
'FANNIN         0.002 62.937   4876',
'DULANEY        0.002 62.939   4877',
'DOWDELL        0.002 62.941   4878',
'DEANE          0.002 62.944   4879',
'COTTLE         0.002 62.946   4880',
'CEJA           0.002 62.949   4881',
'CATE           0.002 62.951   4882',
'BOSLEY         0.002 62.954   4883',
'BENGE          0.002 62.956   4884',
'ALBRITTON      0.002 62.958   4885',
'VOIGT          0.002 62.961   4886',
'TROWBRIDGE     0.002 62.963   4887',
'SOILEAU        0.002 62.966   4888',
'SEELY          0.002 62.968   4889',
'ROME           0.002 62.971   4890',
'ROHDE          0.002 62.973   4891',
'PEARSALL       0.002 62.975   4892',
'PAULK          0.002 62.978   4893',
'ORTH           0.002 62.980   4894',
'NASON          0.002 62.983   4895',
'MOTA           0.002 62.985   4896',
'MCMULLIN       0.002 62.987   4897',
'MARQUARDT      0.002 62.990   4898',
'MADIGAN        0.002 62.992   4899',
'HOAG           0.002 62.995   4900',
'GILLUM         0.002 62.997   4901',
'GAYLE          0.002 63.000   4902',
'GABBARD        0.002 63.002   4903',
'FENWICK        0.002 63.004   4904',
'FENDER         0.002 63.007   4905',
'ECK            0.002 63.009   4906',
'DANFORTH       0.002 63.012   4907',
'CUSHING        0.002 63.014   4908',
'CRESS          0.002 63.016   4909',
'CREED          0.002 63.019   4910',
'CAZARES        0.002 63.021   4911',
'CASANOVA       0.002 63.024   4912',
'BEY            0.002 63.026   4913',
'BETTENCOURT    0.002 63.029   4914',
'BARRINGER      0.002 63.031   4915',
'BABER          0.002 63.033   4916',
'STANSBERRY     0.002 63.036   4917',
'SCHRAMM        0.002 63.038   4918',
'RUTTER         0.002 63.041   4919',
'RIVERO         0.002 63.043   4920',
'RACE           0.002 63.045   4921',
'OQUENDO        0.002 63.048   4922',
'NECAISE        0.002 63.050   4923',
'MOUTON         0.002 63.053   4924',
'MONTENEGRO     0.002 63.055   4925',
'MILEY          0.002 63.057   4926',
'MCGOUGH        0.002 63.060   4927',
'MARRA          0.002 63.062   4928',
'MACMILLAN      0.002 63.065   4929',
'LOCK           0.002 63.067   4930',
'LAMONTAGNE     0.002 63.069   4931',
'JASSO          0.002 63.072   4932',
'JAIME          0.002 63.074   4933',
'HORST          0.002 63.077   4934',
'HETRICK        0.002 63.079   4935',
'HEILMAN        0.002 63.081   4936',
'GAYTAN         0.002 63.084   4937',
'GALL           0.002 63.086   4938',
'FRIED          0.002 63.089   4939',
'FORTNEY        0.002 63.091   4940',
'EDEN           0.002 63.093   4941',
'DINGLE         0.002 63.096   4942',
'DESJARDINS     0.002 63.098   4943',
'DABBS          0.002 63.101   4944',
'BURBANK        0.002 63.103   4945',
'BRIGHAM        0.002 63.105   4946',
'BRELAND        0.002 63.108   4947',
'BEAMAN         0.002 63.110   4948',
'BANNER         0.002 63.113   4949',
'ARRIOLA        0.002 63.115   4950',
'YARBOROUGH     0.002 63.117   4951',
'WALLIN         0.002 63.120   4952',
'TREAT          0.002 63.122   4953',
'TOSCANO        0.002 63.125   4954',
'STOWERS        0.002 63.127   4955',
'REISS          0.002 63.129   4956',
'PICHARDO       0.002 63.132   4957',
'ORTON          0.002 63.134   4958',
'MITCHEL        0.002 63.136   4959',
'MICHELS        0.002 63.139   4960',
'MCNAMEE        0.002 63.141   4961',
'MCCRORY        0.002 63.144   4962',
'LEATHERMAN     0.002 63.146   4963',
'KELL           0.002 63.148   4964',
'KEISTER        0.002 63.151   4965',
'JEROME         0.002 63.153   4966',
'HORNING        0.002 63.156   4967',
'HARGETT        0.002 63.158   4968',
'GUAY           0.002 63.160   4969',
'FRIDAY         0.002 63.163   4970',
'FERRO          0.002 63.165   4971',
'DEBOER         0.002 63.167   4972',
'DAGOSTINO      0.002 63.170   4973',
'CLEMENTE       0.002 63.172   4974',
'CHRIST         0.002 63.175   4975',
'CARPER         0.002 63.177   4976',
'BOWLER         0.002 63.179   4977',
'BLANKS         0.002 63.182   4978',
'BEAUDRY        0.002 63.184   4979',
'WILLIE         0.002 63.187   4980',
'TOWLE          0.002 63.189   4981',
'TAFOYA         0.002 63.191   4982',
'STRICKLIN      0.002 63.194   4983',
'STRADER        0.002 63.196   4984',
'SOPER          0.002 63.198   4985',
'SONNIER        0.002 63.201   4986',
'SIGMON         0.002 63.203   4987',
'SCHENK         0.002 63.205   4988',
'SADDLER        0.002 63.208   4989',
'RODMAN         0.002 63.210   4990',
'PEDIGO         0.002 63.213   4991',
'MENDES         0.002 63.215   4992',
'LUNN           0.002 63.217   4993',
'LOHR           0.002 63.220   4994',
'LAHR           0.002 63.222   4995',
'KINGSBURY      0.002 63.224   4996',
'JARMAN         0.002 63.227   4997',
'HUME           0.002 63.229   4998',
'HOLLIMAN       0.002 63.232   4999',
'HOFMANN        0.002 63.234   5000',
'HAWORTH        0.002 63.236   5001',
'HARRELSON      0.002 63.239   5002',
'HAMBRICK       0.002 63.241   5003',
'FLICK          0.002 63.243   5004',
'EDMUNDS        0.002 63.246   5005',
'DACOSTA        0.002 63.248   5006',
'CROSSMAN       0.002 63.250   5007',
'COLSTON        0.002 63.253   5008',
'CHAPLIN        0.002 63.255   5009',
'CARRELL        0.002 63.258   5010',
'BUDD           0.002 63.260   5011',
'WEILER         0.002 63.262   5012',
'WAITS          0.002 63.265   5013',
'VIOLA          0.002 63.267   5014',
'VALENTINO      0.002 63.269   5015',
'TRANTHAM       0.002 63.272   5016',
'TARR           0.002 63.274   5017',
'STRAIGHT       0.002 63.276   5018',
'SOLORIO        0.002 63.279   5019',
'ROEBUCK        0.002 63.281   5020',
'POWE           0.002 63.283   5021',
'PLANK          0.002 63.286   5022',
'PETTUS         0.002 63.288   5023',
'PALM           0.002 63.291   5024',
'PAGANO         0.002 63.293   5025',
'MINK           0.002 63.295   5026',
'LUKER          0.002 63.298   5027',
'LEATHERS       0.002 63.300   5028',
'JOSLIN         0.002 63.302   5029',
'HARTZELL       0.002 63.305   5030',
'GAMBRELL       0.002 63.307   5031',
'FEARS          0.002 63.309   5032',
'DEUTSCH        0.002 63.312   5033',
'CEPEDA         0.002 63.314   5034',
'CARTY          0.002 63.316   5035',
'CAPUTO         0.002 63.319   5036',
'BREWINGTON     0.002 63.321   5037',
'BEDELL         0.002 63.323   5038',
'BALLEW         0.002 63.326   5039',
'APPLEWHITE     0.002 63.328   5040',
'WARNOCK        0.002 63.331   5041',
'WALZ           0.002 63.333   5042',
'URENA          0.002 63.335   5043',
'TUDOR          0.002 63.338   5044',
'REEL           0.002 63.340   5045',
'PIGG           0.002 63.342   5046',
'PARTON         0.002 63.345   5047',
'MICKELSON      0.002 63.347   5048',
'MEAGHER        0.002 63.349   5049',
'MCLELLAN       0.002 63.352   5050',
'MCCULLEY       0.002 63.354   5051',
'MANDEL         0.002 63.356   5052',
'LEECH          0.002 63.359   5053',
'LAVALLEE       0.002 63.361   5054',
'KRAEMER        0.002 63.363   5055',
'KLING          0.002 63.366   5056',
'KIPP           0.002 63.368   5057',
'KINGSTON       0.002 63.370   5058',
'KEHOE          0.002 63.373   5059',
'HOCHSTETLER    0.002 63.375   5060',
'HARRIMAN       0.002 63.377   5061',
'GREGOIRE       0.002 63.380   5062',
'GRABOWSKI      0.002 63.382   5063',
'GOSSELIN       0.002 63.384   5064',
'GAMMON         0.002 63.387   5065',
'FANCHER        0.002 63.389   5066',
'EDENS          0.002 63.391   5067',
'DESAI          0.002 63.394   5068',
'BUTT           0.002 63.396   5069',
'BRANNAN        0.002 63.398   5070',
'ARMENDARIZ     0.002 63.401   5071',
'WOOLSEY        0.002 63.403   5072',
'WHITEHOUSE     0.002 63.405   5073',
'WHETSTONE      0.002 63.408   5074',
'USSERY         0.002 63.410   5075',
'TOWNE          0.002 63.412   5076',
'TOWER          0.002 63.415   5077',
'TESTA          0.002 63.417   5078',
'TALLMAN        0.002 63.419   5079',
'STUDER         0.002 63.422   5080',
'STRAIT         0.002 63.424   5081',
'STEINMETZ      0.002 63.426   5082',
'SORRELLS       0.002 63.428   5083',
'SAUCEDA        0.002 63.431   5084',
'ROLFE          0.002 63.433   5085',
'RAE            0.002 63.435   5086',
'PADDOCK        0.002 63.438   5087',
'MITCHEM        0.002 63.440   5088',
'MCGINN         0.002 63.442   5089',
'MCCREA         0.002 63.445   5090',
'LUCK           0.002 63.447   5091',
'LOVATO         0.002 63.449   5092',
'LING           0.002 63.452   5093',
'HAZEN          0.002 63.454   5094',
'GILPIN         0.002 63.456   5095',
'GAYNOR         0.002 63.459   5096',
'FIKE           0.002 63.461   5097',
'DEVOE          0.002 63.463   5098',
'DELRIO         0.002 63.466   5099',
'CURIEL         0.002 63.468   5100',
'BURKHARDT      0.002 63.470   5101',
'BRISTOL        0.002 63.473   5102',
'BODE           0.002 63.475   5103',
'BACKUS         0.002 63.477   5104',
'ALTON          0.002 63.480   5105',
'ZINN           0.002 63.482   5106',
'WATANABE       0.002 63.484   5107',
'WACHTER        0.002 63.486   5108',
'VANPELT        0.002 63.489   5109',
'TURNAGE        0.002 63.491   5110',
'SHANER         0.002 63.493   5111',
'SCHRODER       0.002 63.496   5112',
'SATO           0.002 63.498   5113',
'RIORDAN        0.002 63.500   5114',
'QUIMBY         0.002 63.503   5115',
'PORTIS         0.002 63.505   5116',
'NATALE         0.002 63.507   5117',
'MCKOY          0.002 63.510   5118',
'MCCOWN         0.002 63.512   5119',
'MARKER         0.002 63.514   5120',
'LUCIO          0.002 63.516   5121',
'KILMER         0.002 63.519   5122',
'KARL           0.002 63.521   5123',
'HOTCHKISS      0.002 63.523   5124',
'HESSE          0.002 63.526   5125',
'HALBERT        0.002 63.528   5126',
'GWINN          0.002 63.530   5127',
'GODSEY         0.002 63.533   5128',
'DESMOND        0.002 63.535   5129',
'DELISLE        0.002 63.537   5130',
'CHRISMAN       0.002 63.539   5131',
'CANTER         0.002 63.542   5132',
'BROOK          0.002 63.544   5133',
'ARBOGAST       0.002 63.546   5134',
'ANGELL         0.002 63.549   5135',
'ACREE          0.002 63.551   5136',
'YANCY          0.002 63.553   5137',
'WOOLLEY        0.002 63.556   5138',
'WESSON         0.002 63.558   5139',
'WEATHERSPOON   0.002 63.560   5140',
'TRAINOR        0.002 63.562   5141',
'STOCKMAN       0.002 63.565   5142',
'SPILLER        0.002 63.567   5143',
'SIPE           0.002 63.569   5144',
'ROOKS          0.002 63.572   5145',
'REAVIS         0.002 63.574   5146',
'PROPST         0.002 63.576   5147',
'PORRAS         0.002 63.578   5148',
'NEILSON        0.002 63.581   5149',
'MULLENS        0.002 63.583   5150',
'LOUCKS         0.002 63.585   5151',
'LLEWELLYN      0.002 63.588   5152',
'LAMONT         0.002 63.590   5153',
'KUMAR          0.002 63.592   5154',
'KOESTER        0.002 63.595   5155',
'KLINGENSMITH   0.002 63.597   5156',
'KIRSCH         0.002 63.599   5157',
'KESTER         0.002 63.601   5158',
'HONAKER        0.002 63.604   5159',
'HODSON         0.002 63.606   5160',
'HENNESSY       0.002 63.608   5161',
'HELMICK        0.002 63.611   5162',
'GARRITY        0.002 63.613   5163',
'GARIBAY        0.002 63.615   5164',
'FEE            0.002 63.617   5165',
'DRAIN          0.002 63.620   5166',
'CASAREZ        0.002 63.622   5167',
'CALLIS         0.002 63.624   5168',
'BOTELLO        0.002 63.627   5169',
'BAY            0.002 63.629   5170',
'AYCOCK         0.002 63.631   5171',
'AVANT          0.002 63.633   5172',
'ANGLE          0.002 63.636   5173',
'WINGARD        0.002 63.638   5174',
'WAYMAN         0.002 63.640   5175',
'TULLY          0.002 63.643   5176',
'THEISEN        0.002 63.645   5177',
'SZYMANSKI      0.002 63.647   5178',
'STANSBURY      0.002 63.649   5179',
'SEGOVIA        0.002 63.652   5180',
'RUDY           0.002 63.654   5181',
'RAINWATER      0.002 63.656   5182',
'PREECE         0.002 63.658   5183',
'PIRTLE         0.002 63.661   5184',
'PADRON         0.002 63.663   5185',
'MINCEY         0.002 63.665   5186',
'MCKELVEY       0.002 63.668   5187',
'MATHES         0.002 63.670   5188',
'MARTY          0.002 63.672   5189',
'LARRABEE       0.002 63.674   5190',
'KORNEGAY       0.002 63.677   5191',
'KLUG           0.002 63.679   5192',
'JUDY           0.002 63.681   5193',
'INGERSOLL      0.002 63.683   5194',
'HECHT          0.002 63.686   5195',
'GERMAIN        0.002 63.688   5196',
'EGGERS         0.002 63.690   5197',
'DYKSTRA        0.002 63.693   5198',
'DENIS          0.002 63.695   5199',
'DEERING        0.002 63.697   5200',
'DECOTEAU       0.002 63.699   5201',
'DEASON         0.002 63.702   5202',
'DEARING        0.002 63.704   5203',
'COFIELD        0.002 63.706   5204',
'CARRIGAN       0.002 63.708   5205',
'BRUSH          0.002 63.711   5206',
'BONHAM         0.002 63.713   5207',
'BAHR           0.002 63.715   5208',
'AUCOIN         0.002 63.718   5209',
'APPLEBY        0.002 63.720   5210',
'ALMONTE        0.002 63.722   5211',
'YAGER          0.002 63.724   5212',
'WOMBLE         0.002 63.727   5213',
'WIMMER         0.002 63.729   5214',
'WEIMER         0.002 63.731   5215',
'VANDERPOOL     0.002 63.733   5216',
'STANCIL        0.002 63.736   5217',
'SPRINKLE       0.002 63.738   5218',
'ROMINE         0.002 63.740   5219',
'REMINGTON      0.002 63.742   5220',
'PFAFF          0.002 63.745   5221',
'PECKHAM        0.002 63.747   5222',
'OLIVERA        0.002 63.749   5223',
'MERAZ          0.002 63.751   5224',
'MAZE           0.002 63.754   5225',
'LATHROP        0.002 63.756   5226',
'KOEHN          0.002 63.758   5227',
'JONAS          0.002 63.760   5228',
'HAZELTON       0.002 63.763   5229',
'HALVORSON      0.002 63.765   5230',
'HALLOCK        0.002 63.767   5231',
'HADDOCK        0.002 63.770   5232',
'DUCHARME       0.002 63.772   5233',
'DEHAVEN        0.002 63.774   5234',
'COLTON         0.002 63.776   5235',
'CARUTHERS      0.002 63.779   5236',
'BREHM          0.002 63.781   5237',
'BOSWORTH       0.002 63.783   5238',
'BOST           0.002 63.785   5239',
'BLOW           0.002 63.788   5240',
'BIAS           0.002 63.790   5241',
'BEEMAN         0.002 63.792   5242',
'BASILE         0.002 63.794   5243',
'BANE           0.002 63.797   5244',
'AIKENS         0.002 63.799   5245',
'ZACHARY        0.002 63.801   5246',
'WOLD           0.002 63.803   5247',
'WALTHER        0.002 63.806   5248',
'TABB           0.002 63.808   5249',
'SUBER          0.002 63.810   5250',
'STRAWN         0.002 63.812   5251',
'STOCKS         0.002 63.815   5252',
'STOCKER        0.002 63.817   5253',
'SHIREY         0.002 63.819   5254',
'SCHLOSSER      0.002 63.821   5255',
'SALVADOR       0.002 63.824   5256',
'RIEDEL         0.002 63.826   5257',
'REMBERT        0.002 63.828   5258',
'REIMER         0.002 63.830   5259',
'PYLES          0.002 63.832   5260',
'PICKLE         0.002 63.835   5261',
'PEELE          0.002 63.837   5262',
'MERRIWEATHER   0.002 63.839   5263',
'LETOURNEAU     0.002 63.841   5264',
'LATTA          0.002 63.844   5265',
'KIDDER         0.002 63.846   5266',
'HIXON          0.002 63.848   5267',
'HILLIS         0.002 63.850   5268',
'HIGHT          0.002 63.853   5269',
'HERBST         0.002 63.855   5270',
'HENRIQUEZ      0.002 63.857   5271',
'HAYGOOD        0.002 63.859   5272',
'HAMILL         0.002 63.862   5273',
'GABEL          0.002 63.864   5274',
'FRITTS         0.002 63.866   5275',
'EUBANK         0.002 63.868   5276',
'DUTY           0.002 63.871   5277',
'DAWES          0.002 63.873   5278',
'CORRELL        0.002 63.875   5279',
'COFFEE         0.002 63.877   5280',
'CHA            0.002 63.880   5281',
'BUSHEY         0.002 63.882   5282',
'BUCHHOLZ       0.002 63.884   5283',
'BROTHERTON     0.002 63.886   5284',
'BRIDGE         0.002 63.889   5285',
'BOTTS          0.002 63.891   5286',
'BARNWELL       0.002 63.893   5287',
'AUGER          0.002 63.895   5288',
'ATCHLEY        0.002 63.897   5289',
'WESTPHAL       0.002 63.900   5290',
'VEILLEUX       0.002 63.902   5291',
'ULLOA          0.002 63.904   5292',
'TRUMAN         0.002 63.906   5293',
'STUTZMAN       0.002 63.909   5294',
'SHRIVER        0.002 63.911   5295',
'RYALS          0.002 63.913   5296',
'PRIOR          0.002 63.915   5297',
'PILKINGTON     0.002 63.918   5298',
'NEWPORT        0.002 63.920   5299',
'MOYERS         0.002 63.922   5300',
'MIRACLE        0.002 63.924   5301',
'MARRS          0.002 63.926   5302',
'MANGRUM        0.002 63.929   5303',
'MADDUX         0.002 63.931   5304',
'LOCKARD        0.002 63.933   5305',
'LAING          0.002 63.935   5306',
'KUHL           0.002 63.938   5307',
'HARNEY         0.002 63.940   5308',
'HAMMOCK        0.002 63.942   5309',
'HAMLETT        0.002 63.944   5310',
'FELKER         0.002 63.946   5311',
'DOERR          0.002 63.949   5312',
'DEPRIEST       0.002 63.951   5313',
'CARRASQUILLO   0.002 63.953   5314',
'CAROTHERS      0.002 63.955   5315',
'BOGLE          0.002 63.958   5316',
'BLOOD          0.002 63.960   5317',
'BISCHOFF       0.002 63.962   5318',
'BERGEN         0.002 63.964   5319',
'ALBANESE       0.002 63.966   5320',
'WYCKOFF        0.002 63.969   5321',
'VERMILLION     0.002 63.971   5322',
'VANSICKLE      0.002 63.973   5323',
'THIBAULT       0.002 63.975   5324',
'TETREAULT      0.002 63.978   5325',
'STICKNEY       0.002 63.980   5326',
'SHOEMAKE       0.002 63.982   5327',
'RUGGIERO       0.002 63.984   5328',
'RAWSON         0.002 63.986   5329',
'RACINE         0.002 63.989   5330',
'PHILPOT        0.002 63.991   5331',
'PASCHAL        0.002 63.993   5332',
'MCELHANEY      0.002 63.995   5333',
'MATHISON       0.002 63.997   5334',
'LEGRAND        0.002 64.000   5335',
'LAPIERRE       0.002 64.002   5336',
'KWAN           0.002 64.004   5337',
'KREMER         0.002 64.006   5338',
'JILES          0.002 64.008   5339',
'HILBERT        0.002 64.011   5340',
'GEYER          0.002 64.013   5341',
'FAIRCLOTH      0.002 64.015   5342',
'EHLERS         0.002 64.017   5343',
'EGBERT         0.002 64.020   5344',
'DESROSIERS     0.002 64.022   5345',
'DALRYMPLE      0.002 64.024   5346',
'COTTEN         0.002 64.026   5347',
'CASHMAN        0.002 64.028   5348',
'CADENA         0.002 64.031   5349',
'BREEDING       0.002 64.033   5350',
'BOARDMAN       0.002 64.035   5351',
'ALCARAZ        0.002 64.037   5352',
'AHN            0.002 64.039   5353',
'WYRICK         0.002 64.042   5354',
'THERRIEN       0.002 64.044   5355',
'TANKERSLEY     0.002 64.046   5356',
'STRICKLER      0.002 64.048   5357',
'PURYEAR        0.002 64.050   5358',
'PLOURDE        0.002 64.053   5359',
'PATTISON       0.002 64.055   5360',
'PARDUE         0.002 64.057   5361',
'MILAN          0.002 64.059   5362',
'MCGINTY        0.002 64.061   5363',
'MCEVOY         0.002 64.064   5364',
'LANDRETH       0.002 64.066   5365',
'KUHNS          0.002 64.068   5366',
'KOON           0.002 64.070   5367',
'HEWETT         0.002 64.072   5368',
'GIDDENS        0.002 64.075   5369',
'EVERETTE       0.002 64.077   5370',
'EMERICK        0.002 64.079   5371',
'EADES          0.002 64.081   5372',
'DEANGELIS      0.002 64.083   5373',
'COSME          0.002 64.085   5374',
'CEBALLOS       0.002 64.088   5375',
'BIRDSONG       0.002 64.090   5376',
'BENHAM         0.002 64.092   5377',
'BEMIS          0.002 64.094   5378',
'ARMOUR         0.002 64.096   5379',
'ANGUIANO       0.002 64.099   5380',
'ANGELES        0.002 64.101   5381',
'WELBORN        0.002 64.103   5382',
'TSOSIE         0.002 64.105   5383',
'STORMS         0.002 64.107   5384',
'SHOUP          0.002 64.110   5385',
'SESSOMS        0.002 64.112   5386',
'SAMANIEGO      0.002 64.114   5387',
'ROOD           0.002 64.116   5388',
'ROJO           0.002 64.118   5389',
'RHINEHART      0.002 64.120   5390',
'RABY           0.002 64.123   5391',
'NORTHCUTT      0.002 64.125   5392',
'MYER           0.002 64.127   5393',
'MUNGUIA        0.002 64.129   5394',
'MOREHOUSE      0.002 64.131   5395',
'MORE           0.002 64.133   5396',
'MCDEVITT       0.002 64.136   5397',
'MATEO          0.002 64.138   5398',
'MALLETT        0.002 64.140   5399',
'LOZADA         0.002 64.142   5400',
'LEMOINE        0.002 64.144   5401',
'KUEHN          0.002 64.147   5402',
'HALLETT        0.002 64.149   5403',
'GRIM           0.002 64.151   5404',
'GILLARD        0.002 64.153   5405',
'GAYLOR         0.002 64.155   5406',
'GARMAN         0.002 64.157   5407',
'GALLAHER       0.002 64.160   5408',
'FEASTER        0.002 64.162   5409',
'FARIS          0.002 64.164   5410',
'DARROW         0.002 64.166   5411',
'DARDAR         0.002 64.168   5412',
'CONEY          0.002 64.171   5413',
'CARREON        0.002 64.173   5414',
'BYRON          0.002 64.175   5415',
'BRAITHWAITE    0.002 64.177   5416',
'BOYLAN         0.002 64.179   5417',
'BOYETT         0.002 64.181   5418',
'BORN           0.002 64.184   5419',
'BIXLER         0.002 64.186   5420',
'BIGHAM         0.002 64.188   5421',
'BENFORD        0.002 64.190   5422',
'BARRAGAN       0.002 64.192   5423',
'BARNUM         0.002 64.194   5424',
'ZUBER          0.002 64.197   5425',
'WYCHE          0.002 64.199   5426',
'WESTCOTT       0.002 64.201   5427',
'VINING         0.002 64.203   5428',
'STOLTZFUS      0.002 64.205   5429',
'SIMONDS        0.002 64.207   5430',
'SHUPE          0.002 64.210   5431',
'SABIN          0.002 64.212   5432',
'RUBLE          0.002 64.214   5433',
'RITTENHOUSE    0.002 64.216   5434',
'RICHMAN        0.002 64.218   5435',
'PERRONE        0.002 64.220   5436',
'MULHOLLAND     0.002 64.223   5437',
'MILLAN         0.002 64.225   5438',
'MEISTER        0.002 64.227   5439',
'MATHEW         0.002 64.229   5440',
'LOMELI         0.002 64.231   5441',
'KITE           0.002 64.233   5442',
'JEMISON        0.002 64.236   5443',
'HULETT         0.002 64.238   5444',
'HOLLER         0.002 64.240   5445',
'HICKERSON      0.002 64.242   5446',
'HEROLD         0.002 64.244   5447',
'HAZELWOOD      0.002 64.246   5448',
'GRIFFEN        0.002 64.249   5449',
'GAUSE          0.002 64.251   5450',
'FORDE          0.002 64.253   5451',
'EISENBERG      0.002 64.255   5452',
'DILWORTH       0.002 64.257   5453',
'CHARRON        0.002 64.259   5454',
'CHAISSON       0.002 64.262   5455',
'BRODIE         0.002 64.264   5456',
'BRISTOW        0.002 64.266   5457',
'BREUNIG        0.002 64.268   5458',
'BRACE          0.002 64.270   5459',
'BOUTWELL       0.002 64.272   5460',
'BENTZ          0.002 64.274   5461',
'BELK           0.002 64.277   5462',
'BAYLESS        0.002 64.279   5463',
'BATCHELDER     0.002 64.281   5464',
'BARAN          0.002 64.283   5465',
'BAEZA          0.002 64.285   5466',
'ZIMMERMANN     0.002 64.287   5467',
'WEATHERSBY     0.002 64.290   5468',
'VOLK           0.002 64.292   5469',
'TOOLE          0.002 64.294   5470',
'THEIS          0.002 64.296   5471',
'TEDESCO        0.002 64.298   5472',
'SHINE          0.002 64.300   5473',
'SEARLE         0.002 64.302   5474',
'SCHENCK        0.002 64.305   5475',
'SATTERWHITE    0.002 64.307   5476',
'SANDY          0.002 64.309   5477',
'RUELAS         0.002 64.311   5478',
'ROYCE          0.002 64.313   5479',
'RANKINS        0.002 64.315   5480',
'PARTIDA        0.002 64.317   5481',
'NESBIT         0.002 64.320   5482',
'MOREL          0.002 64.322   5483',
'MENCHACA       0.002 64.324   5484',
'LEVASSEUR      0.002 64.326   5485',
'KAYLOR         0.002 64.328   5486',
'JOHNSTONE      0.002 64.330   5487',
'HULSE          0.002 64.333   5488',
'HOLLAR         0.002 64.335   5489',
'HERSEY         0.002 64.337   5490',
'HARRIGAN       0.002 64.339   5491',
'HARBISON       0.002 64.341   5492',
'GUYER          0.002 64.343   5493',
'GISH           0.002 64.345   5494',
'GIESE          0.002 64.348   5495',
'GERLACH        0.002 64.350   5496',
'GELLER         0.002 64.352   5497',
'GEISLER        0.002 64.354   5498',
'FALCONE        0.002 64.356   5499',
'ERNEST         0.002 64.358   5500',
'ELWELL         0.002 64.360   5501',
'DOUCET         0.002 64.363   5502',
'DEESE          0.002 64.365   5503',
'DARR           0.002 64.367   5504',
'CORDER         0.002 64.369   5505',
'CHAFIN         0.002 64.371   5506',
'BYLER          0.002 64.373   5507',
'BUSSELL        0.002 64.375   5508',
'BURDETT        0.002 64.378   5509',
'BRASHER        0.002 64.380   5510',
'BOWE           0.002 64.382   5511',
'BELLINGER      0.002 64.384   5512',
'BASTIAN        0.002 64.386   5513',
'BARNER         0.002 64.388   5514',
'ALLEYNE        0.002 64.390   5515',
'WILBORN        0.002 64.393   5516',
'WEIL           0.002 64.395   5517',
'WEGNER         0.002 64.397   5518',
'WALES          0.002 64.399   5519',
'TATRO          0.002 64.401   5520',
'SPITZER        0.002 64.403   5521',
'SMITHERS       0.002 64.405   5522',
'SCHOEN         0.002 64.407   5523',
'RESENDEZ       0.002 64.410   5524',
'PETE           0.002 64.412   5525',
'PARISI         0.002 64.414   5526',
'OVERMAN        0.002 64.416   5527',
'OBRIAN         0.002 64.418   5528',
'MUDD           0.002 64.420   5529',
'MOY            0.002 64.422   5530',
'MCLAREN        0.002 64.425   5531',
'MAHLER         0.002 64.427   5532',
'MAGGIO         0.002 64.429   5533',
'LINDNER        0.002 64.431   5534',
'LALONDE        0.002 64.433   5535',
'LACASSE        0.002 64.435   5536',
'LABOY          0.002 64.437   5537',
'KILLION        0.002 64.439   5538',
'KAHL           0.002 64.442   5539',
'JESSEN         0.002 64.444   5540',
'JAMERSON       0.002 64.446   5541',
'HOUK           0.002 64.448   5542',
'HENSHAW        0.002 64.450   5543',
'GUSTIN         0.002 64.452   5544',
'GROOM          0.002 64.454   5545',
'GRABER         0.002 64.456   5546',
'DURST          0.002 64.459   5547',
'DUENAS         0.002 64.461   5548',
'DAVEY          0.002 64.463   5549',
'CUNDIFF        0.002 64.465   5550',
'CONLON         0.002 64.467   5551',
'COLUNGA        0.002 64.469   5552',
'COAKLEY        0.002 64.471   5553',
'CHILES         0.002 64.474   5554',
'CAPERS         0.002 64.476   5555',
'BUELL          0.002 64.478   5556',
'BRICKER        0.002 64.480   5557',
'BISSONNETTE    0.002 64.482   5558',
'BIRMINGHAM     0.002 64.484   5559',
'BARTZ          0.002 64.486   5560',
'BAGBY          0.002 64.488   5561',
'ZAYAS          0.002 64.491   5562',
'VOLPE          0.002 64.493   5563',
'TREECE         0.002 64.495   5564',
'TOOMBS         0.002 64.497   5565',
'THOM           0.002 64.499   5566',
'TERRAZAS       0.002 64.501   5567',
'SWINNEY        0.002 64.503   5568',
'SKILES         0.002 64.505   5569',
'SILVEIRA       0.002 64.507   5570',
'SHOUSE         0.002 64.510   5571',
'SENN           0.002 64.512   5572',
'RAMBO          0.002 64.514   5573',
'RAMAGE         0.002 64.516   5574',
'NEZ            0.002 64.518   5575',
'MOUA           0.002 64.520   5576',
'MARLIN         0.002 64.522   5577',
'MALIK          0.002 64.524   5578',
'LANGHAM        0.002 64.527   5579',
'KYLES          0.002 64.529   5580',
'HOLSTON        0.002 64.531   5581',
'HOAGLAND       0.002 64.533   5582',
'HERD           0.002 64.535   5583',
'HECTOR         0.002 64.537   5584',
'FELLER         0.002 64.539   5585',
'EMORY          0.002 64.541   5586',
'DENISON        0.002 64.543   5587',
'CORLISS        0.002 64.546   5588',
'CARRAWAY       0.002 64.548   5589',
'BURFORD        0.002 64.550   5590',
'BICKEL         0.002 64.552   5591',
'AMBRIZ         0.002 64.554   5592',
'ABERCROMBIE    0.002 64.556   5593',
'YAMADA         0.002 64.558   5594',
'WINNER         0.002 64.560   5595',
'WEIDNER        0.002 64.562   5596',
'WADDLE         0.002 64.564   5597',
'VERDUZCO       0.002 64.567   5598',
'THURMOND       0.002 64.569   5599',
'SWINDLE        0.002 64.571   5600',
'SCHROCK        0.002 64.573   5601',
'SANABRIA       0.002 64.575   5602',
'ROSENBERGER    0.002 64.577   5603',
'PROBST         0.002 64.579   5604',
'PEABODY        0.002 64.581   5605',
'OLINGER        0.002 64.583   5606',
'NEIGHBORS      0.002 64.585   5607',
'NAZARIO        0.002 64.588   5608',
'MCCAFFERTY     0.002 64.590   5609',
'MCBROOM        0.002 64.592   5610',
'MCABEE         0.002 64.594   5611',
'MAZUR          0.002 64.596   5612',
'MATHERNE       0.002 64.598   5613',
'MAPES          0.002 64.600   5614',
'LEVERETT       0.002 64.602   5615',
'KILLINGSWORTH  0.002 64.604   5616',
'HEISLER        0.002 64.606   5617',
'GRIEGO         0.002 64.609   5618',
'GRANDE         0.002 64.611   5619',
'GOSNELL        0.002 64.613   5620',
'FRANKEL        0.002 64.615   5621',
'FRANKE         0.002 64.617   5622',
'FERRANTE       0.002 64.619   5623',
'FENN           0.002 64.621   5624',
'ELMER          0.002 64.623   5625',
'EHRLICH        0.002 64.625   5626',
'CHRISTOPHERSO  0.002 64.627   5627',
'CHICK          0.002 64.630   5628',
'CHASSE         0.002 64.632   5629',
'CHANCELLOR     0.002 64.634   5630',
'CATON          0.002 64.636   5631',
'BRUNELLE       0.002 64.638   5632',
'BLY            0.002 64.640   5633',
'BLOOMFIELD     0.002 64.642   5634',
'BABBITT        0.002 64.644   5635',
'AZEVEDO        0.002 64.646   5636',
'ABRAMSON       0.002 64.648   5637',
'ABLES          0.002 64.651   5638',
'ABEYTA         0.002 64.653   5639',
'YOUMANS        0.002 64.655   5640',
'WOZNIAK        0.002 64.657   5641',
'WAINWRIGHT     0.002 64.659   5642',
'SUMMER         0.002 64.661   5643',
'STOWELL        0.002 64.663   5644',
'SMITHERMAN     0.002 64.665   5645',
'SITES          0.002 64.667   5646',
'SAMUELSON      0.002 64.669   5647',
'RUNGE          0.002 64.671   5648',
'RULE           0.002 64.673   5649',
'ROTHMAN        0.002 64.676   5650',
'ROSENFELD      0.002 64.678   5651',
'QUAN           0.002 64.680   5652',
'PEAKE          0.002 64.682   5653',
'OXFORD         0.002 64.684   5654',
'OWINGS         0.002 64.686   5655',
'OLMOS          0.002 64.688   5656',
'MUNRO          0.002 64.690   5657',
'MOREIRA        0.002 64.692   5658',
'LEATHERWOOD    0.002 64.694   5659',
'LARKINS        0.002 64.696   5660',
'KRANTZ         0.002 64.698   5661',
'KOVACS         0.002 64.701   5662',
'KIZER          0.002 64.703   5663',
'KINDRED        0.002 64.705   5664',
'KARNES         0.002 64.707   5665',
'JAFFE          0.002 64.709   5666',
'HUBBELL        0.002 64.711   5667',
'HOSEY          0.002 64.713   5668',
'HAUCK          0.002 64.715   5669',
'HAROLD         0.002 64.717   5670',
'GOODELL        0.002 64.719   5671',
'FAVORS         0.002 64.721   5672',
'ERDMAN         0.002 64.723   5673',
'DVORAK         0.002 64.726   5674',
'DOANE          0.002 64.728   5675',
'CURETON        0.002 64.730   5676',
'COFER          0.002 64.732   5677',
'BUEHLER        0.002 64.734   5678',
'BIERMAN        0.002 64.736   5679',
'BERNDT         0.002 64.738   5680',
'BANTA          0.002 64.740   5681',
'ANNIS          0.002 64.742   5682',
'ABRAM          0.002 64.744   5683',
'ABDULLAH       0.002 64.746   5684',
'WARWICK        0.002 64.748   5685',
'WALTZ          0.002 64.750   5686',
'TURCOTTE       0.002 64.753   5687',
'TRINH          0.002 64.755   5688',
'TORREY         0.002 64.757   5689',
'STITH          0.002 64.759   5690',
'SEGER          0.002 64.761   5691',
'SACHS          0.002 64.763   5692',
'QUESADA        0.002 64.765   5693',
'PINDER         0.002 64.767   5694',
'PEPPERS        0.002 64.769   5695',
'PASCUAL        0.002 64.771   5696',
'PASCHALL       0.002 64.773   5697',
'PARKHURST      0.002 64.775   5698',
'OZUNA          0.002 64.777   5699',
'OSTER          0.002 64.779   5700',
'NICHOLLS       0.002 64.781   5701',
'MORTIMER       0.002 64.784   5702',
'LHEUREUX       0.002 64.786   5703',
'LAVALLEY       0.002 64.788   5704',
'KIMURA         0.002 64.790   5705',
'JABLONSKI      0.002 64.792   5706',
'HAUN           0.002 64.794   5707',
'GOURLEY        0.002 64.796   5708',
'GILLIGAN       0.002 64.798   5709',
'FIX            0.002 64.800   5710',
'DERBY          0.002 64.802   5711',
'CROY           0.002 64.804   5712',
'COTTO          0.002 64.806   5713',
'CARGILL        0.002 64.808   5714',
'BURWELL        0.002 64.810   5715',
'BURGETT        0.002 64.812   5716',
'BUCKMAN        0.002 64.815   5717',
'BRETT          0.002 64.817   5718',
'BOOHER         0.002 64.819   5719',
'ADORNO         0.002 64.821   5720',
'WRENN          0.002 64.823   5721',
'WHITTEMORE     0.002 64.825   5722',
'URIAS          0.002 64.827   5723',
'SZABO          0.002 64.829   5724',
'SAYLES         0.002 64.831   5725',
'SAIZ           0.002 64.833   5726',
'RUTLAND        0.002 64.835   5727',
'RAEL           0.002 64.837   5728',
'PLANT          0.002 64.839   5729',
'PHARR          0.002 64.841   5730',
'PENNEY         0.002 64.843   5731',
'PELKEY         0.002 64.845   5732',
'OGRADY         0.002 64.847   5733',
'NICKELL        0.002 64.849   5734',
'MUSICK         0.002 64.852   5735',
'MOATS          0.002 64.854   5736',
'MATHER         0.002 64.856   5737',
'MASSA          0.002 64.858   5738',
'LAURENT        0.002 64.860   5739',
'KIRSCHNER      0.002 64.862   5740',
'KIEFFER        0.002 64.864   5741',
'KELLAR         0.002 64.866   5742',
'HENDERSHOT     0.002 64.868   5743',
'GOTT           0.002 64.870   5744',
'GODOY          0.002 64.872   5745',
'GADSON         0.002 64.874   5746',
'FURTADO        0.002 64.876   5747',
'FIEDLER        0.002 64.878   5748',
'ERSKINE        0.002 64.880   5749',
'EDISON         0.002 64.882   5750',
'DUTCHER        0.002 64.884   5751',
'DEVER          0.002 64.886   5752',
'DAGGETT        0.002 64.888   5753',
'CHEVALIER      0.002 64.890   5754',
'CHAO           0.002 64.893   5755',
'BRAKE          0.002 64.895   5756',
'BALLESTEROS    0.002 64.897   5757',
'AMERSON        0.002 64.899   5758',
'ALEJANDRO      0.002 64.901   5759',
'WINGO          0.002 64.903   5760',
'WALDON         0.002 64.905   5761',
'TROTT          0.002 64.907   5762',
'SPIKES         0.002 64.909   5763',
'SILVEY         0.002 64.911   5764',
'SHOWERS        0.002 64.913   5765',
'SCHLEGEL       0.002 64.915   5766',
'RUE            0.002 64.917   5767',
'RITZ           0.002 64.919   5768',
'PEPIN          0.002 64.921   5769',
'PELAYO         0.002 64.923   5770',
'PARSLEY        0.002 64.925   5771',
'PALERMO        0.002 64.927   5772',
'MOOREHEAD      0.002 64.929   5773',
'MCHALE         0.002 64.931   5774',
'LETT           0.002 64.933   5775',
'KOCHER         0.002 64.935   5776',
'KILBURN        0.002 64.937   5777',
'IGLESIAS       0.002 64.939   5778',
'HUMBLE         0.002 64.941   5779',
'HULBERT        0.002 64.943   5780',
'HUCKABY        0.002 64.946   5781',
'HIX            0.002 64.948   5782',
'HAVEN          0.002 64.950   5783',
'HARTFORD       0.002 64.952   5784',
'HARDIMAN       0.002 64.954   5785',
'GURNEY         0.002 64.956   5786',
'GRIGG          0.002 64.958   5787',
'GRASSO         0.002 64.960   5788',
'GOINGS         0.002 64.962   5789',
'FILLMORE       0.002 64.964   5790',
'FARBER         0.002 64.966   5791',
'DEPEW          0.002 64.968   5792',
'DANDREA        0.002 64.970   5793',
'DAME           0.002 64.972   5794',
'COWEN          0.002 64.974   5795',
'COVARRUBIAS    0.002 64.976   5796',
'CORY           0.002 64.978   5797',
'BURRUS         0.002 64.980   5798',
'BRACY          0.002 64.982   5799',
'ARDOIN         0.002 64.984   5800',
'THOMPKINS      0.002 64.986   5801',
'SUZUKI         0.002 64.988   5802',
'STANDLEY       0.002 64.990   5803',
'RUSSEL         0.002 64.992   5804',
'RADCLIFFE      0.002 64.994   5805',
'POHL           0.002 64.996   5806',
'PERSAUD        0.002 64.998   5807',
'PERCY          0.002 65.000   5808',
'PARENTEAU      0.002 65.002   5809',
'PABON          0.002 65.004   5810',
'NEWSON         0.002 65.006   5811',
'NEWHOUSE       0.002 65.008   5812',
'NAPOLITANO     0.002 65.010   5813',
'MULCAHY        0.002 65.012   5814',
'MAYA           0.002 65.014   5815',
'MALAVE         0.002 65.016   5816',
'KEIM           0.002 65.018   5817',
'HOOTEN         0.002 65.021   5818',
'HERNANDES      0.002 65.023   5819',
'HEFFERNAN      0.002 65.025   5820',
'HEARNE         0.002 65.027   5821',
'GREENLEAF      0.002 65.029   5822',
'GLICK          0.002 65.031   5823',
'FUHRMAN        0.002 65.033   5824',
'FETTER         0.002 65.035   5825',
'FARIA          0.002 65.037   5826',
'DISHMAN        0.002 65.039   5827',
'DICKENSON      0.002 65.041   5828',
'CRITES         0.002 65.043   5829',
'CRISS          0.002 65.045   5830',
'CLAPPER        0.002 65.047   5831',
'CHENAULT       0.002 65.049   5832',
'CASTOR         0.002 65.051   5833',
'CASTO          0.002 65.053   5834',
'BUGG           0.002 65.055   5835',
'BOVE           0.002 65.057   5836',
'BONNEY         0.002 65.059   5837',
'BLESSING       0.002 65.061   5838',
'ARD            0.002 65.063   5839',
'ANDERTON       0.002 65.065   5840',
'ALLGOOD        0.002 65.067   5841',
'ALDERSON       0.002 65.069   5842',
'WOODMAN        0.002 65.071   5843',
'WISDOM         0.002 65.073   5844',
'WARRICK        0.002 65.075   5845',
'TOOMEY         0.002 65.077   5846',
'TOOLEY         0.002 65.079   5847',
'TARRANT        0.002 65.081   5848',
'SUMMERVILLE    0.002 65.083   5849',
'STEBBINS       0.002 65.085   5850',
'SOKOL          0.002 65.087   5851',
'SINK           0.002 65.089   5852',
'SEARLES        0.002 65.091   5853',
'SCHUTZ         0.002 65.093   5854',
'SCHUMANN       0.002 65.095   5855',
'SCHEER         0.002 65.097   5856',
'REMILLARD      0.002 65.099   5857',
'RAPER          0.002 65.101   5858',
'PROULX         0.002 65.103   5859',
'PALMORE        0.002 65.105   5860',
'MONROY         0.002 65.107   5861',
'MIGUEL         0.002 65.109   5862',
'MESSIER        0.002 65.111   5863',
'MELO           0.002 65.113   5864',
'MELANSON       0.002 65.115   5865',
'MASHBURN       0.002 65.117   5866',
'MANZANO        0.002 65.119   5867',
'LUSSIER        0.002 65.121   5868',
'LOVELY         0.002 65.123   5869',
'LIEN           0.002 65.125   5870',
'JENKS          0.002 65.127   5871',
'HUNEYCUTT      0.002 65.129   5872',
'HARTWIG        0.002 65.131   5873',
'GRIMSLEY       0.002 65.133   5874',
'FULK           0.002 65.135   5875',
'FIELDING       0.002 65.137   5876',
'FIDLER         0.002 65.139   5877',
'ENGSTROM       0.002 65.141   5878',
'ELDRED         0.002 65.143   5879',
'DANTZLER       0.002 65.145   5880',
'CRANDELL       0.002 65.147   5881',
'CHING          0.002 65.149   5882',
'CALDER         0.002 65.151   5883',
'BRUMLEY        0.002 65.153   5884',
'BRETON         0.002 65.155   5885',
'BRANN          0.002 65.157   5886',
'BRAMLETT       0.002 65.159   5887',
'BOYKINS        0.002 65.161   5888',
'BIANCO         0.002 65.163   5889',
'BANCROFT       0.002 65.165   5890',
'ALMARAZ        0.002 65.167   5891',
'ALCANTAR       0.002 65.169   5892',
'WHITMER        0.002 65.171   5893',
'WHITENER       0.002 65.173   5894',
'WELTON         0.002 65.175   5895',
'VINEYARD       0.002 65.177   5896',
'SU             0.002 65.179   5897',
'RAHN           0.002 65.181   5898',
'PAQUIN         0.002 65.183   5899',
'MIZELL         0.002 65.185   5900',
'MIX            0.002 65.187   5901',
'MCMILLIN       0.002 65.189   5902',
'MCKEAN         0.002 65.191   5903',
'MARSTON        0.002 65.193   5904',
'MACIEL         0.002 65.195   5905',
'LUNDQUIST      0.002 65.197   5906',
'LOUIE          0.002 65.199   5907',
'LIGGINS        0.002 65.201   5908',
'LAMPKIN        0.002 65.203   5909',
'KRANZ          0.002 65.205   5910',
'KOSKI          0.002 65.207   5911',
'KIRKHAM        0.002 65.209   5912',
'JIMINEZ        0.002 65.211   5913',
'HAZZARD        0.002 65.213   5914',
'HARROD         0.002 65.215   5915',
'GRAZIANO       0.002 65.217   5916',
'GRAMMER        0.002 65.219   5917',
'GENDRON        0.002 65.221   5918',
'GARRIDO        0.002 65.223   5919',
'FORDHAM        0.002 65.225   5920',
'ENGLERT        0.002 65.227   5921',
'ELWOOD         0.002 65.229   5922',
'DRYDEN         0.002 65.231   5923',
'DEMOSS         0.002 65.233   5924',
'DELUNA         0.002 65.235   5925',
'CRABB          0.002 65.237   5926',
'COMEAU         0.002 65.239   5927',
'CLAUDIO        0.002 65.241   5928',
'BRUMMETT       0.002 65.243   5929',
'BLUME          0.002 65.245   5930',
'BENALLY        0.002 65.247   5931',
'WESSEL         0.002 65.249   5932',
'VANBUSKIRK     0.002 65.251   5933',
'THORSON        0.002 65.253   5934',
'STUMPF         0.002 65.255   5935',
'STOCKWELL      0.002 65.256   5936',
'ROCCO          0.002 65.258   5937',
'REAMS          0.002 65.260   5938',
'RADTKE         0.002 65.262   5939',
'RACKLEY        0.002 65.264   5940',
'PELTON         0.002 65.266   5941',
'NIEMI          0.002 65.268   5942',
'NEWLAND        0.002 65.270   5943',
'NELSEN         0.002 65.272   5944',
'MORRISSETTE    0.002 65.274   5945',
'MIRAMONTES     0.002 65.276   5946',
'MCGINLEY       0.002 65.278   5947',
'MCCLUSKEY      0.002 65.280   5948',
'MARLEY         0.002 65.282   5949',
'MARCHANT       0.002 65.284   5950',
'LUEVANO        0.002 65.286   5951',
'LAMPE          0.002 65.288   5952',
'LAIL           0.002 65.290   5953',
'JEFFCOAT       0.002 65.292   5954',
'INFANTE        0.002 65.294   5955',
'HU             0.002 65.296   5956',
'HINMAN         0.002 65.298   5957',
'GAONA          0.002 65.300   5958',
'ERB            0.002 65.302   5959',
'EADY           0.002 65.304   5960',
'DESMARAIS      0.002 65.306   5961',
'DECOSTA        0.002 65.308   5962',
'DANSBY         0.002 65.310   5963',
'CISCO          0.002 65.312   5964',
'CHOE           0.002 65.314   5965',
'BRECKENRIDGE   0.002 65.316   5966',
'BOSTWICK       0.002 65.318   5967',
'BORG           0.002 65.320   5968',
'BIANCHI        0.002 65.322   5969',
'BEER           0.002 65.323   5970',
'ALBERTS        0.002 65.325   5971',
'ADRIAN         0.002 65.327   5972',
'WILKIE         0.002 65.329   5973',
'WHORTON        0.002 65.331   5974',
'VARGO          0.002 65.333   5975',
'TAIT           0.002 65.335   5976',
'SYLVIA         0.002 65.337   5977',
'SOUCY          0.002 65.339   5978',
'SCHUMAN        0.002 65.341   5979',
'OUSLEY         0.002 65.343   5980',
'MUMFORD        0.002 65.345   5981',
'LUM            0.002 65.347   5982',
'LIPPERT        0.002 65.349   5983',
'LEATH          0.002 65.351   5984',
'LAVERGNE       0.002 65.353   5985',
'LALIBERTE      0.002 65.355   5986',
'KIRKSEY        0.002 65.357   5987',
'KENNER         0.002 65.359   5988',
'JOHNSEN        0.002 65.361   5989',
'IZZO           0.002 65.363   5990',
'HILES          0.002 65.365   5991',
'GULLETT        0.002 65.367   5992',
'GREENWELL      0.002 65.369   5993',
'GASPAR         0.002 65.370   5994',
'GALBREATH      0.002 65.372   5995',
'GAITAN         0.002 65.374   5996',
'ERICSON        0.002 65.376   5997',
'DUCK           0.002 65.378   5998',
'DELAPAZ        0.002 65.380   5999',
'CROOM          0.002 65.382   6000',
'COTTINGHAM     0.002 65.384   6001',
'CLIFT          0.002 65.386   6002',
'BUSHNELL       0.002 65.388   6003',
'BOOZER         0.002 65.390   6004',
'BICE           0.002 65.392   6005',
'BERNARDO       0.002 65.394   6006',
'BEASON         0.002 65.396   6007',
'ARROWOOD       0.002 65.398   6008',
'WARING         0.002 65.400   6009',
'VOORHEES       0.002 65.402   6010',
'TRUAX          0.002 65.404   6011',
'SHREVE         0.002 65.406   6012',
'SHOCKEY        0.002 65.408   6013',
'SCHATZ         0.002 65.409   6014',
'SANDIFER       0.002 65.411   6015',
'RUBINO         0.002 65.413   6016',
'ROZIER         0.002 65.415   6017',
'ROSEBERRY      0.002 65.417   6018',
'ROLL           0.002 65.419   6019',
'PLAYER         0.002 65.421   6020',
'PIEPER         0.002 65.423   6021',
'PEDEN          0.002 65.425   6022',
'NESTER         0.002 65.427   6023',
'NAVE           0.002 65.429   6024',
'MURPHEY        0.002 65.431   6025',
'MALINOWSKI     0.002 65.433   6026',
'MACGREGOR      0.002 65.435   6027',
'LIANG          0.002 65.437   6028',
'LAFRANCE       0.002 65.439   6029',
'KUNKLE         0.002 65.441   6030',
'KIRKMAN        0.002 65.442   6031',
'JORGE          0.002 65.444   6032',
'HIPP           0.002 65.446   6033',
'HASTY          0.002 65.448   6034',
'HADDIX         0.002 65.450   6035',
'GERVAIS        0.002 65.452   6036',
'GERDES         0.002 65.454   6037',
'GARFIELD       0.002 65.456   6038',
'GAMACHE        0.002 65.458   6039',
'FOUTS          0.002 65.460   6040',
'FITZWATER      0.002 65.462   6041',
'DILLINGHAM     0.002 65.464   6042',
'DEMING         0.002 65.466   6043',
'DEANDA         0.002 65.468   6044',
'CEDENO         0.002 65.470   6045',
'CANNADY        0.002 65.472   6046',
'BURSON         0.002 65.473   6047',
'BOULDIN        0.002 65.475   6048',
'ARCENEAUX      0.002 65.477   6049',
'WOODHOUSE      0.002 65.479   6050',
'WHITFORD       0.002 65.481   6051',
'WESCOTT        0.002 65.483   6052',
'WELTY          0.002 65.485   6053',
'WEIGEL         0.002 65.487   6054',
'TORGERSON      0.002 65.489   6055',
'TOMS           0.002 65.491   6056',
'SURBER         0.002 65.493   6057',
'SUNDERLAND     0.002 65.495   6058',
'STERNER        0.002 65.497   6059',
'SETZER         0.002 65.499   6060',
'SALVATORE      0.002 65.500   6061',
'RIOJAS         0.002 65.502   6062',
'PUMPHREY       0.002 65.504   6063',
'PUGA           0.002 65.506   6064',
'PEDRO          0.002 65.508   6065',
'PATCH          0.002 65.510   6066',
'METTS          0.002 65.512   6067',
'MCGARRY        0.002 65.514   6068',
'MCCANDLESS     0.002 65.516   6069',
'MAGILL         0.002 65.518   6070',
'LUPO           0.002 65.520   6071',
'LOVELAND       0.002 65.522   6072',
'LLAMAS         0.002 65.524   6073',
'LECLERC        0.002 65.525   6074',
'KOONS          0.002 65.527   6075',
'KAHLER         0.002 65.529   6076',
'HUSS           0.002 65.531   6077',
'HOLBERT        0.002 65.533   6078',
'HEINTZ         0.002 65.535   6079',
'HAUPT          0.002 65.537   6080',
'GRIMMETT       0.002 65.539   6081',
'GASKILL        0.002 65.541   6082',
'FLOWER         0.002 65.543   6083',
'ELLINGSON      0.002 65.545   6084',
'DORR           0.002 65.547   6085',
'DINGESS        0.002 65.549   6086',
'DEWEESE        0.002 65.550   6087',
'DESILVA        0.002 65.552   6088',
'CROSSLEY       0.002 65.554   6089',
'CORDEIRO       0.002 65.556   6090',
'CONVERSE       0.002 65.558   6091',
'CONDE          0.002 65.560   6092',
'CHEEKS         0.002 65.562   6093',
'CALDERA        0.002 65.564   6094',
'CAIRNS         0.002 65.566   6095',
'BURMEISTER     0.002 65.568   6096',
'BURKHALTER     0.002 65.570   6097',
'BRAWNER        0.002 65.572   6098',
'BOTT           0.002 65.574   6099',
'YOUNGS         0.002 65.575   6100',
'VIERRA         0.002 65.577   6101',
'VALLADARES     0.002 65.579   6102',
'TIFFANY        0.002 65.581   6103',
'SHRUM          0.002 65.583   6104',
'SHROPSHIRE     0.002 65.585   6105',
'SEVILLA        0.002 65.587   6106',
'RUSK           0.002 65.589   6107',
'ROOF           0.002 65.591   6108',
'RODARTE        0.002 65.593   6109',
'PEDRAZA        0.002 65.595   6110',
'NINO           0.002 65.596   6111',
'MONTANA        0.002 65.598   6112',
'MERINO         0.002 65.600   6113',
'MCMINN         0.002 65.602   6114',
'MARKLE         0.002 65.604   6115',
'MAPP           0.002 65.606   6116',
'LUCIA          0.002 65.608   6117',
'LAJOIE         0.002 65.610   6118',
'KOERNER        0.002 65.612   6119',
'KITTRELL       0.002 65.614   6120',
'KATO           0.002 65.616   6121',
'HYDER          0.002 65.617   6122',
'HOLLIFIELD     0.002 65.619   6123',
'HEISER         0.002 65.621   6124',
'HAZLETT        0.002 65.623   6125',
'GREENWALD      0.002 65.625   6126',
'FANT           0.002 65.627   6127',
'ELDREDGE       0.002 65.629   6128',
'DREHER         0.002 65.631   6129',
'DELAFUENTE     0.002 65.633   6130',
'CRAVENS        0.002 65.635   6131',
'CLAYPOOL       0.002 65.636   6132',
'BEECHER        0.002 65.638   6133',
'ARONSON        0.002 65.640   6134',
'ALANIS         0.002 65.642   6135',
'WORTHEN        0.002 65.644   6136',
'WOJCIK         0.002 65.646   6137',
'WINGER         0.002 65.648   6138',
'WHITACRE       0.002 65.650   6139',
'WELLINGTON     0.002 65.652   6140',
'VALVERDE       0.002 65.654   6141',
'VALDIVIA       0.002 65.655   6142',
'TROUPE         0.002 65.657   6143',
'THROWER        0.002 65.659   6144',
'SWINDELL       0.002 65.661   6145',
'SUTTLES        0.002 65.663   6146',
'SUH            0.002 65.665   6147',
'STROMAN        0.002 65.667   6148',
'SPIRES         0.002 65.669   6149',
'SLATE          0.002 65.671   6150',
'SHEALY         0.002 65.672   6151',
'SARVER         0.002 65.674   6152',
'SARTIN         0.002 65.676   6153',
'SADOWSKI       0.002 65.678   6154',
'RONDEAU        0.002 65.680   6155',
'ROLON          0.002 65.682   6156',
'RICK           0.002 65.684   6157',
'REX            0.002 65.686   6158',
'RASCON         0.002 65.688   6159',
'PRIDDY         0.002 65.690   6160',
'PINE           0.002 65.691   6161',
'PAULINO        0.002 65.693   6162',
'NOLTE          0.002 65.695   6163',
'MUNROE         0.002 65.697   6164',
'MOLLOY         0.002 65.699   6165',
'MELLON         0.002 65.701   6166',
'MCIVER         0.002 65.703   6167',
'LYKINS         0.002 65.705   6168',
'LOGGINS        0.002 65.707   6169',
'LILLIE         0.002 65.708   6170',
'LENOIR         0.002 65.710   6171',
'KLOTZ          0.002 65.712   6172',
'KEMPF          0.002 65.714   6173',
'JONE           0.002 65.716   6174',
'HUPP           0.002 65.718   6175',
'HOLLOWELL      0.002 65.720   6176',
'HOLLANDER      0.002 65.722   6177',
'HAYNIE         0.002 65.724   6178',
'HASSAN         0.002 65.725   6179',
'HARKNESS       0.002 65.727   6180',
'HARKER         0.002 65.729   6181',
'GOTTLIEB       0.002 65.731   6182',
'FRITH          0.002 65.733   6183',
'EDDINS         0.002 65.735   6184',
'DRISKELL       0.002 65.737   6185',
'DOGGETT        0.002 65.739   6186',
'DENSMORE       0.002 65.741   6187',
'CHARETTE       0.002 65.742   6188',
'CASSADY        0.002 65.744   6189',
'CARROL         0.002 65.746   6190',
'BYRUM          0.002 65.748   6191',
'BURCHAM        0.002 65.750   6192',
'BUGGS          0.002 65.752   6193',
'BENN           0.002 65.754   6194',
'WHITTED        0.002 65.756   6195',
'WARRINGTON     0.002 65.758   6196',
'VANDUSEN       0.002 65.759   6197',
'VAILLANCOURT   0.002 65.761   6198',
'STEGER         0.002 65.763   6199',
'SPELL          0.002 65.765   6200',
'SIEBERT        0.002 65.767   6201',
'SCOFIELD       0.002 65.769   6202',
'QUIRK          0.002 65.771   6203',
'PURSER         0.002 65.773   6204',
'PLUMB          0.002 65.774   6205',
'ORCUTT         0.002 65.776   6206',
'NORTHERN       0.002 65.778   6207',
'NORDSTROM      0.002 65.780   6208',
'MOSELY         0.002 65.782   6209',
'MICHALSKI      0.002 65.784   6210',
'MCPHAIL        0.002 65.786   6211',
'MCDAVID        0.002 65.788   6212',
'MCCRAW         0.002 65.789   6213',
'MARTINI        0.002 65.791   6214',
'MARCHESE       0.002 65.793   6215',
'MANNINO        0.002 65.795   6216',
'LEO            0.002 65.797   6217',
'LEFEVRE        0.002 65.799   6218',
'LARGENT        0.002 65.801   6219',
'LANZA          0.002 65.803   6220',
'KRESS          0.002 65.804   6221',
'ISHAM          0.002 65.806   6222',
'HUNSAKER       0.002 65.808   6223',
'HOCH           0.002 65.810   6224',
'HILDEBRANDT    0.002 65.812   6225',
'GUARINO        0.002 65.814   6226',
'GRIJALVA       0.002 65.816   6227',
'GRAYBILL       0.002 65.818   6228',
'FICK           0.002 65.819   6229',
'EWELL          0.002 65.821   6230',
'EWALD          0.002 65.823   6231',
'DEANGELO       0.002 65.825   6232',
'CUSICK         0.002 65.827   6233',
'CRUMLEY        0.002 65.829   6234',
'COSTON         0.002 65.831   6235',
'CATHCART       0.002 65.833   6236',
'CARRUTHERS     0.002 65.834   6237',
'BULLINGTON     0.002 65.836   6238',
'BRIAN          0.002 65.838   6239',
'BOWES          0.002 65.840   6240',
'BLAIN          0.002 65.842   6241',
'BLACKFORD      0.002 65.844   6242',
'BARBOZA        0.002 65.846   6243',
'YINGLING       0.002 65.848   6244',
'WOODLAND       0.002 65.849   6245',
'WERT           0.002 65.851   6246',
'WEILAND        0.002 65.853   6247',
'VARGA          0.002 65.855   6248',
'SILVERSTEIN    0.002 65.857   6249',
'SIEVERS        0.002 65.859   6250',
'SHUSTER        0.002 65.861   6251',
'SHUMWAY        0.002 65.862   6252',
'SCUDDER        0.002 65.864   6253',
'RUNNELS        0.002 65.866   6254',
'RUMSEY         0.002 65.868   6255',
'RENFROE        0.002 65.870   6256',
'PROVENCHER     0.002 65.872   6257',
'POLLEY         0.002 65.874   6258',
'MOHLER         0.002 65.876   6259',
'MIDDLEBROOKS   0.002 65.877   6260',
'KUTZ           0.002 65.879   6261',
'KOSTER         0.002 65.881   6262',
'KORN           0.002 65.883   6263',
'GROW           0.002 65.885   6264',
'GROTH          0.002 65.887   6265',
'GLIDDEN        0.002 65.889   6266',
'FAZIO          0.002 65.890   6267',
'DEEN           0.002 65.892   6268',
'CORN           0.002 65.894   6269',
'COPPER         0.002 65.896   6270',
'CHIPMAN        0.002 65.898   6271',
'CHENOWETH      0.002 65.900   6272',
'CHAMPLIN       0.002 65.902   6273',
'CEDILLO        0.002 65.903   6274',
'CARRERO        0.002 65.905   6275',
'CARMODY        0.002 65.907   6276',
'BUCKLES        0.002 65.909   6277',
'BRIEN          0.002 65.911   6278',
'BOUTIN         0.002 65.913   6279',
'BOSCH          0.002 65.915   6280',
'BILL           0.002 65.916   6281',
'BERKOWITZ      0.002 65.918   6282',
'ALTAMIRANO     0.002 65.920   6283',
'WILFONG        0.002 65.922   6284',
'WIEGAND        0.002 65.924   6285',
'WAITES         0.002 65.926   6286',
'TRUESDALE      0.002 65.928   6287',
'TOUSSAINT      0.002 65.929   6288',
'TOBEY          0.002 65.931   6289',
'TEDDER         0.002 65.933   6290',
'STEELMAN       0.002 65.935   6291',
'SIROIS         0.002 65.937   6292',
'SCHNELL        0.002 65.939   6293',
'ROBICHAUD      0.002 65.940   6294',
'RIDGE          0.002 65.942   6295',
'RICHBURG       0.002 65.944   6296',
'PRAY           0.002 65.946   6297',
'PLUMLEY        0.002 65.948   6298',
'PIZARRO        0.002 65.950   6299',
'PIERCY         0.002 65.952   6300',
'ORTEGO         0.002 65.953   6301',
'OBERG          0.002 65.955   6302',
'NEACE          0.002 65.957   6303',
'MUSIC          0.002 65.959   6304',
'MICKEY         0.002 65.961   6305',
'MERTZ          0.002 65.963   6306',
'MCNEW          0.002 65.964   6307',
'MATTA          0.002 65.966   6308',
'LAWYER         0.002 65.968   6309',
'LAPP           0.002 65.970   6310',
'LAIR           0.002 65.972   6311',
'KIBLER         0.002 65.974   6312',
'JESSIE         0.002 65.975   6313',
'HOWLETT        0.002 65.977   6314',
'HOLLISTER      0.002 65.979   6315',
'HOFER          0.002 65.981   6316',
'HATTEN         0.002 65.983   6317',
'HAGLER         0.002 65.985   6318',
'GERMANY        0.002 65.987   6319',
'FALGOUST       0.002 65.988   6320',
'ENGELHARDT     0.002 65.990   6321',
'EBERLE         0.002 65.992   6322',
'EASTWOOD       0.002 65.994   6323',
'DOMBROWSKI     0.002 65.996   6324',
'DINSMORE       0.002 65.998   6325',
'DAYE           0.002 65.999   6326',
'COOL           0.002 66.001   6327',
'CASARES        0.002 66.003   6328',
'CAPONE         0.002 66.005   6329',
'BRAUD          0.002 66.007   6330',
'BALCH          0.002 66.009   6331',
'AUTREY         0.002 66.011   6332',
'WENDEL         0.002 66.012   6333',
'TYNDALL        0.002 66.014   6334',
'TOY            0.002 66.016   6335',
'STROBEL        0.002 66.018   6336',
'STOLTZ         0.002 66.020   6337',
'SPINELLI       0.002 66.021   6338',
'SERRATO        0.002 66.023   6339',
'ROCHESTER      0.002 66.025   6340',
'REBER          0.002 66.027   6341',
'REAL           0.002 66.029   6342',
'RATHBONE       0.002 66.031   6343',
'PALOMINO       0.002 66.032   6344',
'NOAH           0.002 66.034   6345',
'NICKELS        0.002 66.036   6346',
'MAYLE          0.002 66.038   6347',
'MATHERS        0.002 66.040   6348',
'MACH           0.002 66.042   6349',
'LOEFFLER       0.002 66.043   6350',
'LITTRELL       0.002 66.045   6351',
'LEVINSON       0.002 66.047   6352',
'LEONG          0.002 66.049   6353',
'LEMIRE         0.002 66.051   6354',
'LEJEUNE        0.002 66.053   6355',
'LAZO           0.002 66.054   6356',
'LASLEY         0.002 66.056   6357',
'KOLLER         0.002 66.058   6358',
'KENNARD        0.002 66.060   6359',
'JESTER         0.002 66.062   6360',
'HOELSCHER      0.002 66.064   6361',
'HINTZ          0.002 66.065   6362',
'HAGERMAN       0.002 66.067   6363',
'GREAVES        0.002 66.069   6364',
'FORE           0.002 66.071   6365',
'EUDY           0.002 66.073   6366',
'ENGLER         0.002 66.075   6367',
'CORRALES       0.002 66.076   6368',
'CORDES         0.002 66.078   6369',
'BRUNET         0.002 66.080   6370',
'BIDWELL        0.002 66.082   6371',
'BENNET         0.002 66.084   6372',
'BARE           0.002 66.085   6373',
'TYRRELL        0.002 66.087   6374',
'THARPE         0.002 66.089   6375',
'SWINTON        0.002 66.091   6376',
'STRIBLING      0.002 66.093   6377',
'STEVEN         0.002 66.095   6378',
'SOUTHWORTH     0.002 66.096   6379',
'SISNEROS       0.002 66.098   6380',
'SHANE          0.002 66.100   6381',
'SAVOIE         0.002 66.102   6382',
'SAMONS         0.002 66.104   6383',
'RUVALCABA      0.002 66.105   6384',
'ROSCOE         0.002 66.107   6385',
'RIES           0.002 66.109   6386',
'RAMER          0.002 66.111   6387',
'OMARA          0.002 66.113   6388',
'MOSQUEDA       0.002 66.114   6389',
'MILLAR         0.002 66.116   6390',
'MCPEAK         0.002 66.118   6391',
'MACOMBER       0.002 66.120   6392',
'LUCKEY         0.002 66.122   6393',
'LITTON         0.002 66.124   6394',
'LEHR           0.002 66.125   6395',
'LAVIN          0.002 66.127   6396',
'HUBBS          0.002 66.129   6397',
'HOARD          0.002 66.131   6398',
'HIBBS          0.002 66.133   6399',
'HAGANS         0.002 66.134   6400',
'FUTRELL        0.002 66.136   6401',
'EXUM           0.002 66.138   6402',
'EVENSON        0.002 66.140   6403',
'DICKS          0.002 66.142   6404',
'CULLER         0.002 66.143   6405',
'CHOU           0.002 66.145   6406',
'CARBAUGH       0.002 66.147   6407',
'CALLEN         0.002 66.149   6408',
'BRASHEAR       0.002 66.151   6409',
'BLOOMER        0.002 66.153   6410',
'BLAKENEY       0.002 66.154   6411',
'BIGLER         0.002 66.156   6412',
'ADDINGTON      0.002 66.158   6413',
'WOODFORD       0.002 66.160   6414',
'WITTER         0.002 66.162   6415',
'UNRUH          0.002 66.163   6416',
'TOLENTINO      0.002 66.165   6417',
'SUMRALL        0.002 66.167   6418',
'STGERMAIN      0.002 66.169   6419',
'SMOCK          0.002 66.171   6420',
'SHERER         0.002 66.172   6421',
'SALEM          0.002 66.174   6422',
'ROCHELLE       0.002 66.176   6423',
'RAYNER         0.002 66.178   6424',
'POOLER         0.002 66.180   6425',
'OQUINN         0.002 66.181   6426',
'NERO           0.002 66.183   6427',
'MILANO         0.002 66.185   6428',
'MCGLOTHLIN     0.002 66.187   6429',
'MARS           0.002 66.189   6430',
'LINDEN         0.002 66.190   6431',
'KOWAL          0.002 66.192   6432',
'KERRIGAN       0.002 66.194   6433',
'IBRAHIM        0.002 66.196   6434',
'HARVELL        0.002 66.197   6435',
'HANRAHAN       0.002 66.199   6436',
'GOODALL        0.002 66.201   6437',
'GEIST          0.002 66.203   6438',
'FUSSELL        0.002 66.205   6439',
'FUNG           0.002 66.206   6440',
'FEREBEE        0.002 66.208   6441',
'FEDERICO       0.002 66.210   6442',
'ELEY           0.002 66.212   6443',
'EGGERT         0.002 66.214   6444',
'DORSETT        0.002 66.215   6445',
'DINGMAN        0.002 66.217   6446',
'DESTEFANO      0.002 66.219   6447',
'COLUCCI        0.002 66.221   6448',
'CLEMMER        0.002 66.223   6449',
'CAESAR         0.002 66.224   6450',
'BURNELL        0.002 66.226   6451',
'BRUMBAUGH      0.002 66.228   6452',
'BODDIE         0.002 66.230   6453',
'BERRYHILL      0.002 66.232   6454',
'AVELAR         0.002 66.233   6455',
'ALCANTARA      0.002 66.235   6456',
'ABBEY          0.002 66.237   6457',
'WINDER         0.002 66.239   6458',
'WINCHELL       0.002 66.241   6459',
'VANDENBERG     0.002 66.242   6460',
'TROTMAN        0.002 66.244   6461',
'THURBER        0.002 66.246   6462',
'THIBEAULT      0.002 66.248   6463',
'STLOUIS        0.002 66.249   6464',
'STILWELL       0.002 66.251   6465',
'SPERLING       0.002 66.253   6466',
'SHATTUCK       0.002 66.255   6467',
'SARMIENTO      0.002 66.257   6468',
'RUPPERT        0.002 66.258   6469',
'RUMPH          0.002 66.260   6470',
'RENAUD         0.002 66.262   6471',
'RANDAZZO       0.002 66.264   6472',
'RADEMACHER     0.002 66.265   6473',
'QUILES         0.002 66.267   6474',
'PEARMAN        0.002 66.269   6475',
'PALOMO         0.002 66.271   6476',
'MERCURIO       0.002 66.273   6477',
'LOWREY         0.002 66.274   6478',
'LINDEMAN       0.002 66.276   6479',
'LAWLOR         0.002 66.278   6480',
'LAROSA         0.002 66.280   6481',
'LANDER         0.002 66.282   6482',
'LABRECQUE      0.002 66.283   6483',
'KIMBER         0.002 66.285   6484',
'HOVIS          0.002 66.287   6485',
'HOLIFIELD      0.002 66.289   6486',
'HENNINGER      0.002 66.290   6487',
'HAWKES         0.002 66.292   6488',
'HARTFIELD      0.002 66.294   6489',
'HANN           0.002 66.296   6490',
'HAGUE          0.002 66.298   6491',
'GENOVESE       0.002 66.299   6492',
'GARRICK        0.002 66.301   6493',
'FUDGE          0.002 66.303   6494',
'FRINK          0.002 66.305   6495',
'EDDINGS        0.002 66.306   6496',
'DINH           0.002 66.308   6497',
'DEAR           0.002 66.310   6498',
'CUTTER         0.002 66.312   6499',
'CRIBBS         0.002 66.314   6500',
'CONSTANT       0.002 66.315   6501',
'CALVILLO       0.002 66.317   6502',
'BUNTON         0.002 66.319   6503',
'BRODEUR        0.002 66.321   6504',
'BOLDING        0.002 66.322   6505',
'BLANDING       0.002 66.324   6506',
'AGOSTO         0.002 66.326   6507',
'ZAHN           0.002 66.328   6508',
'WIENER         0.002 66.330   6509',
'TRUSSELL       0.002 66.331   6510',
'TEW            0.002 66.333   6511',
'TELLO          0.002 66.335   6512',
'TEIXEIRA       0.002 66.337   6513',
'STEPHAN        0.002 66.338   6514',
'SPECK          0.002 66.340   6515',
'SHARMA         0.002 66.342   6516',
'SHANKLIN       0.002 66.344   6517',
'SEALY          0.002 66.345   6518',
'SCANLAN        0.002 66.347   6519',
'SANTAMARIA     0.002 66.349   6520',
'ROUNDY         0.002 66.351   6521',
'ROBICHAUX      0.002 66.353   6522',
'RINGER         0.002 66.354   6523',
'RIGNEY         0.002 66.356   6524',
'PREVOST        0.002 66.358   6525',
'POLSON         0.002 66.360   6526',
'PHILIP         0.002 66.361   6527',
'PASS           0.002 66.363   6528',
'NORD           0.002 66.365   6529',
'MOXLEY         0.002 66.367   6530',
'MOHAMMED       0.002 66.368   6531',
'MEDFORD        0.002 66.370   6532',
'MCCASLIN       0.002 66.372   6533',
'MCARDLE        0.002 66.374   6534',
'MACARTHUR      0.002 66.375   6535',
'LEWIN          0.002 66.377   6536',
'LASHER         0.002 66.379   6537',
'KETCHAM        0.002 66.381   6538',
'KEISER         0.002 66.383   6539',
'HEINE          0.002 66.384   6540',
'HACKWORTH      0.002 66.386   6541',
'GROSE          0.002 66.388   6542',
'GRIZZLE        0.002 66.390   6543',
'GRASS          0.002 66.391   6544',
'GILLMAN        0.002 66.393   6545',
'GARTNER        0.002 66.395   6546',
'GARTH          0.002 66.397   6547',
'FRAZEE         0.002 66.398   6548',
'FLEURY         0.002 66.400   6549',
'FAST           0.002 66.402   6550',
'EDSON          0.002 66.404   6551',
'EDMONSON       0.002 66.405   6552',
'DERRY          0.002 66.407   6553',
'DECK           0.002 66.409   6554',
'CRONK          0.002 66.411   6555',
'CONANT         0.002 66.413   6556',
'BURRESS        0.002 66.414   6557',
'BURGIN         0.002 66.416   6558',
'BROOM          0.002 66.418   6559',
'BROCKINGTON    0.002 66.420   6560',
'BOLICK         0.002 66.421   6561',
'BOGER          0.002 66.423   6562',
'BIRCHFIELD     0.002 66.425   6563',
'BILLINGTON     0.002 66.427   6564',
'BAILY          0.002 66.428   6565',
'BAHENA         0.002 66.430   6566',
'ARMBRUSTER     0.002 66.432   6567',
'ANSON          0.002 66.434   6568',
'YOHO           0.002 66.435   6569',
'WILCHER        0.002 66.437   6570',
'TINNEY         0.002 66.439   6571',
'TIMBERLAKE     0.002 66.441   6572',
'THOMA          0.002 66.442   6573',
'THIELEN        0.002 66.444   6574',
'SUTPHIN        0.002 66.446   6575',
'STULTZ         0.002 66.448   6576',
'SIKORA         0.002 66.449   6577',
'SERRA          0.002 66.451   6578',
'SCHULMAN       0.002 66.453   6579',
'SCHEFFLER      0.002 66.455   6580',
'SANTILLAN      0.002 66.456   6581',
'ROBIN          0.002 66.458   6582',
'REGO           0.002 66.460   6583',
'PRECIADO       0.002 66.462   6584',
'PINKHAM        0.002 66.463   6585',
'MONDAY         0.002 66.465   6586',
'MICKLE         0.002 66.467   6587',
'LUU            0.002 66.469   6588',
'LOMAS          0.002 66.470   6589',
'LIZOTTE        0.002 66.472   6590',
'LENT           0.002 66.474   6591',
'LENARD         0.002 66.476   6592',
'KELLERMAN      0.002 66.477   6593',
'KEIL           0.002 66.479   6594',
'JUAN           0.002 66.481   6595',
'JOHANSON       0.002 66.483   6596',
'HERNADEZ       0.002 66.484   6597',
'HARTSFIELD     0.002 66.486   6598',
'HANG           0.002 66.488   6599',
'HABER          0.002 66.490   6600',
'GORSKI         0.002 66.491   6601',
'FARKAS         0.002 66.493   6602',
'EBERHARDT      0.002 66.495   6603',
'DUQUETTE       0.002 66.497   6604',
'DELANO         0.002 66.498   6605',
'CROPPER        0.002 66.500   6606',
'COZART         0.002 66.502   6607',
'COCKERHAM      0.002 66.504   6608',
'CHAMBLEE       0.002 66.505   6609',
'CARTAGENA      0.002 66.507   6610',
'CAHOON         0.002 66.509   6611',
'BUZZELL        0.002 66.511   6612',
'BRISTER        0.002 66.512   6613',
'BREWTON        0.002 66.514   6614',
'BLACKSHEAR     0.002 66.516   6615',
'BENFIELD       0.002 66.518   6616',
'ASTON          0.002 66.519   6617',
'ASHBURN        0.002 66.521   6618',
'ARRUDA         0.002 66.523   6619',
'WETMORE        0.002 66.525   6620',
'WEISE          0.002 66.526   6621',
'VACCARO        0.002 66.528   6622',
'TUCCI          0.002 66.530   6623',
'SUDDUTH        0.002 66.532   6624',
'STROMBERG      0.002 66.533   6625',
'STOOPS         0.002 66.535   6626',
'SHOWALTER      0.002 66.537   6627',
'SHEARS         0.002 66.538   6628',
'RUNION         0.002 66.540   6629',
'ROWDEN         0.002 66.542   6630',
'ROSENBLUM      0.002 66.544   6631',
'RIFFLE         0.002 66.545   6632',
'RENFROW        0.002 66.547   6633',
'PERES          0.002 66.549   6634',
'OBRYANT        0.002 66.551   6635',
'NICOLAS        0.002 66.552   6636',
'LEFTWICH       0.002 66.554   6637',
'LARK           0.002 66.556   6638',
'LANDEROS       0.002 66.558   6639',
'KISTLER        0.002 66.559   6640',
'KILLOUGH       0.002 66.561   6641',
'KERLEY         0.002 66.563   6642',
'KASTNER        0.002 66.564   6643',
'HOGGARD        0.002 66.566   6644',
'HARTUNG        0.002 66.568   6645',
'GUERTIN        0.002 66.570   6646',
'GOVAN          0.002 66.571   6647',
'GATLING        0.002 66.573   6648',
'GAILEY         0.002 66.575   6649',
'FULLMER        0.002 66.577   6650',
'FULFORD        0.002 66.578   6651',
'FLATT          0.002 66.580   6652',
'ESQUIBEL       0.002 66.582   6653',
'ENDICOTT       0.002 66.584   6654',
'EDMISTON       0.002 66.585   6655',
'EDELSTEIN      0.002 66.587   6656',
'DUFRESNE       0.002 66.589   6657',
'DRESSLER       0.002 66.590   6658',
'DICKMAN        0.002 66.592   6659',
'CHEE           0.002 66.594   6660',
'BUSSE          0.002 66.596   6661',
'BONNETT        0.002 66.597   6662',
'BOGART         0.002 66.599   6663',
'BERARD         0.002 66.601   6664',
'BARRINGTON     0.002 66.603   6665',
'ARENA          0.002 66.604   6666',
'ANTON          0.002 66.606   6667',
'YOSHIDA        0.002 66.608   6668',
'VELARDE        0.002 66.609   6669',
'VEACH          0.002 66.611   6670',
'VANHOUTEN      0.002 66.613   6671',
'VACHON         0.002 66.615   6672',
'TOLSON         0.002 66.616   6673',
'TOLMAN         0.002 66.618   6674',
'TENNYSON       0.002 66.620   6675',
'STITES         0.002 66.621   6676',
'SOLER          0.002 66.623   6677',
'SHUTT          0.002 66.625   6678',
'RUGGLES        0.002 66.627   6679',
'RHONE          0.002 66.628   6680',
'PEGUES         0.002 66.630   6681',
'ONG            0.002 66.632   6682',
'NEESE          0.002 66.634   6683',
'MURO           0.002 66.635   6684',
'MONCRIEF       0.002 66.637   6685',
'MEFFORD        0.002 66.639   6686',
'MCPHEE         0.002 66.640   6687',
'MCMORRIS       0.002 66.642   6688',
'MCEACHERN      0.002 66.644   6689',
'MCCLURG        0.002 66.646   6690',
'MANSOUR        0.002 66.647   6691',
'MAI            0.002 66.649   6692',
'MADER          0.002 66.651   6693',
'LEIJA          0.002 66.652   6694',
'LECOMPTE       0.002 66.654   6695',
'LAFOUNTAIN     0.002 66.656   6696',
'LABRIE         0.002 66.658   6697',
'JAQUEZ         0.002 66.659   6698',
'HEALD          0.002 66.661   6699',
'HASH           0.002 66.663   6700',
'HARTLE         0.002 66.664   6701',
'GAINER         0.002 66.666   6702',
'FRISBY         0.002 66.668   6703',
'FARINA         0.002 66.670   6704',
'EIDSON         0.002 66.671   6705',
'EDGERTON       0.002 66.673   6706',
'DYKE           0.002 66.675   6707',
'DURRETT        0.002 66.676   6708',
'DUHON          0.002 66.678   6709',
'CUOMO          0.002 66.680   6710',
'COBOS          0.002 66.682   6711',
'CERVANTEZ      0.002 66.683   6712',
'BYBEE          0.002 66.685   6713',
'BROCKWAY       0.002 66.687   6714',
'BOROWSKI       0.002 66.688   6715',
'BINION         0.002 66.690   6716',
'BEERY          0.002 66.692   6717',
'ARGUELLO       0.002 66.694   6718',
'AMARO          0.002 66.695   6719',
'ACTON          0.002 66.697   6720',
'YUEN           0.002 66.699   6721',
'WINTON         0.002 66.700   6722',
'WIGFALL        0.002 66.702   6723',
'WEEKLEY        0.002 66.704   6724',
'VIDRINE        0.002 66.706   6725',
'VANNOY         0.002 66.707   6726',
'TARDIFF        0.002 66.709   6727',
'SHOOP          0.002 66.711   6728',
'SHILLING       0.002 66.712   6729',
'SCHICK         0.002 66.714   6730',
'SAND           0.002 66.716   6731',
'SAFFORD        0.002 66.717   6732',
'PRENDERGAST    0.002 66.719   6733',
'PILGRIM        0.002 66.721   6734',
'PELLERIN       0.002 66.723   6735',
'OSUNA          0.002 66.724   6736',
'NISSEN         0.002 66.726   6737',
'NALLEY         0.002 66.728   6738',
'MORITZ         0.002 66.729   6739',
'MOLLER         0.002 66.731   6740',
'MESSNER        0.002 66.733   6741',
'MESSICK        0.002 66.734   6742',
'MERRY          0.002 66.736   6743',
'MERRIFIELD     0.002 66.738   6744',
'MCGUINNESS     0.002 66.740   6745',
'MATHERLY       0.002 66.741   6746',
'MARCANO        0.002 66.743   6747',
'MAHONE         0.002 66.745   6748',
'LEMOS          0.002 66.746   6749',
'LEBRUN         0.002 66.748   6750',
'JARA           0.002 66.750   6751',
'HOFFER         0.002 66.751   6752',
'HEWLETT        0.002 66.753   6753',
'HERREN         0.002 66.755   6754',
'HECKER         0.002 66.757   6755',
'HAWS           0.002 66.758   6756',
'HAUG           0.002 66.760   6757',
'HACK           0.002 66.762   6758',
'GWIN           0.002 66.763   6759',
'GOBER          0.002 66.765   6760',
'GILLIARD       0.002 66.767   6761',
'FREDETTE       0.002 66.768   6762',
'FAVELA         0.002 66.770   6763',
'ECHEVERRIA     0.002 66.772   6764',
'DOWNER         0.002 66.774   6765',
'DONOFRIO       0.002 66.775   6766',
'DESROCHERS     0.002 66.777   6767',
'DEE            0.002 66.779   6768',
'CROZIER        0.002 66.780   6769',
'CORSON         0.002 66.782   6770',
'CLYDE          0.002 66.784   6771',
'BECHTOLD       0.002 66.785   6772',
'ARGUETA        0.002 66.787   6773',
'APARICIO       0.002 66.789   6774',
'ZAMUDIO        0.002 66.791   6775',
'WILLETTE       0.002 66.792   6776',
'WESTOVER       0.002 66.794   6777',
'WESTERMAN      0.002 66.796   6778',
'UTTER          0.002 66.797   6779',
'TROYER         0.002 66.799   6780',
'THIES          0.002 66.801   6781',
'TAPLEY         0.002 66.802   6782',
'SLAVIN         0.002 66.804   6783',
'SHIRK          0.002 66.806   6784',
'SANDLER        0.002 66.807   6785',
'ROOP           0.002 66.809   6786',
'RIMMER         0.002 66.811   6787',
'RAYMER         0.002 66.812   6788',
'RANGE          0.002 66.814   6789',
'RADCLIFF       0.002 66.816   6790',
'OTTEN          0.002 66.818   6791',
'MOORER         0.002 66.819   6792',
'MILLET         0.002 66.821   6793',
'MCKIBBEN       0.002 66.823   6794',
'MCCUTCHEN      0.002 66.824   6795',
'MCAVOY         0.002 66.826   6796',
'MCADOO         0.002 66.828   6797',
'MAYORGA        0.002 66.829   6798',
'MASTIN         0.002 66.831   6799',
'MARTINEAU      0.002 66.833   6800',
'MAREK          0.002 66.834   6801',
'MADORE         0.002 66.836   6802',
'LEFLORE        0.002 66.838   6803',
'KROEGER        0.002 66.839   6804',
'KENNON         0.002 66.841   6805',
'JIMERSON       0.002 66.843   6806',
'JAVIER         0.002 66.845   6807',
'HOSTETTER      0.002 66.846   6808',
'HORNBACK       0.002 66.848   6809',
'HENDLEY        0.002 66.850   6810',
'HANCE          0.002 66.851   6811',
'GUARDADO       0.002 66.853   6812',
'GRANADO        0.002 66.855   6813',
'GOWEN          0.002 66.856   6814',
'GOODALE        0.002 66.858   6815',
'FLINN          0.002 66.860   6816',
'FLEETWOOD      0.002 66.861   6817',
'FITZ           0.002 66.863   6818',
'DURKEE         0.002 66.865   6819',
'DUPREY         0.002 66.866   6820',
'DIPIETRO       0.002 66.868   6821',
'DILLEY         0.002 66.870   6822',
'CLYBURN        0.002 66.871   6823',
'BRAWLEY        0.002 66.873   6824',
'BECKLEY        0.002 66.875   6825',
'ARANA          0.002 66.877   6826',
'WEATHERBY      0.002 66.878   6827',
'VOLLMER        0.002 66.880   6828',
'VICTORIA       0.002 66.882   6829',
'VESTAL         0.002 66.883   6830',
'TUNNELL        0.002 66.885   6831',
'TRIGG          0.002 66.887   6832',
'TINGLE         0.002 66.888   6833',
'TAKAHASHI      0.002 66.890   6834',
'SWEATT         0.002 66.892   6835',
'STORER         0.002 66.893   6836',
'SNAPP          0.002 66.895   6837',
'SHIVER         0.002 66.897   6838',
'ROOKER         0.002 66.898   6839',
'RED            0.002 66.900   6840',
'RATHBUN        0.002 66.902   6841',
'POISSON        0.002 66.903   6842',
'PERRINE        0.002 66.905   6843',
'PERRI          0.002 66.907   6844',
'PASTOR         0.002 66.908   6845',
'PARMER         0.002 66.910   6846',
'PARKE          0.002 66.912   6847',
'PARE           0.002 66.913   6848',
'PAPA           0.002 66.915   6849',
'PALMIERI       0.002 66.917   6850',
'NOTTINGHAM     0.002 66.918   6851',
'MIDKIFF        0.002 66.920   6852',
'MECHAM         0.002 66.922   6853',
'MCCOMAS        0.002 66.923   6854',
'MCALPINE       0.002 66.925   6855',
'LOVELADY       0.002 66.927   6856',
'LILLARD        0.002 66.928   6857',
'LALLY          0.002 66.930   6858',
'KNOPP          0.002 66.932   6859',
'KILE           0.002 66.933   6860',
'KIGER          0.002 66.935   6861',
'HAILE          0.002 66.937   6862',
'GUPTA          0.002 66.938   6863',
'GOLDSBERRY     0.002 66.940   6864',
'GILREATH       0.002 66.942   6865',
'FULKS          0.002 66.943   6866',
'FRIESEN        0.002 66.945   6867',
'FRANZEN        0.002 66.947   6868',
'FLACK          0.002 66.948   6869',
'FINDLAY        0.002 66.950   6870',
'FERLAND        0.002 66.952   6871',
'DREYER         0.002 66.953   6872',
'DORE           0.002 66.955   6873',
'DENNARD        0.002 66.957   6874',
'DECKARD        0.002 66.958   6875',
'DEBOSE         0.002 66.960   6876',
'CRIM           0.002 66.962   6877',
'COULOMBE       0.002 66.963   6878',
'CORK           0.002 66.965   6879',
'CHANCEY        0.002 66.967   6880',
'CANTOR         0.002 66.968   6881',
'BRANTON        0.002 66.970   6882',
'BISSELL        0.002 66.972   6883',
'BARNS          0.002 66.973   6884',
'WOOLARD        0.002 66.975   6885',
'WITHAM         0.002 66.977   6886',
'WASSERMAN      0.002 66.978   6887',
'WALDO          0.002 66.980   6888',
'SPIEGEL        0.002 66.982   6889',
'SHOFFNER       0.002 66.983   6890',
'SCHOLZ         0.002 66.985   6891',
'RUCH           0.002 66.987   6892',
'ROSSMAN        0.002 66.988   6893',
'READY          0.002 66.990   6894',
'PETRY          0.002 66.992   6895',
'PALACIO        0.002 66.993   6896',
'PAEZ           0.002 66.995   6897',
'NEARY          0.002 66.996   6898',
'MORTENSON      0.002 66.998   6899',
'MILLSAP        0.002 67.000   6900',
'MIELE          0.002 67.001   6901',
'MICK           0.002 67.003   6902',
'MENKE          0.002 67.005   6903',
'MCKIM          0.002 67.006   6904',
'MCANALLY       0.002 67.008   6905',
'MARTINES       0.002 67.010   6906',
'MANOR          0.002 67.011   6907',
'MALCOM         0.002 67.013   6908',
'LEMLEY         0.002 67.015   6909',
'LAROCHELLE     0.002 67.016   6910',
'KLAUS          0.002 67.018   6911',
'KLATT          0.002 67.020   6912',
'KAUFMANN       0.002 67.021   6913',
'KAPP           0.002 67.023   6914',
'HELMER         0.002 67.025   6915',
'HEDGE          0.002 67.026   6916',
'HALLORAN       0.002 67.028   6917',
'GLISSON        0.002 67.030   6918',
'FRECHETTE      0.002 67.031   6919',
'FONTANA        0.002 67.033   6920',
'ENOCH          0.002 67.035   6921',
'EAGAN          0.002 67.036   6922',
'DRUM           0.002 67.038   6923',
'DISTEFANO      0.002 67.039   6924',
'DANLEY         0.002 67.041   6925',
'CREEKMORE      0.002 67.043   6926',
'CHARTIER       0.002 67.044   6927',
'CHAFFEE        0.002 67.046   6928',
'CARILLO        0.002 67.048   6929',
'BURG           0.002 67.049   6930',
'BOLINGER       0.002 67.051   6931',
'BERKLEY        0.002 67.053   6932',
'BENZ           0.002 67.054   6933',
'BASSO          0.002 67.056   6934',
'BASH           0.002 67.058   6935',
'BARRIER        0.002 67.059   6936',
'ZELAYA         0.002 67.061   6937',
'WOODRING       0.002 67.063   6938',
'WITKOWSKI      0.002 67.064   6939',
'WILMOT         0.002 67.066   6940',
'WILKENS        0.002 67.067   6941',
'WIELAND        0.002 67.069   6942',
'VIRGIL         0.002 67.071   6943',
'VERDUGO        0.002 67.072   6944',
'URQUHART       0.002 67.074   6945',
'TSAI           0.002 67.076   6946',
'TIMMS          0.002 67.077   6947',
'SWIGER         0.002 67.079   6948',
'SWAIM          0.002 67.081   6949',
'SUSSMAN        0.002 67.082   6950',
'SCARLETT       0.002 67.084   6951',
'PIRES          0.002 67.086   6952',
'MOLNAR         0.002 67.087   6953',
'MCATEE         0.002 67.089   6954',
'MAURICE        0.002 67.090   6955',
'LOWDER         0.002 67.092   6956',
'LOOS           0.002 67.094   6957',
'LINKER         0.002 67.095   6958',
'LANDES         0.002 67.097   6959',
'KINGERY        0.002 67.099   6960',
'KEELEY         0.002 67.100   6961',
'HUFFORD        0.002 67.102   6962',
'HIGA           0.002 67.104   6963',
'HENDREN        0.002 67.105   6964',
'HAMMACK        0.002 67.107   6965',
'HAMANN         0.002 67.108   6966',
'GILLAM         0.002 67.110   6967',
'GERHARDT       0.002 67.112   6968',
'FELL           0.002 67.113   6969',
'EUGENE         0.002 67.115   6970',
'EDELMAN        0.002 67.117   6971',
'EBY            0.002 67.118   6972',
'DELK           0.002 67.120   6973',
'DEANS          0.002 67.122   6974',
'CURL           0.002 67.123   6975',
'CONSTANTINE    0.002 67.125   6976',
'CLEAVER        0.002 67.126   6977',
'CLAAR          0.002 67.128   6978',
'CASIANO        0.002 67.130   6979',
'CARRUTH        0.002 67.131   6980',
'CARLYLE        0.002 67.133   6981',
'BUMP           0.002 67.135   6982',
'BROPHY         0.002 67.136   6983',
'BOLANOS        0.002 67.138   6984',
'BIBBS          0.002 67.140   6985',
'BESSETTE       0.002 67.141   6986',
'BEGGS          0.002 67.143   6987',
'BAUGHER        0.002 67.144   6988',
'BARTEL         0.002 67.146   6989',
'AVERILL        0.002 67.148   6990',
'ANDRESEN       0.002 67.149   6991',
'AMIN           0.002 67.151   6992',
'ALDEN          0.002 67.153   6993',
'ADAMES         0.002 67.154   6994',
'WILDMAN        0.002 67.156   6995',
'VIA            0.002 67.158   6996',
'VALENTE        0.002 67.159   6997',
'TURNBOW        0.002 67.161   6998',
'TSE            0.002 67.162   6999',
'SWINK          0.002 67.164   7000',
'SUBLETT        0.002 67.166   7001',
'STROH          0.002 67.167   7002',
'STRINGFELLOW   0.002 67.169   7003',
'RIDGWAY        0.002 67.170   7004',
'PUGLIESE       0.002 67.172   7005',
'POTEAT         0.002 67.174   7006',
'PANG           0.002 67.175   7007',
'OHARE          0.002 67.177   7008',
'NEUBAUER       0.002 67.179   7009',
'MURCHISON      0.002 67.180   7010',
'MOHAMED        0.002 67.182   7011',
'MINGO          0.002 67.183   7012',
'LUCKY          0.002 67.185   7013',
'LEMMONS        0.002 67.187   7014',
'KWON           0.002 67.188   7015',
'KELLAM         0.002 67.190   7016',
'KEAN           0.002 67.192   7017',
'JARMON         0.002 67.193   7018',
'HYDEN          0.002 67.195   7019',
'HUDAK          0.002 67.196   7020',
'HOLLINGER      0.002 67.198   7021',
'HENKEL         0.002 67.200   7022',
'HEMINGWAY      0.002 67.201   7023',
'HASSON         0.002 67.203   7024',
'HANSEL         0.002 67.205   7025',
'HALTER         0.002 67.206   7026',
'HAIRE          0.002 67.208   7027',
'GOODNIGHT      0.002 67.209   7028',
'GINSBERG       0.002 67.211   7029',
'GILLISPIE      0.002 67.213   7030',
'FOGEL          0.002 67.214   7031',
'FLORY          0.002 67.216   7032',
'ETTER          0.002 67.218   7033',
'ELLEDGE        0.002 67.219   7034',
'ECKMAN         0.002 67.221   7035',
'DEAS           0.002 67.222   7036',
'CURRIN         0.002 67.224   7037',
'CRAFTON        0.002 67.226   7038',
'COOMER         0.002 67.227   7039',
'COLTER         0.002 67.229   7040',
'CLAXTON        0.002 67.230   7041',
'BULTER         0.002 67.232   7042',
'BRADDOCK       0.002 67.234   7043',
'BOWYER         0.002 67.235   7044',
'BLIZZARD       0.002 67.237   7045',
'BINNS          0.002 67.239   7046',
'BING           0.002 67.240   7047',
'BELLOWS        0.002 67.242   7048',
'BASKERVILLE    0.002 67.243   7049',
'BARROS         0.002 67.245   7050',
'ANSLEY         0.002 67.247   7051',
'WOOLF          0.002 67.248   7052',
'WIGHT          0.002 67.250   7053',
'WALDMAN        0.002 67.252   7054',
'WADLEY         0.002 67.253   7055',
'TULL           0.002 67.255   7056',
'TRULL          0.002 67.256   7057',
'TESCH          0.002 67.258   7058',
'STRUCK         0.002 67.260   7059',
'STOUFFER       0.002 67.261   7060',
'STADLER        0.002 67.263   7061',
'SLAY           0.002 67.264   7062',
'SHUBERT        0.002 67.266   7063',
'SEDILLO        0.002 67.268   7064',
'SANTACRUZ      0.002 67.269   7065',
'REINKE         0.002 67.271   7066',
'RALEIGH        0.002 67.272   7067',
'POYNTER        0.002 67.274   7068',
'NERI           0.002 67.276   7069',
'NEALE          0.002 67.277   7070',
'NATIVIDAD      0.002 67.279   7071',
'MOWRY          0.002 67.280   7072',
'MORALEZ        0.002 67.282   7073',
'MONGER         0.002 67.284   7074',
'MITCHUM        0.002 67.285   7075',
'MERRYMAN       0.002 67.287   7076',
'MANION         0.002 67.288   7077',
'MACDOUGALL     0.002 67.290   7078',
'LUX            0.002 67.292   7079',
'LITCHFIELD     0.002 67.293   7080',
'LEY            0.002 67.295   7081',
'LEVITT         0.002 67.296   7082',
'LEPAGE         0.002 67.298   7083',
'LASALLE        0.002 67.300   7084',
'LAINE          0.002 67.301   7085',
'KHOURY         0.002 67.303   7086',
'KAVANAGH       0.002 67.305   7087',
'KARNS          0.002 67.306   7088',
'IVIE           0.002 67.308   7089',
'HUEBNER        0.002 67.309   7090',
'HODGKINS       0.002 67.311   7091',
'HALPIN         0.002 67.313   7092',
'GARICA         0.002 67.314   7093',
'EVERSOLE       0.002 67.316   7094',
'DUTRA          0.002 67.317   7095',
'DUNAGAN        0.002 67.319   7096',
'DUFFEY         0.002 67.321   7097',
'DILLMAN        0.002 67.322   7098',
'DILLION        0.002 67.324   7099',
'DEVILLE        0.002 67.325   7100',
'DEARBORN       0.002 67.327   7101',
'DAMATO         0.002 67.329   7102',
'COURSON        0.002 67.330   7103',
'COULSON        0.002 67.332   7104',
'BURDINE        0.002 67.333   7105',
'BRYCE          0.002 67.335   7106',
'BOUSQUET       0.002 67.337   7107',
'BONIN          0.002 67.338   7108',
'BISH           0.002 67.340   7109',
'ATENCIO        0.002 67.341   7110',
'WESTBROOKS     0.002 67.343   7111',
'WAGES          0.002 67.345   7112',
'VACA           0.002 67.346   7113',
'TYE            0.002 67.348   7114',
'TONER          0.002 67.349   7115',
'TOMAS          0.002 67.351   7116',
'TILLIS         0.002 67.353   7117',
'SWETT          0.002 67.354   7118',
'SURFACE        0.002 67.356   7119',
'STRUBLE        0.002 67.357   7120',
'STANFILL       0.002 67.359   7121',
'SON            0.002 67.361   7122',
'SOLORZANO      0.002 67.362   7123',
'SLUSHER        0.002 67.364   7124',
'SIPPLE         0.002 67.365   7125',
'SIM            0.002 67.367   7126',
'SILVAS         0.002 67.368   7127',
'SHULTS         0.002 67.370   7128',
'SCHEXNAYDER    0.002 67.372   7129',
'SAEZ           0.002 67.373   7130',
'RODAS          0.002 67.375   7131',
'RAGER          0.002 67.376   7132',
'PULVER         0.002 67.378   7133',
'PLAZA          0.002 67.380   7134',
'PENTON         0.002 67.381   7135',
'PANIAGUA       0.002 67.383   7136',
'MENESES        0.002 67.384   7137',
'MCFARLIN       0.002 67.386   7138',
'MCAULEY        0.002 67.388   7139',
'MATZ           0.002 67.389   7140',
'MALOY          0.002 67.391   7141',
'MAGRUDER       0.002 67.392   7142',
'LOHMAN         0.002 67.394   7143',
'LANDA          0.002 67.395   7144',
'LACOMBE        0.002 67.397   7145',
'JAIMES         0.002 67.399   7146',
'HOM            0.002 67.400   7147',
'HOLZER         0.002 67.402   7148',
'HOLST          0.002 67.403   7149',
'HEIL           0.002 67.405   7150',
'HACKLER        0.002 67.407   7151',
'GRUNDY         0.002 67.408   7152',
'GREGOR         0.002 67.410   7153',
'GILKEY         0.002 67.411   7154',
'FARNHAM        0.002 67.413   7155',
'DURFEE         0.002 67.415   7156',
'DUNTON         0.002 67.416   7157',
'DUNSTON        0.002 67.418   7158',
'DUDA           0.002 67.419   7159',
'DEWS           0.002 67.421   7160',
'DANA           0.002 67.423   7161',
'CRAVER         0.002 67.424   7162',
'CORRIVEAU      0.002 67.426   7163',
'CONWELL        0.002 67.427   7164',
'COLELLA        0.002 67.429   7165',
'CHAMBLESS      0.002 67.430   7166',
'BREMER         0.002 67.432   7167',
'BOUTTE         0.002 67.434   7168',
'BOURASSA       0.002 67.435   7169',
'BLAISDELL      0.002 67.437   7170',
'BACKMAN        0.002 67.438   7171',
'BABINEAUX      0.002 67.440   7172',
'AUDETTE        0.002 67.442   7173',
'ALLEMAN        0.002 67.443   7174',
'TOWNER         0.002 67.445   7175',
'TAVERAS        0.002 67.446   7176',
'TARANGO        0.002 67.448   7177',
'SULLINS        0.002 67.449   7178',
'SUITER         0.002 67.451   7179',
'STALLARD       0.002 67.453   7180',
'SOLBERG        0.002 67.454   7181',
'SCHLUETER      0.002 67.456   7182',
'POULOS         0.002 67.457   7183',
'PIMENTAL       0.002 67.459   7184',
'OWSLEY         0.002 67.461   7185',
'OLIVIER        0.002 67.462   7186',
'OKELLEY        0.002 67.464   7187',
'NATIONS        0.002 67.465   7188',
'MOFFATT        0.002 67.467   7189',
'METCALFE       0.002 67.468   7190',
'MEEKINS        0.002 67.470   7191',
'MEDELLIN       0.002 67.472   7192',
'MCGLYNN        0.002 67.473   7193',
'MCCOWAN        0.002 67.475   7194',
'MARRIOTT       0.002 67.476   7195',
'MARABLE        0.002 67.478   7196',
'LENNOX         0.002 67.479   7197',
'LAMOUREUX      0.002 67.481   7198',
'KOSS           0.002 67.483   7199',
'KERBY          0.002 67.484   7200',
'KARP           0.002 67.486   7201',
'JASON          0.002 67.487   7202',
'ISENBERG       0.002 67.489   7203',
'HOWZE          0.002 67.490   7204',
'HOCKENBERRY    0.002 67.492   7205',
'HIGHSMITH      0.002 67.494   7206',
'HARBOUR        0.002 67.495   7207',
'HALLMARK       0.002 67.497   7208',
'GUSMAN         0.002 67.498   7209',
'GREELEY        0.002 67.500   7210',
'GIDDINGS       0.002 67.501   7211',
'GAUDET         0.002 67.503   7212',
'GALLUP         0.002 67.505   7213',
'FLEENOR        0.002 67.506   7214',
'EICHER         0.002 67.508   7215',
'EDINGTON       0.002 67.509   7216',
'DIMAGGIO       0.002 67.511   7217',
'DEMENT         0.002 67.512   7218',
'DEMELLO        0.002 67.514   7219',
'DECASTRO       0.002 67.516   7220',
'CRUISE         0.002 67.517   7221',
'BUSHMAN        0.002 67.519   7222',
'BRUNDAGE       0.002 67.520   7223',
'BROOKER        0.002 67.522   7224',
'BROOKE         0.002 67.523   7225',
'BOURG          0.002 67.525   7226',
'BOARD          0.002 67.527   7227',
'BLACKSTOCK     0.002 67.528   7228',
'BERGMANN       0.002 67.530   7229',
'BEATON         0.002 67.531   7230',
'BANISTER       0.002 67.533   7231',
'ARGO           0.002 67.534   7232',
'APPLING        0.002 67.536   7233',
'WORTMAN        0.002 67.538   7234',
'WATTERSON      0.002 67.539   7235',
'VILLALPANDO    0.002 67.541   7236',
'TILLOTSON      0.002 67.542   7237',
'TIGHE          0.002 67.544   7238',
'SUNDBERG       0.002 67.545   7239',
'STERNBERG      0.002 67.547   7240',
'STAMEY         0.002 67.549   7241',
'SPEAKS         0.002 67.550   7242',
'SHIPE          0.002 67.552   7243',
'SEEGER         0.002 67.553   7244',
'SCARBERRY      0.002 67.555   7245',
'SATTLER        0.002 67.556   7246',
'SAIN           0.002 67.558   7247',
'ROTHSTEIN      0.002 67.559   7248',
'POTEET         0.002 67.561   7249',
'PLOWMAN        0.002 67.563   7250',
'PETTIFORD      0.002 67.564   7251',
'PENLAND        0.002 67.566   7252',
'PEACH          0.002 67.567   7253',
'PARTAIN        0.002 67.569   7254',
'PANKEY         0.002 67.570   7255',
'OYLER          0.002 67.572   7256',
'OGLETREE       0.002 67.573   7257',
'OGBURN         0.002 67.575   7258',
'MOTON          0.002 67.577   7259',
'MILLION        0.002 67.578   7260',
'MERKEL         0.002 67.580   7261',
'MASK           0.002 67.581   7262',
'MARKUS         0.002 67.583   7263',
'LUCIER         0.002 67.584   7264',
'LAZARUS        0.002 67.586   7265',
'LAVELLE        0.002 67.587   7266',
'LAKEY          0.002 67.589   7267',
'KRATZ          0.002 67.591   7268',
'KINSER         0.002 67.592   7269',
'KERSHAW        0.002 67.594   7270',
'JOSEPHSON      0.002 67.595   7271',
'JESSE          0.002 67.597   7272',
'IMHOFF         0.002 67.598   7273',
'IBANEZ         0.002 67.600   7274',
'HENDRY         0.002 67.601   7275',
'HAMMON         0.002 67.603   7276',
'FRISBIE        0.002 67.605   7277',
'FRIEDRICH      0.002 67.606   7278',
'FRAWLEY        0.002 67.608   7279',
'FRAGA          0.002 67.609   7280',
'FORESTER       0.002 67.611   7281',
'ESKEW          0.002 67.612   7282',
'EMMERT         0.002 67.614   7283',
'DRENNAN        0.002 67.616   7284',
'DOYON          0.002 67.617   7285',
'DOMINICK       0.002 67.619   7286',
'DANDRIDGE      0.002 67.620   7287',
'CUMMING        0.002 67.622   7288',
'CAWLEY         0.002 67.623   7289',
'CARVAJAL       0.002 67.625   7290',
'BRACEY         0.002 67.626   7291',
'BELISLE        0.002 67.628   7292',
'BATEY          0.002 67.630   7293',
'AHNER          0.002 67.631   7294',
'WYSOCKI        0.002 67.633   7295',
'WEISER         0.002 67.634   7296',
'VELIZ          0.002 67.636   7297',
'TINCHER        0.002 67.637   7298',
'SHERLOCK       0.002 67.639   7299',
'SANTO          0.002 67.640   7300',
'SANSONE        0.002 67.642   7301',
'SANKEY         0.002 67.643   7302',
'SANDSTROM      0.002 67.645   7303',
'SALE           0.002 67.647   7304',
'ROHRER         0.002 67.648   7305',
'RISNER         0.002 67.650   7306',
'PRIDEMORE      0.002 67.651   7307',
'PFEFFER        0.002 67.653   7308',
'PERSINGER      0.002 67.654   7309',
'PEERY          0.002 67.656   7310',
'OUBRE          0.002 67.657   7311',
'ORANGE         0.002 67.659   7312',
'NOWICKI        0.002 67.660   7313',
'MUSGRAVE       0.002 67.662   7314',
'MURDOCH        0.002 67.663   7315',
'MULLINAX       0.002 67.665   7316',
'MCCARY         0.002 67.667   7317',
'MATHIEU        0.002 67.668   7318',
'LIVENGOOD      0.002 67.670   7319',
'LEONARDO       0.002 67.671   7320',
'KYSER          0.002 67.673   7321',
'KLINK          0.002 67.674   7322',
'KIMES          0.002 67.676   7323',
'KELLNER        0.002 67.677   7324',
'KAVANAUGH      0.002 67.679   7325',
'KASTEN         0.002 67.680   7326',
'IMES           0.002 67.682   7327',
'HOEY           0.002 67.684   7328',
'HINSHAW        0.002 67.685   7329',
'HALLEY         0.002 67.687   7330',
'HAKE           0.002 67.688   7331',
'GURULE         0.002 67.690   7332',
'GRUBE          0.002 67.691   7333',
'GRILLO         0.002 67.693   7334',
'GETER          0.002 67.694   7335',
'GATTO          0.002 67.696   7336',
'GARVER         0.002 67.697   7337',
'GARRETSON      0.002 67.699   7338',
'FARWELL        0.002 67.700   7339',
'EILAND         0.002 67.702   7340',
'DUNFORD        0.002 67.704   7341',
'DECARLO        0.002 67.705   7342',
'CORSO          0.002 67.707   7343',
'CORE           0.002 67.708   7344',
'COLMAN         0.002 67.710   7345',
'COLLARD        0.002 67.711   7346',
'CLEGHORN       0.002 67.713   7347',
'CHASTEEN       0.002 67.714   7348',
'CAVENDER       0.002 67.716   7349',
'CARLILE        0.002 67.717   7350',
'CALVO          0.002 67.719   7351',
'BYERLY         0.002 67.721   7352',
'BROGDON        0.002 67.722   7353',
'BROADWATER     0.002 67.724   7354',
'BREAULT        0.002 67.725   7355',
'BONO           0.002 67.727   7356',
'BERGIN         0.002 67.728   7357',
'BEHR           0.002 67.730   7358',
'BALLENGER      0.002 67.731   7359',
'AMICK          0.002 67.733   7360',
'YAN            0.002 67.734   7361',
'VICE           0.002 67.736   7362',
'TAMEZ          0.002 67.737   7363',
'STIFFLER       0.002 67.739   7364',
'STEINKE        0.002 67.740   7365',
'SIMMON         0.002 67.742   7366',
'SHANKLE        0.002 67.744   7367',
'SCHALLER       0.002 67.745   7368',
'SALMONS        0.002 67.747   7369',
'SACKETT        0.002 67.748   7370',
'SAAD           0.002 67.750   7371',
'RIDEOUT        0.002 67.751   7372',
'READER         0.002 67.753   7373',
'RATCLIFFE      0.002 67.754   7374',
'RAO            0.002 67.756   7375',
'RANSON         0.002 67.757   7376',
'RANDELL        0.002 67.759   7377',
'PLASCENCIA     0.002 67.760   7378',
'PETTERSON      0.002 67.762   7379',
'OLSZEWSKI      0.002 67.763   7380',
'OLNEY          0.002 67.765   7381',
'OLGUIN         0.002 67.766   7382',
'NILSSON        0.002 67.768   7383',
'NEVELS         0.002 67.769   7384',
'MORELLI        0.002 67.771   7385',
'MONTIEL        0.002 67.773   7386',
'MONGE          0.002 67.774   7387',
'MICHELL        0.002 67.776   7388',
'MICHAELSON     0.002 67.777   7389',
'MERTENS        0.002 67.779   7390',
'MCCHESNEY      0.002 67.780   7391',
'MCALPIN        0.002 67.782   7392',
'MATHEWSON      0.002 67.783   7393',
'LOWER          0.002 67.785   7394',
'LOUDERMILK     0.002 67.786   7395',
'LINEBERRY      0.002 67.788   7396',
'LIGGETT        0.002 67.789   7397',
'LAMP           0.002 67.791   7398',
'KINLAW         0.002 67.792   7399',
'KIGHT          0.002 67.794   7400',
'JUST           0.002 67.795   7401',
'JOST           0.002 67.797   7402',
'HEREFORD       0.002 67.798   7403',
'HARDEMAN       0.002 67.800   7404',
'HALPERN        0.002 67.802   7405',
'HALLIDAY       0.002 67.803   7406',
'HAFER          0.002 67.805   7407',
'GAUL           0.002 67.806   7408',
'FRIEL          0.002 67.808   7409',
'FREITAG        0.002 67.809   7410',
'FRANCES        0.002 67.811   7411',
'FORSBERG       0.002 67.812   7412',
'EVANGELISTA    0.002 67.814   7413',
'DOERING        0.002 67.815   7414',
'DICARLO        0.002 67.817   7415',
'DENDY          0.002 67.818   7416',
'DELP           0.002 67.820   7417',
'DEGUZMAN       0.002 67.821   7418',
'DAMERON        0.002 67.823   7419',
'CURTISS        0.002 67.824   7420',
'COUSIN         0.002 67.826   7421',
'COSPER         0.002 67.827   7422',
'CHARLEY        0.002 67.829   7423',
'CAUTHEN        0.002 67.831   7424',
'CAO            0.002 67.832   7425',
'CAMPER         0.002 67.834   7426',
'BRADBERRY      0.002 67.835   7427',
'BOUTON         0.002 67.837   7428',
'BONNELL        0.002 67.838   7429',
'BIXBY          0.002 67.840   7430',
'BIEBER         0.002 67.841   7431',
'BEVERIDGE      0.002 67.843   7432',
'BELLE          0.002 67.844   7433',
'BEDWELL        0.002 67.846   7434',
'BARHORST       0.002 67.847   7435',
'BANNON         0.002 67.849   7436',
'BALTAZAR       0.002 67.850   7437',
'BAIER          0.002 67.852   7438',
'AYOTTE         0.002 67.853   7439',
'ATTAWAY        0.002 67.855   7440',
'ARENAS         0.002 67.856   7441',
'ALEX           0.002 67.858   7442',
'ABREGO         0.002 67.860   7443',
'WATFORD        0.002 67.861   7444',
'VALLEY         0.002 67.863   7445',
'TURGEON        0.002 67.864   7446',
'TUNSTALL       0.002 67.866   7447',
'THAXTON        0.002 67.867   7448',
'THAI           0.002 67.869   7449',
'TENORIO        0.002 67.870   7450',
'STOTTS         0.002 67.872   7451',
'STHILAIRE      0.002 67.873   7452',
'SPIKER         0.002 67.875   7453',
'SHEDD          0.002 67.876   7454',
'SENG           0.002 67.878   7455',
'SEABOLT        0.002 67.879   7456',
'SCALF          0.002 67.881   7457',
'SALYERS        0.002 67.882   7458',
'RUHL           0.002 67.884   7459',
'ROWLETT        0.002 67.885   7460',
'ROBINETT       0.002 67.887   7461',
'PFISTER        0.002 67.888   7462',
'PERLMAN        0.002 67.890   7463',
'PEPE           0.002 67.891   7464',
'PARKMAN        0.002 67.893   7465',
'PARADISE       0.002 67.894   7466',
'OLIN           0.002 67.896   7467',
'NUNNALLY       0.002 67.897   7468',
'NORVELL        0.002 67.899   7469',
'NAPPER         0.002 67.900   7470',
'MODLIN         0.002 67.902   7471',
'MCKELLAR       0.002 67.903   7472',
'MCCLEAN        0.002 67.905   7473',
'MASCARENAS     0.002 67.906   7474',
'MANCHESTER     0.002 67.908   7475',
'LEIBOWITZ      0.002 67.909   7476',
'LEDEZMA        0.002 67.911   7477',
'KUHLMAN        0.002 67.912   7478',
'KOBAYASHI      0.002 67.914   7479',
'HUNLEY         0.002 67.915   7480',
'HOLMQUIST      0.002 67.917   7481',
'HINKLEY        0.002 67.918   7482',
'HAZARD         0.002 67.920   7483',
'HARTSELL       0.002 67.921   7484',
'GRIBBLE        0.002 67.923   7485',
'GRAVELY        0.002 67.924   7486',
'FIFIELD        0.002 67.926   7487',
'ELIASON        0.002 67.927   7488',
'DOCTOR         0.002 67.929   7489',
'DOAK           0.002 67.931   7490',
'CROSSLAND      0.002 67.932   7491',
'COVER          0.002 67.934   7492',
'CLAIR          0.002 67.935   7493',
'CARLETON       0.002 67.937   7494',
'BUTTERS        0.002 67.938   7495',
'BRIDGEMAN      0.002 67.940   7496',
'BOJORQUEZ      0.002 67.941   7497',
'BOGGESS        0.002 67.943   7498',
'BANKER         0.002 67.944   7499',
'AUTEN          0.002 67.946   7500',
'WOOSLEY        0.001 67.947   7501',
'WINE           0.001 67.949   7502',
'WHITELEY       0.001 67.950   7503',
'WEXLER         0.001 67.952   7504',
'TWOMEY         0.001 67.953   7505',
'TULLIS         0.001 67.955   7506',
'TOWNLEY        0.001 67.956   7507',
'TO             0.001 67.958   7508',
'STANDRIDGE     0.001 67.959   7509',
'STAMP          0.001 67.961   7510',
'SPRINGS        0.001 67.962   7511',
'SANTOYO        0.001 67.964   7512',
'RUEDA          0.001 67.965   7513',
'RIENDEAU       0.001 67.967   7514',
'REVELL         0.001 67.968   7515',
'PLESS          0.001 67.970   7516',
'OTTINGER       0.001 67.971   7517',
'NIGRO          0.001 67.973   7518',
'NICKLES        0.001 67.974   7519',
'MULVEY         0.001 67.976   7520',
'MENEFEE        0.001 67.977   7521',
'MCSHANE        0.001 67.978   7522',
'MCLOUGHLIN     0.001 67.980   7523',
'MCKINZIE       0.001 67.981   7524',
'MARROW         0.001 67.983   7525',
'MARKEY         0.001 67.984   7526',
'MARIANO        0.001 67.986   7527',
'LOCKRIDGE      0.001 67.987   7528',
'LIPSEY         0.001 67.989   7529',
'KNISLEY        0.001 67.990   7530',
'KNEPPER        0.001 67.992   7531',
'KITTS          0.001 67.993   7532',
'KIEL           0.001 67.995   7533',
'JINKS          0.001 67.996   7534',
'HATHCOCK       0.001 67.998   7535',
'GODIN          0.001 67.999   7536',
'GALLEGO        0.001 68.001   7537',
'FIKES          0.001 68.002   7538',
'FECTEAU        0.001 68.004   7539',
'ESTABROOK      0.001 68.005   7540',
'ELLINGER       0.001 68.007   7541',
'DUSTIN         0.001 68.008   7542',
'DUNLOP         0.001 68.010   7543',
'DUDEK          0.001 68.011   7544',
'DIEGO          0.001 68.013   7545',
'COUNTRYMAN     0.001 68.014   7546',
'CHAUVIN        0.001 68.016   7547',
'CHATHAM        0.001 68.017   7548',
'BULLINS        0.001 68.019   7549',
'BROWNFIELD     0.001 68.020   7550',
'BOUGHTON       0.001 68.022   7551',
'BLOODWORTH     0.001 68.023   7552',
'BIBB           0.001 68.025   7553',
'BAUCOM         0.001 68.026   7554',
'BARBIERI       0.001 68.028   7555',
'AUBIN          0.001 68.029   7556',
'ARMITAGE       0.001 68.031   7557',
'ALESSI         0.001 68.032   7558',
'ABSHER         0.001 68.034   7559',
'ABBATE         0.001 68.035   7560',
'ZITO           0.001 68.037   7561',
'WOOLERY        0.001 68.038   7562',
'WIGGS          0.001 68.040   7563',
'WACKER         0.001 68.041   7564',
'VIOLETTE       0.001 68.043   7565',
'TYNES          0.001 68.044   7566',
'TOLLE          0.001 68.046   7567',
'TELLES         0.001 68.047   7568',
'TARTER         0.001 68.049   7569',
'SWAREY         0.001 68.050   7570',
'STRODE         0.001 68.052   7571',
'STOCKDALE      0.001 68.053   7572',
'STELLA         0.001 68.055   7573',
'STALNAKER      0.001 68.056   7574',
'SPINA          0.001 68.057   7575',
'SCHIFF         0.001 68.059   7576',
'SAARI          0.001 68.060   7577',
'RISLEY         0.001 68.062   7578',
'READING        0.001 68.063   7579',
'RAMERIZ        0.001 68.065   7580',
'RAKES          0.001 68.066   7581',
'PETTAWAY       0.001 68.068   7582',
'PENNER         0.001 68.069   7583',
'PAULUS         0.001 68.071   7584',
'PALLADINO      0.001 68.072   7585',
'OMEARA         0.001 68.074   7586',
'MONTELONGO     0.001 68.075   7587',
'MELNICK        0.001 68.077   7588',
'MEHTA          0.001 68.078   7589',
'MCGARY         0.001 68.080   7590',
'MCCOURT        0.001 68.081   7591',
'MCCOLLOUGH     0.001 68.083   7592',
'MARCHETTI      0.001 68.084   7593',
'MANZANARES     0.001 68.086   7594',
'LOWTHER        0.001 68.087   7595',
'LEIVA          0.001 68.089   7596',
'LAUDERDALE     0.001 68.090   7597',
'LAFONTAINE     0.001 68.091   7598',
'KOWALCZYK      0.001 68.093   7599',
'KNIGHTON       0.001 68.094   7600',
'JOUBERT        0.001 68.096   7601',
'JAWORSKI       0.001 68.097   7602',
'IDE            0.001 68.099   7603',
'HUTH           0.001 68.100   7604',
'HURDLE         0.001 68.102   7605',
'HUNG           0.001 68.103   7606',
'HOUSLEY        0.001 68.105   7607',
'HACKMAN        0.001 68.106   7608',
'GULICK         0.001 68.108   7609',
'GORDY          0.001 68.109   7610',
'GILSTRAP       0.001 68.111   7611',
'GEHRKE         0.001 68.112   7612',
'GEBHART        0.001 68.114   7613',
'GAUDETTE       0.001 68.115   7614',
'FOXWORTH       0.001 68.117   7615',
'FINGER         0.001 68.118   7616',
'ESSEX          0.001 68.120   7617',
'ENDRES         0.001 68.121   7618',
'DUNKLE         0.001 68.123   7619',
'CLARE          0.001 68.124   7620',
'CIMINO         0.001 68.125   7621',
'CARDINAL       0.001 68.127   7622',
'CADDELL        0.001 68.128   7623',
'BRAUER         0.001 68.130   7624',
'BRALEY         0.001 68.131   7625',
'BODINE         0.001 68.133   7626',
'BLACKMORE      0.001 68.134   7627',
'BELDEN         0.001 68.136   7628',
'BACKER         0.001 68.137   7629',
'AYER           0.001 68.139   7630',
'ANDRESS        0.001 68.140   7631',
'ALVA           0.001 68.142   7632',
'WISNER         0.001 68.143   7633',
'WALK           0.001 68.145   7634',
'VUONG          0.001 68.146   7635',
'VALLIERE       0.001 68.148   7636',
'TWIGG          0.001 68.149   7637',
'TSO            0.001 68.151   7638',
'TAVAREZ        0.001 68.152   7639',
'STRAHAN        0.001 68.153   7640',
'STEIB          0.001 68.155   7641',
'STAUB          0.001 68.156   7642',
'SOWDER         0.001 68.158   7643',
'SHOULDERS      0.001 68.159   7644',
'SEIBER         0.001 68.161   7645',
'SCHUTT         0.001 68.162   7646',
'SCHARF         0.001 68.164   7647',
'SCHADE         0.001 68.165   7648',
'RODRIQUES      0.001 68.167   7649',
'RISINGER       0.001 68.168   7650',
'RENSHAW        0.001 68.170   7651',
'RATH           0.001 68.171   7652',
'RAHMAN         0.001 68.172   7653',
'PRESNELL       0.001 68.174   7654',
'PILLOW         0.001 68.175   7655',
'PIATT          0.001 68.177   7656',
'PASQUALE       0.001 68.178   7657',
'NIEMAN         0.001 68.180   7658',
'NICOL          0.001 68.181   7659',
'NEVINS         0.001 68.183   7660',
'MILFORD        0.001 68.184   7661',
'MCILWAIN       0.001 68.186   7662',
'MCGAHA         0.001 68.187   7663',
'MCCULLY        0.001 68.189   7664',
'MCCOMB         0.001 68.190   7665',
'MAYE           0.001 68.191   7666',
'MASSENGALE     0.001 68.193   7667',
'MACEDO         0.001 68.194   7668',
'LINES          0.001 68.196   7669',
'LESHER         0.001 68.197   7670',
'LELAND         0.001 68.199   7671',
'KEARSE         0.001 68.200   7672',
'JAUREGUI       0.001 68.202   7673',
'HUSTED         0.001 68.203   7674',
'HUDNALL        0.001 68.205   7675',
'HOLMBERG       0.001 68.206   7676',
'HERTEL         0.001 68.208   7677',
'HERSHEY        0.001 68.209   7678',
'HARDIE         0.001 68.210   7679',
'GLIDEWELL      0.001 68.212   7680',
'FRAUSTO        0.001 68.213   7681',
'FASSETT        0.001 68.215   7682',
'DASH           0.001 68.216   7683',
'DALESSANDRO    0.001 68.218   7684',
'DAHLGREN       0.001 68.219   7685',
'CORUM          0.001 68.221   7686',
'CONSTANTINO    0.001 68.222   7687',
'CONLIN         0.001 68.224   7688',
'COLQUITT       0.001 68.225   7689',
'COLOMBO        0.001 68.227   7690',
'CLAYCOMB       0.001 68.228   7691',
'CARLEY         0.001 68.229   7692',
'CARDIN         0.001 68.231   7693',
'CANCEL         0.001 68.232   7694',
'BULLER         0.001 68.234   7695',
'BORING         0.001 68.235   7696',
'BONEY          0.001 68.237   7697',
'BOCANEGRA      0.001 68.238   7698',
'BLAZER         0.001 68.240   7699',
'BIGGERS        0.001 68.241   7700',
'BENEDETTO      0.001 68.243   7701',
'ARAIZA         0.001 68.244   7702',
'ANDINO         0.001 68.246   7703',
'ALBIN          0.001 68.247   7704',
'ZORN           0.001 68.248   7705',
'WERTH          0.001 68.250   7706',
'WEISMAN        0.001 68.251   7707',
'WALLEY         0.001 68.253   7708',
'VANEGAS        0.001 68.254   7709',
'ULIBARRI       0.001 68.256   7710',
'TOWERS         0.001 68.257   7711',
'TOWE           0.001 68.259   7712',
'TEDFORD        0.001 68.260   7713',
'TEASLEY        0.001 68.262   7714',
'SUTTLE         0.001 68.263   7715',
'STEFFENS       0.001 68.264   7716',
'STCYR          0.001 68.266   7717',
'SQUIRE         0.001 68.267   7718',
'SMYTHE         0.001 68.269   7719',
'SINGLEY        0.001 68.270   7720',
'SIFUENTES      0.001 68.272   7721',
'SHUCK          0.001 68.273   7722',
'SESSION        0.001 68.275   7723',
'SCHRAM         0.001 68.276   7724',
'SASS           0.001 68.277   7725',
'RIEGER         0.001 68.279   7726',
'RIDENHOUR      0.001 68.280   7727',
'RICKERT        0.001 68.282   7728',
'RICHERSON      0.001 68.283   7729',
'RAYBORN        0.001 68.285   7730',
'RABE           0.001 68.286   7731',
'RAAB           0.001 68.288   7732',
'PENDLEY        0.001 68.289   7733',
'PASTORE        0.001 68.290   7734',
'ORDWAY         0.001 68.292   7735',
'MOYNIHAN       0.001 68.293   7736',
'MELLOTT        0.001 68.295   7737',
'MCKISSICK      0.001 68.296   7738',
'MCGANN         0.001 68.298   7739',
'MCCREADY       0.001 68.299   7740',
'MAUNEY         0.001 68.301   7741',
'MARRUFO        0.001 68.302   7742',
'LIST           0.001 68.303   7743',
'LENHART        0.001 68.305   7744',
'LAZAR          0.001 68.306   7745',
'LAFAVE         0.001 68.308   7746',
'KEELE          0.001 68.309   7747',
'KAUTZ          0.001 68.311   7748',
'JARDINE        0.001 68.312   7749',
'JAHNKE         0.001 68.314   7750',
'JACOBO         0.001 68.315   7751',
'HORD           0.001 68.316   7752',
'HARDCASTLE     0.001 68.318   7753',
'HAGEMAN        0.001 68.319   7754',
'GRIFFEY        0.001 68.321   7755',
'GIGLIO         0.001 68.322   7756',
'GEHRING        0.001 68.324   7757',
'FORTSON        0.001 68.325   7758',
'DUQUE          0.001 68.327   7759',
'DUPLESSIS      0.001 68.328   7760',
'DONNER         0.001 68.329   7761',
'DICKEN         0.001 68.331   7762',
'DEROSIER       0.001 68.332   7763',
'DEITZ          0.001 68.334   7764',
'DALESSIO       0.001 68.335   7765',
'CYRUS          0.001 68.337   7766',
'CRAM           0.001 68.338   7767',
'CHI            0.001 68.340   7768',
'CENTER         0.001 68.341   7769',
'CASTLEMAN      0.001 68.343   7770',
'CANDELARIO     0.001 68.344   7771',
'CALLISON       0.001 68.345   7772',
'CACERES        0.001 68.347   7773',
'BOZARTH        0.001 68.348   7774',
'BILES          0.001 68.350   7775',
'BEJARANO       0.001 68.351   7776',
'BEECH          0.001 68.353   7777',
'BASHAW         0.001 68.354   7778',
'AVINA          0.001 68.356   7779',
'ARMENTROUT     0.001 68.357   7780',
'ANGUS          0.001 68.358   7781',
'ALVEREZ        0.001 68.360   7782',
'ACORD          0.001 68.361   7783',
'ZACK           0.001 68.363   7784',
'WATERHOUSE     0.001 68.364   7785',
'VEREEN         0.001 68.366   7786',
'VANLANDINGHAM  0.001 68.367   7787',
'UHL            0.001 68.368   7788',
'STRAWSER       0.001 68.370   7789',
'SHOTWELL       0.001 68.371   7790',
'SEVERANCE      0.001 68.373   7791',
'SELTZER        0.001 68.374   7792',
'SCHOONMAKER    0.001 68.376   7793',
'SCHOCK         0.001 68.377   7794',
'SCHAUB         0.001 68.378   7795',
'SCHAFFNER      0.001 68.380   7796',
'ROEDER         0.001 68.381   7797',
'RODRIGEZ       0.001 68.383   7798',
'RIFFE          0.001 68.384   7799',
'RHINE          0.001 68.386   7800',
'RASBERRY       0.001 68.387   7801',
'RANCOURT       0.001 68.389   7802',
'RAILEY         0.001 68.390   7803',
'QUADE          0.001 68.391   7804',
'PURSLEY        0.001 68.393   7805',
'PROUTY         0.001 68.394   7806',
'PERDOMO        0.001 68.396   7807',
'OXLEY          0.001 68.397   7808',
'OSTERMAN       0.001 68.399   7809',
'NICKENS        0.001 68.400   7810',
'MURPHREE       0.001 68.401   7811',
'MOUNTS         0.001 68.403   7812',
'MONTE          0.001 68.404   7813',
'MERIDA         0.001 68.406   7814',
'MAUS           0.001 68.407   7815',
'MATTERN        0.001 68.409   7816',
'MASSE          0.001 68.410   7817',
'MARTINELLI     0.001 68.411   7818',
'MANGAN         0.001 68.413   7819',
'LUTES          0.001 68.414   7820',
'LUDWICK        0.001 68.416   7821',
'LONEY          0.001 68.417   7822',
'LAUREANO       0.001 68.419   7823',
'LASATER        0.001 68.420   7824',
'KNIGHTEN       0.001 68.421   7825',
'KISSINGER      0.001 68.423   7826',
'KIMSEY         0.001 68.424   7827',
'KESSINGER      0.001 68.426   7828',
'HONEA          0.001 68.427   7829',
'HOLLINGSHEAD   0.001 68.429   7830',
'HOCKETT        0.001 68.430   7831',
'HEYER          0.001 68.431   7832',
'HERON          0.001 68.433   7833',
'GURROLA        0.001 68.434   7834',
'GOVE           0.001 68.436   7835',
'GLASSCOCK      0.001 68.437   7836',
'GILLETT        0.001 68.439   7837',
'GALAN          0.001 68.440   7838',
'FEATHERSTONE   0.001 68.441   7839',
'ECKHARDT       0.001 68.443   7840',
'DURON          0.001 68.444   7841',
'DUNSON         0.001 68.446   7842',
'DASHER         0.001 68.447   7843',
'CULBRETH       0.001 68.449   7844',
'COWDEN         0.001 68.450   7845',
'COWANS         0.001 68.451   7846',
'CLAYPOOLE      0.001 68.453   7847',
'CHURCHWELL     0.001 68.454   7848',
'CHABOT         0.001 68.456   7849',
'CAVINESS       0.001 68.457   7850',
'CATER          0.001 68.459   7851',
'CASTON         0.001 68.460   7852',
'CALLAN         0.001 68.461   7853',
'BYINGTON       0.001 68.463   7854',
'BURKEY         0.001 68.464   7855',
'BODEN          0.001 68.466   7856',
'BECKFORD       0.001 68.467   7857',
'ATWATER        0.001 68.469   7858',
'ARMS           0.001 68.470   7859',
'ARCHAMBAULT    0.001 68.471   7860',
'ALVEY          0.001 68.473   7861',
'ALSUP          0.001 68.474   7862',
'YON            0.001 68.476   7863',
'WHISENANT      0.001 68.477   7864',
'WEESE          0.001 68.479   7865',
'VOYLES         0.001 68.480   7866',
'VERRET         0.001 68.481   7867',
'TSANG          0.001 68.483   7868',
'TESSIER        0.001 68.484   7869',
'SWEITZER       0.001 68.486   7870',
'SHERWIN        0.001 68.487   7871',
'SHAUGHNESSY    0.001 68.489   7872',
'REVIS          0.001 68.490   7873',
'REMY           0.001 68.491   7874',
'PRINE          0.001 68.493   7875',
'PHILPOTT       0.001 68.494   7876',
'PEAVY          0.001 68.496   7877',
'PAYNTER        0.001 68.497   7878',
'PARMENTER      0.001 68.498   7879',
'OVALLE         0.001 68.500   7880',
'OFFUTT         0.001 68.501   7881',
'NIGHTINGALE    0.001 68.503   7882',
'NEWLIN         0.001 68.504   7883',
'NAKANO         0.001 68.505   7884',
'MYATT          0.001 68.507   7885',
'MUTH           0.001 68.508   7886',
'MOHAN          0.001 68.510   7887',
'MCMILLON       0.001 68.511   7888',
'MCCARLEY       0.001 68.513   7889',
'MCCALEB        0.001 68.514   7890',
'MAXSON         0.001 68.515   7891',
'MARINELLI      0.001 68.517   7892',
'MALEY          0.001 68.518   7893',
'MACY           0.001 68.520   7894',
'LISTON         0.001 68.521   7895',
'LETENDRE       0.001 68.522   7896',
'KAIN           0.001 68.524   7897',
'HUNTSMAN       0.001 68.525   7898',
'HIRST          0.001 68.527   7899',
'HAGERTY        0.001 68.528   7900',
'GULLEDGE       0.001 68.530   7901',
'GREENWAY       0.001 68.531   7902',
'GRAJEDA        0.001 68.532   7903',
'GORTON         0.001 68.534   7904',
'GOINES         0.001 68.535   7905',
'GITTENS        0.001 68.537   7906',
'FREDERICKSON   0.001 68.538   7907',
'FANELLI        0.001 68.539   7908',
'EMBREE         0.001 68.541   7909',
'EICHELBERGER   0.001 68.542   7910',
'DUNKIN         0.001 68.544   7911',
'DULL           0.001 68.545   7912',
'DIXSON         0.001 68.547   7913',
'DILLOW         0.001 68.548   7914',
'DEFELICE       0.001 68.549   7915',
'CHUMLEY        0.001 68.551   7916',
'BURLEIGH       0.001 68.552   7917',
'BORKOWSKI      0.001 68.554   7918',
'BINETTE        0.001 68.555   7919',
'BIGGERSTAFF    0.001 68.556   7920',
'BERGLUND       0.001 68.558   7921',
'BELLER         0.001 68.559   7922',
'AUDET          0.001 68.561   7923',
'ARBUCKLE       0.001 68.562   7924',
'ALLAIN         0.001 68.563   7925',
'ALFANO         0.001 68.565   7926',
'ZANDER         0.001 68.566   7927',
'YOUNGMAN       0.001 68.568   7928',
'WITTMAN        0.001 68.569   7929',
'WEINTRAUB      0.001 68.571   7930',
'VANZANT        0.001 68.572   7931',
'VADEN          0.001 68.573   7932',
'TWITTY         0.001 68.575   7933',
'TRADER         0.001 68.576   7934',
'TOON           0.001 68.578   7935',
'TILL           0.001 68.579   7936',
'STOLLINGS      0.001 68.580   7937',
'STANDIFER      0.001 68.582   7938',
'SPINNER        0.001 68.583   7939',
'SINES          0.001 68.584   7940',
'SHOPE          0.001 68.586   7941',
'SCALISE        0.001 68.587   7942',
'SAVILLE        0.001 68.589   7943',
'ROMANS         0.001 68.590   7944',
'POSADA         0.001 68.591   7945',
'PISANO         0.001 68.593   7946',
'OTTE           0.001 68.594   7947',
'NOLASCO        0.001 68.596   7948',
'NAPOLI         0.001 68.597   7949',
'MIER           0.001 68.598   7950',
'MERKLE         0.001 68.600   7951',
'MENDIOLA       0.001 68.601   7952',
'MELCHER        0.001 68.603   7953',
'MEJIAS         0.001 68.604   7954',
'MCMURRY        0.001 68.605   7955',
'MCCALLA        0.001 68.607   7956',
'MARKOWITZ      0.001 68.608   7957',
'MARINE         0.001 68.610   7958',
'MANIS          0.001 68.611   7959',
'MALLETTE       0.001 68.612   7960',
'MACFARLANE     0.001 68.614   7961',
'LOUGH          0.001 68.615   7962',
'LOOPER         0.001 68.617   7963',
'LANDIN         0.001 68.618   7964',
'KITTLE         0.001 68.619   7965',
'KINSELLA       0.001 68.621   7966',
'KINNARD        0.001 68.622   7967',
'HOBART         0.001 68.624   7968',
'HERALD         0.001 68.625   7969',
'HELMAN         0.001 68.626   7970',
'HELLMAN        0.001 68.628   7971',
'HARTSOCK       0.001 68.629   7972',
'HALFORD        0.001 68.631   7973',
'HAGE           0.001 68.632   7974',
'GORDAN         0.001 68.633   7975',
'GLASSER        0.001 68.635   7976',
'GAYTON         0.001 68.636   7977',
'GATTIS         0.001 68.638   7978',
'GASTELUM       0.001 68.639   7979',
'GASPARD        0.001 68.640   7980',
'FRISCH         0.001 68.642   7981',
'FORCE          0.001 68.643   7982',
'FITZHUGH       0.001 68.645   7983',
'ECKSTEIN       0.001 68.646   7984',
'EBERLY         0.001 68.647   7985',
'DOWDEN         0.001 68.649   7986',
'DESPAIN        0.001 68.650   7987',
'CRUMPLER       0.001 68.652   7988',
'CROTTY         0.001 68.653   7989',
'CORNELISON     0.001 68.654   7990',
'COLLIN         0.001 68.656   7991',
'COLIN          0.001 68.657   7992',
'CHOUINARD      0.001 68.659   7993',
'CHAMNESS       0.001 68.660   7994',
'CATLIN         0.001 68.661   7995',
'CANN           0.001 68.663   7996',
'BUMGARDNER     0.001 68.664   7997',
'BUDDE          0.001 68.666   7998',
'BRANUM         0.001 68.667   7999',
'BRADFIELD      0.001 68.668   8000',
'BRADDY         0.001 68.670   8001',
'BORST          0.001 68.671   8002',
'BIRDWELL       0.001 68.673   8003',
'BENT           0.001 68.674   8004',
'BAZAN          0.001 68.675   8005',
'BANK           0.001 68.677   8006',
'BANAS          0.001 68.678   8007',
'BADE           0.001 68.680   8008',
'AUBREY         0.001 68.681   8009',
'ARANGO         0.001 68.682   8010',
'AHEARN         0.001 68.684   8011',
'ADDIS          0.001 68.685   8012',
'ZUMWALT        0.001 68.687   8013',
'WURTH          0.001 68.688   8014',
'WILK           0.001 68.689   8015',
'WIDENER        0.001 68.691   8016',
'WAGSTAFF       0.001 68.692   8017',
'VELLA          0.001 68.694   8018',
'URRUTIA        0.001 68.695   8019',
'TERWILLIGER    0.001 68.696   8020',
'TART           0.001 68.698   8021',
'STEINMAN       0.001 68.699   8022',
'STAATS         0.001 68.700   8023',
'SLOAT          0.001 68.702   8024',
'RIVES          0.001 68.703   8025',
'RIGGLE         0.001 68.705   8026',
'REVELS         0.001 68.706   8027',
'REICHARD       0.001 68.707   8028',
'PRICKETT       0.001 68.709   8029',
'POFF           0.001 68.710   8030',
'PITZER         0.001 68.712   8031',
'PETRO          0.001 68.713   8032',
'PELL           0.001 68.714   8033',
'NORTHRUP       0.001 68.716   8034',
'NICKS          0.001 68.717   8035',
'MOLINE         0.001 68.718   8036',
'MIELKE         0.001 68.720   8037',
'MAYNOR         0.001 68.721   8038',
'MALLON         0.001 68.723   8039',
'MAGNESS        0.001 68.724   8040',
'LINGLE         0.001 68.725   8041',
'LINDELL        0.001 68.727   8042',
'LIEB           0.001 68.728   8043',
'LESKO          0.001 68.729   8044',
'LEBEAU         0.001 68.731   8045',
'LAMMERS        0.001 68.732   8046',
'LAFOND         0.001 68.734   8047',
'KIERNAN        0.001 68.735   8048',
'KETRON         0.001 68.736   8049',
'JURADO         0.001 68.738   8050',
'HOLMGREN       0.001 68.739   8051',
'HILBURN        0.001 68.741   8052',
'HAYASHI        0.001 68.742   8053',
'HASHIMOTO      0.001 68.743   8054',
'HARBAUGH       0.001 68.745   8055',
'HANS           0.001 68.746   8056',
'GUILLOT        0.001 68.747   8057',
'GARD           0.001 68.749   8058',
'FROEHLICH      0.001 68.750   8059',
'FELIPE         0.001 68.752   8060',
'FEINBERG       0.001 68.753   8061',
'FALCO          0.001 68.754   8062',
'DUFOUR         0.001 68.756   8063',
'DREES          0.001 68.757   8064',
'DONEY          0.001 68.759   8065',
'DIEP           0.001 68.760   8066',
'DELAO          0.001 68.761   8067',
'DAVES          0.001 68.763   8068',
'DAIL           0.001 68.764   8069',
'CUTTING        0.001 68.765   8070',
'CROWSON        0.001 68.767   8071',
'COSS           0.001 68.768   8072',
'CONGDON        0.001 68.770   8073',
'CARNER         0.001 68.771   8074',
'CAMARENA       0.001 68.772   8075',
'BUTTERWORTH    0.001 68.774   8076',
'BURLINGAME     0.001 68.775   8077',
'BOUFFARD       0.001 68.777   8078',
'BLOCH          0.001 68.778   8079',
'BILYEU         0.001 68.779   8080',
'BARTA          0.001 68.781   8081',
'BAKKE          0.001 68.782   8082',
'BAILLARGEON    0.001 68.783   8083',
'AVENT          0.001 68.785   8084',
'AQUILAR        0.001 68.786   8085',
'AKE            0.001 68.788   8086',
'AHO            0.001 68.789   8087',
'ZERINGUE       0.001 68.790   8088',
'YEH            0.001 68.792   8089',
'YARBER         0.001 68.793   8090',
'WOLFSON        0.001 68.794   8091',
'WENDELL        0.001 68.796   8092',
'VOGLER         0.001 68.797   8093',
'VOELKER        0.001 68.799   8094',
'TRUSS          0.001 68.800   8095',
'TROXELL        0.001 68.801   8096',
'THRIFT         0.001 68.803   8097',
'STROUSE        0.001 68.804   8098',
'SPIELMAN       0.001 68.805   8099',
'SISTRUNK       0.001 68.807   8100',
'SHOWS          0.001 68.808   8101',
'SEVIGNY        0.001 68.809   8102',
'SCHULLER       0.001 68.811   8103',
'SCHAAF         0.001 68.812   8104',
'RUFFNER        0.001 68.814   8105',
'ROUTH          0.001 68.815   8106',
'ROSEMAN        0.001 68.816   8107',
'RICCIARDI      0.001 68.818   8108',
'PERAZA         0.001 68.819   8109',
'PEGRAM         0.001 68.820   8110',
'OVERTURF       0.001 68.822   8111',
'OLANDER        0.001 68.823   8112',
'ODANIEL        0.001 68.825   8113',
'NEU            0.001 68.826   8114',
'MILLNER        0.001 68.827   8115',
'MELCHOR        0.001 68.829   8116',
'MAXIE          0.001 68.830   8117',
'MARVEL         0.001 68.831   8118',
'MARONEY        0.001 68.833   8119',
'MACHUCA        0.001 68.834   8120',
'MACALUSO       0.001 68.835   8121',
'LIVESAY        0.001 68.837   8122',
'LAYFIELD       0.001 68.838   8123',
'LASKOWSKI      0.001 68.840   8124',
'KWIATKOWSKI    0.001 68.841   8125',
'KO             0.001 68.842   8126',
'KILEY          0.001 68.844   8127',
'KILBY          0.001 68.845   8128',
'JULIEN         0.001 68.846   8129',
'HOVEY          0.001 68.848   8130',
'HEYWOOD        0.001 68.849   8131',
'HAYMAN         0.001 68.850   8132',
'HAVARD         0.001 68.852   8133',
'HARVILLE       0.001 68.853   8134',
'HAIGH          0.001 68.855   8135',
'HAGOOD         0.001 68.856   8136',
'GRIECO         0.001 68.857   8137',
'GLASSMAN       0.001 68.859   8138',
'GEBHARDT       0.001 68.860   8139',
'GARRY          0.001 68.861   8140',
'FREEZE         0.001 68.863   8141',
'FLEISCHER      0.001 68.864   8142',
'FANN           0.001 68.866   8143',
'ELSON          0.001 68.867   8144',
'ECCLES         0.001 68.868   8145',
'CUNHA          0.001 68.870   8146',
'CRUMB          0.001 68.871   8147',
'CREW           0.001 68.872   8148',
'BLAKLEY        0.001 68.874   8149',
'BARDWELL       0.001 68.875   8150',
'ABSHIRE        0.001 68.876   8151',
'WOODHAM        0.001 68.878   8152',
'WINES          0.001 68.879   8153',
'WELTER         0.001 68.881   8154',
'WARGO          0.001 68.882   8155',
'VARNADO        0.001 68.883   8156',
'TUTT           0.001 68.885   8157',
'TRAYNOR        0.001 68.886   8158',
'SWANEY         0.001 68.887   8159',
'SVOBODA        0.001 68.889   8160',
'STRICKER       0.001 68.890   8161',
'STOFFEL        0.001 68.891   8162',
'STAMBAUGH      0.001 68.893   8163',
'SICKLER        0.001 68.894   8164',
'SHACKLEFORD    0.001 68.895   8165',
'SELMAN         0.001 68.897   8166',
'SEAVER         0.001 68.898   8167',
'SANSOM         0.001 68.899   8168',
'SANMIGUEL      0.001 68.901   8169',
'ROYSTON        0.001 68.902   8170',
'ROURKE         0.001 68.903   8171',
'ROCKETT        0.001 68.905   8172',
'RIOUX          0.001 68.906   8173',
'PULEO          0.001 68.908   8174',
'PITCHFORD      0.001 68.909   8175',
'PERSONS        0.001 68.910   8176',
'NORMAND        0.001 68.912   8177',
'NARDI          0.001 68.913   8178',
'MULVANEY       0.001 68.914   8179',
'MIDDAUGH       0.001 68.916   8180',
'MANNERS        0.001 68.917   8181',
'MALEK          0.001 68.918   8182',
'LODGE          0.001 68.920   8183',
'LEOS           0.001 68.921   8184',
'LATHAN         0.001 68.922   8185',
'KUJAWA         0.001 68.924   8186',
'KIMBRO         0.001 68.925   8187',
'KILLEBREW      0.001 68.926   8188',
'JOSHUA         0.001 68.928   8189',
'HOULIHAN       0.001 68.929   8190',
'HOBBY          0.001 68.931   8191',
'HINCKLEY       0.001 68.932   8192',
'HEROD          0.001 68.933   8193',
'HEPLER         0.001 68.935   8194',
'HAMNER         0.001 68.936   8195',
'HAMMEL         0.001 68.937   8196',
'HALLOWELL      0.001 68.939   8197',
'GONSALEZ       0.001 68.940   8198',
'GINGERICH      0.001 68.941   8199',
'GAMBILL        0.001 68.943   8200',
'FUNKHOUSER     0.001 68.944   8201',
'FRICKE         0.001 68.945   8202',
'FEWELL         0.001 68.947   8203',
'FALKNER        0.001 68.948   8204',
'ENDSLEY        0.001 68.949   8205',
'DULIN          0.001 68.951   8206',
'DRENNEN        0.001 68.952   8207',
'DEAVER         0.001 68.953   8208',
'DAMBROSIO      0.001 68.955   8209',
'CLOVER         0.001 68.956   8210',
'CHADWELL       0.001 68.958   8211',
'CEASAR         0.001 68.959   8212',
'CASTANON       0.001 68.960   8213',
'CANON          0.001 68.962   8214',
'BURKES         0.001 68.963   8215',
'BRUNE          0.001 68.964   8216',
'BRISCO         0.001 68.966   8217',
'BRINKER        0.001 68.967   8218',
'BOWKER         0.001 68.968   8219',
'BOLDT          0.001 68.970   8220',
'BERNER         0.001 68.971   8221',
'BEE            0.001 68.972   8222',
'BEAUMONT       0.001 68.974   8223',
'BEAIRD         0.001 68.975   8224',
'BAZEMORE       0.001 68.976   8225',
'BARRICK        0.001 68.978   8226',
'ARNETTE        0.001 68.979   8227',
'ALBANO         0.001 68.981   8228',
'YOUNTS         0.001 68.982   8229',
'WUNDERLICH     0.001 68.983   8230',
'WEIDMAN        0.001 68.985   8231',
'VANNESS        0.001 68.986   8232',
'TU             0.001 68.987   8233',
'TOLAND         0.001 68.989   8234',
'THEOBALD       0.001 68.990   8235',
'STICKLER       0.001 68.991   8236',
'STEIGER        0.001 68.993   8237',
'STANGER        0.001 68.994   8238',
'SPIES          0.001 68.995   8239',
'SPECTOR        0.001 68.997   8240',
'SOLLARS        0.001 68.998   8241',
'SMEDLEY        0.001 68.999   8242',
'SEIBEL         0.001 69.001   8243',
'SCOVILLE       0.001 69.002   8244',
'SAITO          0.001 69.003   8245',
'RYE            0.001 69.005   8246',
'RUMMEL         0.001 69.006   8247',
'RUDE           0.001 69.007   8248',
'ROWLES         0.001 69.009   8249',
'ROULEAU        0.001 69.010   8250',
'ROOS           0.001 69.011   8251',
'ROGAN          0.001 69.013   8252',
'ROEMER         0.001 69.014   8253',
'REAM           0.001 69.015   8254',
'RAYA           0.001 69.017   8255',
'PURKEY         0.001 69.018   8256',
'PRIESTER       0.001 69.019   8257',
'PERREIRA       0.001 69.021   8258',
'PENICK         0.001 69.022   8259',
'PAULIN         0.001 69.023   8260',
'PARKINS        0.001 69.025   8261',
'OVERCASH       0.001 69.026   8262',
'OLESON         0.001 69.027   8263',
'NICELY         0.001 69.029   8264',
'NEVES          0.001 69.030   8265',
'MULDROW        0.001 69.031   8266',
'MINARD         0.001 69.033   8267',
'MIDGETT        0.001 69.034   8268',
'MICHALAK       0.001 69.035   8269',
'MELGAR         0.001 69.037   8270',
'MCENTIRE       0.001 69.038   8271',
'MCAULIFFE      0.001 69.039   8272',
'MARTI          0.001 69.041   8273',
'MARTE          0.001 69.042   8274',
'LYDON          0.001 69.043   8275',
'LINDHOLM       0.001 69.045   8276',
'LEYBA          0.001 69.046   8277',
'LEADER         0.001 69.047   8278',
'LANGEVIN       0.001 69.049   8279',
'LAGASSE        0.001 69.050   8280',
'LAFAYETTE      0.001 69.051   8281',
'KESLER         0.001 69.053   8282',
'KELTON         0.001 69.054   8283',
'KAO            0.001 69.055   8284',
'KAMINSKY       0.001 69.057   8285',
'JUMP           0.001 69.058   8286',
'JAGGERS        0.001 69.059   8287',
'HUMBERT        0.001 69.061   8288',
'HUCK           0.001 69.062   8289',
'HOWARTH        0.001 69.063   8290',
'HINRICHS       0.001 69.065   8291',
'HIGLEY         0.001 69.066   8292',
'GUPTON         0.001 69.067   8293',
'GUIMOND        0.001 69.069   8294',
'GRAVOIS        0.001 69.070   8295',
'GIGUERE        0.001 69.071   8296',
'FRETWELL       0.001 69.073   8297',
'FONTES         0.001 69.074   8298',
'FEELEY         0.001 69.075   8299',
'FAUCHER        0.001 69.077   8300',
'FALL           0.001 69.078   8301',
'EVAN           0.001 69.079   8302',
'EICHHORN       0.001 69.081   8303',
'ECKER          0.001 69.082   8304',
'EARP           0.001 69.083   8305',
'DOLE           0.001 69.085   8306',
'DINGER         0.001 69.086   8307',
'DERRYBERRY     0.001 69.087   8308',
'DEMARS         0.001 69.089   8309',
'DEEL           0.001 69.090   8310',
'COPENHAVER     0.001 69.091   8311',
'COLLINSWORTH   0.001 69.093   8312',
'COLANGELO      0.001 69.094   8313',
'CLOYD          0.001 69.095   8314',
'CLAIBORNE      0.001 69.097   8315',
'CAULFIELD      0.001 69.098   8316',
'CARLSEN        0.001 69.099   8317',
'CALZADA        0.001 69.101   8318',
'CAFFEY         0.001 69.102   8319',
'BROADUS        0.001 69.103   8320',
'BRENNEMAN      0.001 69.105   8321',
'BOUIE          0.001 69.106   8322',
'BODNAR         0.001 69.107   8323',
'BLANEY         0.001 69.109   8324',
'BLANC          0.001 69.110   8325',
'BLADES         0.001 69.111   8326',
'BELTZ          0.001 69.113   8327',
'BEHLING        0.001 69.114   8328',
'BEGIN          0.001 69.115   8329',
'BARAHONA       0.001 69.117   8330',
'YUN            0.001 69.118   8331',
'YOCKEY         0.001 69.119   8332',
'WINKLE         0.001 69.121   8333',
'WINDOM         0.001 69.122   8334',
'WIMER          0.001 69.123   8335',
'WILFORD        0.001 69.125   8336',
'WASH           0.001 69.126   8337',
'VILLATORO      0.001 69.127   8338',
'TREXLER        0.001 69.129   8339',
'TERAN          0.001 69.130   8340',
'TALIAFERRO     0.001 69.131   8341',
'SYDNOR         0.001 69.133   8342',
'SWINSON        0.001 69.134   8343',
'SNELLING       0.001 69.135   8344',
'SMTIH          0.001 69.137   8345',
'SIU            0.001 69.138   8346',
'SIMONTON       0.001 69.139   8347',
'SIMONEAUX      0.001 69.140   8348',
'SIMONEAU       0.001 69.142   8349',
'SHERRER        0.001 69.143   8350',
'SEAVEY         0.001 69.144   8351',
'SCHEEL         0.001 69.146   8352',
'RUSHTON        0.001 69.147   8353',
'RUPE           0.001 69.148   8354',
'RUANO          0.001 69.150   8355',
'RODNEY         0.001 69.151   8356',
'RIPPY          0.001 69.152   8357',
'REINER         0.001 69.154   8358',
'REIFF          0.001 69.155   8359',
'RABINOWITZ     0.001 69.156   8360',
'QUACH          0.001 69.158   8361',
'PENLEY         0.001 69.159   8362',
'ODLE           0.001 69.160   8363',
'NOCK           0.001 69.162   8364',
'MINNICH        0.001 69.163   8365',
'MCKOWN         0.001 69.164   8366',
'MCCARVER       0.001 69.166   8367',
'MCANDREW       0.001 69.167   8368',
'LONGLEY        0.001 69.168   8369',
'LAUX           0.001 69.169   8370',
'LAMOTHE        0.001 69.171   8371',
'LAFRENIERE     0.001 69.172   8372',
'KROPP          0.001 69.173   8373',
'KRICK          0.001 69.175   8374',
'KATES          0.001 69.176   8375',
'JEPSON         0.001 69.177   8376',
'HUIE           0.001 69.179   8377',
'HOWSE          0.001 69.180   8378',
'HOWIE          0.001 69.181   8379',
'HENRIQUES      0.001 69.183   8380',
'HAYDON         0.001 69.184   8381',
'HAUGHT         0.001 69.185   8382',
'HATTER         0.001 69.187   8383',
'HARTZOG        0.001 69.188   8384',
'HARKEY         0.001 69.189   8385',
'GRIMALDO       0.001 69.191   8386',
'GOSHORN        0.001 69.192   8387',
'GORMLEY        0.001 69.193   8388',
'GLUCK          0.001 69.195   8389',
'GILROY         0.001 69.196   8390',
'GILLENWATER    0.001 69.197   8391',
'GIFFIN         0.001 69.199   8392',
'FOLKS          0.001 69.200   8393',
'FLUKER         0.001 69.201   8394',
'FEDER          0.001 69.202   8395',
'EYRE           0.001 69.204   8396',
'ESHELMAN       0.001 69.205   8397',
'EAKINS         0.001 69.206   8398',
'DRYER          0.001 69.208   8399',
'DISNEY         0.001 69.209   8400',
'DETWILER       0.001 69.210   8401',
'DELROSARIO     0.001 69.212   8402',
'DAVISSON       0.001 69.213   8403',
'CELESTINE      0.001 69.214   8404',
'CATALAN        0.001 69.216   8405',
'CANNING        0.001 69.217   8406',
'CALTON         0.001 69.218   8407',
'BUSTER         0.001 69.220   8408',
'BRAMMER        0.001 69.221   8409',
'BOTELHO        0.001 69.222   8410',
'BLAKNEY        0.001 69.224   8411',
'BARTELL        0.001 69.225   8412',
'AVERETT        0.001 69.226   8413',
'ASKINS         0.001 69.228   8414',
'AKER           0.001 69.229   8415',
'ZAK            0.001 69.230   8416',
'WORCESTER      0.001 69.231   8417',
'WITMER         0.001 69.233   8418',
'WISER          0.001 69.234   8419',
'WINKELMAN      0.001 69.235   8420',
'WIDMER         0.001 69.237   8421',
'WHITTIER       0.001 69.238   8422',
'WESTERN        0.001 69.239   8423',
'WEITZEL        0.001 69.241   8424',
'WARDELL        0.001 69.242   8425',
'WAGERS         0.001 69.243   8426',
'ULLMAN         0.001 69.245   8427',
'TUPPER         0.001 69.246   8428',
'TINGLEY        0.001 69.247   8429',
'TILGHMAN       0.001 69.248   8430',
'TALTON         0.001 69.250   8431',
'SIMARD         0.001 69.251   8432',
'SEDA           0.001 69.252   8433',
'SCHELLER       0.001 69.254   8434',
'SALA           0.001 69.255   8435',
'RUNDELL        0.001 69.256   8436',
'ROST           0.001 69.258   8437',
'ROA            0.001 69.259   8438',
'RIBEIRO        0.001 69.260   8439',
'RABIDEAU       0.001 69.261   8440',
'PRIMM          0.001 69.263   8441',
'PORCH          0.001 69.264   8442',
'POLITE         0.001 69.265   8443',
'PINON          0.001 69.267   8444',
'PEART          0.001 69.268   8445',
'OSTROM         0.001 69.269   8446',
'OBER           0.001 69.271   8447',
'NYSTROM        0.001 69.272   8448',
'NUSSBAUM       0.001 69.273   8449',
'NURSE          0.001 69.275   8450',
'NAUGHTON       0.001 69.276   8451',
'MURR           0.001 69.277   8452',
'MOORHEAD       0.001 69.278   8453',
'MONTI          0.001 69.280   8454',
'MONTEIRO       0.001 69.281   8455',
'MELSON         0.001 69.282   8456',
'MEISSNER       0.001 69.284   8457',
'MCLIN          0.001 69.285   8458',
'MCGRUDER       0.001 69.286   8459',
'MAROTTA        0.001 69.288   8460',
'MAKOWSKI       0.001 69.289   8461',
'MAJEWSKI       0.001 69.290   8462',
'MADEWELL       0.001 69.291   8463',
'LUNT           0.001 69.293   8464',
'LUKENS         0.001 69.294   8465',
'LEININGER      0.001 69.295   8466',
'LEBEL          0.001 69.297   8467',
'LAKIN          0.001 69.298   8468',
'LAGUNA         0.001 69.299   8469',
'KEPLER         0.001 69.301   8470',
'JAQUES         0.001 69.302   8471',
'HUNNICUTT      0.001 69.303   8472',
'HUNGERFORD     0.001 69.304   8473',
'HOOPES         0.001 69.306   8474',
'HERTZ          0.001 69.307   8475',
'HEINS          0.001 69.308   8476',
'HAMMERS        0.001 69.310   8477',
'HALLIBURTON    0.001 69.311   8478',
'GROSSO         0.001 69.312   8479',
'GRAVITT        0.001 69.314   8480',
'GLASPER        0.001 69.315   8481',
'GIDEON         0.001 69.316   8482',
'GALLMAN        0.001 69.318   8483',
'GALLAWAY       0.001 69.319   8484',
'FUNKE          0.001 69.320   8485',
'FULBRIGHT      0.001 69.321   8486',
'FALGOUT        0.001 69.323   8487',
'EAKIN          0.001 69.324   8488',
'DOSTIE         0.001 69.325   8489',
'DORADO         0.001 69.327   8490',
'DEWBERRY       0.001 69.328   8491',
'DEROSE         0.001 69.329   8492',
'CUTSHALL       0.001 69.331   8493',
'CRAMPTON       0.001 69.332   8494',
'COSTANZO       0.001 69.333   8495',
'COLLETTI       0.001 69.334   8496',
'CLONINGER      0.001 69.336   8497',
'CLAYTOR        0.001 69.337   8498',
'CHIANG         0.001 69.338   8499',
'CANTERBURY     0.001 69.340   8500',
'CAMPAGNA       0.001 69.341   8501',
'BURD           0.001 69.342   8502',
'BROKAW         0.001 69.344   8503',
'BROADDUS       0.001 69.345   8504',
'BRETZ          0.001 69.346   8505',
'BRAINARD       0.001 69.348   8506',
'BINFORD        0.001 69.349   8507',
'BILBREY        0.001 69.350   8508',
'ALPERT         0.001 69.351   8509',
'AITKEN         0.001 69.353   8510',
'AHLERS         0.001 69.354   8511',
'ZAJAC          0.001 69.355   8512',
'YALE           0.001 69.357   8513',
'WOOLFOLK       0.001 69.358   8514',
'WITTEN         0.001 69.359   8515',
'WINDLE         0.001 69.360   8516',
'WAYLAND        0.001 69.362   8517',
'TRAMEL         0.001 69.363   8518',
'TITTLE         0.001 69.364   8519',
'TALAVERA       0.001 69.366   8520',
'SUTER          0.001 69.367   8521',
'STRALEY        0.001 69.368   8522',
'STETSON        0.001 69.369   8523',
'SPECHT         0.001 69.371   8524',
'SOMMERVILLE    0.001 69.372   8525',
'SOLOMAN        0.001 69.373   8526',
'SO             0.001 69.375   8527',
'SKEENS         0.001 69.376   8528',
'SIGMAN         0.001 69.377   8529',
'SIBERT         0.001 69.378   8530',
'SHAVERS        0.001 69.380   8531',
'SCHUCK         0.001 69.381   8532',
'SCHMIT         0.001 69.382   8533',
'SARTAIN        0.001 69.384   8534',
'SABOL          0.001 69.385   8535',
'ROSENBLATT     0.001 69.386   8536',
'ROLLO          0.001 69.388   8537',
'RASHID         0.001 69.389   8538',
'RABB           0.001 69.390   8539',
'PROVINCE       0.001 69.391   8540',
'POLSTON        0.001 69.393   8541',
'NYBERG         0.001 69.394   8542',
'NORTHROP       0.001 69.395   8543',
'NAVARRA        0.001 69.397   8544',
'MULDOON        0.001 69.398   8545',
'MULDER         0.001 69.399   8546',
'MIKESELL       0.001 69.400   8547',
'MCDOUGALD      0.001 69.402   8548',
'MCBURNEY       0.001 69.403   8549',
'MAURICIO       0.001 69.404   8550',
'MARISCAL       0.001 69.406   8551',
'LUI            0.001 69.407   8552',
'LOZIER         0.001 69.408   8553',
'LINGERFELT     0.001 69.409   8554',
'LEGERE         0.001 69.411   8555',
'LATOUR         0.001 69.412   8556',
'LAGUNAS        0.001 69.413   8557',
'LACOUR         0.001 69.415   8558',
'KURTH          0.001 69.416   8559',
'KU             0.001 69.417   8560',
'KILLEN         0.001 69.418   8561',
'KIELY          0.001 69.420   8562',
'KAYSER         0.001 69.421   8563',
'KAHLE          0.001 69.422   8564',
'JULIUS         0.001 69.424   8565',
'ISLEY          0.001 69.425   8566',
'HUERTAS        0.001 69.426   8567',
'HOWER          0.001 69.427   8568',
'HINZ           0.001 69.429   8569',
'HAUGH          0.001 69.430   8570',
'GUMM           0.001 69.431   8571',
'GIVEN          0.001 69.433   8572',
'GALICIA        0.001 69.434   8573',
'FORTUNATO      0.001 69.435   8574',
'FLAKE          0.001 69.436   8575',
'DUNLEAVY       0.001 69.438   8576',
'DUGGINS        0.001 69.439   8577',
'DOBY           0.001 69.440   8578',
'DIGIOVANNI     0.001 69.442   8579',
'DEVANEY        0.001 69.443   8580',
'DELTORO        0.001 69.444   8581',
'CRIBB          0.001 69.445   8582',
'CRANK          0.001 69.447   8583',
'CORPUZ         0.001 69.448   8584',
'CORONEL        0.001 69.449   8585',
'COMFORT        0.001 69.451   8586',
'COEN           0.001 69.452   8587',
'CHARBONNEAU    0.001 69.453   8588',
'CAINE          0.001 69.454   8589',
'BURCHETTE      0.001 69.456   8590',
'BLAKEY         0.001 69.457   8591',
'BLAKEMORE      0.001 69.458   8592',
'BERGQUIST      0.001 69.460   8593',
'BEENE          0.001 69.461   8594',
'BEAUDETTE      0.001 69.462   8595',
'BAYLES         0.001 69.463   8596',
'BALLANCE       0.001 69.465   8597',
'BAKKER         0.001 69.466   8598',
'BAILES         0.001 69.467   8599',
'ASBERRY        0.001 69.469   8600',
'ARWOOD         0.001 69.470   8601',
'ZUCKER         0.001 69.471   8602',
'WILLMAN        0.001 69.472   8603',
'WHITESELL      0.001 69.474   8604',
'WALD           0.001 69.475   8605',
'WALCOTT        0.001 69.476   8606',
'VANCLEAVE      0.001 69.478   8607',
'TRUMP          0.001 69.479   8608',
'TRAIL          0.001 69.480   8609',
'STRASSER       0.001 69.481   8610',
'SIMAS          0.001 69.483   8611',
'SHORTS         0.001 69.484   8612',
'SHICK          0.001 69.485   8613',
'SCHLEICHER     0.001 69.486   8614',
'SCHAAL         0.001 69.488   8615',
'SALEH          0.001 69.489   8616',
'ROTZ           0.001 69.490   8617',
'RESNICK        0.001 69.492   8618',
'RAPHAEL        0.001 69.493   8619',
'RAINER         0.001 69.494   8620',
'PARTEE         0.001 69.495   8621',
'OLLIS          0.001 69.497   8622',
'OLLER          0.001 69.498   8623',
'ODAY           0.001 69.499   8624',
'NOLES          0.001 69.500   8625',
'MUNDAY         0.001 69.502   8626',
'MOUNTAIN       0.001 69.503   8627',
'MONG           0.001 69.504   8628',
'MILLICAN       0.001 69.506   8629',
'MERWIN         0.001 69.507   8630',
'MAZZOLA        0.001 69.508   8631',
'MANSELL        0.001 69.509   8632',
'MAGALLANES     0.001 69.511   8633',
'LLANES         0.001 69.512   8634',
'LEWELLEN       0.001 69.513   8635',
'LEPORE         0.001 69.514   8636',
'KISNER         0.001 69.516   8637',
'KEESEE         0.001 69.517   8638',
'JIM            0.001 69.518   8639',
'JEANLOUIS      0.001 69.520   8640',
'INGHAM         0.001 69.521   8641',
'HORNBECK       0.001 69.522   8642',
'HERMES         0.001 69.523   8643',
'HAWN           0.001 69.525   8644',
'HARTZ          0.001 69.526   8645',
'HARBER         0.001 69.527   8646',
'HAFFNER        0.001 69.528   8647',
'GUTSHALL       0.001 69.530   8648',
'GUTH           0.001 69.531   8649',
'GRAYS          0.001 69.532   8650',
'GRAMS          0.001 69.534   8651',
'GOWAN          0.001 69.535   8652',
'FINLAY         0.001 69.536   8653',
'FINKELSTEIN    0.001 69.537   8654',
'EYLER          0.001 69.539   8655',
'ENLOE          0.001 69.540   8656',
'DUNGAN         0.001 69.541   8657',
'DIEZ           0.001 69.542   8658',
'DEARMAN        0.001 69.544   8659',
'DANN           0.001 69.545   8660',
'CULL           0.001 69.546   8661',
'CROSSON        0.001 69.547   8662',
'CREEK          0.001 69.549   8663',
'CHRONISTER     0.001 69.550   8664',
'CASSITY        0.001 69.551   8665',
'CAMPION        0.001 69.553   8666',
'CALLIHAN       0.001 69.554   8667',
'BUTZ           0.001 69.555   8668',
'BREAZEALE      0.001 69.556   8669',
'BLUMENTHAL     0.001 69.558   8670',
'BILLY          0.001 69.559   8671',
'BERKEY         0.001 69.560   8672',
'BATTY          0.001 69.561   8673',
'BATTON         0.001 69.563   8674',
'BARGE          0.001 69.564   8675',
'ARVIZU         0.001 69.565   8676',
'ALEXIS         0.001 69.567   8677',
'ALDERETE       0.001 69.568   8678',
'ALDANA         0.001 69.569   8679',
'ALBAUGH        0.001 69.570   8680',
'ABERNETHY      0.001 69.572   8681',
'WORK           0.001 69.573   8682',
'WOLTER         0.001 69.574   8683',
'WILLE          0.001 69.575   8684',
'TWEED          0.001 69.577   8685',
'TOLLEFSON      0.001 69.578   8686',
'THOMASSON      0.001 69.579   8687',
'TETER          0.001 69.580   8688',
'TESTERMAN      0.001 69.582   8689',
'SPROUL         0.001 69.583   8690',
'SPATES         0.001 69.584   8691',
'SOUTHWICK      0.001 69.585   8692',
'SOUKUP         0.001 69.587   8693',
'SKELLY         0.001 69.588   8694',
'SENTER         0.001 69.589   8695',
'SEALEY         0.001 69.590   8696',
'SAWICKI        0.001 69.592   8697',
'SARGEANT       0.001 69.593   8698',
'ROSSITER       0.001 69.594   8699',
'ROSEMOND       0.001 69.596   8700',
'REPP           0.001 69.597   8701',
'POUND          0.001 69.598   8702',
'PINK           0.001 69.599   8703',
'PIFER          0.001 69.601   8704',
'ORMSBY         0.001 69.602   8705',
'NICKELSON      0.001 69.603   8706',
'NAUMANN        0.001 69.604   8707',
'MORABITO       0.001 69.606   8708',
'MONZON         0.001 69.607   8709',
'MILLSAPS       0.001 69.608   8710',
'MILLEN         0.001 69.609   8711',
'MCELRATH       0.001 69.611   8712',
'MARCOUX        0.001 69.612   8713',
'MANTOOTH       0.001 69.613   8714',
'MADSON         0.001 69.614   8715',
'MACNEIL        0.001 69.616   8716',
'MACKINNON      0.001 69.617   8717',
'LOUQUE         0.001 69.618   8718',
'LEISTER        0.001 69.619   8719',
'LAMPLEY        0.001 69.621   8720',
'KUSHNER        0.001 69.622   8721',
'KROUSE         0.001 69.623   8722',
'KIRWAN         0.001 69.624   8723',
'JUNE           0.001 69.626   8724',
'JESSEE         0.001 69.627   8725',
'JANSON         0.001 69.628   8726',
'JAHN           0.001 69.629   8727',
'JACQUEZ        0.001 69.631   8728',
'ISLAS          0.001 69.632   8729',
'HUTT           0.001 69.633   8730',
'HOLLADAY       0.001 69.634   8731',
'HILLYER        0.001 69.636   8732',
'HEPBURN        0.001 69.637   8733',
'HENSEL         0.001 69.638   8734',
'HARROLD        0.001 69.639   8735',
'GUADALUPE      0.001 69.641   8736',
'GINGRICH       0.001 69.642   8737',
'GEIS           0.001 69.643   8738',
'GALES          0.001 69.645   8739',
'FULTS          0.001 69.646   8740',
'FINNELL        0.001 69.647   8741',
'FERRI          0.001 69.648   8742',
'FEATHERSTON    0.001 69.650   8743',
'EPLEY          0.001 69.651   8744',
'EBERSOLE       0.001 69.652   8745',
'EAMES          0.001 69.653   8746',
'DUNIGAN        0.001 69.655   8747',
'DRYE           0.001 69.656   8748',
'DISMUKE        0.001 69.657   8749',
'DEVAUGHN       0.001 69.658   8750',
'DELORENZO      0.001 69.660   8751',
'DAMIANO        0.001 69.661   8752',
'CONFER         0.001 69.662   8753',
'COLLUM         0.001 69.663   8754',
'CLOWER         0.001 69.665   8755',
'CLOW           0.001 69.666   8756',
'CLAUSSEN       0.001 69.667   8757',
'CLACK          0.001 69.668   8758',
'CAYLOR         0.001 69.670   8759',
'CAWTHON        0.001 69.671   8760',
'CASIAS         0.001 69.672   8761',
'CARRENO        0.001 69.673   8762',
'CARLO          0.001 69.675   8763',
'BLUHM          0.001 69.676   8764',
'BINGAMAN       0.001 69.677   8765',
'BEWLEY         0.001 69.678   8766',
'BELEW          0.001 69.680   8767',
'BECKNER        0.001 69.681   8768',
'BEAMER         0.001 69.682   8769',
'BAREFOOT       0.001 69.683   8770',
'AULD           0.001 69.685   8771',
'AMEY           0.001 69.686   8772',
'WOLFENBARGER   0.001 69.687   8773',
'WILKEY         0.001 69.688   8774',
'WICKLUND       0.001 69.690   8775',
'WALTMAN        0.001 69.691   8776',
'VILLALBA       0.001 69.692   8777',
'VALERO         0.001 69.693   8778',
'VALDOVINOS     0.001 69.695   8779',
'UNG            0.001 69.696   8780',
'ULLRICH        0.001 69.697   8781',
'TYUS           0.001 69.698   8782',
'TWYMAN         0.001 69.700   8783',
'TROST          0.001 69.701   8784',
'TARDIF         0.001 69.702   8785',
'TANGUAY        0.001 69.703   8786',
'STRIPLING      0.001 69.705   8787',
'STEINBACH      0.001 69.706   8788',
'SHUMPERT       0.001 69.707   8789',
'SASAKI         0.001 69.708   8790',
'SAPPINGTON     0.001 69.710   8791',
'SANDUSKY       0.001 69.711   8792',
'REINHOLD       0.001 69.712   8793',
'REINERT        0.001 69.713   8794',
'QUIJANO        0.001 69.714   8795',
'PYE            0.001 69.716   8796',
'POOR           0.001 69.717   8797',
'PLACENCIA      0.001 69.718   8798',
'PINKARD        0.001 69.719   8799',
'PHINNEY        0.001 69.721   8800',
'PERROTTA       0.001 69.722   8801',
'PERNELL        0.001 69.723   8802',
'PARRETT        0.001 69.724   8803',
'OXENDINE       0.001 69.726   8804',
'OWENSBY        0.001 69.727   8805',
'ORMAN          0.001 69.728   8806',
'NUNO           0.001 69.729   8807',
'MORI           0.001 69.731   8808',
'MCROBERTS      0.001 69.732   8809',
'MCNEESE        0.001 69.733   8810',
'MCKAMEY        0.001 69.734   8811',
'MCCULLUM       0.001 69.736   8812',
'MARKEL         0.001 69.737   8813',
'MARDIS         0.001 69.738   8814',
'MAINES         0.001 69.739   8815',
'LUECK          0.001 69.741   8816',
'LUBIN          0.001 69.742   8817',
'LEFLER         0.001 69.743   8818',
'LEFFLER        0.001 69.744   8819',
'LAVERY         0.001 69.745   8820',
'LARIOS         0.001 69.747   8821',
'LABARBERA      0.001 69.748   8822',
'KERSHNER       0.001 69.749   8823',
'JOSEY          0.001 69.750   8824',
'JEANBAPTISTE   0.001 69.752   8825',
'IZAGUIRRE      0.001 69.753   8826',
'HERMOSILLO     0.001 69.754   8827',
'HAVILAND       0.001 69.755   8828',
'HARTSHORN      0.001 69.757   8829',
'HAMLET         0.001 69.758   8830',
'HAFNER         0.001 69.759   8831',
'GINTER         0.001 69.760   8832',
'GETTY          0.001 69.762   8833',
'FRANCK         0.001 69.763   8834',
'FISKE          0.001 69.764   8835',
'EMMETT         0.001 69.765   8836',
'DUFRENE        0.001 69.767   8837',
'DOODY          0.001 69.768   8838',
'DAVIE          0.001 69.769   8839',
'DANGERFIELD    0.001 69.770   8840',
'DAHLBERG       0.001 69.772   8841',
'CUTHBERTSON    0.001 69.773   8842',
'CRONE          0.001 69.774   8843',
'COFFELT        0.001 69.775   8844',
'CLAUS          0.001 69.776   8845',
'CHIDESTER      0.001 69.778   8846',
'CHESSON        0.001 69.779   8847',
'CAULEY         0.001 69.780   8848',
'CAUDELL        0.001 69.781   8849',
'CANTARA        0.001 69.783   8850',
'CAMPO          0.001 69.784   8851',
'CAINES         0.001 69.785   8852',
'BULLIS         0.001 69.786   8853',
'BUCCI          0.001 69.788   8854',
'BROCHU         0.001 69.789   8855',
'BOSCO          0.001 69.790   8856',
'BOGARD         0.001 69.791   8857',
'BICKERSTAFF    0.001 69.793   8858',
'BENNING        0.001 69.794   8859',
'ARZOLA         0.001 69.795   8860',
'ANTONELLI      0.001 69.796   8861',
'ADKINSON       0.001 69.798   8862',
'ZELLERS        0.001 69.799   8863',
'WULF           0.001 69.800   8864',
'WORSLEY        0.001 69.801   8865',
'WOOLRIDGE      0.001 69.802   8866',
'WHITTON        0.001 69.804   8867',
'WESTERFIELD    0.001 69.805   8868',
'WALCZAK        0.001 69.806   8869',
'VASSAR         0.001 69.807   8870',
'TRUETT         0.001 69.809   8871',
'TRUEBLOOD      0.001 69.810   8872',
'TRAWICK        0.001 69.811   8873',
'TOWNSLEY       0.001 69.812   8874',
'TOPPING        0.001 69.813   8875',
'TOBAR          0.001 69.815   8876',
'TELFORD        0.001 69.816   8877',
'SUNG           0.001 69.817   8878',
'STEVERSON      0.001 69.818   8879',
'STAGG          0.001 69.820   8880',
'SITTON         0.001 69.821   8881',
'SILL           0.001 69.822   8882',
'SHERRELL       0.001 69.823   8883',
'SERGENT        0.001 69.824   8884',
'SCHOENFELD     0.001 69.826   8885',
'SARABIA        0.001 69.827   8886',
'RUTKOWSKI      0.001 69.828   8887',
'RUBENSTEIN     0.001 69.829   8888',
'RIGDON         0.001 69.831   8889',
'PRENTISS       0.001 69.832   8890',
'POMERLEAU      0.001 69.833   8891',
'PLUMLEE        0.001 69.834   8892',
'PHOENIX        0.001 69.835   8893',
'PHILBRICK      0.001 69.837   8894',
'PEER           0.001 69.838   8895',
'PATTY          0.001 69.839   8896',
'PATNODE        0.001 69.840   8897',
'OLOUGHLIN      0.001 69.842   8898',
'OBREGON        0.001 69.843   8899',
'NUSS           0.001 69.844   8900',
'NAPOLEON       0.001 69.845   8901',
'MORELL         0.001 69.847   8902',
'MOOSE          0.001 69.848   8903',
'MIKELL         0.001 69.849   8904',
'MELE           0.001 69.850   8905',
'MCINERNEY      0.001 69.851   8906',
'MCGUIGAN       0.001 69.853   8907',
'MCBRAYER       0.001 69.854   8908',
'LORE           0.001 69.855   8909',
'LOR            0.001 69.856   8910',
'LOOK           0.001 69.858   8911',
'LOLLAR         0.001 69.859   8912',
'LAKES          0.001 69.860   8913',
'KUEHL          0.001 69.861   8914',
'KINZER         0.001 69.862   8915',
'KAMP           0.001 69.864   8916',
'JOPLIN         0.001 69.865   8917',
'JACOBI         0.001 69.866   8918',
'HOWELLS        0.001 69.867   8919',
'HOLSTEIN       0.001 69.869   8920',
'HEDDEN         0.001 69.870   8921',
'HASSLER        0.001 69.871   8922',
'HARTY          0.001 69.872   8923',
'HALLE          0.001 69.873   8924',
'GREIG          0.001 69.875   8925',
'GRANVILLE      0.001 69.876   8926',
'GOUGE          0.001 69.877   8927',
'GOODRUM        0.001 69.878   8928',
'GERHART        0.001 69.880   8929',
'GEIER          0.001 69.881   8930',
'GEDDES         0.001 69.882   8931',
'GAST           0.001 69.883   8932',
'FOREHAND       0.001 69.884   8933',
'FERREE         0.001 69.886   8934',
'FENDLEY        0.001 69.887   8935',
'FELTNER        0.001 69.888   8936',
'FANG           0.001 69.889   8937',
'ESQUEDA        0.001 69.891   8938',
'ENCARNACION    0.001 69.892   8939',
'EICHLER        0.001 69.893   8940',
'EGGER          0.001 69.894   8941',
'EDMUNDSON      0.001 69.895   8942',
'EATMON         0.001 69.897   8943',
'DRAGON         0.001 69.898   8944',
'DOUD           0.001 69.899   8945',
'DONOHOE        0.001 69.900   8946',
'DONELSON       0.001 69.902   8947',
'DILORENZO      0.001 69.903   8948',
'DIGIACOMO      0.001 69.904   8949',
'DIGGINS        0.001 69.905   8950',
'DELOZIER       0.001 69.906   8951',
'DEJONG         0.001 69.908   8952',
'DANFORD        0.001 69.909   8953',
'CRIPPEN        0.001 69.910   8954',
'COPPAGE        0.001 69.911   8955',
'COGSWELL       0.001 69.913   8956',
'CLARDY         0.001 69.914   8957',
'CIOFFI         0.001 69.915   8958',
'CABE           0.001 69.916   8959',
'BRUNETTE       0.001 69.918   8960',
'BRESNAHAN      0.001 69.919   8961',
'BRAMBLE        0.001 69.920   8962',
'BLOMQUIST      0.001 69.921   8963',
'BLACKSTONE     0.001 69.922   8964',
'BILLER         0.001 69.924   8965',
'BEVIS          0.001 69.925   8966',
'BEVAN          0.001 69.926   8967',
'BETHUNE        0.001 69.927   8968',
'BENBOW         0.001 69.929   8969',
'BATY           0.001 69.930   8970',
'BASINGER       0.001 69.931   8971',
'BALCOM         0.001 69.932   8972',
'ANDES          0.001 69.933   8973',
'AMAN           0.001 69.935   8974',
'AGUERO         0.001 69.936   8975',
'ADKISSON       0.001 69.937   8976',
'YANDELL        0.001 69.938   8977',
'WILDS          0.001 69.940   8978',
'WHISENHUNT     0.001 69.941   8979',
'WEIGAND        0.001 69.942   8980',
'WEEDEN         0.001 69.943   8981',
'VOIGHT         0.001 69.944   8982',
'VILLAR         0.001 69.946   8983',
'TROTTIER       0.001 69.947   8984',
'TILLETT        0.001 69.948   8985',
'SUAZO          0.001 69.949   8986',
'SETSER         0.001 69.950   8987',
'SCURRY         0.001 69.952   8988',
'SCHUH          0.001 69.953   8989',
'SCHRECK        0.001 69.954   8990',
'SCHAUER        0.001 69.955   8991',
'SAMORA         0.001 69.956   8992',
'ROANE          0.001 69.958   8993',
'RINKER         0.001 69.959   8994',
'REIMERS        0.001 69.960   8995',
'REASON         0.001 69.961   8996',
'RATCHFORD      0.001 69.962   8997',
'POPOVICH       0.001 69.964   8998',
'PARKIN         0.001 69.965   8999',
'NICHOL         0.001 69.966   9000',
'NATAL          0.001 69.967   9001',
'MELVILLE       0.001 69.969   9002',
'MCBRYDE        0.001 69.970   9003',
'MAGDALENO      0.001 69.971   9004',
'LOEHR          0.001 69.972   9005',
'LOCKMAN        0.001 69.973   9006',
'LINGO          0.001 69.975   9007',
'LEDUC          0.001 69.976   9008',
'LAROCCA        0.001 69.977   9009',
'LAO            0.001 69.978   9010',
'LAMERE         0.001 69.979   9011',
'LACLAIR        0.001 69.981   9012',
'KRALL          0.001 69.982   9013',
'KORTE          0.001 69.983   9014',
'KOGER          0.001 69.984   9015',
'JUMPER         0.001 69.985   9016',
'JALBERT        0.001 69.987   9017',
'HUGHS          0.001 69.988   9018',
'HIGBEE         0.001 69.989   9019',
'HENTON         0.001 69.990   9020',
'HEANEY         0.001 69.991   9021',
'HAITH          0.001 69.993   9022',
'GUMP           0.001 69.994   9023',
'GREESON        0.001 69.995   9024',
'GOODLOE        0.001 69.996   9025',
'GHOLSTON       0.001 69.998   9026',
'GASPER         0.001 69.999   9027',
'GAGLIARDI      0.001 70.000   9028',
'FREGOSO        0.001 70.001   9029',
'FARTHING       0.001 70.002   9030',
'FABRIZIO       0.001 70.004   9031',
'ENSOR          0.001 70.005   9032',
'ELSWICK        0.001 70.006   9033',
'ELGIN          0.001 70.007   9034',
'EKLUND         0.001 70.008   9035',
'EADDY          0.001 70.010   9036',
'DROUIN         0.001 70.011   9037',
'DORTON         0.001 70.012   9038',
'DIZON          0.001 70.013   9039',
'DEROUEN        0.001 70.014   9040',
'DELIA          0.001 70.016   9041',
'DEHERRERA      0.001 70.017   9042',
'DAVY           0.001 70.018   9043',
'DARK           0.001 70.019   9044',
'DAMPIER        0.001 70.020   9045',
'CULLUM         0.001 70.022   9046',
'CULLEY         0.001 70.023   9047',
'COWGILL        0.001 70.024   9048',
'CARDOSO        0.001 70.025   9049',
'CARDINALE      0.001 70.027   9050',
'BRODSKY        0.001 70.028   9051',
'BROADBENT      0.001 70.029   9052',
'BRIMMER        0.001 70.030   9053',
'BRICENO        0.001 70.031   9054',
'BRANSCUM       0.001 70.033   9055',
'BOLYARD        0.001 70.034   9056',
'BOLEY          0.001 70.035   9057',
'BENNINGTON     0.001 70.036   9058',
'BEADLE         0.001 70.037   9059',
'BAUR           0.001 70.039   9060',
'BALLENTINE     0.001 70.040   9061',
'AZURE          0.001 70.041   9062',
'AULTMAN        0.001 70.042   9063',
'AUGUSTUS       0.001 70.043   9064',
'ASUNCION       0.001 70.045   9065',
'ARCINIEGA      0.001 70.046   9066',
'AGUILA         0.001 70.047   9067',
'ACEVES         0.001 70.048   9068',
'YEPEZ          0.001 70.049   9069',
'YAP            0.001 70.051   9070',
'WOODRUM        0.001 70.052   9071',
'WETHINGTON     0.001 70.053   9072',
'WEISSMAN       0.001 70.054   9073',
'VELOZ          0.001 70.055   9074',
'TRUSTY         0.001 70.057   9075',
'TROUP          0.001 70.058   9076',
'TRAMMEL        0.001 70.059   9077',
'THEODORE       0.001 70.060   9078',
'TARPLEY        0.001 70.061   9079',
'STIVERS        0.001 70.063   9080',
'STECK          0.001 70.064   9081',
'SPRAYBERRY     0.001 70.065   9082',
'SPRAGGINS      0.001 70.066   9083',
'SPITLER        0.001 70.067   9084',
'SPIERS         0.001 70.069   9085',
'SOHN           0.001 70.070   9086',
'SEAGRAVES      0.001 70.071   9087',
'SCHIFFMAN      0.001 70.072   9088',
'RUDNICK        0.001 70.073   9089',
'RIZO           0.001 70.074   9090',
'RICCIO         0.001 70.076   9091',
'RENNIE         0.001 70.077   9092',
'QUINTON        0.001 70.078   9093',
'QUACKENBUSH    0.001 70.079   9094',
'PUMA           0.001 70.080   9095',
'PLOTT          0.001 70.082   9096',
'PEARCY         0.001 70.083   9097',
'PARADA         0.001 70.084   9098',
'PAIZ           0.001 70.085   9099',
'MUNFORD        0.001 70.086   9100',
'MOSKOWITZ      0.001 70.088   9101',
'MEASE          0.001 70.089   9102',
'MCNARY         0.001 70.090   9103',
'MCCUSKER       0.001 70.091   9104',
'MATT           0.001 70.092   9105',
'LOZOYA         0.001 70.094   9106',
'LONGMIRE       0.001 70.095   9107',
'LOESCH         0.001 70.096   9108',
'LASKY          0.001 70.097   9109',
'KUHLMANN       0.001 70.098   9110',
'KRIEG          0.001 70.100   9111',
'KOZIOL         0.001 70.101   9112',
'KOWALEWSKI     0.001 70.102   9113',
'KONRAD         0.001 70.103   9114',
'KINDLE         0.001 70.104   9115',
'JOWERS         0.001 70.105   9116',
'JOLIN          0.001 70.107   9117',
'JACO           0.001 70.108   9118',
'HUA            0.001 70.109   9119',
'HORGAN         0.001 70.110   9120',
'HINE           0.001 70.111   9121',
'HILEMAN        0.001 70.113   9122',
'HEPNER         0.001 70.114   9123',
'HEISE          0.001 70.115   9124',
'HEADY          0.001 70.116   9125',
'HAWKINSON      0.001 70.117   9126',
'HANNIGAN       0.001 70.119   9127',
'HABERMAN       0.001 70.120   9128',
'GUILFORD       0.001 70.121   9129',
'GRIMALDI       0.001 70.122   9130',
'GILLES         0.001 70.123   9131',
'GARTON         0.001 70.125   9132',
'GAGLIANO       0.001 70.126   9133',
'FRUGE          0.001 70.127   9134',
'FOLLETT        0.001 70.128   9135',
'FISCUS         0.001 70.129   9136',
'FERRETTI       0.001 70.131   9137',
'EBNER          0.001 70.132   9138',
'EASTERDAY      0.001 70.133   9139',
'EANES          0.001 70.134   9140',
'DIRKS          0.001 70.135   9141',
'DIMARCO        0.001 70.136   9142',
'DEPALMA        0.001 70.138   9143',
'DEFOREST       0.001 70.139   9144',
'DANCE          0.001 70.140   9145',
'CRUCE          0.001 70.141   9146',
'CRAIGHEAD      0.001 70.142   9147',
'CHRISTNER      0.001 70.144   9148',
'CANDLER        0.001 70.145   9149',
'CADWELL        0.001 70.146   9150',
'BURCHELL       0.001 70.147   9151',
'BUETTNER       0.001 70.148   9152',
'BRINTON        0.001 70.150   9153',
'BREED          0.001 70.151   9154',
'BRAZIER        0.001 70.152   9155',
'BRANNEN        0.001 70.153   9156',
'BRAME          0.001 70.154   9157',
'BOVA           0.001 70.156   9158',
'BOMAR          0.001 70.157   9159',
'BLAKESLEE      0.001 70.158   9160',
'BELKNAP        0.001 70.159   9161',
'BANGS          0.001 70.160   9162',
'BALZER         0.001 70.162   9163',
'ATHEY          0.001 70.163   9164',
'ARMES          0.001 70.164   9165',
'ALVIS          0.001 70.165   9166',
'ALVERSON       0.001 70.166   9167',
'ALVARDO        0.001 70.167   9168',
'ALTER          0.001 70.169   9169',
'ZHAO           0.001 70.170   9170',
'YEUNG          0.001 70.171   9171',
'YEN            0.001 70.172   9172',
'WHEELOCK       0.001 70.173   9173',
'WESTLUND       0.001 70.175   9174',
'WESSELS        0.001 70.176   9175',
'VOLKMAN        0.001 70.177   9176',
'THREADGILL     0.001 70.178   9177',
'THELEN         0.001 70.179   9178',
'TANDY          0.001 70.180   9179',
'TAGUE          0.001 70.182   9180',
'TA             0.001 70.183   9181',
'SYMONS         0.001 70.184   9182',
'SWINFORD       0.001 70.185   9183',
'STURTEVANT     0.001 70.186   9184',
'STRAKA         0.001 70.188   9185',
'STIER          0.001 70.189   9186',
'STAGNER        0.001 70.190   9187',
'SEGARRA        0.001 70.191   9188',
'SEAWRIGHT      0.001 70.192   9189',
'SACK           0.001 70.193   9190',
'RUTAN          0.001 70.195   9191',
'ROUX           0.001 70.196   9192',
'RINGLER        0.001 70.197   9193',
'RIKER          0.001 70.198   9194',
'RAMSDELL       0.001 70.199   9195',
'QUATTLEBAUM    0.001 70.200   9196',
'PURIFOY        0.001 70.202   9197',
'POULSON        0.001 70.203   9198',
'PERMENTER      0.001 70.204   9199',
'PELOQUIN       0.001 70.205   9200',
'PASLEY         0.001 70.206   9201',
'PAGEL          0.001 70.208   9202',
'OSMAN          0.001 70.209   9203',
'OBANNON        0.001 70.210   9204',
'NYGAARD        0.001 70.211   9205',
'NIPPER         0.001 70.212   9206',
'NEWCOMER       0.001 70.213   9207',
'MUNOS          0.001 70.215   9208',
'MOTTA          0.001 70.216   9209',
'MEADORS        0.001 70.217   9210',
'MCQUISTON      0.001 70.218   9211',
'MCNIEL         0.001 70.219   9212',
'MCMANN         0.001 70.220   9213',
'MCCRAE         0.001 70.222   9214',
'MAYNE          0.001 70.223   9215',
'MATTE          0.001 70.224   9216',
'MARTINE        0.001 70.225   9217',
'LUCY           0.001 70.226   9218',
'LEGAULT        0.001 70.227   9219',
'LECHNER        0.001 70.229   9220',
'LACK           0.001 70.230   9221',
'KUCERA         0.001 70.231   9222',
'KROHN          0.001 70.232   9223',
'KRATZER        0.001 70.233   9224',
'KOOPMAN        0.001 70.235   9225',
'JUDSON         0.001 70.236   9226',
'JESKE          0.001 70.237   9227',
'HORROCKS       0.001 70.238   9228',
'HOMES          0.001 70.239   9229',
'HOCK           0.001 70.240   9230',
'HIBBLER        0.001 70.242   9231',
'HESSON         0.001 70.243   9232',
'HERSH          0.001 70.244   9233',
'HARVIN         0.001 70.245   9234',
'HALVORSEN      0.001 70.246   9235',
'GRINER         0.001 70.247   9236',
'GRINDLE        0.001 70.249   9237',
'GLEN           0.001 70.250   9238',
'GLADSTONE      0.001 70.251   9239',
'GAROFALO       0.001 70.252   9240',
'FRAMPTON       0.001 70.253   9241',
'FORBIS         0.001 70.255   9242',
'FERNANDO       0.001 70.256   9243',
'EDDINGTON      0.001 70.257   9244',
'DIORIO         0.001 70.258   9245',
'DINGUS         0.001 70.259   9246',
'DEWAR          0.001 70.260   9247',
'DESALVO        0.001 70.262   9248',
'CURCIO         0.001 70.263   9249',
'CREASY         0.001 70.264   9250',
'CORTESE        0.001 70.265   9251',
'CORDOBA        0.001 70.266   9252',
'CONNALLY       0.001 70.267   9253',
'CLUFF          0.001 70.269   9254',
'CASCIO         0.001 70.270   9255',
'CAPUANO        0.001 70.271   9256',
'CANADAY        0.001 70.272   9257',
'CALABRO        0.001 70.273   9258',
'BUSSARD        0.001 70.275   9259',
'BRAYTON        0.001 70.276   9260',
'BORJA          0.001 70.277   9261',
'BIGLEY         0.001 70.278   9262',
'ARNONE         0.001 70.279   9263',
'ARGUELLES      0.001 70.280   9264',
'ACUFF          0.001 70.282   9265',
'ZAMARRIPA      0.001 70.283   9266',
'WOOTON         0.001 70.284   9267',
'WOLFGANG       0.001 70.285   9268',
'WIDNER         0.001 70.286   9269',
'WIDEMAN        0.001 70.287   9270',
'THREATT        0.001 70.289   9271',
'THIELE         0.001 70.290   9272',
'TEMPLIN        0.001 70.291   9273',
'TEETERS        0.001 70.292   9274',
'SYNDER         0.001 70.293   9275',
'SWINT          0.001 70.294   9276',
'SWICK          0.001 70.296   9277',
'STURGES        0.001 70.297   9278',
'STOGNER        0.001 70.298   9279',
'STEDMAN        0.001 70.299   9280',
'SPRATT         0.001 70.300   9281',
'SIX            0.001 70.301   9282',
'SIEGFRIED      0.001 70.303   9283',
'SHETLER        0.001 70.304   9284',
'SCULL          0.001 70.305   9285',
'SAVINO         0.001 70.306   9286',
'SATHER         0.001 70.307   9287',
'ROTHWELL       0.001 70.308   9288',
'ROOK           0.001 70.309   9289',
'RONE           0.001 70.311   9290',
'ROLF           0.001 70.312   9291',
'RHEE           0.001 70.313   9292',
'QUEVEDO        0.001 70.314   9293',
'PRIVETT        0.001 70.315   9294',
'POULIOT        0.001 70.316   9295',
'POCHE          0.001 70.318   9296',
'PICKEL         0.001 70.319   9297',
'PETRILLO       0.001 70.320   9298',
'PELLEGRINI     0.001 70.321   9299',
'PEASLEE        0.001 70.322   9300',
'PARTLOW        0.001 70.323   9301',
'OTEY           0.001 70.325   9302',
'NUNNERY        0.001 70.326   9303',
'MORELOCK       0.001 70.327   9304',
'MORELLO        0.001 70.328   9305',
'MEUNIER        0.001 70.329   9306',
'MESSINGER      0.001 70.330   9307',
'MCKIE          0.001 70.332   9308',
'MCCUBBIN       0.001 70.333   9309',
'MCCARRON       0.001 70.334   9310',
'MARIA          0.001 70.335   9311',
'LERCH          0.001 70.336   9312',
'LAVINE         0.001 70.337   9313',
'LAVERTY        0.001 70.338   9314',
'LARIVIERE      0.001 70.340   9315',
'LAMKIN         0.001 70.341   9316',
'KUGLER         0.001 70.342   9317',
'KROL           0.001 70.343   9318',
'KISSEL         0.001 70.344   9319',
'KEETER         0.001 70.345   9320',
'HUMMER         0.001 70.347   9321',
'HUBBLE         0.001 70.348   9322',
'HICKOX         0.001 70.349   9323',
'HETZEL         0.001 70.350   9324',
'HAYNER         0.001 70.351   9325',
'HAGY           0.001 70.352   9326',
'HADLOCK        0.001 70.354   9327',
'GROH           0.001 70.355   9328',
'GREGORIO       0.001 70.356   9329',
'GOTTSCHALK     0.001 70.357   9330',
'GOODSELL       0.001 70.358   9331',
'GLORIA         0.001 70.359   9332',
'GERRY          0.001 70.361   9333',
'GASSAWAY       0.001 70.362   9334',
'GARRARD        0.001 70.363   9335',
'GALLIGAN       0.001 70.364   9336',
'FYE            0.001 70.365   9337',
'FIRTH          0.001 70.366   9338',
'FENDERSON      0.001 70.367   9339',
'FEINSTEIN      0.001 70.369   9340',
'ETIENNE        0.001 70.370   9341',
'ENGLEMAN       0.001 70.371   9342',
'EMRICK         0.001 70.372   9343',
'ELLENDER       0.001 70.373   9344',
'DREWS          0.001 70.374   9345',
'DOIRON         0.001 70.376   9346',
'DEGRAW         0.001 70.377   9347',
'DEEGAN         0.001 70.378   9348',
'DART           0.001 70.379   9349',
'CRISSMAN       0.001 70.380   9350',
'CORR           0.001 70.381   9351',
'COOKSON        0.001 70.383   9352',
'COIL           0.001 70.384   9353',
'CLEAVES        0.001 70.385   9354',
'CHAREST        0.001 70.386   9355',
'CHAPPLE        0.001 70.387   9356',
'CHAPARRO       0.001 70.388   9357',
'CASTANO        0.001 70.390   9358',
'CARPIO         0.001 70.391   9359',
'BYER           0.001 70.392   9360',
'BUFFORD        0.001 70.393   9361',
'BRIDGEWATER    0.001 70.394   9362',
'BRIDGERS       0.001 70.395   9363',
'BRANDES        0.001 70.397   9364',
'BORRERO        0.001 70.398   9365',
'BONANNO        0.001 70.399   9366',
'AUBE           0.001 70.400   9367',
'ANCHETA        0.001 70.401   9368',
'ABARCA         0.001 70.402   9369',
'ABAD           0.001 70.403   9370',
'YUNG           0.001 70.405   9371',
'YIM            0.001 70.406   9372',
'WOOSTER        0.001 70.407   9373',
'WOODROW        0.001 70.408   9374',
'WIMBUSH        0.001 70.409   9375',
'WILLHITE       0.001 70.410   9376',
'WILLAMS        0.001 70.411   9377',
'WIGLEY         0.001 70.413   9378',
'WEISBERG       0.001 70.414   9379',
'WARDLAW        0.001 70.415   9380',
'VIGUE          0.001 70.416   9381',
'VANHOOK        0.001 70.417   9382',
'UNKNOW         0.001 70.418   9383',
'TORRE          0.001 70.419   9384',
'TASKER         0.001 70.421   9385',
'TARBOX         0.001 70.422   9386',
'STRACHAN       0.001 70.423   9387',
'STANDARD       0.001 70.424   9388',
'SLOVER         0.001 70.425   9389',
'SHAMBLIN       0.001 70.426   9390',
'SEMPLE         0.001 70.428   9391',
'SCHUYLER       0.001 70.429   9392',
'SCHRIMSHER     0.001 70.430   9393',
'SAYER          0.001 70.431   9394',
'SALZMAN        0.001 70.432   9395',
'SALOMON        0.001 70.433   9396',
'RUBALCAVA      0.001 70.434   9397',
'RILES          0.001 70.436   9398',
'RICKEY         0.001 70.437   9399',
'RENEAU         0.001 70.438   9400',
'REICHEL        0.001 70.439   9401',
'RAYFIELD       0.001 70.440   9402',
'RABON          0.001 70.441   9403',
'PYATT          0.001 70.442   9404',
'PRINDLE        0.001 70.444   9405',
'POSS           0.001 70.445   9406',
'POLITO         0.001 70.446   9407',
'PLEMMONS       0.001 70.447   9408',
'PESCE          0.001 70.448   9409',
'PERRAULT       0.001 70.449   9410',
'PEREYRA        0.001 70.450   9411',
'OSTROWSKI      0.001 70.452   9412',
'NILSEN         0.001 70.453   9413',
'NIEMEYER       0.001 70.454   9414',
'NICK           0.001 70.455   9415',
'MUNSEY         0.001 70.456   9416',
'MUNDELL        0.001 70.457   9417',
'MONCADA        0.001 70.458   9418',
'MICELI         0.001 70.460   9419',
'MEADER         0.001 70.461   9420',
'MCMASTERS      0.001 70.462   9421',
'MCKEEHAN       0.001 70.463   9422',
'MATSUMOTO      0.001 70.464   9423',
'MARRON         0.001 70.465   9424',
'MARDEN         0.001 70.466   9425',
'LIZARRAGA      0.001 70.468   9426',
'LINGENFELTER   0.001 70.469   9427',
'LEWALLEN       0.001 70.470   9428',
'LAURENCE       0.001 70.471   9429',
'LANGAN         0.001 70.472   9430',
'LAMANNA        0.001 70.473   9431',
'KOVAC          0.001 70.474   9432',
'KINSLER        0.001 70.476   9433',
'KEPHART        0.001 70.477   9434',
'KEOWN          0.001 70.478   9435',
'KASS           0.001 70.479   9436',
'KAMMERER       0.001 70.480   9437',
'JEFFREYS       0.001 70.481   9438',
'HYSELL         0.001 70.482   9439',
'HOUSEHOLDER    0.001 70.484   9440',
'HOSMER         0.001 70.485   9441',
'HARDNETT       0.001 70.486   9442',
'HANNER         0.001 70.487   9443',
'GUYETTE        0.001 70.488   9444',
'GREENING       0.001 70.489   9445',
'GLAZER         0.001 70.490   9446',
'GINDER         0.001 70.492   9447',
'FROMM          0.001 70.493   9448',
'FORTUNA        0.001 70.494   9449',
'FLUELLEN       0.001 70.495   9450',
'FINKLE         0.001 70.496   9451',
'FEY            0.001 70.497   9452',
'FESSLER        0.001 70.498   9453',
'ESSARY         0.001 70.500   9454',
'EISELE         0.001 70.501   9455',
'DUREN          0.001 70.502   9456',
'DITTMER        0.001 70.503   9457',
'CROCHET        0.001 70.504   9458',
'COSENTINO      0.001 70.505   9459',
'COGAN          0.001 70.506   9460',
'COELHO         0.001 70.508   9461',
'CAVIN          0.001 70.509   9462',
'CARRIZALES     0.001 70.510   9463',
'CAMPUZANO      0.001 70.511   9464',
'BROUGH         0.001 70.512   9465',
'BOW            0.001 70.513   9466',
'BOPP           0.001 70.514   9467',
'BOOKMAN        0.001 70.516   9468',
'BOBB           0.001 70.517   9469',
'BLOUIN         0.001 70.518   9470',
'BEESLEY        0.001 70.519   9471',
'BATTISTA       0.001 70.520   9472',
'BASCOM         0.001 70.521   9473',
'BAKKEN         0.001 70.523   9474',
'BADGETT        0.001 70.524   9475',
'ARNESON        0.001 70.525   9476',
'ANSELMO        0.001 70.526   9477',
'ALBINO         0.001 70.527   9478',
'AHUMADA        0.001 70.528   9479',
'AGUSTIN        0.001 70.529   9480',
'WOODYARD       0.001 70.531   9481',
'WOLTERS        0.001 70.532   9482',
'WIREMAN        0.001 70.533   9483',
'WILTON         0.001 70.534   9484',
'WILLISON       0.001 70.535   9485',
'WARMAN         0.001 70.536   9486',
'WAN            0.001 70.537   9487',
'WALDRUP        0.001 70.538   9488',
'VOWELL         0.001 70.540   9489',
'VANTASSEL      0.001 70.541   9490',
'VALE           0.001 70.542   9491',
'TWOMBLY        0.001 70.543   9492',
'TOOMER         0.001 70.544   9493',
'TENNISON       0.001 70.545   9494',
'TEETS          0.001 70.546   9495',
'TEDESCHI       0.001 70.547   9496',
'SWANNER        0.001 70.549   9497',
'SWALLOW        0.001 70.550   9498',
'STUTZ          0.001 70.551   9499',
'STELLY         0.001 70.552   9500',
'SHEEHY         0.001 70.553   9501',
'SCHERMERHORN   0.001 70.554   9502',
'SCALA          0.001 70.555   9503',
'SANDIDGE       0.001 70.556   9504',
'SALTERS        0.001 70.558   9505',
'SALO           0.001 70.559   9506',
'SAECHAO        0.001 70.560   9507',
'ROSEBORO       0.001 70.561   9508',
'ROLLE          0.001 70.562   9509',
'RESSLER        0.001 70.563   9510',
'RENZ           0.001 70.564   9511',
'RENN           0.001 70.565   9512',
'REDFORD        0.001 70.567   9513',
'RAPOSA         0.001 70.568   9514',
'RAINBOLT       0.001 70.569   9515',
'POMPEY         0.001 70.570   9516',
'PELFREY        0.001 70.571   9517',
'ORNDORFF       0.001 70.572   9518',
'ONEY           0.001 70.573   9519',
'NOLIN          0.001 70.575   9520',
'NIMMONS        0.001 70.576   9521',
'NEY            0.001 70.577   9522',
'NARDONE        0.001 70.578   9523',
'MYHRE          0.001 70.579   9524',
'MORMAN         0.001 70.580   9525',
'MINES          0.001 70.581   9526',
'MENJIVAR       0.001 70.582   9527',
'MCGLONE        0.001 70.584   9528',
'MCCAMMON       0.001 70.585   9529',
'MAXON          0.001 70.586   9530',
'MARIS          0.001 70.587   9531',
'MARCIANO       0.001 70.588   9532',
'MANUS          0.001 70.589   9533',
'MAIDEN         0.001 70.590   9534',
'LOWRANCE       0.001 70.591   9535',
'LORENZEN       0.001 70.593   9536',
'LONERGAN       0.001 70.594   9537',
'LOLLIS         0.001 70.595   9538',
'LITTLES        0.001 70.596   9539',
'LINDAHL        0.001 70.597   9540',
'LANSING        0.001 70.598   9541',
'LAMAS          0.001 70.599   9542',
'LACH           0.001 70.600   9543',
'KUSTER         0.001 70.602   9544',
'KRAWCZYK       0.001 70.603   9545',
'KNUTH          0.001 70.604   9546',
'KNECHT         0.001 70.605   9547',
'KIRKENDALL     0.001 70.606   9548',
'KEITT          0.001 70.607   9549',
'KEEVER         0.001 70.608   9550',
'KANTOR         0.001 70.610   9551',
'JARBOE         0.001 70.611   9552',
'HOYE           0.001 70.612   9553',
'HOUCHENS       0.001 70.613   9554',
'HOLTER         0.001 70.614   9555',
'HOLSINGER      0.001 70.615   9556',
'HICKOK         0.001 70.616   9557',
'HERB           0.001 70.617   9558',
'HELWIG         0.001 70.619   9559',
'HELGESON       0.001 70.620   9560',
'HEATER         0.001 70.621   9561',
'HASSETT        0.001 70.622   9562',
'HARNER         0.001 70.623   9563',
'HAMMAN         0.001 70.624   9564',
'HAMES          0.001 70.625   9565',
'HADFIELD       0.001 70.626   9566',
'GOREE          0.001 70.628   9567',
'GOLDFARB       0.001 70.629   9568',
'GAUGHAN        0.001 70.630   9569',
'GAUDREAU       0.001 70.631   9570',
'GANTZ          0.001 70.632   9571',
'GALLION        0.001 70.633   9572',
'FRADY          0.001 70.634   9573',
'FOTI           0.001 70.635   9574',
'FLESHER        0.001 70.637   9575',
'FERRIN         0.001 70.638   9576',
'FAUGHT         0.001 70.639   9577',
'ENGRAM         0.001 70.640   9578',
'ELBERT         0.001 70.641   9579',
'DONEGAN        0.001 70.642   9580',
'DESOUZA        0.001 70.643   9581',
'DEGROOT        0.001 70.645   9582',
'CUTRIGHT       0.001 70.646   9583',
'CROWL          0.001 70.647   9584',
'CRINER         0.001 70.648   9585',
'COKE           0.001 70.649   9586',
'COAN           0.001 70.650   9587',
'CLINKSCALES    0.001 70.651   9588',
'CHEWNING       0.001 70.652   9589',
'CHAVIRA        0.001 70.654   9590',
'CATCHINGS      0.001 70.655   9591',
'CARLOCK        0.001 70.656   9592',
'BYE            0.001 70.657   9593',
'BULGER         0.001 70.658   9594',
'BUENROSTRO     0.001 70.659   9595',
'BRAMBLETT      0.001 70.660   9596',
'BRACK          0.001 70.661   9597',
'BOULWARE       0.001 70.663   9598',
'BORDEAUX       0.001 70.664   9599',
'BOOKOUT        0.001 70.665   9600',
'BITNER         0.001 70.666   9601',
'BIRT           0.001 70.667   9602',
'BARANOWSKI     0.001 70.668   9603',
'BAISDEN        0.001 70.669   9604',
'AUGUSTIN       0.001 70.670   9605',
'ALLMON         0.001 70.672   9606',
'ALBERTO        0.001 70.673   9607',
'ACKLIN         0.001 70.674   9608',
'YOAKUM         0.001 70.675   9609',
'WILBOURN       0.001 70.676   9610',
'WHISLER        0.001 70.677   9611',
'WEINBERGER     0.001 70.678   9612',
'WASHER         0.001 70.679   9613',
'VASQUES        0.001 70.681   9614',
'VANZANDT       0.001 70.682   9615',
'VANATTA        0.001 70.683   9616',
'TROXLER        0.001 70.684   9617',
'TOMES          0.001 70.685   9618',
'TINDLE         0.001 70.686   9619',
'TIMS           0.001 70.687   9620',
'THROCKMORTON   0.001 70.688   9621',
'THACH          0.001 70.689   9622',
'STPETER        0.001 70.691   9623',
'STLAURENT      0.001 70.692   9624',
'STENSON        0.001 70.693   9625',
'SPRY           0.001 70.694   9626',
'SPITZ          0.001 70.695   9627',
'SONGER         0.001 70.696   9628',
'SNAVELY        0.001 70.697   9629',
'SLY            0.001 70.698   9630',
'SLEEPER        0.001 70.699   9631',
'SHROYER        0.001 70.701   9632',
'SHORTRIDGE     0.001 70.702   9633',
'SHENK          0.001 70.703   9634',
'SEVIER         0.001 70.704   9635',
'SEABROOK       0.001 70.705   9636',
'SCRIVNER       0.001 70.706   9637',
'SALTZMAN       0.001 70.707   9638',
'ROSENBERRY     0.001 70.708   9639',
'ROCKWOOD       0.001 70.709   9640',
'ROBESON        0.001 70.711   9641',
'ROAN           0.001 70.712   9642',
'REISER         0.001 70.713   9643',
'REDWINE        0.001 70.714   9644',
'RAMIRES        0.001 70.715   9645',
'RABER          0.001 70.716   9646',
'PROFIT         0.001 70.717   9647',
'POSNER         0.001 70.718   9648',
'POPHAM         0.001 70.719   9649',
'PIPES          0.001 70.721   9650',
'PIOTROWSKI     0.001 70.722   9651',
'PINARD         0.001 70.723   9652',
'PETERKIN       0.001 70.724   9653',
'PELHAM         0.001 70.725   9654',
'PEIFFER        0.001 70.726   9655',
'PEAY           0.001 70.727   9656',
'PEAVEY         0.001 70.728   9657',
'NADLER         0.001 70.729   9658',
'MUSSO          0.001 70.731   9659',
'MILO           0.001 70.732   9660',
'MILLETT        0.001 70.733   9661',
'MESTAS         0.001 70.734   9662',
'MCGOWEN        0.001 70.735   9663',
'MARQUES        0.001 70.736   9664',
'MARASCO        0.001 70.737   9665',
'MANRIQUEZ      0.001 70.738   9666',
'MANOS          0.001 70.740   9667',
'MAIR           0.001 70.741   9668',
'LIPPS          0.001 70.742   9669',
'LESSER         0.001 70.743   9670',
'LEIKER         0.001 70.744   9671',
'LEEDS          0.001 70.745   9672',
'KRUMM          0.001 70.746   9673',
'KNORR          0.001 70.747   9674',
'KINSLOW        0.001 70.748   9675',
'KESSEL         0.001 70.750   9676',
'KENDRICKS      0.001 70.751   9677',
'KELM           0.001 70.752   9678',
'ITO            0.001 70.753   9679',
'IRICK          0.001 70.754   9680',
'ICKES          0.001 70.755   9681',
'HURLBURT       0.001 70.756   9682',
'HORTA          0.001 70.757   9683',
'HOEKSTRA       0.001 70.758   9684',
'HEUER          0.001 70.760   9685',
'HELMUTH        0.001 70.761   9686',
'HEATHERLY      0.001 70.762   9687',
'HAMPSON        0.001 70.763   9688',
'HAGAR          0.001 70.764   9689',
'HAGA           0.001 70.765   9690',
'GREENLAW       0.001 70.766   9691',
'GRAU           0.001 70.767   9692',
'GODBEY         0.001 70.768   9693',
'GINGRAS        0.001 70.770   9694',
'GILLIES        0.001 70.771   9695',
'GIBB           0.001 70.772   9696',
'GAYDEN         0.001 70.773   9697',
'GAUVIN         0.001 70.774   9698',
'GARROW         0.001 70.775   9699',
'FONTANEZ       0.001 70.776   9700',
'FLORIO         0.0
01 70.777   9701',
'FLEISCHMAN     0.001 70.778   9702',
'FINKE          0.001 70.780   9703',
'FASANO         0.001 70.781   9704',
'FAN            0.001 70.782   9705',
'FAITH          0.001 70.783   9706',
'EZZELL         0.001 70.784   9707',
'EWERS          0.001 70.785   9708',
'EVELAND        0.001 70.786   9709',
'ECKENRODE      0.001 70.787   9710',
'DUCLOS         0.001 70.788   9711',
'DRUMM          0.001 70.790   9712',
'DIMMICK        0.001 70.791   9713',
'DELANCEY       0.001 70.792   9714',
'DEFAZIO        0.001 70.793   9715',
'DEACON         0.001 70.794   9716',
'DASHIELL       0.001 70.795   9717',
'DAMIAN         0.001 70.796   9718',
'CUSACK         0.001 70.797   9719',
'CROWTHER       0.001 70.798   9720',
'CRIGGER        0.001 70.800   9721',
'CRAY           0.001 70.801   9722',
'COOLIDGE       0.001 70.802   9723',
'COLDIRON       0.001 70.803   9724',
'CLELAND        0.001 70.804   9725',
'CHALFANT       0.001 70.805   9726',
'CASSEL         0.001 70.806   9727',
'CAPE           0.001 70.807   9728',
'CAMIRE         0.001 70.809   9729',
'CABRALES       0.001 70.810   9730',
'BROOMFIELD     0.001 70.811   9731',
'BRITTINGHAM    0.001 70.812   9732',
'BRISSON        0.001 70.813   9733',
'BRICKEY        0.001 70.814   9734',
'BRAZIEL        0.001 70.815   9735',
'BRAZELL        0.001 70.816   9736',
'BRAGDON        0.001 70.817   9737',
'BOULANGER      0.001 70.819   9738',
'BOS            0.001 70.820   9739',
'BOMAN          0.001 70.821   9740',
'BOHANNAN       0.001 70.822   9741',
'BEEM           0.001 70.823   9742',
'BARTO          0.001 70.824   9743',
'BARRE          0.001 70.825   9744',
'BARLEY         0.001 70.826   9745',
'BAPTIST        0.001 70.827   9746',
'AZAR           0.001 70.829   9747',
'ASHBAUGH       0.001 70.830   9748',
'ARMISTEAD      0.001 70.831   9749',
'ALMAZAN        0.001 70.832   9750',
'ADAMSKI        0.001 70.833   9751',
'ZENDEJAS       0.001 70.834   9752',
'WINBURN        0.001 70.835   9753',
'WILLAIMS       0.001 70.836   9754',
'WILHOIT        0.001 70.837   9755',
'WESTBERRY      0.001 70.838   9756',
'WENTZEL        0.001 70.840   9757',
'WENDLING       0.001 70.841   9758',
'WAGER          0.001 70.842   9759',
'VISSER         0.001 70.843   9760',
'VANSCOY        0.001 70.844   9761',
'VANKIRK        0.001 70.845   9762',
'VALLEE         0.001 70.846   9763',
'TWEEDY         0.001 70.847   9764',
'THORNBERRY     0.001 70.848   9765',
'SWEENY         0.001 70.849   9766',
'STALKER        0.001 70.851   9767',
'SPRADLING      0.001 70.852   9768',
'SPANO          0.001 70.853   9769',
'SMELSER        0.001 70.854   9770',
'SHIM           0.001 70.855   9771',
'SECHRIST       0.001 70.856   9772',
'SCHALL         0.001 70.857   9773',
'SCAIFE         0.001 70.858   9774',
'RUGG           0.001 70.859   9775',
'RUBEN          0.001 70.860   9776',
'ROTHROCK       0.001 70.862   9777',
'ROESLER        0.001 70.863   9778',
'RIEHL          0.001 70.864   9779',
'RIDINGS        0.001 70.865   9780',
'RENDER         0.001 70.866   9781',
'RANSDELL       0.001 70.867   9782',
'RADKE          0.001 70.868   9783',
'PINERO         0.001 70.869   9784',
'PETREE         0.001 70.870   9785',
'PENDERGAST     0.001 70.871   9786',
'PELUSO         0.001 70.872   9787',
'PECORARO       0.001 70.874   9788',
'PASCOE         0.001 70.875   9789',
'PANEK          0.001 70.876   9790',
'OSHIRO         0.001 70.877   9791',
'NOON           0.001 70.878   9792',
'NAVARRETTE     0.001 70.879   9793',
'MURGUIA        0.001 70.880   9794',
'MOORES         0.001 70.881   9795',
'MOBERG         0.001 70.882   9796',
'MIKE           0.001 70.883   9797',
'MICHAELIS      0.001 70.885   9798',
'MCWHIRTER      0.001 70.886   9799',
'MCSWEENEY      0.001 70.887   9800',
'MCQUADE        0.001 70.888   9801',
'MCCAY          0.001 70.889   9802',
'MAUK           0.001 70.890   9803',
'MARIANI        0.001 70.891   9804',
'MARCEAU        0.001 70.892   9805',
'MANDEVILLE     0.001 70.893   9806',
'MAEDA          0.001 70.894   9807',
'LUNDE          0.001 70.896   9808',
'LUDLOW    
     0.001 70.897   9809',
'LOEB           0.001 70.898   9810',
'LINDO          0.001 70.899   9811',
'LINDERMAN      0.001 70.900   9812',
'LEVEILLE       0.001 70.901   9813',
'LEITH          0.001 70.902   9814',
'LAROCK         0.001 70.903   9815',
'LAMBRECHT      0.001 70.904   9816',
'KULP           0.001 70.905   9817',
'KINSLEY        0.001 70.906   9818',
'KIMBERLIN      0.001 70.908   9819',
'KESTERSON      0.001 70.909   9820',
'JACINTO        0.001 70.910   9821',
'ICE            0.001 70.911   9822',
'HUI            0.001 70.912   9823',
'HOYOS          0.001 70.913   9824',
'HELFRICH       0.001 70.914   9825',
'HANKE          0.001 70.915   9826',
'HAIL           0.001 70.916   9827',
'GUILLERMO      0.001 70.917   9828',
'GRISBY         0.001 70.919   9829',
'GOYETTE        0.001 70.920   9830',
'GOUVEIA        0.001 70.921   9831',
'GLAZIER        0.001 70.922   9832',
'GILE           0.001 70.923   9833',
'GERENA         0.001 70.924   9834',
'GELINAS        0.001 70.925   9835',
'GASAWAY        0.001 70.926   9836',
'GARDEN         0.001 70.927   9837',
'FUNCHES        0.001 70.928   9838',
'FUJIMOTO       0.001 70.930   9839',
'FLYNT          0.001 70.931   9840',
'FENSKE         0.001 70.932   9841',
'FELLERS        0.001 70.933   9842',
'FEHR           0.001 70.934   9843',
'ESLINGER       0.001 70.935   9844',
'ESCALERA       0.001 70.936   9845',
'ENCISO         0.001 70.937   9846',
'DULEY          0.001 70.938   9847',
'DITTMAN        0.001 70.939   9848',
'DINEEN         0.001 70.940   9849',
'DILLER         0.001 70.942   9850',
'DEVAULT        0.001 70.943   9851',
'DAO            0.001 70.944   9852',
'COLLINGS       0.001 70.945   9853',
'CLYMER         0.001 70.946   9854',
'CLOWERS        0.001 70.947   9855',
'CHAVERS        0.001 70.948   9856',
'CHARLAND       0.001 70.949   9857',
'CASTORENA      0.001 70.950   9858',
'CASTELLO       0.001 70.951   9859',
'CAMARGO        0.001 70.953   9860',
'BUNCE          0.001 70.954   9861',
'BULLEN         0.001 70.955   9862',
'BOYES          0.001 70.956   9863',
'BORCHERS       0.001 70.957   9864',
'BORCHARDT      0.001 70.958   9865',
'BIRNBAUM       0.001 70.959   9866',
'BIRDSALL       0.001 70.960   9867',
'BILLMAN        0.001 70.961   9868',
'BENITES        0.001 70.962   9869',
'BANKHEAD       0.001 70.964   9870',
'ANGE           0.001 70.965   9871',
'AMMERMAN       0.001 70.966   9872',
'ADKISON        0.001 70.967   9873',
'YUAN           0.001 70.968   9874',
'WINEGAR        0.001 70.969   9875',
'WICKMAN        0.001 70.970   9876',
'WEAR           0.001 70.971   9877',
'WARR           0.001 70.972   9878',
'WARNKE         0.001 70.973   9879',
'VILLENEUVE     0.001 70.974   9880',
'VEASEY         0.001 70.975   9881',
'VASSALLO       0.001 70.977   9882',
'VANNATTA       0.001 70.978   9883',
'VADNAIS        0.001 70.979   9884',
'TWILLEY        0.001 70.980   9885',
'TRUELOVE       0.001 70.981   9886',
'TOWERY         0.001 70.982   9887',
'TOMBLIN        0.001 70.983   9888',
'TIPPETT        0.001 70.984   9889',
'THEISS         0.001 70.985   9890',
'TALKINGTON     0.001 70.986   9891',
'TALAMANTES     0.001 70.987   9892',
'SWART          0.001 70.988   9893',
'SWANGER        0.001 70.990   9894',
'STREIT         0.001 70.991   9895',
'STRAW          0.001 70.992   9896',
'STINES         0.001 70.993   9897',
'STABLER        0.001 70.994   9898',
'SPURLING       0.001 70.995   9899',
'SOBEL          0.001 70.996   9900',
'SINE           0.001 70.997   9901',
'SIMMERS        0.001 70.998   9902',
'SHIPPY         0.001 70.999   9903',
'SHIFLETT       0.001 71.000   9904',
'SHEARIN        0.001 71.001   9905',
'SAUTER         0.001 71.002   9906',
'SANDERLIN      0.001 71.004   9907',
'RUSCH          0.001 71.005   9908',
'RUNKLE         0.001 71.006   9909',
'RUCKMAN        0.001 71.007   9910',
'RORIE          0.001 71.008   9911',
'ROESCH         0.001 71.009   9912',
'ROBERTO        0.001 71.010   9913',
'RICHERT        0.001 71.011   9914',
'REHM           0.001 71.012   9915',
'RANDEL         0.001 71.013   9916',
'RA/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
GIN          0.001 71.014   9917',
'QUESENBERRY    0.001 71.015   9918',
'PUENTES        0.001 71.017   9919',
'PLYLER         0.001 71.018   9920',
'PLOTKIN        0.001 71.019   9921',
'PAUGH          0.001 71.020   9922',
'OSHAUGHNESSY   0.001 71.021   9923',
'OHALLORAN      0.001 71.022   9924',
'NORSWORTHY     0.001 71.023   9925',
'NIEMANN        0.001 71.024   9926',
'NADER          0.001 71.025   9927',
'MOOREFIELD     0.001 71.026   9928',
'MOONEYHAM      0.001 71.027   9929',
'MODICA         0.001 71.028   9930',
'MIYAMOTO       0.001 71.030   9931',
'MICKEL         0.001 71.031   9932',
'MEBANE         0.001 71.032   9933',
'MCKINNIE       0.001 71.033   9934',
'MAZUREK        0.001 71.034   9935',
'MANCILLA       0.001 71.035   9936',
'LUKAS          0.001 71.036   9937',
'LOVINS         0.001 71.037   9938',
'LOUGHLIN       0.001 71.038   9939',
'LOTZ           0.001 71.039   9940',
'LINDSLEY       0.001 71.040   9941',
'LIDDLE         0.001 71.041   9942',
'LEVAN          0.001 71.042   9943',
'LEDERMAN       0.001 71.044   9944',
'LECLAIRE       0.001 71.045   9945',
'LASSETER       0.001 71.046   9946',
'LAPOINT        0.001 71.047   9947',
'LAMOREAUX      0.001 71.048   9948',
'LAFOLLETTE     0.001 71.049   9949',
'KUBIAK         0.001 71.050   9950',
'KIRTLEY        0.001 71.051   9951',
'KEFFER         0.001 71.052   9952',
'KACZMAREK      0.001 71.053   9953',
'JENNETTE       0.001 71.054   9954',
'HOUSMAN        0.001 71.055   9955',
'HONEY          0.001 71.057   9956',
'HIERS          0.001 71.058   9957',
'HIBBERT        0.001 71.059   9958',
'HERROD         0.001 71.060   9959',
'HEGARTY        0.001 71.061   9960',
'HATHORN        0.001 71.062   9961',
'HARSH          0.001 71.063   9962',
'GREENHAW       0.001 71.064   9963',
'GRAFTON        0.001 71.065   9964',
'GOVEA          0.001 71.066   9965',
'GARDENER       0.001 71.067   9966',
'FUTCH          0.001 71.068   9967',
'FURST          0.001 71.070   9968',
'FRISBEE        0.001 71.071   9969',
'FRED           0.001 71.072   9970',
'FRANKO         0.001 71.073   9971',
'FORCIER        0.001 71.074   9972',
'FORAN          0.001 71.075   9973',
'FLICKINGER     0.001 71.076   9974',
'FAIRFIELD      0.001 71.077   9975',
'EURE           0.001 71.078   9976',
'EMRICH         0.001 71.079   9977',
'EMBREY         0.001 71.080   9978',
'EDGINGTON      0.001 71.081   9979',
'ECKLUND        0.001 71.082   9980',
'ECKARD         0.001 71.084   9981',
'DURANTE        0.001 71.085   9982',
'DEYO           0.001 71.086   9983',
'DELVECCHIO     0.001 71.087   9984',
'DEEDS          0.001 71.088   9985',
'DADE           0.001 71.089   9986',
'CURREY         0.001 71.090   9987',
'CUFF           0.001 71.091   9988',
'CRESWELL       0.001 71.092   9989',
'COTTRILL       0.001 71.093   9990',
'CASAVANT       0.001 71.094   9991',
'CARTIER        0.001 71.095   9992',
'CARGILE        0.001 71.097   9993',
'CAPEL          0.001 71.098   9994',
'CAMMACK        0.001 71.099   9995',
'CALFEE         0.001 71.100   9996',
'BUZZARD        0.001 71.101   9997',
'BURSE          0.001 71.102   9998',
'BURRUSS        0.001 71.103   9999',
'BRUST          0.001 71.104  10000',
'BROUSSEAU      0.001 71.105  10001',
'BRIDWELL       0.001 71.106  10002',
'BRAATEN        0.001 71.107  10003',
'BORKHOLDER     0.001 71.108  10004',
'BLOOMQUIST     0.001 71.110  10005',
'BJORK          0.001 71.111  10006',
'BARTELT        0.001 71.112  10007',
'ARP            0.001 71.113  10008',
'AMBURGEY       0.001 71.114  10009',
'YEARY          0.001 71.115  10010',
'YAO            0.001 71.116  10011',
'WHITEFIELD     0.001 71.117  10012',
'VINYARD        0.001 71.118  10013',
'VICENTE        0.001 71.119  10014',
'VANVALKENBURG  0.001 71.120  10015',
'TWITCHELL      0.001 71.121  10016',
'TIMMINS        0.001 71.122  10017',
'TESTER         0.001 71.123  10018',
'TAPPER         0.001 71.124  10019',
'STRINGHAM      0.001 71.126  10020',
'STARCHER       0.001 71.127  10021',
'SPOTTS         0.001 71.128  10022',
'SLAUGH         0.001 71.129  10023',
'SIMONSEN       0.001 71.130  100/* Merging js: app/systems/_system.js begins */
24',
'SHEFFER        0.001 71.131  10025',
'SEQUEIRA       0.001 71.132  10026',
'ROSATI         0.001 71.133  10027',
'RODE           0.001 71.134  10028',
'RHYMES         0.001 71.135  10029',
'REZA           0.001 71.136  10030',
'RECORD         0.001 71.137  10031',
'QUINT          0.001 71.138  10032',
'POLLAK         0.001 71.139  10033',
'PEIRCE         0.001 71.140  10034',
'PATILLO        0.001 71.142  10035',
'PARKERSON      0.001 71.143  10036',
'PAIVA          0.001 71.144  10037',
'NILSON         0.001 71.145  10038',
'NICE           0.001 71.146  10039',
'NEVIN          0.001 71.147  10040',
'NARCISSE       0.001 71.148  10041',
'NAIR           0.001 71.149  10042',
'MITTON         0.001 71.150  10043',
'MERRIAM        0.001 71.151  10044',
'MERCED         0.001 71.152  10045',
'MEINERS        0.001 71.153  10046',
'MCKAIN         0.001 71.154  10047',
'MCELVEEN       0.001 71.155  10048',
'MCBETH         0.001 71.156  10049',
'MARSDEN        0.001 71.158  10050',
'MAREZ          0.001 71.159  10051',
'MANKE          0.001 71.160  10052',
'MAHURIN        0.001 71.161  10053',
'MABREY         0.001 71.162  10054',
'LUPER          0.001 71.163  10055',
'KRULL          0.001 71.164  10056',
'KEES           0.001 71.165  10057',
'ILES           0.001 71.166  10058',
'HUNSICKER      0.001 71.167  10059',
'HORNBUCKLE     0.001 71.168  10060',
'HOLTZCLAW      0.001 71.169  10061',
'HIRT           0.001 71.170  10062',
'HINNANT        0.001 71.171  10063',
'HESTON         0.001 71.172  10064',
'HERING         0.001 71.173  10065',
'HEMENWAY       0.001 71.175  10066',
'HEGWOOD        0.001 71.176  10067',
'HEARNS         0.001 71.177  10068',
'HALTERMAN      0.001 71.178  10069',
'HALLS          0.001 71.179  10070',
'GUITERREZ      0.001 71.180  10071',
'GROTE          0.001 71.181  10072',
'GRANILLO       0.001 71.182  10073',
'GRAINGER       0.001 71.183  10074',
'GLASCO         0.001 71.184  10075',
'GILDER         0.001 71.185  10076',
'GARREN         0.001 71.186  10077',
'GARLOCK        0.001 71.187  10078',
'GAREY          0.001 71.188  10079',
'FU             0.001 71.189  10080',
'FRYAR          0.001 71.191  10081',
'FREDRICKS      0.001 71.192  10082',
'FRAIZER        0.001 71.193  10083',
'FOXX           0.001 71.194  10084',
'FOSHEE         0.001 71.195  10085',
'FERREL         0.001 71.196  10086',
'FELTY          0.001 71.197  10087',
'FEATHERS       0.001 71.198  10088',
'EVERITT        0.001 71.199  10089',
'EVENS          0.001 71.200  10090',
'ESSER          0.001 71.201  10091',
'ELKIN          0.001 71.202  10092',
'EBERHART       0.001 71.203  10093',
'DURSO          0.001 71.204  10094',
'DUGUAY         0.001 71.205  10095',
'DRISKILL       0.001 71.207  10096',
'DOSTER         0.001 71.208  10097',
'DEWALL         0.001 71.209  10098',
'DEVEAU         0.001 71.210  10099',
'DEMPS          0.001 71.211  10100',
'DEMAIO         0.001 71.212  10101',
'DELREAL        0.001 71.213  10102',
'DELEO          0.001 71.214  10103',
'DELAY          0.001 71.215  10104',
'DEEM           0.001 71.216  10105',
'DARRAH         0.001 71.217  10106',
'CUMBERBATCH    0.001 71.218  10107',
'CULBERSON      0.001 71.219  10108',
'CRANMER        0.001 71.220  10109',
'CORDLE         0.001 71.221  10110',
'COLGAN         0.001 71.222  10111',
'CHESLEY        0.001 71.224  10112',
'CAVALLO        0.001 71.225  10113',
'CASTELLON      0.001 71.226  10114',
'CASTELLI       0.001 71.227  10115',
'CARRERAS       0.001 71.228  10116',
'CARNELL        0.001 71.229  10117',
'CARMON         0.001 71.230  10118',
'CARMEN         0.001 71.231  10119',
'CARLUCCI       0.001 71.232  10120',
'BOTTOM         0.001 71.233  10121',
'BONTRAGER      0.001 71.234  10122',
'BLUMBERG       0.001 71.235  10123',
'BLASINGAME     0.001 71.236  10124',
'BECTON         0.001 71.237  10125',
'AYON           0.001 71.238  10126',
'ARTRIP         0.001 71.240  10127',
'ARLINE         0.001 71.241  10128',
'ANDUJAR        0.001 71.242  10129',
'ALKIRE         0.001 71.243  10130',
'ALDER          0.001 71.244  10131',
'AGAN           0.001 71./*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
245  10132',
'ZUKOWSKI       0.001 71.246  10133',
'ZUCKERMAN      0.001 71.247  10134',
'ZEHR           0.001 71.248  10135',
'WROBLEWSKI     0.001 71.249  10136',
'WRIGLEY        0.001 71.250  10137',
'WOODSIDE       0.001 71.251  10138',
'WIGGINTON      0.001 71.252  10139',
'WESTMAN        0.001 71.253  10140',
'WESTGATE       0.001 71.254  10141',
'WERTS          0.001 71.255  10142',
'WASHAM         0.001 71.256  10143',
'WARDLOW        0.001 71.257  10144',
'WALSER         0.001 71.258  10145',
'WAITERS        0.001 71.260  10146',
'TELLER         0.001 71.261  10147',
'TADLOCK        0.001 71.262  10148',
'STUCK          0.001 71.263  10149',
'STRINGFIELD    0.001 71.264  10150',
'STIMPSON       0.001 71.265  10151',
'STICKLEY       0.001 71.266  10152',
'STARBUCK       0.001 71.267  10153',
'STANDISH       0.001 71.268  10154',
'SPURLIN        0.001 71.269  10155',
'SPINDLER       0.001 71.270  10156',
'SPELLER        0.001 71.271  10157',
'SPAETH         0.001 71.272  10158',
'SOTOMAYOR      0.001 71.273  10159',
'SOK            0.001 71.274  10160',
'SLUDER         0.001 71.275  10161',
'SHRYOCK        0.001 71.276  10162',
'SHEPARDSON     0.001 71.277  10163',
'SHATLEY        0.001 71.278  10164',
'SCANNELL       0.001 71.279  10165',
'SANTISTEVAN    0.001 71.281  10166',
'ROSNER         0.001 71.282  10167',
'ROLLAND        0.001 71.283  10168',
'RHODE          0.001 71.284  10169',
'RESTO          0.001 71.285  10170',
'REINHARD       0.001 71.286  10171',
'RATHBURN       0.001 71.287  10172',
'PRISCO         0.001 71.288  10173',
'POULSEN        0.001 71.289  10174',
'PINNEY         0.001 71.290  10175',
'PHARES         0.001 71.291  10176',
'PENNOCK        0.001 71.292  10177',
'PASTRANA       0.001 71.293  10178',
'OVIEDO         0.001 71.294  10179',
'OSTLER         0.001 71.295  10180',
'NOTO           0.001 71.296  10181',
'NAUMAN         0.001 71.297  10182',
'MULFORD        0.001 71.298  10183',
'MOISE          0.001 71.299  10184',
'MOBERLY        0.001 71.300  10185',
'MIRABAL        0.001 71.302  10186',
'MING           0.001 71.303  10187',
'METOYER        0.001 71.304  10188',
'METHENY        0.001 71.305  10189',
'MENTZER        0.001 71.306  10190',
'MELDRUM        0.001 71.307  10191',
'MCINTURFF      0.001 71.308  10192',
'MCELYEA        0.001 71.309  10193',
'MCDOUGLE       0.001 71.310  10194',
'MASSARO        0.001 71.311  10195',
'LUMPKINS       0.001 71.312  10196',
'LOVEDAY        0.001 71.313  10197',
'LOFGREN        0.001 71.314  10198',
'LOE            0.001 71.315  10199',
'LIRETTE        0.001 71.316  10200',
'LESPERANCE     0.001 71.317  10201',
'LEFKOWITZ      0.001 71.318  10202',
'LEDGER         0.001 71.319  10203',
'LAUZON         0.001 71.320  10204',
'LAIN           0.001 71.321  10205',
'LACHAPELLE     0.001 71.322  10206',
'KURZ           0.001 71.324  10207',
'KLASSEN        0.001 71.325  10208',
'KEOUGH         0.001 71.326  10209',
'KEMPTON        0.001 71.327  10210',
'KAELIN         0.001 71.328  10211',
'JEFFORDS       0.001 71.329  10212',
'IM             0.001 71.330  10213',
'HUOT           0.001 71.331  10214',
'HSIEH          0.001 71.332  10215',
'HOYER          0.001 71.333  10216',
'HORWITZ        0.001 71.334  10217',
'HOPP           0.001 71.335  10218',
'HOEFT          0.001 71.336  10219',
'HENNIG         0.001 71.337  10220',
'HASKIN         0.001 71.338  10221',
'GRILL          0.001 71.339  10222',
'GOURDINE       0.001 71.340  10223',
'GOLIGHTLY      0.001 71.341  10224',
'GIROUARD       0.001 71.342  10225',
'FULGHAM        0.001 71.343  10226',
'FRITSCH        0.001 71.345  10227',
'FREER          0.001 71.346  10228',
'FRASHER        0.001 71.347  10229',
'FOULK          0.001 71.348  10230',
'FIRESTONE      0.001 71.349  10231',
'FIORENTINO     0.001 71.350  10232',
'FEDOR          0.001 71.351  10233',
'FEATHER        0.001 71.352  10234',
'ENSLEY         0.001 71.353  10235',
'ENGLEHART      0.001 71.354  10236',
'EELLS          0.001 71.355  10237',
'EBEL           0.001 71.356  10238',
'DUNPHY         0.001 71.357  10239',
'DONAHOE        0

.001 71.358  10240',
'DIMAS          0.001 71.359  10241',
'DILEO          0.001 71.360  10242',
'DIBENEDETTO    0.001 71.361  10243',
'DABROWSKI      0.001 71.362  10244',
'CRICK          0.001 71.363  10245',
'COONROD        0.001 71.364  10246',
'CONDER         0.001 71.366  10247',
'CODDINGTON     0.001 71.367  10248',
'CHUNN          0.001 71.368  10249',
'CHOY           0.001 71.369  10250',
'CHAPUT         0.001 71.370  10251',
'CERNA          0.001 71.371  10252',
'CARREIRO       0.001 71.372  10253',
'CALAHAN        0.001 71.373  10254',
'BRAGGS         0.001 71.374  10255',
'BOURDON        0.001 71.375  10256',
'BONER          0.001 71.376  10257',
'BOLLMAN        0.001 71.377  10258',
'BITTLE         0.001 71.378  10259',
'BEN            0.001 71.379  10260',
'BEHM           0.001 71.380  10261',
'BAUDER         0.001 71.381  10262',
'BATT           0.001 71.382  10263',
'BARRERAS       0.001 71.383  10264',
'AUBUCHON       0.001 71.384  10265',
'ANZALONE       0.001 71.385  10266',
'ADAMO          0.001 71.386  10267',
'ZHOU           0.001 71.388  10268',
'ZERBE          0.001 71.389  10269',
'ZACHERY        0.001 71.390  10270',
'WITTY          0.001 71.391  10271',
'WIRT           0.001 71.392  10272',
'WILLCOX        0.001 71.393  10273',
'WESTBERG       0.001 71.394  10274',
'WEIKEL         0.001 71.395  10275',
'WAYMIRE        0.001 71.396  10276',
'VROMAN         0.001 71.397  10277',
'VINCI          0.001 71.398  10278',
'VALLEJOS       0.001 71.399  10279',
'TUTOR          0.001 71.400  10280',
'TRUESDELL      0.001 71.401  10281',
'TROUTT         0.001 71.402  10282',
'TROTTA         0.001 71.403  10283',
'TOLLISON       0.001 71.404  10284',
'TOLES          0.001 71.405  10285',
'TICHENOR       0.001 71.406  10286',
'TAI            0.001 71.407  10287',
'SYMONDS        0.001 71.408  10288',
'SURLES         0.001 71.409  10289',
'SUNDAY         0.001 71.410  10290',
'STRAYER        0.001 71.411  10291',
'STGEORGE       0.001 71.412  10292',
'SROKA          0.001 71.413  10293',
'SORRENTINO     0.001 71.414  10294',
'SOLARES        0.001 71.415  10295',
'SNELSON        0.001 71.416  10296',
'SILVESTRI      0.001 71.417  10297',
'SIKORSKI       0.001 71.419  10298',
'SHAWVER        0.001 71.420  10299',
'SCHUMAKER      0.001 71.421  10300',
'SCHORR         0.001 71.422  10301',
'SCHOOLEY       0.001 71.423  10302',
'SCATES         0.001 71.424  10303',
'SATTERLEE      0.001 71.425  10304',
'SATCHELL       0.001 71.426  10305',
'SACKS          0.001 71.427  10306',
'RYMER          0.001 71.428  10307',
'ROSELLI        0.001 71.429  10308',
'ROBITAILLE     0.001 71.430  10309',
'RIEGEL         0.001 71.431  10310',
'RICHER         0.001 71.432  10311',
'REGIS          0.001 71.433  10312',
'REAMES         0.001 71.434  10313',
'PROVENZANO     0.001 71.435  10314',
'PROPER         0.001 71.436  10315',
'PRIESTLEY      0.001 71.437  10316',
'PLAISANCE      0.001 71.438  10317',
'PETTEY         0.001 71.439  10318',
'PALOMARES      0.001 71.440  10319',
'OMAN           0.001 71.441  10320',
'NOWAKOWSKI     0.001 71.442  10321',
'NACE           0.001 71.443  10322',
'MONETTE        0.001 71.444  10323',
'MINYARD        0.001 71.445  10324',
'MCLAMB         0.001 71.446  10325',
'MCHONE         0.001 71.447  10326',
'MCCARROLL      0.001 71.449  10327',
'MASSON         0.001 71.450  10328',
'MARCO          0.001 71.451  10329',
'MAGOON         0.001 71.452  10330',
'MADDY          0.001 71.453  10331',
'LUNDIN         0.001 71.454  10332',
'LOZA           0.001 71.455  10333',
'LICATA         0.001 71.456  10334',
'LESLEY         0.001 71.457  10335',
'LEONHARDT      0.001 71.458  10336',
'LEMA           0.001 71.459  10337',
'LANDWEHR       0.001 71.460  10338',
'KIRCHER        0.001 71.461  10339',
'KINCH          0.001 71.462  10340',
'KARPINSKI      0.001 71.463  10341',
'JOHANNSEN      0.001 71.464  10342',
'HUSSAIN        0.001 71.465  10343',
'HOUGHTALING    0.001 71.466  10344',
'HOSKINSON      0.001 71.467  10345',
'HOLLAWAY       0.001 71.468  10346',
'HOLEMAN        0.001 71.469  10347',
'HOBGOOD        0.001 71.470  10348',
'HILT           0.001 71.471  10349',
'HIEBERT        0.001 71.472  10350',
'GROS           0.001 71.473  10351',
'GRAM           0.001 71.474  10352',
'GOGGIN         0.001 71.475  10353',
'GENTLE         0.001 71.476  10354',
'GEISSLER       0.001 71.477  10355',
'GADBOIS        0.001 71.478  10356',
'GABALDON       0.001 71.480  10357',
'FLESHMAN       0.001 71.481  10358',
'FLANNIGAN      0.001 71.482  10359',
'FILES          0.001 71.483  10360',
'FAIRMAN        0.001 71.484  10361',
'EPP            0.001 71.485  10362',
'EILERS         0.001 71.486  10363',
'DYCUS          0.001 71.487  10364',
'DUNMIRE        0.001 71.488  10365',
'DUFFIELD       0.001 71.489  10366',
'DOWLER         0.001 71.490  10367',
'DITTO          0.001 71.491  10368',
'DELOATCH       0.001 71.492  10369',
'DEHAAN         0.001 71.493  10370',
'DEEMER         0.001 71.494  10371',
'CORNER         0.001 71.495  10372',
'CLAYBORN       0.001 71.496  10373',
'CHRISTOFFERSO  0.001 71.497  10374',
'CHILSON        0.001 71.498  10375',
'CHESNEY        0.001 71.499  10376',
'CHATFIELD      0.001 71.500  10377',
'CHARLIE        0.001 71.501  10378',
'CASTER         0.001 71.502  10379',
'CARRON         0.001 71.503  10380',
'CANALE         0.001 71.504  10381',
'CAMDEN         0.001 71.505  10382',
'BUFF           0.001 71.506  10383',
'BRIGMAN        0.001 71.507  10384',
'BRANSTETTER    0.001 71.508  10385',
'BOSSE          0.001 71.509  10386',
'BORTON         0.001 71.511  10387',
'BONAR          0.001 71.512  10388',
'BLAU           0.001 71.513  10389',
'BIRON          0.001 71.514  10390',
'BEAGLE         0.001 71.515  10391',
'BARROSO        0.001 71.516  10392',
'ARVIN          0.001 71.517  10393',
'ARISPE         0.001 71.518  10394',
'ZACHARIAS      0.001 71.519  10395',
'ZABEL          0.001 71.520  10396',
'YAEGER         0.001 71.521  10397',
'WORKS          0.001 71.522  10398',
'WOOLFORD       0.001 71.523  10399',
'WHETZEL        0.001 71.524  10400',
'WEAKLEY        0.001 71.525  10401',
'VEATCH         0.001 71.526  10402',
'VANDEUSEN      0.001 71.527  10403',
'TUFTS          0.001 71.528  10404',
'TROXEL         0.001 71.529  10405',
'TROCHE         0.001 71.530  10406',
'TRAVER         0.001 71.531  10407',
'TOWNSEL        0.001 71.532  10408',
'TOSH           0.001 71.533  10409',
'TALARICO       0.001 71.534  10410',
'SWILLEY        0.001 71.535  10411',
'STERRETT       0.001 71.536  10412',
'STENGER        0.001 71.537  10413',
'SPRINGFIELD    0.001 71.538  10414',
'SPEAKMAN       0.001 71.539  10415',
'SOWARDS        0.001 71.540  10416',
'SOURS          0.001 71.541  10417',
'SOUDERS        0.001 71.542  10418',
'SOUDER         0.001 71.543  10419',
'SOLES          0.001 71.544  10420',
'SOBERS         0.001 71.545  10421',
'SNODDY         0.001 71.546  10422',
'SMITHER        0.001 71.547  10423',
'SIAS           0.001 71.548  10424',
'SHUTE          0.001 71.549  10425',
'SHOAF          0.001 71.550  10426',
'SHAHAN         0.001 71.551  10427',
'SCHUETZ        0.001 71.552  10428',
'SCAGGS         0.001 71.553  10429',
'SANTINI        0.001 71.554  10430',
'ROSSON         0.001 71.555  10431',
'ROLEN          0.001 71.556  10432',
'ROBIDOUX       0.001 71.557  10433',
'RENTAS         0.001 71.558  10434',
'RECIO          0.001 71.559  10435',
'PIXLEY         0.001 71.560  10436',
'PAWLOWSKI      0.001 71.561  10437',
'PAWLAK         0.001 71.563  10438',
'PAULL          0.001 71.564  10439',
'PASCAL         0.001 71.565  10440',
'OVERBEY        0.001 71.566  10441',
'OREAR          0.001 71.567  10442',
'OLIVERI        0.001 71.568  10443',
'OLDENBURG      0.001 71.569  10444',
'NUTTING        0.001 71.570  10445',
'NAUGLE         0.001 71.571  10446',
'MOTE           0.001 71.572  10447',
'MOSSMAN        0.001 71.573  10448',
'MOOR           0.001 71.574  10449',
'MISNER         0.001 71.575  10450',
'MILAZZO        0.001 71.576  10451',
'MICHELSON      0.001 71.577  10452',
'MEI            0.001 71.578  10453',
'MCENTEE        0.001 71.579  10454',
'MCCULLAR       0.001 71.580  10455',
'MCCREE         0.001 71.581  10456',
'MCALEER        0.001 71.582  10457',
'MAZZONE        0.001 71.583  10458',
'MAXIM          0.001 71.584  10459',
'MARSHAL        0.001 71.585  10460',
'MANDELL        0.001 71.586  10461',
'MANAHAN        0.001 71.587  10462',
'MALOTT         0.001 71.588  10463',
'MAISONET       0.001 71.589  10464',
'MAILLOUX       0.001 71.590  10465',
'LUMLEY         0.001 71.591  10466',
'LOWRIE         0.001 71.592  10467',
'LOUVIERE       0.001 71.593  10468',
'LIPINSKI       0.001 71.594  10469',
'LINDEMANN      0.001 71.595  10470',
'LEPPERT        0.001 71.596  10471',
'LEOPOLD        0.001 71.597  10472',
'LEASURE        0.001 71.598  10473',
'LEAF           0.001 71.599  10474',
'LABARGE        0.001 71.600  10475',
'KUBIK          0.001 71.601  10476',
'KNISELY        0.001 71.602  10477',
'KNEPP          0.001 71.603  10478',
'KENWORTHY      0.001 71.604  10479',
'KENNELLY       0.001 71.605  10480',
'KELCH          0.001 71.606  10481',
'KARG           0.001 71.607  10482',
'KANTER         0.001 71.608  10483',
'IGNACIO        0.001 71.609  10484',
'HYER           0.001 71.610  10485',
'HOUCHIN        0.001 71.611  10486',
'HOSLEY         0.001 71.612  10487',
'HOSLER         0.001 71.613  10488',
'HOLLON         0.001 71.614  10489',
'HOLLEMAN       0.001 71.615  10490',
'HEITMAN        0.001 71.616  10491',
'HEBB           0.001 71.617  10492',
'HAGGINS        0.001 71.618  10493',
'GWALTNEY       0.001 71.619  10494',
'GUIN           0.001 71.620  10495',
'GREENMAN       0.001 71.622  10496',
'GOULDING       0.001 71.623  10497',
'GORDEN         0.001 71.624  10498',
'GOODYEAR       0.001 71.625  10499',
'GERACI         0.001 71.626  10500',
'GEORGES        0.001 71.627  10501',
'GATHERS        0.001 71.628  10502',
'FRISON         0.001 71.629  10503',
'FEAGIN         0.001 71.630  10504',
'FALCONER       0.001 71.631  10505',
'ESPADA         0.001 71.632  10506',
'ERVING         0.001 71.633  10507',
'ERIKSON        0.001 71.634  10508',
'EISENHAUER     0.001 71.635  10509',
'EDER           0.001 71.636  10510',
'EBELING        0.001 71.637  10511',
'DURGIN         0.001 71.638  10512',
'DROWN          0.001 71.639  10513',
'DOWDLE         0.001 71.640  10514',
'DINWIDDIE      0.001 71.641  10515',
'DELCASTILLO    0.001 71.642  10516',
'DEDRICK        0.001 71.643  10517',
'CRIMMINS       0.001 71.644  10518',
'COVELL         0.001 71.645  10519',
'COURNOYER      0.001 71.646  10520',
'CORIA          0.001 71.647  10521',
'COHAN          0.001 71.648  10522',
'CATALDO        0.001 71.649  10523',
'CARPENTIER     0.001 71.650  10524',
'CANAS          0.001 71.651  10525',
'CAMPA          0.001 71.652  10526',
'BRODE          0.001 71.653  10527',
'BRASHEARS      0.001 71.654  10528',
'BLASER         0.001 71.655  10529',
'BICKNELL       0.001 71.656  10530',
'BERK           0.001 71.657  10531',
'BEDNAR         0.001 71.658  10532',
'BARWICK        0.001 71.659  10533',
'ASCENCIO       0.001 71.660  10534',
'ALTHOFF        0.001 71.661  10535',
'ALMODOVAR      0.001 71.662  10536',
'ALAMO          0.001 71.663  10537',
'ZIRKLE         0.001 71.664  10538',
'ZABALA         0.001 71.665  10539',
'XU             0.001 71.666  10540',
'WOLVERTON      0.001 71.667  10541',
'WINEBRENNER    0.001 71.668  10542',
'WETHERELL      0.001 71.669  10543',
'WESTLAKE       0.001 71.670  10544',
'WEGENER        0.001 71.671  10545',
'WEDDINGTON     0.001 71.672  10546',
'VONG           0.001 71.673  10547',
'TUTEN          0.001 71.674  10548',
'TROSCLAIR      0.001 71.675  10549',
'TRIM           0.001 71.676  10550',
'TRESSLER       0.001 71.677  10551',
'THEROUX        0.001 71.678  10552',
'TESKE          0.001 71.679  10553',
'SWORD          0.001 71.680  10554',
'SWINEHART      0.001 71.681  10555',
'SWENSEN        0.001 71.682  10556',
'SUNDQUIST      0.001 71.683  10557',
'SOUTHALL       0.001 71.684  10558',
'SOCHA          0.001 71.685  10559',
'SIZER          0.001 71.686  10560',
'SILVERBERG     0.001 71.687  10561',
'SHORTT         0.001 71.688  10562',
'SHIMIZU        0.001 71.689  10563',
'SHERRARD       0.001 71.690  10564',
'SHEN           0.001 71.691  10565',
'SHAEFFER       0.001 71.692  10566',
'SETH           0.001 71.693  10567',
'SCHEID         0.001 71.694  10568',
'SCHEETZ        0.001 71.695  10569',
'SARAVIA        0.001 71.696  10570',
'SANNER         0.001 71.697  10571',
'RUBINSTEIN     0.001 71.698  10572',
'ROZELL         0.001 71.699  10573',
'ROMER          0.001 71.700  10574',
'RINGO          0.001 71.701  10575',
'RHEAUME        0.001 71.702  10576',
'REISINGER      0.001 71.703  10577',
'RAVEN          0.001 71.704  10578',
'RANDLES        0.001 71.705  10579',
'PULLUM         0.001 71.706  10580',
'PETRELLA       0.001 71.707  10581',
'PAYAN          0.001 71.708  10582',
'PAPP           0.001 71.709  10583',
'PABLO          0.001 71.710  10584',
'NORDIN         0.001 71.711  10585',
'NORCROSS       0.001 71.712  10586',
'NICOLETTI      0.001 71.713  10587',
'NICHOLES       0.001 71.714  10588',
'NEWBOLD        0.001 71.715  10589',
'NAKAGAWA       0.001 71.716  10590',
'MRAZ           0.001 71.717  10591',
'MONTEITH       0.001 71.718  10592',
'MILSTEAD       0.001 71.719  10593',
'MILLINER       0.001 71.720  10594',
'MELLEN         0.001 71.721  10595',
'MCCARDLE       0.001 71.722  10596',
'MATTHIAS       0.001 71.723  10597',
'MARCY          0.001 71.724  10598',
'LUFT           0.001 71.725  10599',
'LOO            0.001 71.726  10600',
'LOCKER         0.001 71.727  10601',
'LIPTAK         0.001 71.728  10602',
'LIPP           0.001 71.729  10603',
'LEITCH         0.001 71.730  10604',
'LATIMORE       0.001 71.731  10605',
'LARRISON       0.001 71.732  10606',
'LANDAU         0.001 71.733  10607',
'LABORDE        0.001 71.734  10608',
'KOVAL          0.001 71.735  10609',
'IZQUIERDO      0.001 71.736  10610',
'HYMEL          0.001 71.737  10611',
'HOSKIN         0.001 71.738  10612',
'HOLTE          0.001 71.739  10613',
'HOEFER         0.001 71.740  10614',
'HAYWORTH       0.001 71.741  10615',
'HAUSMAN        0.001 71.742  10616',
'HARRILL        0.001 71.743  10617',
'HARREL         0.001 71.744  10618',
'HARDT          0.001 71.745  10619',
'GULLY          0.001 71.746  10620',
'GROOVER        0.001 71.747  10621',
'GRINNELL       0.001 71.748  10622',
'GREENSPAN      0.001 71.749  10623',
'GRAVER         0.001 71.750  10624',
'GRANDBERRY     0.001 71.751  10625',
'GORRELL        0.001 71.752  10626',
'GOLDENBERG     0.001 71.753  10627',
'GOGUEN         0.001 71.754  10628',
'GILLELAND      0.001 71.755  10629',
'GARR           0.001 71.756  10630',
'FUSON          0.001 71.757  10631',
'FOYE           0.001 71.758  10632',
'FELT           0.001 71.759  10633',
'FELDMANN       0.001 71.760  10634',
'EVERLY         0.001 71.761  10635',
'DYESS          0.001 71.762  10636',
'DYAL           0.001 71.763  10637',
'DUNNIGAN       0.001 71.764  10638',
'DOWNIE         0.001 71.765  10639',
'DOLBY          0.001 71.766  10640',
'DIVINE         0.001 71.767  10641',
'DEATHERAGE     0.001 71.768  10642',
'DATES          0.001 71.769  10643',
'DANNA          0.001 71.770  10644',
'COSEY          0.001 71.771  10645',
'CORRADO        0.001 71.772  10646',
'CHEEVER        0.001 71.773  10647',
'CELAYA         0.001 71.774  10648',
'CAVER          0.001 71.775  10649',
'CASHION        0.001 71.776  10650',
'CAPLINGER      0.001 71.777  10651',
'CANSLER        0.001 71.778  10652',
'BYRGE          0.001 71.779  10653',
'BRUDER         0.001 71.780  10654',
'BREW           0.001 71.781  10655',
'BREUER         0.001 71.782  10656',
'BRESLIN        0.001 71.783  10657',
'BRAZELTON      0.001 71.784  10658',
'BOTKIN         0.001 71.785  10659',
'BONNEAU        0.001 71.786  10660',
'BONES          0.001 71.787  10661',
'BONDURANT      0.001 71.788  10662',
'BOHANAN        0.001 71.789  10663',
'BOGUE          0.001 71.790  10664',
'BOES           0.001 71.791  10665',
'BODNER         0.001 71.792  10666',
'BOATNER        0.001 71.793  10667',
'BLATT          0.001 71.794  10668',
'BICKLEY        0.001 71.795  10669',
'BELLIVEAU      0.001 71.796  10670',
'BEILER         0.001 71.797  10671',
'BEIER          0.001 71.798  10672',
'BECKSTEAD      0.001 71.799  10673',
'BART           0.001 71.800  10674',
'BANG           0.001 71.801  10675',
'BACHMANN       0.001 71.802  10676',
'ATKIN          0.001 71.803  10677',
'ARON           0.001 71.804  10678',
'ANDREAS        0.001 71.805  10679',
'ALTIZER        0.001 71.806  10680',
'ALLOWAY        0.001 71.807  10681',
'ALLAIRE        0.001 71.808  10682',
'ALBRO          0.001 71.809  10683',
'ABRON          0.001 71.810  10684',
'ZELLMER        0.001 71.811  10685',
'YETTER         0.001 71.812  10686',
'YELVERTON      0.001 71.813  10687',
'WILTSHIRE      0.001 71.814  10688',
'WIENS          0.001 71.815  10689',
'WHIDDEN        0.001 71.816  10690',
'WAIT           0.001 71.817  10691',
'VIRAMONTES     0.001 71.818  10692',
'VANWORMER      0.001 71.819  10693',
'TOPPER         0.001 71.820  10694',
'TARANTINO      0.001 71.821  10695',
'TANKSLEY       0.001 71.822  10696',
'SUMLIN         0.001 71.823  10697',
'STRAUCH        0.001 71.824  10698',
'STRANG         0.001 71.825  10699',
'STICE          0.001 71.826  10700',
'SPAHN          0.001 71.827  10701',
'SOSEBEE        0.001 71.828  10702',
'SIGALA         0.001 71.829  10703',
'SHROUT         0.001 71.830  10704',
'SEAMON         0.001 71.831  10705',
'SCHRUM         0.001 71.832  10706',
'SCHNECK        0.001 71.833  10707',
'SCHANTZ        0.001 71.834  10708',
'SAID           0.001 71.835  10709',
'RUDDY          0.001 71.836  10710',
'ROMIG          0.001 71.837  10711',
'ROEHL          0.001 71.838  10712',
'RENNINGER      0.001 71.839  10713',
'REDING         0.001 71.840  10714',
'PYNE           0.001 71.841  10715',
'POLAK          0.001 71.842  10716',
'POHLMAN        0.001 71.843  10717',
'PASILLAS       0.001 71.844  10718',
'OLDFIELD       0.001 71.845  10719',
'OLDAKER        0.001 71.846  10720',
'OHANLON        0.001 71.847  10721',
'OGILVIE        0.001 71.848  10722',
'NORBERG        0.001 71.849  10723',
'NOLETTE        0.001 71.850  10724',
'NIES           0.001 71.851  10725',
'NEUFELD        0.001 71.852  10726',
'NELLIS         0.001 71.853  10727',
'MUMMERT        0.001 71.854  10728',
'MULVIHILL      0.001 71.855  10729',
'MULLANEY       0.001 71.856  10730',
'MONTELEONE     0.001 71.857  10731',
'MENDONCA       0.001 71.858  10732',
'MEISNER        0.001 71.859  10733',
'MCMULLAN       0.001 71.860  10734',
'MCCLUNEY       0.001 71.861  10735',
'MATTIS         0.001 71.862  10736',
'MASSENGILL     0.001 71.863  10737',
'MANFREDI       0.001 71.864  10738',
'LUEDTKE        0.001 71.865  10739',
'LOUNSBURY      0.001 71.866  10740',
'LORA           0.001 71.867  10741',
'LIBERATORE     0.001 71.868  10742',
'LEEK           0.001 71.869  10743',
'LEASE          0.001 71.870  10744',
'LAZARO         0.001 71.871  10745',
'LAMPHERE       0.001 71.872  10746',
'LAFORGE        0.001 71.873  10747',
'KUO            0.001 71.874  10748',
'KOO            0.001 71.875  10749',
'JOURDAN        0.001 71.876  10750',
'ISMAIL         0.001 71.876  10751',
'IORIO          0.001 71.877  10752',
'INIGUEZ        0.001 71.878  10753',
'IKEDA          0.001 71.879  10754',
'HUBLER         0.001 71.880  10755',
'HODGDON        0.001 71.881  10756',
'HOCKING        0.001 71.882  10757',
'HEACOCK        0.001 71.883  10758',
'HASLAM         0.001 71.884  10759',
'HARALSON       0.001 71.885  10760',
'HANSHAW        0.001 71.886  10761',
'HANNUM         0.001 71.887  10762',
'HALLAM         0.001 71.888  10763',
'HADEN          0.001 71.889  10764',
'GARNES         0.001 71.890  10765',
'GARCES         0.001 71.891  10766',
'GAMMAGE        0.001 71.892  10767',
'GAMBINO        0.001 71.893  10768',
'FINKEL         0.001 71.894  10769',
'FAUCETT        0.001 71.895  10770',
'FAHY           0.001 71.896  10771',
'ESTEBAN        0.001 71.897  10772',
'EHRHARDT       0.001 71.898  10773',
'EGGEN          0.001 71.899  10774',
'DUSEK          0.001 71.900  10775',
'DURRANT        0.001 71.901  10776',
'DUBAY          0.001 71.902  10777',
'DONES          0.001 71.903  10778',
'DEY            0.001 71.904  10779',
'DEPASQUALE     0.001 71.905  10780',
'DELUCIA        0.001 71.906  10781',
'DEGRAFF        0.001 71.907  10782',
'DEER           0.001 71.908  10783',
'DECAMP         0.001 71.909  10784',
'DAVALOS        0.001 71.910  10785',
'DARWIN         0.001 71.911  10786',
'DAN            0.001 71.912  10787',
'CULLINS        0.001 71.913  10788',
'CONARD         0.001 71.914  10789',
'CLOUSER        0.001 71.915  10790',
'CLONTZ         0.001 71.916  10791',
'CIFUENTES      0.001 71.917  10792',
'CHICO          0.001 71.918  10793',
'CHAPPEL        0.001 71.919  10794',
'CHAFFINS       0.001 71.920  10795',
'CELIS          0.001 71.921  10796',
'CARWILE        0.001 71.922  10797',
'BYRAM          0.001 71.923  10798',
'BRUGGEMAN      0.001 71.924  10799',
'BRICK          0.001 71.925  10800',
'BRESSLER       0.001 71.926  10801',
'BRATHWAITE     0.001 71.927  10802',
'BRASFIELD      0.001 71.928  10803',
'BRADBURN       0.001 71.929  10804',
'BOOSE          0.001 71.930  10805',
'BOON           0.001 71.931  10806',
'BODIE          0.001 71.932  10807',
'BLOSSER        0.001 71.933  10808',
'BLAS           0.001 71.934  10809',
'BISE           0.001 71.935  10810',
'BERTSCH        0.001 71.936  10811',
'BERNARDI       0.001 71.937  10812',
'BERNABE        0.001 71.938  10813',
'BENGTSON       0.001 71.939  10814',
'BARRETTE       0.001 71.940  10815',
'ASTORGA        0.001 71.941  10816',
'ARMAND         0.001 71.942  10817',
'ANTONE         0.001 71.943  10818',
'ALDAY          0.001 71.944  10819',
'ALBEE          0.001 71.945  10820',
'ABRAHAMSON     0.001 71.945  10821',
'YARNELL        0.001 71.946  10822',
'WILTSE         0.001 71.947  10823',
'WILE           0.001 71.948  10824',
'WIEBE          0.001 71.949  10825',
'WAGUESPACK     0.001 71.950  10826',
'VASSER         0.001 71.951  10827',
'UPHAM          0.001 71.952  10828',
'TYRE           0.001 71.953  10829',
'TUREK          0.001 71.954  10830',
'TUNE           0.001 71.955  10831',
'TRAXLER        0.001 71.956  10832',
'TORAIN         0.001 71.957  10833',
'TOMASZEWSKI    0.001 71.958  10834',
'TINNIN         0.001 71.959  10835',
'TINER          0.001 71.960  10836',
'TINDELL        0.001 71.961  10837',
'TEED           0.001 71.962  10838',
'STYRON         0.001 71.963  10839',
'STAHLMAN       0.001 71.964  10840',
'STAAB          0.001 71.965  10841',
'SPOON          0.001 71.966  10842',
'SPELLS         0.001 71.967  10843',
'SKIBA          0.001 71.968  10844',
'SHIH           0.001 71.969  10845',
'SHEPERD        0.001 71.970  10846',
'SEIDL          0.001 71.971  10847',
'SECOR          0.001 71.972  10848',
'SCHUTTE        0.001 71.973  10849',
'SANFILIPPO     0.001 71.974  10850',
'RUDER          0.001 71.975  10851',
'RONDON         0.001 71.976  10852',
'REINA          0.001 71.977  10853',
'REARICK        0.001 71.977  10854',
'RANK           0.001 71.978  10855',
'PROCTER        0.001 71.979  10856',
'PROCHASKA      0.001 71.980  10857',
'PETTENGILL     0.001 71.981  10858',
'PAULY          0.001 71.982  10859',
'NEILSEN        0.001 71.983  10860',
'NALLY          0.001 71.984  10861',
'MUTTER         0.001 71.985  10862',
'MULLENAX       0.001 71.986  10863',
'MORANO         0.001 71.987  10864',
'MEADS          0.001 71.988  10865',
'MCNAUGHTON     0.001 71.989  10866',
'MCMURTRY       0.001 71.990  10867',
'MCMATH         0.001 71.991  10868',
'MCKINSEY       0.001 71.992  10869',
'MATTHES        0.001 71.993  10870',
'MASSENBURG     0.001 71.994  10871',
'MARLAR         0.001 71.995  10872',
'MARGOLIS       0.001 71.996  10873',
'MARCOS         0.001 71.997  10874',
'MALIN          0.001 71.998  10875',
'MAGALLON       0.001 71.999  10876',
'MACKIN         0.001 72.000  10877',
'LOVETTE        0.001 72.001  10878',
'LOUGHRAN       0.001 72.002  10879',
'LORING         0.001 72.003  10880',
'LONGSTREET     0.001 72.004  10881',
'LOISELLE       0.001 72.005  10882',
'LENIHAN        0.001 72.006  10883',
'LAUB           0.001 72.007  10884',
'KUNZE          0.001 72.008  10885',
'KULL           0.001 72.009  10886',
'KOEPKE         0.001 72.009  10887',
'KNIGHTS        0.001 72.010  10888',
'KERWIN         0.001 72.011  10889',
'KALINOWSKI     0.001 72.012  10890',
'KAGAN          0.001 72.013  10891',
'INNIS          0.001 72.014  10892',
'INNES          0.001 72.015  10893',
'HUSBAND        0.001 72.016  10894',
'HOLTZMAN       0.001 72.017  10895',
'HEINEMANN      0.001 72.018  10896',
'HARSHMAN       0.001 72.019  10897',
'HAIDER         0.001 72.020  10898',
'HAACK          0.001 72.021  10899',
'GUSS           0.001 72.022  10900',
'GRONDIN        0.001 72.023  10901',
'GRISSETT       0.001 72.024  10902',
'GREENAWALT     0.001 72.025  10903',
'GRAVEL         0.001 72.026  10904',
'GOUDY          0.001 72.027  10905',
'GOODLETT       0.001 72.028  10906',
'GOLDSTON       0.001 72.029  10907',
'GOKEY          0.001 72.030  10908',
'GOIN           0.001 72.031  10909',
'GARDEA         0.001 72.032  10910',
'GALAVIZ        0.001 72.033  10911',
'GAFFORD        0.001 72.034  10912',
'GABRIELSON     0.001 72.035  10913',
'FURLOW         0.001 72.036  10914',
'FRITCH         0.001 72.037  10915',
'FORDYCE        0.001 72.038  10916',
'FOLGER         0.001 72.039  10917',
'ELIZALDE       0.001 72.040  10918',
'EHLERT         0.001 72.041  10919',
'ECKHOFF        0.001 72.041  10920',
'ECCLESTON      0.001 72.042  10921',
'EALEY          0.001 72.043  10922',
'DUBIN          0.001 72.044  10923',
'DOLPHIN        0.001 72.045  10924',
'DIETER         0.001 72.046  10925',
'DIEMER         0.001 72.047  10926',
'DESCHAMPS      0.001 72.048  10927',
'DELAPENA       0.001 72.049  10928',
'DECICCO        0.001 72.050  10929',
'DEBOLT         0.001 72.051  10930',
'DAUM           0.001 72.052  10931',
'CULLINAN       0.001 72.053  10932',
'CRITTENDON     0.001 72.054  10933',
'CRASE          0.001 72.055  10934',
'COSSEY         0.001 72.056  10935',
'COPPOCK        0.001 72.057  10936',
'COOTS          0.001 72.058  10937',
'COLYER         0.001 72.059  10938',
'COLUMBUS       0.001 72.060  10939',
'CLUCK          0.001 72.061  10940',
'CHAMBERLAND    0.001 72.062  10941',
'CANE           0.001 72.063  10942',
'BURKHEAD       0.001 72.064  10943',
'BUMPUS         0.001 72.065  10944',
'BUCHAN         0.001 72.066  10945',
'BORMAN         0.001 72.067  10946',
'BORK           0.001 72.068  10947',
'BOE            0.001 72.069  10948',
'BIRKHOLZ       0.001 72.070  10949',
'BERARDI        0.001 72.071  10950',
'BENDA          0.001 72.072  10951',
'BEHNKE         0.001 72.073  10952',
'BARTER         0.001 72.073  10953',
'AUER           0.001 72.074  10954',
'AMEZQUITA      0.001 72.075  10955',
'WOTRING        0.001 72.076  10956',
'WIRTZ          0.001 72.077  10957',
'WINGERT        0.001 72.078  10958',
'WIESNER        0.001 72.079  10959',
'WHITESIDES     0.001 72.080  10960',
'WEYANT         0.001 72.081  10961',
'WAINSCOTT      0.001 72.082  10962',
'VIVIAN         0.001 72.083  10963',
'VENEZIA        0.001 72.084  10964',
'VARNELL        0.001 72.085  10965',
'TUSSEY         0.001 72.086  10966',
'TRAINER        0.001 72.087  10967',
'TOLL           0.001 72.088  10968',
'THURLOW        0.001 72.089  10969',
'TACK           0.001 72.090  10970',
'TABARES        0.001 72.091  10971',
'STIVER         0.001 72.092  10972',
'STELL          0.001 72.093  10973',
'STARKE         0.001 72.094  10974',
'STANHOPE       0.001 72.095  10975',
'STANEK         0.001 72.095  10976',
'SISLER         0.001 72.096  10977',
'SINNOTT        0.001 72.097  10978',
'SIDNEY         0.001 72.098  10979',
'SICILIANO      0.001 72.099  10980',
'SHEHAN         0.001 72.100  10981',
'SELPH          0.001 72.101  10982',
'SEAGER         0.001 72.102  10983',
'SCURLOCK       0.001 72.103  10984',
'SCRANTON       0.001 72.104  10985',
'SANTUCCI       0.001 72.105  10986',
'SANTANGELO     0.001 72.106  10987',
'SALTSMAN       0.001 72.107  10988',
'RUEL           0.001 72.108  10989',
'ROPP           0.001 72.109  10990',
'ROLLING        0.001 72.110  10991',
'ROGGE          0.001 72.111  10992',
'RETTIG         0.001 72.112  10993',
'RENWICK        0.001 72.113  10994',
'REIDY          0.001 72.114  10995',
'REIDER         0.001 72.115  10996',
'REDFIELD       0.001 72.116  10997',
'QUAM           0.001 72.116  10998',
'PREMO          0.001 72.117  10999',
'PORT           0.001 72.118  11000',
'PIER           0.001 72.119  11001',
'PEET           0.001 72.120  11002',
'PARENTE        0.001 72.121  11003',
'PAOLUCCI       0.001 72.122  11004',
'PAN            0.001 72.123  11005',
'PALMQUIST      0.001 72.124  11006',
'ORME           0.001 72.125  11007',
'OHLER          0.001 72.126  11008',
'OGG            0.001 72.127  11009',
'NETHERTON      0.001 72.128  11010',
'MUTCHLER       0.001 72.129  11011',
'MORITA         0.001 72.130  11012',
'MISTRETTA      0.001 72.131  11013',
'MINNIS         0.001 72.132  11014',
'MIDDENDORF     0.001 72.133  11015',
'MENZEL         0.001 72.134  11016',
'MENDOSA        0.001 72.135  11017',
'MENDELSON      0.001 72.136  11018',
'MEAUX          0.001 72.136  11019',
'MCSPADDEN      0.001 72.137  11020',
'MCQUAID        0.001 72.138  11021',
'MCNATT         0.001 72.139  11022',
'MANIGAULT      0.001 72.140  11023',
'MANEY          0.001 72.141  11024',
'MAGER          0.001 72.142  11025',
'LUNG           0.001 72.143  11026',
'LUKES          0.001 72.144  11027',
'LOPRESTI       0.001 72.145  11028',
'LIRIANO        0.001 72.146  11029',
'LIPTON         0.001 72.147  11030',
'LETSON         0.001 72.148  11031',
'LECHUGA        0.001 72.149  11032',
'LAZENBY        0.001 72.150  11033',
'LAURIA         0.001 72.151  11034',
'LARIMORE       0.001 72.152  11035',
'KWOK           0.001 72.153  11036',
'KWAK           0.001 72.154  11037',
'KRUPP          0.001 72.155  11038',
'KRUPA          0.001 72.156  11039',
'KRUM           0.001 72.157  11040',
'KOPEC          0.001 72.157  11041',
'KINCHEN        0.001 72.158  11042',
'KIFER          0.001 72.159  11043',
'KERNEY         0.001 72.160  11044',
'KERNER         0.001 72.161  11045',
'KENNISON       0.001 72.162  11046',
'KEGLEY         0.001 72.163  11047',
'KAYS           0.001 72.164  11048',
'KARCHER        0.001 72.165  11049',
'JUSTIS         0.001 72.166  11050',
'JOHSON         0.001 72.167  11051',
'JELLISON       0.001 72.168  11052',
'JANKE          0.001 72.169  11053',
'ISABELL        0.001 72.170  11054',
'HUSKINS        0.001 72.171  11055',
'HOLZMAN        0.001 72.172  11056',
'HOLLIE         0.001 72.173  11057',
'HINOJOS        0.001 72.174  11058',
'HIGHLAND       0.001 72.175  11059',
'HEFLEY         0.001 72.176  11060',
'HE             0.001 72.177  11061',
'HATMAKER       0.001 72.178  11062',
'HARTE          0.001 72.178  11063',
'HALLOWAY       0.001 72.179  11064',
'HALLENBECK     0.001 72.180  11065',
'GOODWYN        0.001 72.181  11066',
'GLASPIE        0.001 72.182  11067',
'GILLIAN        0.001 72.183  11068',
'GEISE          0.001 72.184  11069',
'FULLWOOD       0.001 72.185  11070',
'FRYMAN         0.001 72.186  11071',
'FREW           0.001 72.187  11072',
'FRAKES         0.001 72.188  11073',
'FRAIRE         0.001 72.189  11074',
'FARRER         0.001 72.190  11075',
'ENLOW          0.001 72.191  11076',
'ENGEN          0.001 72.192  11077',
'ELLZEY         0.001 72.193  11078',
'ECKLES         0.001 72.194  11079',
'EARLES         0.001 72.195  11080',
'EALY           0.001 72.196  11081',
'DUNKLEY        0.001 72.197  11082',
'DRINKARD       0.001 72.198  11083',
'DREILING       0.001 72.198  11084',
'DRAEGER        0.001 72.199  11085',
'DINARDO        0.001 72.200  11086',
'DILLS          0.001 72.201  11087',
'DESROCHES      0.001 72.202  11088',
'DESANTIAGO     0.001 72.203  11089',
'CURRENT        0.001 72.204  11090',
'CURLEE         0.001 72.205  11091',
'CRUMBLEY       0.001 72.206  11092',
'CRITCHLOW      0.001 72.207  11093',
'COURY          0.001 72.208  11094',
'COURTRIGHT     0.001 72.209  11095',
'COFFIELD       0.001 72.210  11096',
'CLEEK          0.001 72.211  11097',
'CHRISTEN       0.001 72.212  11098',
'CHARPENTIER    0.001 72.213  11099',
'CARDONE        0.001 72.214  11100',
'CAPLES         0.001 72.215  11101',
'CANTIN         0.001 72.216  11102',
'BUNTIN         0.001 72.217  11103',
'BUGBEE         0.001 72.218  11104',
'BRINKERHOFF    0.001 72.219  11105',
'BRACKIN        0.001 72.219  11106',
'BOURLAND       0.001 72.220  11107',
'BOHL           0.001 72.221  11108',
'BOGDAN         0.001 72.222  11109',
'BLASSINGAME    0.001 72.223  11110',
'BEACHAM        0.001 72.224  11111',
'BANNING        0.001 72.225  11112',
'AUGUSTE        0.001 72.226  11113',
'ANDREASEN      0.001 72.227  11114',
'AMANN          0.001 72.228  11115',
'ALMON          0.001 72.229  11116',
'ALEJO          0.001 72.230  11117',
'ADELMAN        0.001 72.231  11118',
'ABSTON         0.001 72.232  11119',
'ZENO           0.001 72.233  11120',
'YERGER         0.001 72.234  11121',
'WYMER          0.001 72.235  11122',
'WOODBERRY      0.001 72.236  11123',
'WINDLEY        0.001 72.237  11124',
'WHITEAKER      0.001 72.237  11125',
'WESTFIELD      0.001 72.238  11126',
'WEIBEL         0.001 72.239  11127',
'WANNER         0.001 72.240  11128',
'WALDREP        0.001 72.241  11129',
'VITAL          0.001 72.242  11130',
'VILLANI        0.001 72.243  11131',
'VANARSDALE     0.001 72.244  11132',
'UTTERBACK      0.001 72.245  11133',
'UPDIKE         0.001 72.246  11134',
'TRIGGS         0.001 72.247  11135',
'TOPETE         0.001 72.248  11136',
'TOLAR          0.001 72.249  11137',
'TIGNER         0.001 72.250  11138',
'THOMS          0.001 72.251  11139',
'TAUBER         0.001 72.252  11140',
'TARVIN         0.001 72.253  11141',
'TALLY          0.001 72.253  11142',
'SWINEY         0.001 72.254  11143',
'SWEATMAN       0.001 72.255  11144',
'STUDEBAKER     0.001 72.256  11145',
'STREETS        0.001 72.257  11146',
'STENNETT       0.001 72.258  11147',
'STATES         0.001 72.259  11148',
'STARRETT       0.001 72.260  11149',
'STANNARD       0.001 72.261  11150',
'STALVEY        0.001 72.262  11151',
'SONNENBERG     0.001 72.263  11152',
'SMITHEY        0.001 72.264  11153',
'SIEBER         0.001 72.265  11154',
'SICKLES        0.001 72.266  11155',
'SHINAULT       0.001 72.267  11156',
'SEGARS         0.001 72.268  11157',
'SANGER         0.001 72.268  11158',
'SALMERON       0.001 72.269  11159',
'ROTHE          0.001 72.270  11160',
'RIZZI          0.001 72.271  11161',
'RINE           0.001 72.272  11162',
'RICARD         0.001 72.273  11163',
'RESTREPO       0.001 72.274  11164',
'RALLS          0.001 72.275  11165',
'RAGUSA         0.001 72.276  11166',
'QUIROGA        0.001 72.277  11167',
'PING           0.001 72.278  11168',
'PHUNG          0.001 72.279  11169',
'PERO           0.001 72.280  11170',
'PEGG           0.001 72.281  11171',
'PAVLIK         0.001 72.282  11172',
'PAPENFUSS      0.001 72.283  11173',
'OROPEZA        0.001 72.283  11174',
'OMAR           0.001 72.284  11175',
'OKANE          0.001 72.285  11176',
'NEER           0.001 72.286  11177',
'NEE            0.001 72.287  11178',
'NATHANIEL      0.001 72.288  11179',
'MUDGE          0.001 72.289  11180',
'MOZINGO        0.001 72.290  11181',
'MOLINARO       0.001 72.291  11182',
'MIKEL          0.001 72.292  11183',
'MCVICKER       0.001 72.293  11184',
'MCGARVEY       0.001 72.294  11185',
'MCFALLS        0.001 72.295  11186',
'MCCRANEY       0.001 72.296  11187',
'MATUS          0.001 72.297  11188',
'MAGERS         0.001 72.298  11189',
'LLANOS         0.001 72.298  11190',
'LIVERMORE      0.001 72.299  11191',
'LISS           0.001 72.300  11192',
'LINEHAN        0.001 72.301  11193',
'LETO           0.001 72.302  11194',
'LEITNER        0.001 72.303  11195',
'LAYMON         0.001 72.304  11196',
'LAWING         0.001 72.305  11197',
'LAWERENCE      0.001 72.306  11198',
'LACOURSE       0.001 72.307  11199',
'KWONG          0.001 72.308  11200',
'KOLLAR         0.001 72.309  11201',
'KNEELAND       0.001 72.310  11202',
'KEO            0.001 72.311  11203',
'KENNETT        0.001 72.312  11204',
'KELLETT        0.001 72.313  11205',
'KANGAS         0.001 72.313  11206',
'JANZEN         0.001 72.314  11207',
'HUTTER         0.001 72.315  11208',
'HUSE           0.001 72.316  11209',
'HULING         0.001 72.317  11210',
'HOSS           0.001 72.318  11211',
'HOHN           0.001 72.319  11212',
'HOFMEISTER     0.001 72.320  11213',
'HEWES          0.001 72.321  11214',
'HERN           0.001 72.322  11215',
'HARJO          0.001 72.323  11216',
'HABIB          0.001 72.324  11217',
'GUST           0.001 72.325  11218',
'GUICE          0.001 72.326  11219',
'GRULLON        0.001 72.327  11220',
'GREGGS         0.001 72.328  11221',
'GRAYER         0.001 72.328  11222',
'GRANIER        0.001 72.329  11223',
'GRABLE         0.001 72.330  11224',
'GOWDY          0.001 72.331  11225',
'GIANNINI       0.001 72.332  11226',
'GETCHELL       0.001 72.333  11227',
'GARTMAN        0.001 72.334  11228',
'GARNICA        0.001 72.335  11229',
'GANEY          0.001 72.336  11230',
'GALLIMORE      0.001 72.337  11231',
'FRAY           0.001 72.338  11232',
'FETTERS        0.001 72.339  11233',
'FERGERSON      0.001 72.340  11234',
'FARLOW         0.001 72.341  11235',
'FAGUNDES       0.001 72.342  11236',
'EXLEY          0.001 72.343  11237',
'ESTEVES        0.001 72.343  11238',
'ENDERS         0.001 72.344  11239',
'EDENFIELD      0.001 72.345  11240',
'EASTERWOOD     0.001 72.346  11241',
'DRAKEFORD      0.001 72.347  11242',
'DIPASQUALE     0.001 72.348  11243',
'DESOUSA        0.001 72.349  11244',
'DESHIELDS      0.001 72.350  11245',
'DEETER         0.001 72.351  11246',
'DEDMON         0.001 72.352  11247',
'DEBORD         0.001 72.353  11248',
'DAUGHTERY      0.001 72.354  11249',
'CUTTS          0.001 72.355  11250',
'COURTEMANCHE   0.001 72.356  11251',
'COURSEY        0.001 72.357  11252',
'COPPLE         0.001 72.358  11253',
'COOMES         0.001 72.358  11254',
'COLLIS         0.001 72.359  11255',
'COLL           0.001 72.360  11256',
'COGBURN        0.001 72.361  11257',
'CLOPTON        0.001 72.362  11258',
'CHOQUETTE      0.001 72.363  11259',
'CHAIDEZ        0.001 72.364  11260',
'CASTREJON      0.001 72.365  11261',
'CALHOON        0.001 72.366  11262',
'BURBACH        0.001 72.367  11263',
'BULLOCH        0.001 72.368  11264',
'BUCHMAN        0.001 72.369  11265',
'BRUHN          0.001 72.370  11266',
'BOHON          0.001 72.371  11267',
'BLOUGH         0.001 72.372  11268',
'BIEN           0.001 72.373  11269',
'BELMONT        0.001 72.374  11270',
'BAYNES         0.001 72.374  11271',
'BARSTOW        0.001 72.375  11272',
'ZEMAN          0.001 72.376  11273',
'ZACKERY        0.001 72.377  11274',
'YARDLEY        0.001 72.378  11275',
'YAMASHITA      0.001 72.379  11276',
'WULFF          0.001 72.380  11277',
'WILKEN         0.001 72.381  11278',
'WILIAMS        0.001 72.382  11279',
'WICKERSHAM     0.001 72.383  11280',
'WIBLE          0.001 72.384  11281',
'WHIPKEY        0.001 72.385  11282',
'WEDGEWORTH     0.001 72.386  11283',
'WALMSLEY       0.001 72.386  11284',
'WALKUP         0.001 72.387  11285',
'VREELAND       0.001 72.388  11286',
'VERRILL        0.001 72.389  11287',
'VALERA         0.001 72.390  11288',
'UMANA          0.001 72.391  11289',
'TRAUB          0.001 72.392  11290',
'TIMOTHY        0.001 72.393  11291',
'SWINGLE        0.001 72.394  11292',
'SWING          0.001 72.395  11293',
'SUMMEY         0.001 72.396  11294',
'STROUPE        0.001 72.397  11295',
'STOCKSTILL     0.001 72.398  11296',
'STEFFEY        0.001 72.398  11297',
'STEFANSKI      0.001 72.399  11298',
'STATLER        0.001 72.400  11299',
'STAPP          0.001 72.401  11300',
'SPEIGHTS       0.001 72.402  11301',
'SONS           0.001 72.403  11302',
'SOLARI         0.001 72.404  11303',
'SODERBERG      0.001 72.405  11304',
'SLICK          0.001 72.406  11305',
'SHUNK          0.001 72.407  11306',
'SHOREY         0.001 72.408  11307',
'SHEWMAKER      0.001 72.409  11308',
'SHEILDS        0.001 72.409  11309',
'SCHIFFER       0.001 72.410  11310',
'SCHANK         0.001 72.411  11311',
'SCHAFF         0.001 72.412  11312',
'SAGERS         0.001 72.413  11313',
'RODGER         0.001 72.414  11314',
'ROCHON         0.001 72.415  11315',
'RISER          0.001 72.416  11316',
'RICKETT        0.001 72.417  11317',
'REALE          0.001 72.418  11318',
'RAGLIN         0.001 72.419  11319',
'POON           0.001 72.420  11320',
'POLLY          0.001 72.421  11321',
'POLEN          0.001 72.421  11322',
'PLATA          0.001 72.422  11323',
'PITCOCK        0.001 72.423  11324',
'PERCIVAL       0.001 72.424  11325',
'PALEN          0.001 72.425  11326',
'PAHL           0.001 72.426  11327',
'ORONA          0.001 72.427  11328',
'OBERLE         0.001 72.428  11329',
'NOCERA         0.001 72.429  11330',
'NAVAS          0.001 72.430  11331',
'NAULT          0.001 72.431  11332',
'MULLINGS       0.001 72.432  11333',
'MOUSER         0.001 72.433  11334',
'MOOS           0.001 72.433  11335',
'MONTEJANO      0.001 72.434  11336',
'MONREAL        0.001 72.435  11337',
'MINICK         0.001 72.436  11338',
'MIDDLEBROOK    0.001 72.437  11339',
'MEECE          0.001 72.438  11340',
'MCMILLION      0.001 72.439  11341',
'MCCULLEN       0.001 72.440  11342',
'MAUCK          0.001 72.441  11343',
'MARSHBURN      0.001 72.442  11344',
'MAILLET        0.001 72.443  11345',
'MAHANEY        0.001 72.444  11346',
'MAGNER         0.001 72.445  11347',
'MACLIN         0.001 72.445  11348',
'LUCEY          0.001 72.446  11349',
'LITTERAL       0.001 72.447  11350',
'LIPPINCOTT     0.001 72.448  11351',
'LEITE          0.001 72.449  11352',
'LEIS           0.001 72.450  11353',
'LEAKS          0.001 72.451  11354',
'LAURIE         0.001 72.452  11355',
'LAMARRE        0.001 72.453  11356',
'KOST           0.001 72.454  11357',
'JURGENS        0.001 72.455  11358',
'JESUS          0.001 72.456  11359',
'JERKINS        0.001 72.457  11360',
'JAGER          0.001 72.457  11361',
'HURWITZ        0.001 72.458  11362',
'HUGHLEY        0.001 72.459  11363',
'HOTALING       0.001 72.460  11364',
'HORSTMAN       0.001 72.461  11365',
'HOHMAN         0.001 72.462  11366',
'HOCKER         0.001 72.463  11367',
'HIVELY         0.001 72.464  11368',
'HIPPS          0.001 72.465  11369',
'HILE           0.001 72.466  11370',
'HESSLER        0.001 72.467  11371',
'HERMANSON      0.001 72.468  11372',
'HEPWORTH       0.001 72.469  11373',
'HENN           0.001 72.469  11374',
'HELLAND        0.001 72.470  11375',
'HEDLUND        0.001 72.471  11376',
'HARKLESS       0.001 72.472  11377',
'HAIGLER        0.001 72.473  11378',
'GUTIEREZ       0.001 72.474  11379',
'GUM            0.001 72.475  11380',
'GRINDSTAFF     0.001 72.476  11381',
'GLANTZ         0.001 72.477  11382',
'GIARDINA       0.001 72.478  11383',
'GERKEN         0.001 72.479  11384',
'GADSDEN        0.001 72.480  11385',
'FREDA          0.001 72.480  11386',
'FINNERTY       0.001 72.481  11387',
'FELD           0.001 72.482  11388',
'FARNUM         0.001 72.483  11389',
'ENCINAS        0.001 72.484  11390',
'ELTON          0.001 72.485  11391',
'EAGER          0.001 72.486  11392',
'DRAKES         0.001 72.487  11393',
'DENNIE         0.001 72.488  11394',
'CUTLIP         0.001 72.489  11395',
'CURTSINGER     0.001 72.490  11396',
'COUTO          0.001 72.491  11397',
'CORTINAS       0.001 72.492  11398',
'CORBY          0.001 72.492  11399',
'CHOICE         0.001 72.493  11400',
'CHIASSON       0.001 72.494  11401',
'CARLE          0.001 72.495  11402',
'CARBALLO       0.001 72.496  11403',
'BRINDLE        0.001 72.497  11404',
'BORUM          0.001 72.498  11405',
'BOBER          0.001 72.499  11406',
'BLAGG          0.001 72.500  11407',
'BIRK           0.001 72.501  11408',
'BERTHIAUME     0.001 72.502  11409',
'BEAHM          0.001 72.503  11410',
'BATRES         0.001 72.504  11411',
'BASNIGHT       0.001 72.504  11412',
'BARBARA        0.001 72.505  11413',
'BACKES         0.001 72.506  11414',
'AXTELL         0.001 72.507  11415',
'AUST           0.001 72.508  11416',
'AU             0.001 72.509  11417',
'ATTERBERRY     0.001 72.510  11418',
'ALVARES        0.001 72.511  11419',
'ALT            0.001 72.512  11420',
'ALEGRIA        0.001 72.513  11421',
'ABE            0.001 72.514  11422',
'YOW            0.001 72.515  11423',
'YIP            0.001 72.516  11424',
'WOODELL        0.001 72.516  11425',
'WOJCIECHOWSKI  0.001 72.517  11426',
'WINFREE        0.001 72.518  11427',
'WINBUSH        0.001 72.519  11428',
'WIEST          0.001 72.520  11429',
'WESNER         0.001 72.521  11430',
'WAX            0.001 72.522  11431',
'WAMSLEY        0.001 72.523  11432',
'WAKEMAN        0.001 72.524  11433',
'VERNER         0.001 72.525  11434',
'TRUEX          0.001 72.525  11435',
'TRAFTON        0.001 72.526  11436',
'TOMAN          0.001 72.527  11437',
'THORSEN        0.001 72.528  11438',
'THOR           0.001 72.529  11439',
'THEUS          0.001 72.530  11440',
'TELLIER        0.001 72.531  11441',
'TALLANT        0.001 72.532  11442',
'SZETO          0.001 72.533  11443',
'STROPE         0.001 72.534  11444',
'STILLS         0.001 72.535  11445',
'STAGE          0.001 72.535  11446',
'SORG           0.001 72.536  11447',
'SIMKINS        0.001 72.537  11448',
'SHUEY          0.001 72.538  11449',
'SHAUL          0.001 72.539  11450',
'SERVIN         0.001 72.540  11451',
'SERIO          0.001 72.541  11452',
'SERAFIN        0.001 72.542  11453',
'SENIOR         0.001 72.543  11454',
'SEBRING        0.001 72.544  11455',
'SALGUERO       0.001 72.544  11456',
'SABA           0.001 72.545  11457',
'RYERSON        0.001 72.546  11458',
'RUDDER         0.001 72.547  11459',
'RUARK          0.001 72.548  11460',
'ROTHER         0.001 72.549  11461',
'ROHRBAUGH      0.001 72.550  11462',
'ROHRBACH       0.001 72.551  11463',
'ROHAN          0.001 72.552  11464',
'ROGERSON       0.001 72.553  11465',
'RISHER         0.001 72.554  11466',
'RIGG           0.001 72.554  11467',
'REESER         0.001 72.555  11468',
'PRYCE          0.001 72.556  11469',
'PROKOP         0.001 72.557  11470',
'PRINS          0.001 72.558  11471',
'PRIEBE         0.001 72.559  11472',
'PREJEAN        0.001 72.560  11473',
'PINHEIRO       0.001 72.561  11474',
'PETRONE        0.001 72.562  11475',
'PETRI          0.001 72.563  11476',
'PENSON         0.001 72.564  11477',
'PEARLMAN       0.001 72.564  11478',
'PARIKH         0.001 72.565  11479',
'PAL            0.001 72.566  11480',
'PAIR           0.001 72.567  11481',
'NATOLI         0.001 72.568  11482',
'MURAKAMI       0.001 72.569  11483',
'MULLIKIN       0.001 72.570  11484',
'MULLANE        0.001 72.571  11485',
'MOTES          0.001 72.572  11486',
'MORNINGSTAR    0.001 72.573  11487',
'MONKS          0.001 72.573  11488',
'MCVEIGH        0.001 72.574  11489',
'MCGRADY        0.001 72.575  11490',
'MCGAUGHEY      0.001 72.576  11491',
'MCCURLEY       0.001 72.577  11492',
'MASI           0.001 72.578  11493',
'MARCHAN        0.001 72.579  11494',
'MANSKE         0.001 72.580  11495',
'MAINE          0.001 72.581  11496',
'MAEZ           0.001 72.582  11497',
'LUSBY          0.001 72.583  11498',
'LINDE          0.001 72.583  11499',
'LILE           0.001 72.584  11500',
'LIKENS         0.001 72.585  11501',
'LICON          0.001 72.586  11502',
'LEROUX         0.001 72.587  11503',
'LEMAIRE        0.001 72.588  11504',
'LEGETTE        0.001 72.589  11505',
'LAX            0.001 72.590  11506',
'LASKEY         0.001 72.591  11507',
'LAPRADE        0.001 72.592  11508',
'LAPLANT        0.001 72.593  11509',
'LADY           0.001 72.593  11510',
'KOLAR          0.001 72.594  11511',
'KITTREDGE      0.001 72.595  11512',
'KINLEY         0.001 72.596  11513',
'KERBER         0.001 72.597  11514',
'KANAGY         0.001 72.598  11515',
'JOHANNES       0.001 72.599  11516',
'JETTON         0.001 72.600  11517',
'JAYNE          0.001 72.601  11518',
'JANUARY        0.001 72.602  11519',
'JANIK          0.001 72.602  11520',
'IPPOLITO       0.001 72.603  11521',
'INOUYE         0.001 72.604  11522',
'HUNSINGER      0.001 72.605  11523',
'HOWLEY         0.001 72.606  11524',
'HOWERY         0.001 72.607  11525',
'HORRELL        0.001 72.608  11526',
'HOOSIER        0.001 72.609  11527',
'HOLTHAUS       0.001 72.610  11528',
'HINER          0.001 72.611  11529',
'HILSON         0.001 72.612  11530',
'HILDERBRAND    0.001 72.612  11531',
'HASAN          0.001 72.613  11532',
'HARTZLER       0.001 72.614  11533',
'HARNISH        0.001 72.615  11534',
'HARADA         0.001 72.616  11535',
'HANSFORD       0.001 72.617  11536',
'HALLIGAN       0.001 72.618  11537',
'HAGEDORN       0.001 72.619  11538',
'GWYNN          0.001 72.620  11539',
'GUDINO         0.001 72.621  11540',
'GREENSTEIN     0.001 72.622  11541',
'GREEAR         0.001 72.622  11542',
'GRACEY         0.001 72.623  11543',
'GOUDEAU        0.001 72.624  11544',
'GOSE           0.001 72.625  11545',
'GOODNER        0.001 72.626  11546',
'GINSBURG       0.001 72.627  11547',
'GERTH          0.001 72.628  11548',
'GERNER         0.001 72.629  11549',
'FYFE           0.001 72.630  11550',
'FUJII          0.001 72.631  11551',
'FRIER          0.001 72.631  11552',
'FRENETTE       0.001 72.632  11553',
'FOLMAR         0.001 72.633  11554',
'FLEISHER       0.001 72.634  11555',
'FLEISCHMANN    0.001 72.635  11556',
'FETZER         0.001 72.636  11557',
'FERN           0.001 72.637  11558',
'EISENMAN       0.001 72.638  11559',
'EARHART        0.001 72.639  11560',
'DUPUY          0.001 72.640  11561',
'DUNKELBERGER   0.001 72.641  11562',
'DRUMMER        0.001 72.641  11563',
'DREXLER        0.001 72.642  11564',
'DILLINGER      0.001 72.643  11565',
'DILBECK        0.001 72.644  11566',
'DIANA          0.001 72.645  11567',
'DEWALD         0.001 72.646  11568',
'DEMBY          0.001 72.647  11569',
'DEFORD         0.001 72.648  11570',
'DANIELL        0.001 72.649  11571',
'DAKE           0.001 72.650  11572',
'CRAINE         0.001 72.651  11573',
'COMO           0.001 72.651  11574',
'CLEVER         0.001 72.652  11575',
'CHESNUT        0.001 72.653  11576',
'CASADY         0.001 72.654  11577',
'CARSTENS       0.001 72.655  11578',
'CARRICK        0.001 72.656  11579',
'CARINO         0.001 72.657  11580',
'CARIGNAN       0.001 72.658  11581',
'CANCHOLA       0.001 72.659  11582',
'CALE           0.001 72.660  11583',
'BUSHONG        0.001 72.660  11584',
'BURMAN         0.001 72.661  11585',
'BUONO          0.001 72.662  11586',
'BROWNLOW       0.001 72.663  11587',
'BROACH         0.001 72.664  11588',
'BRITTEN        0.001 72.665  11589',
'BRICKHOUSE     0.001 72.666  11590',
'BOYDEN         0.001 72.667  11591',
'BOULTON        0.001 72.668  11592',
'BORNE          0.001 72.669  11593',
'BORLAND        0.001 72.670  11594',
'BOHRER         0.001 72.670  11595',
'BLUBAUGH       0.001 72.671  11596',
'BEVER          0.001 72.672  11597',
'BERGGREN       0.001 72.673  11598',
'BENEVIDES      0.001 72.674  11599',
'AROCHO         0.001 72.675  11600',
'ARENDS         0.001 72.676  11601',
'AMEZCUA        0.001 72.677  11602',
'ALMENDAREZ     0.001 72.678  11603',
'ZALEWSKI       0.001 72.679  11604',
'WITZEL         0.001 72.679  11605',
'WINKFIELD      0.001 72.680  11606',
'WILHOITE       0.001 72.681  11607',
'VARA           0.001 72.682  11608',
'VANGUNDY       0.001 72.683  11609',
'VANFLEET       0.001 72.684  11610',
'VANETTEN       0.001 72.685  11611',
'VANDERGRIFF    0.001 72.686  11612',
'URBANSKI       0.001 72.687  11613',
'TYRELL         0.001 72.687  11614',
'TROIANO        0.001 72.688  11615',
'TICKLE         0.001 72.689  11616',
'THIBODAUX      0.001 72.690  11617',
'STRAUS         0.001 72.691  11618',
'STONEKING      0.001 72.692  11619',
'STJEAN         0.001 72.693  11620',
'STILLINGS      0.001 72.694  11621',
'STIFF          0.001 72.695  11622',
'STANGE         0.001 72.696  11623',
'SQUARE         0.001 72.696  11624',
'SPEICHER       0.001 72.697  11625',
'SPEEGLE        0.001 72.698  11626',
'SOWA           0.001 72.699  11627',
'SMELTZER       0.001 72.700  11628',
'SLAWSON        0.001 72.701  11629',
'SIMMONDS       0.001 72.702  11630',
'SHUTTLEWORTH   0.001 72.703  11631',
'SERPA          0.001 72.704  11632',
'SENGER         0.001 72.704  11633',
'SEIDMAN        0.001 72.705  11634',
'SCHWEIGER      0.001 72.706  11635',
'SCHLOSS        0.001 72.707  11636',
'SCHIMMEL       0.001 72.708  11637',
'SCHECHTER      0.001 72.709  11638',
'SAYLER         0.001 72.710  11639',
'SABB           0.001 72.711  11640',
'SABATINI       0.001 72.712  11641',
'RONAN          0.001 72.712  11642',
'RODIGUEZ       0.001 72.713  11643',
'RIGGLEMAN      0.001 72.714  11644',
'RICHINS        0.001 72.715  11645',
'REEP           0.001 72.716  11646',
'REAMER         0.001 72.717  11647',
'PRUNTY         0.001 72.718  11648',
'PORATH         0.001 72.719  11649',
'PLUNK          0.001 72.720  11650',
'PILAND         0.001 72.720  11651',
'PHILBROOK      0.001 72.721  11652',
'PETTITT        0.001 72.722  11653',
'PERNA          0.001 72.723  11654',
'PERALEZ        0.001 72.724  11655',
'PASCALE        0.001 72.725  11656',
'PADULA         0.001 72.726  11657',
'OBOYLE         0.001 72.727  11658',
'NIVENS         0.001 72.728  11659',
'NICKOLS        0.001 72.728  11660',
'MURPH          0.001 72.729  11661',
'MUNDT          0.001 72.730  11662',
'MUNDEN         0.001 72.731  11663',
'MONTIJO        0.001 72.732  11664',
'MCMANIS        0.001 72.733  11665',
'MCGRANE        0.001 72.734  11666',
'MCCRIMMON      0.001 72.735  11667',
'MANZI          0.001 72.736  11668',
'MANGOLD        0.001 72.736  11669',
'MALICK         0.001 72.737  11670',
'MAHAR          0.001 72.738  11671',
'MADDOCK        0.001 72.739  11672',
'LUST           0.001 72.740  11673',
'LOSEY          0.001 72.741  11674',
'LOOP           0.001 72.742  11675',
'LITTEN         0.001 72.743  11676',
'LINER          0.001 72.744  11677',
'LEFF           0.001 72.744  11678',
'LEEDY          0.001 72.745  11679',
'LEAVELL        0.001 72.746  11680',
'LADUE          0.001 72.747  11681',
'KRAHN          0.001 72.748  11682',
'KLUGE          0.001 72.749  11683',
'JUNKER         0.001 72.750  11684',
'IVERSEN        0.001 72.751  11685',
'IMLER          0.001 72.752  11686',
'HURTT          0.001 72.752  11687',
'HUIZAR         0.001 72.753  11688',
'HUBBERT        0.001 72.754  11689',
'HOWINGTON      0.001 72.755  11690',
'HOLLOMON       0.001 72.756  11691',
'HOLDREN        0.001 72.757  11692',
'HOISINGTON     0.001 72.758  11693',
'HISE           0.001 72.759  11694',
'HEIDEN         0.001 72.760  11695',
'HAUGE          0.001 72.760  11696',
'HARTIGAN       0.001 72.761  11697',
'GUTIRREZ       0.001 72.762  11698',
'GRIFFIE        0.001 72.763  11699',
'GREENHILL      0.001 72.764  11700',
'GRATTON        0.001 72.765  11701',
'GRANATA        0.001 72.766  11702',
'GOTTFRIED      0.001 72.767  11703',
'GERTZ          0.001 72.768  11704',
'GAUTREAUX      0.001 72.769  11705',
'FURRY          0.001 72.769  11706',
'FUREY          0.001 72.770  11707',
'FUNDERBURG     0.001 72.771  11708',
'FLIPPEN        0.001 72.772  11709',
'FITZGIBBON     0.001 72.773  11710',
'FERGUS         0.001 72.774  11711',
'FELICE         0.001 72.775  11712',
'EYE            0.001 72.776  11713',
'DYAR           0.001 72.777  11714',
'DRUCKER        0.001 72.777  11715',
'DONOGHUE       0.001 72.778  11716',
'DILDY          0.001 72.779  11717',
'DEVERS         0.001 72.780  11718',
'DETWEILER      0.001 72.781  11719',
'DESPRES        0.001 72.782  11720',
'DENBY          0.001 72.783  11721',
'DEGEORGE       0.001 72.784  11722',
'CUETO          0.001 72.785  11723',
'CRANSTON       0.001 72.785  11724',
'COURVILLE      0.001 72.786  11725',
'CLUKEY         0.001 72.787  11726',
'CIRILLO        0.001 72.788  11727',
'CHON           0.001 72.789  11728',
'CHIVERS        0.001 72.790  11729',
'CAUDILLO       0.001 72.791  11730',
'CATT           0.001 72.792  11731',
'BUTERA         0.001 72.793  11732',
'BULLUCK        0.001 72.793  11733',
'BUCKMASTER     0.001 72.794  11734',
'BRAUNSTEIN     0.001 72.795  11735',
'BRACAMONTE     0.001 72.796  11736',
'BOURDEAU       0.001 72.797  11737',
'BORDER         0.001 72.798  11738',
'BONNETTE       0.001 72.799  11739',
'BOBADILLA      0.001 72.800  11740',
'BOAZ           0.001 72.801  11741',
'BLACKLEDGE     0.001 72.801  11742',
'BESHEARS       0.001 72.802  11743',
'BERNHARD       0.001 72.803  11744',
'BERGESON       0.001 72.804  11745',
'BAVER          0.001 72.805  11746',
'BARTHEL        0.001 72.806  11747',
'BALSAMO        0.001 72.807  11748',
'BAK            0.001 72.808  11749',
'AZIZ           0.001 72.809  11750',
'AWAD           0.001 72.809  11751',
'AUTHEMENT      0.001 72.810  11752',
'ALTOM          0.001 72.811  11753',
'ALTIERI        0.001 72.812  11754',
'ABELS          0.001 72.813  11755',
'ZIGLER         0.001 72.814  11756',
'ZHU            0.001 72.815  11757',
'YOUNKER        0.001 72.816  11758',
'YEOMANS        0.001 72.817  11759',
'YEARWOOD       0.001 72.817  11760',
'WURSTER        0.001 72.818  11761',
'WINGET         0.001 72.819  11762',
'WHITSETT       0.001 72.820  11763',
'WECHSLER       0.001 72.821  11764',
'WEATHERWAX     0.001 72.822  11765',
'WATHEN         0.001 72.823  11766',
'WARRINER       0.001 72.824  11767',
'WANAMAKER      0.001 72.824  11768',
'WALRAVEN       0.001 72.825  11769',
'VIENS          0.001 72.826  11770',
'VANDEMARK      0.001 72.827  11771',
'VANCAMP        0.001 72.828  11772',
'UCHIDA         0.001 72.829  11773',
'TRIANA         0.001 72.830  11774',
'TINOCO         0.001 72.831  11775',
'TERPSTRA       0.001 72.831  11776',
'TELLIS         0.001 72.832  11777',
'TARIN          0.001 72.833  11778',
'TARANTO        0.001 72.834  11779',
'TAKACS         0.001 72.835  11780',
'STUDDARD       0.001 72.836  11781',
'STRUTHERS      0.001 72.837  11782',
'STROUT         0.001 72.838  11783',
'STILLER        0.001 72.838  11784',
'SPATARO        0.001 72.839  11785',
'SODERQUIST     0.001 72.840  11786',
'SLIGER         0.001 72.841  11787',
'SILBERMAN      0.001 72.842  11788',
'SHURTLEFF      0.001 72.843  11789',
'SHEETZ         0.001 72.844  11790',
'SCHILLINGER    0.001 72.845  11791',
'RITCH          0.001 72.845  11792',
'REIF           0.001 72.846  11793',
'RAYBON         0.001 72.847  11794',
'RATZLAFF       0.001 72.848  11795',
'RADLEY         0.001 72.849  11796',
'PUTT           0.001 72.850  11797',
'PUTNEY         0.001 72.851  11798',
'PRIME          0.001 72.851  11799',
'PRESS          0.001 72.852  11800',
'PINETTE        0.001 72.853  11801',
'PINER          0.001 72.854  11802',
'PETRIN         0.001 72.855  11803',
'PARISE         0.001 72.856  11804',
'OSBOURNE       0.001 72.857  11805',
'NYMAN          0.001 72.858  11806',
'NORTHINGTON    0.001 72.858  11807',
'NOBLITT        0.001 72.859  11808',
'NISHIMURA      0.001 72.860  11809',
'NELL           0.001 72.861  11810',
'NEHER          0.001 72.862  11811',
'NALLS          0.001 72.863  11812',
'NACCARATO      0.001 72.864  11813',
'MUCHA          0.001 72.865  11814',
'MOUNCE         0.001 72.865  11815',
'MIRON          0.001 72.866  11816',
'MILLIS         0.001 72.867  11817',
'MEANEY         0.001 72.868  11818',
'MCNICHOLS      0.001 72.869  11819',
'MCKINNIS       0.001 72.870  11820',
'MCJUNKIN       0.001 72.871  11821',
'MCDUFFY        0.001 72.872  11822',
'MAX            0.001 72.872  11823',
'MARCELLO       0.001 72.873  11824',
'MANRIQUE       0.001 72.874  11825',
'MANNION        0.001 72.875  11826',
'MANGUAL        0.001 72.876  11827',
'MALVEAUX       0.001 72.877  11828',
'MAINS          0.001 72.878  11829',
'LUMSDEN        0.001 72.879  11830',
'LUCIEN         0.001 72.879  11831',
'LOHMANN        0.001 72.880  11832',
'LIPE           0.001 72.881  11833',
'LIGHTSEY       0.001 72.882  11834',
'LEMASTERS      0.001 72.883  11835',
'LEIST          0.001 72.884  11836',
'LAXTON         0.001 72.885  11837',
'LAVERRIERE     0.001 72.886  11838',
'LATORRE        0.001 72.886  11839',
'LAMONS         0.001 72.887  11840',
'KRAL           0.001 72.888  11841',
'KOPF           0.001 72.889  11842',
'KNAUER         0.001 72.890  11843',
'KITT           0.001 72.891  11844',
'KAUL           0.001 72.892  11845',
'KARAS          0.001 72.893  11846',
'KAMPS          0.001 72.893  11847',
'JUSINO         0.001 72.894  11848',
'JANIS          0.001 72.895  11849',
'ISLAM          0.001 72.896  11850',
'HULLINGER      0.001 72.897  11851',
'HUGES          0.001 72.898  11852',
'HORNUNG        0.001 72.899  11853',
'HISER          0.001 72.900  11854',
'HEMPEL         0.001 72.900  11855',
'HELSEL         0.001 72.901  11856',
'HASSINGER      0.001 72.902  11857',
'HARGRAVES      0.001 72.903  11858',
'HAMMES         0.001 72.904  11859',
'HALLBERG       0.001 72.905  11860',
'GUTMAN         0.001 72.906  11861',
'GUMBS          0.001 72.907  11862',
'GRUVER         0.001 72.907  11863',
'GRADDY         0.001 72.908  11864',
'GONSALES       0.001 72.909  11865',
'GONCALVES      0.001 72.910  11866',
'GLENNON        0.001 72.911  11867',
'GILFORD        0.001 72.912  11868',
'GENO           0.001 72.913  11869',
'FRESHOUR       0.001 72.914  11870',
'FLIPPO         0.001 72.914  11871',
'FIFER          0.001 72.915  11872',
'FEW            0.001 72.916  11873',
'FERMIN         0.001 72.917  11874',
'FASON          0.001 72.918  11875',
'FARRISH        0.001 72.919  11876',
'FALLIN         0.001 72.920  11877',
'EWERT          0.001 72.921  11878',
'ESTEPP         0.001 72.921  11879',
'ESCUDERO       0.001 72.922  11880',
'ENSMINGER      0.001 72.923  11881',
'EMMANUEL       0.001 72.924  11882',
'EMBERTON       0.001 72.925  11883',
'ELMS           0.001 72.926  11884',
'ELLERBE        0.001 72.927  11885',
'EIDE           0.001 72.928  11886',
'DYSART         0.001 72.928  11887',
'DOUGAN         0.001 72.929  11888',
'DIERKING       0.001 72.930  11889',
'DICUS          0.001 72.931  11890',
'DETRICK        0.001 72.932  11891',
'DEROCHE        0.001 72.933  11892',
'DEPUE          0.001 72.934  11893',
'DEMARTINO      0.001 72.935  11894',
'DELOSREYES     0.001 72.935  11895',
'DALKE          0.001 72.936  11896',
'CULBREATH      0.001 72.937  11897',
'CROWNOVER      0.001 72.938  11898',
'CRISLER        0.001 72.939  11899',
'CRASS          0.001 72.940  11900',
'CORSI          0.001 72.941  11901',
'CHAGNON        0.001 72.942  11902',
'CENTERS        0.001 72.942  11903',
'CAVANAGH       0.001 72.943  11904',
'CASSON         0.001 72.944  11905',
'CAROLLO        0.001 72.945  11906',
'CADWALLADER    0.001 72.946  11907',
'BURNLEY        0.001 72.947  11908',
'BURCIAGA       0.001 72.948  11909',
'BURCHARD       0.001 72.949  11910',
'BROADHEAD      0.001 72.949  11911',
'BORIS          0.001 72.950  11912',
'BOOZE          0.001 72.951  11913',
'BOLTE          0.001 72.952  11914',
'BODY           0.001 72.953  11915',
'BERENS         0.001 72.954  11916',
'BELLMAN        0.001 72.955  11917',
'BELLARD        0.001 72.956  11918',
'BARIL          0.001 72.956  11919',
'ARDEN          0.001 72.957  11920',
'ANTONUCCI      0.001 72.958  11921',
'AMADO          0.001 72.959  11922',
'ALLIE          0.001 72.960  11923',
'WOLFGRAM       0.001 72.961  11924',
'WINSOR         0.001 72.962  11925',
'WIMBISH        0.001 72.962  11926',
'WILBERT        0.001 72.963  11927',
'WIER           0.001 72.964  11928',
'WALLACH        0.001 72.965  11929',
'VIVEROS        0.001 72.966  11930',
'VENTO          0.001 72.967  11931',
'VARLEY         0.001 72.968  11932',
'VANSLYKE       0.001 72.969  11933',
'VANGORDER      0.001 72.969  11934',
'TOUCHSTONE     0.001 72.970  11935',
'TOMKO          0.001 72.971  11936',
'TIEMANN        0.001 72.972  11937',
'THROOP         0.001 72.973  11938',
'TAMURA         0.001 72.974  11939',
'TALMADGE       0.001 72.975  11940',
'SWAYZE         0.001 72.975  11941',
'STURDEVANT     0.001 72.976  11942',
'STRAUSER       0.001 72.977  11943',
'STOLZ          0.001 72.978  11944',
'STENBERG       0.001 72.979  11945',
'STAYTON        0.001 72.980  11946',
'SPOHN          0.001 72.981  11947',
'SPILLERS       0.001 72.981  11948',
'SPILLANE       0.001 72.982  11949',
'SLUSS          0.001 72.983  11950',
'SLOANE         0.001 72.984  11951',
'SLAVENS        0.001 72.985  11952',
'SIMONETTI      0.001 72.986  11953',
'SHOFNER        0.001 72.987  11954',
'SHEAD          0.001 72.987  11955',
'SENECAL        0.001 72.988  11956',
'SEALES         0.001 72.989  11957',
'SCHUELER       0.001 72.990  11958',
'SCHLEY         0.001 72.991  11959',
'SCHACHT        0.001 72.992  11960',
'SAUVE          0.001 72.993  11961',
'SARNO          0.001 72.993  11962',
'SALSBURY       0.001 72.994  11963',
'ROTHSCHILD     0.001 72.995  11964',
'ROSIER         0.001 72.996  11965',
'RINES          0.001 72.997  11966',
'REVELES        0.001 72.998  11967',
'REIN           0.001 72.999  11968',
'REDUS          0.001 72.999  11969',
'REDFERN        0.001 73.000  11970',
'RECK           0.001 73.001  11971',
'RANNEY         0.001 73.002  11972',
'RAGGS          0.001 73.003  11973',
'PROUT          0.001 73.004  11974',
'PRILL          0.001 73.005  11975',
'PREBLE         0.001 73.005  11976',
'PRAGER         0.001 73.006  11977',
'PLEMONS        0.001 73.007  11978',
'PIPPEN         0.001 73.008  11979',
'PILON          0.001 73.009  11980',
'PICCIRILLO     0.001 73.010  11981',
'PEWITT         0.001 73.011  11982',
'PESINA         0.001 73.011  11983',
'PECORA         0.001 73.012  11984',
'OTANI          0.001 73.013  11985',
'ORSINI         0.001 73.014  11986',
'OLLIE          0.001 73.015  11987',
'OESTREICH      0.001 73.016  11988',
'ODEA           0.001 73.017  11989',
'OCALLAGHAN     0.001 73.017  11990',
'NORTHUP        0.001 73.018  11991',
'NIEHAUS        0.001 73.019  11992',
'NEWBERG        0.001 73.020  11993',
'NASSER         0.001 73.021  11994',
'NARRON         0.001 73.022  11995',
'MONARREZ       0.001 73.023  11996',
'MISHLER        0.001 73.023  11997',
'MCSHERRY       0.001 73.024  11998',
'MCELFRESH      0.001 73.025  11999',
'MAYON          0.001 73.026  12000',
'MAUER          0.001 73.027  12001',
'MATTICE        0.001 73.028  12002',
'MASH           0.001 73.029  12003',
'MARRONE        0.001 73.029  12004',
'MARMOLEJO      0.001 73.030  12005',
'MARINI         0.001 73.031  12006',
'MARIE          0.001 73.032  12007',
'MARA           0.001 73.033  12008',
'MALM           0.001 73.034  12009',
'MACHEN         0.001 73.035  12010',
'LUNCEFORD      0.001 73.035  12011',
'LOEWEN         0.001 73.036  12012',
'LIVERMAN       0.001 73.037  12013',
'LITWIN         0.001 73.038  12014',
'LINSCOTT       0.001 73.039  12015',
'LEVINS         0.001 73.040  12016',
'LENOX          0.001 73.041  12017',
'LEGASPI        0.001 73.041  12018',
'LEEMAN         0.001 73.042  12019',
'LEAVY          0.001 73.043  12020',
'LANNON         0.001 73.044  12021',
'LAMSON         0.001 73.045  12022',
'LAMBDIN        0.001 73.046  12023',
'LABARRE        0.001 73.047  12024',
'KNOUSE         0.001 73.047  12025',
'KLEMM          0.001 73.048  12026',
'KLEINSCHMIDT   0.001 73.049  12027',
'KIRKLIN        0.001 73.050  12028',
'KEELS          0.001 73.051  12029',
'JULIANO        0.001 73.052  12030',
'HOWSER         0.001 73.053  12031',
'HOTT           0.001 73.053  12032',
'HOSIER         0.001 73.054  12033',
'HOSEA          0.001 73.055  12034',
'HOPWOOD        0.001 73.056  12035',
'HOLYFIELD      0.001 73.057  12036',
'HODNETT        0.001 73.058  12037',
'HIRSH          0.001 73.059  12038',
'HEIMANN        0.001 73.060  12039',
'HEIGHT         0.001 73.060  12040',
'HECKEL         0.001 73.061  12041',
'HARGER         0.001 73.062  12042',
'HAMIL          0.001 73.063  12043',
'HAJEK          0.001 73.064  12044',
'GURGANUS       0.001 73.065  12045',
'GUNNING        0.001 73.066  12046',
'GRANGE         0.001 73.066  12047',
'GONZALAS       0.001 73.067  12048',
'GOGGINS        0.001 73.068  12049',
'GEROW          0.001 73.069  12050',
'GAYDOS         0.001 73.070  12051',
'GARDUNO        0.001 73.071  12052',
'GANLEY         0.001 73.072  12053',
'GALEY          0.001 73.072  12054',
'FARNER         0.001 73.073  12055',
'ESTER          0.001 73.074  12056',
'ENGLES         0.001 73.075  12057',
'EMOND          0.001 73.076  12058',
'EMERT          0.001 73.077  12059',
'ELLENBURG      0.001 73.078  12060',
'EDICK          0.001 73.078  12061',
'DUELL          0.001 73.079  12062',
'DUBLIN         0.001 73.080  12063',
'DORAZIO        0.001 73.081  12064',
'DONG           0.001 73.082  12065',
'DIMOND         0.001 73.083  12066',
'DIEDERICH      0.001 73.084  12067',
'DEWALT         0.001 73.084  12068',
'DEPUY          0.001 73.085  12069',
'DEMPSTER       0.001 73.086  12070',
'DEMARIA        0.001 73.087  12071',
'DEHOYOS        0.001 73.088  12072',
'DEARTH         0.001 73.089  12073',
'DEALBA         0.001 73.090  12074',
'DANE           0.001 73.090  12075',
'CZECH          0.001 73.091  12076',
'CROSE          0.001 73.092  12077',
'CRESPIN        0.001 73.093  12078',
'COGDILL        0.001 73.094  12079',
'CLINARD        0.001 73.095  12080',
'CIPRIANO       0.001 73.096  12081',
'CHRETIEN       0.001 73.096  12082',
'CHALK          0.001 73.097  12083',
'CERNY          0.001 73.098  12084',
'CENICEROS      0.001 73.099  12085',
'CELESTIN       0.001 73.100  12086',
'CAPLE          0.001 73.101  12087',
'CACHO          0.001 73.102  12088',
'BURRILL        0.001 73.102  12089',
'BUHR           0.001 73.103  12090',
'BUCKLAND       0.001 73.104  12091',
'BRANAM         0.001 73.105  12092',
'BOYSEN         0.001 73.106  12093',
'BOVEE          0.001 73.107  12094',
'BOOS           0.001 73.108  12095',
'BOLER          0.001 73.108  12096',
'BLOM           0.001 73.109  12097',
'BLASKO         0.001 73.110  12098',
'BEYERS         0.001 73.111  12099',
'BELZ           0.001 73.112  12100',
'BELMONTE       0.001 73.113  12101',
'BEDNARZ        0.001 73.114  12102',
'BECKMANN       0.001 73.114  12103',
'BEAUDIN        0.001 73.115  12104',
'BAZILE         0.001 73.116  12105',
'BARBEAU        0.001 73.117  12106',
'BALENTINE      0.001 73.118  12107',
'ABRAHAMS       0.001 73.119  12108',
'ABLE           0.001 73.120  12109',
'ZIELKE         0.001 73.120  12110',
'YUNKER         0.001 73.121  12111',
'YEATES         0.001 73.122  12112',
'WROBEL         0.001 73.123  12113',
'WIKE           0.001 73.124  12114',
'WHISNANT       0.001 73.125  12115',
'WHERRY         0.001 73.125  12116',
'WAGNON         0.001 73.126  12117',
'VOGAN          0.001 73.127  12118',
'VANSANT        0.001 73.128  12119',
'VANNEST        0.001 73.129  12120',
'VALLO          0.001 73.130  12121',
'ULLERY         0.001 73.131  12122',
'TOWLES         0.001 73.131  12123',
'TOWELL         0.001 73.132  12124',
'TIGER          0.001 73.133  12125',
'THILL          0.001 73.134  12126',
'TAORMINA       0.001 73.135  12127',
'TANNEHILL      0.001 73.136  12128',
'TAING          0.001 73.136  12129',
'STORRS         0.001 73.137  12130',
'STICKLES       0.001 73.138  12131',
'STETLER        0.001 73.139  12132',
'SPARLING       0.001 73.140  12133',
'SOLT           0.001 73.141  12134',
'SILCOX         0.001 73.142  12135',
'SHEARD         0.001 73.142  12136',
'SHADLE         0.001 73.143  12137',
'SEMAN          0.001 73.144  12138',
'SELLECK        0.001 73.145  12139',
'SCHLEMMER      0.001 73.146  12140',
'SCHER          0.001 73.147  12141',
'SAPIEN         0.001 73.147  12142',
'SAINZ          0.001 73.148  12143',
'RUMBLE         0.001 73.149  12144',
'ROYE           0.001 73.150  12145',
'ROSAMOND       0.001 73.151  12146',
'ROMAIN         0.001 73.152  12147',
'RIZZUTO        0.001 73.152  12148',
'RESCH          0.001 73.153  12149',
'RENTZ          0.001 73.154  12150',
'RATHER         0.001 73.155  12151',
'RASCH          0.001 73.156  12152',
'RANIERI        0.001 73.157  12153',
'PURTELL        0.001 73.158  12154',
'PRIMMER        0.001 73.158  12155',
'PORTWOOD       0.001 73.159  12156',
'PONTIUS        0.001 73.160  12157',
'PONS           0.001 73.161  12158',
'PLETCHER       0.001 73.162  12159',
'PLEDGER        0.001 73.163  12160',
'PIRKLE         0.001 73.163  12161',
'PILLSBURY      0.001 73.164  12162',
'PENTECOST      0.001 73.165  12163',
'PENG           0.001 73.166  12164',
'PAXSON         0.001 73.167  12165',
'ORTEZ          0.001 73.168  12166',
'ORGAN          0.001 73.168  12167',
'OLES           0.001 73.169  12168',
'NEWBORN        0.001 73.170  12169',
'MULLETT        0.001 73.171  12170',
'MUIRHEAD       0.001 73.172  12171',
'MOUZON         0.001 73.173  12172',
'MORK           0.001 73.174  12173',
'MOLLETT        0.001 73.174  12174',
'MOHN           0.001 73.175  12175',
'MITCHAM        0.001 73.176  12176',
'MELILLO        0.001 73.177  12177',
'MEE            0.001 73.178  12178',
'MEDDERS        0.001 73.179  12179',
'MCMILLER       0.001 73.179  12180',
'MCCLEERY       0.001 73.180  12181',
'MCCAUGHEY      0.001 73.181  12182',
'MANDERS        0.001 73.182  12183',
'MAK            0.001 73.183  12184',
'MACIEJEWSKI    0.001 73.184  12185',
'MACAULAY       0.001 73.184  12186',
'LUTE           0.001 73.185  12187',
'LIPMAN         0.001 73.186  12188',
'LEWTER         0.001 73.187  12189',
'LAROCQUE       0.001 73.188  12190',
'LANGTON        0.001 73.189  12191',
'KRINER         0.001 73.190  12192',
'KNIPP          0.001 73.190  12193',
'KILLEEN        0.001 73.191  12194',
'KARN           0.001 73.192  12195',
'KALISH         0.001 73.193  12196',
'KACZOR         0.001 73.194  12197',
'JONSON         0.001 73.195  12198',
'JEREZ          0.001 73.195  12199',
'JARRARD        0.001 73.196  12200',
'JANDA          0.001 73.197  12201',
'HYMES          0.001 73.198  12202',
'HOLLMAN        0.001 73.199  12203',
'HOLLANDSWORTH  0.001 73.200  12204',
'HOLL           0.001 73.200  12205',
'HOBDY          0.001 73.201  12206',
'HITCH          0.001 73.202  12207',
'HENNEN         0.001 73.203  12208',
'HEMMER         0.001 73.204  12209',
'HAGINS         0.001 73.205  12210',
'HADDOX         0.001 73.206  12211',
'GUITIERREZ     0.001 73.206  12212',
'GUERNSEY       0.001 73.207  12213',
'GORSUCH        0.001 73.208  12214',
'GHOLSON        0.001 73.209  12215',
'GENOVA         0.001 73.210  12216',
'GAZAWAY        0.001 73.211  12217',
'GAUNA          0.001 73.211  12218',
'GAMMONS        0.001 73.212  12219',
'FREELS         0.001 73.213  12220',
'FONVILLE       0.001 73.214  12221',
'FLY            0.001 73.215  12222',
'FLORIAN        0.001 73.216  12223',
'FLEET          0.001 73.216  12224',
'FETTERMAN      0.001 73.217  12225',
'FAVA           0.001 73.218  12226',
'FARQUHAR       0.001 73.219  12227',
'FARISH         0.001 73.220  12228',
'FABELA         0.001 73.221  12229',
'ESCOTO         0.001 73.222  12230',
'EISEN          0.001 73.222  12231',
'DOSSETT        0.001 73.223  12232',
'DORITY         0.001 73.224  12233',
'DORFMAN        0.001 73.225  12234',
'DEMMER         0.001 73.226  12235',
'DEHN           0.001 73.227  12236',
'DAWLEY         0.001 73.227  12237',
'DARBONNE       0.001 73.228  12238',
'DAMORE         0.001 73.229  12239',
'DAMM           0.001 73.230  12240',
'CROSLEY        0.001 73.231  12241',
'CRON           0.001 73.232  12242',
'CROMPTON       0.001 73.232  12243',
'CRICHTON       0.001 73.233  12244',
'COTNER         0.001 73.234  12245',
'CORDON         0.001 73.235  12246',
'CONERLY        0.001 73.236  12247',
'COLVARD        0.001 73.237  12248',
'CLAUSON        0.001 73.238  12249',
'CHESS          0.001 73.238  12250',
'CHEESEMAN      0.001 73.239  12251',
'CHARITY        0.001 73.240  12252',
'CAVALLARO      0.001 73.241  12253',
'CASTILLE       0.001 73.242  12254',
'CABELLO        0.001 73.243  12255',
'BURGAN         0.001 73.243  12256',
'BUFFUM         0.001 73.244  12257',
'BRUSS          0.001 73.245  12258',
'BRASSFIELD     0.001 73.246  12259',
'BOWERMAN       0.001 73.247  12260',
'BOTHWELL       0.001 73.248  12261',
'BORGEN         0.001 73.249  12262',
'BONAPARTE      0.001 73.249  12263',
'BOMBARD        0.001 73.250  12264',
'BOIVIN         0.001 73.251  12265',
'BOISSONNEAULT  0.001 73.252  12266',
'BOGNER         0.001 73.253  12267',
'BODDEN         0.001 73.254  12268',
'BOAN           0.001 73.254  12269',
'BLANCHE        0.001 73.255  12270',
'BITTINGER      0.001 73.256  12271',
'BICKHAM        0.001 73.257  12272',
'BEDOLLA        0.001 73.258  12273',
'BALE           0.001 73.259  12274',
'BAINBRIDGE     0.001 73.259  12275',
'AYBAR          0.001 73.260  12276',
'AVENDANO       0.001 73.261  12277',
'ASHLOCK        0.001 73.262  12278',
'AMIDON         0.001 73.263  12279',
'ALMANZAR       0.001 73.264  12280',
'AKRIDGE        0.001 73.265  12281',
'ACKERMANN      0.001 73.265  12282',
'ZAGER          0.001 73.266  12283',
'YONG           0.001 73.267  12284',
'XAVIER         0.001 73.268  12285',
'WORRALL        0.001 73.269  12286',
'WINANS         0.001 73.269  12287',
'WILSEY         0.001 73.270  12288',
'WIGHTMAN       0.001 73.271  12289',
'WESTRICK       0.001 73.272  12290',
'WENNER         0.001 73.273  12291',
'WARNE          0.001 73.274  12292',
'WARFORD        0.001 73.274  12293',
'VERVILLE       0.001 73.275  12294',
'UTECHT         0.001 73.276  12295',
'UPSON          0.001 73.277  12296',
'TUMA           0.001 73.278  12297',
'TSENG          0.001 73.279  12298',
'TRONCOSO       0.001 73.279  12299',
'TROLLINGER     0.001 73.280  12300',
'TORBERT        0.001 73.281  12301',
'TAULBEE        0.001 73.282  12302',
'SUTTERFIELD    0.001 73.283  12303',
'STOUGH         0.001 73.284  12304',
'STORCH         0.001 73.284  12305',
'STONEBRAKER    0.001 73.285  12306',
'STOLLE         0.001 73.286  12307',
'STILSON        0.001 73.287  12308',
'STIEFEL        0.001 73.288  12309',
'STEPTOE        0.001 73.289  12310',
'STEPNEY        0.001 73.289  12311',
'STENDER        0.001 73.290  12312',
'STEMPLE        0.001 73.291  12313',
'STAGGERS       0.001 73.292  12314',
'SPURRIER       0.001 73.293  12315',
'SPRAY          0.001 73.293  12316',
'SPINNEY        0.001 73.294  12317',
'SPENGLER       0.001 73.295  12318',
'SMARTT         0.001 73.296  12319',
'SKOOG          0.001 73.297  12320',
'SILVIS         0.001 73.298  12321',
'SIEG           0.001 73.298  12322',
'SHUFORD        0.001 73.299  12323',
'SELFRIDGE      0.001 73.300  12324',
'SEGUIN         0.001 73.301  12325',
'SEDGWICK       0.001 73.302  12326',
'SEASE          0.001 73.303  12327',
'SCOTTI         0.001 73.303  12328',
'SCHROER        0.001 73.304  12329',
'SCHLENKER      0.001 73.305  12330',
'SCHILL         0.001 73.306  12331',
'SAVARESE       0.001 73.307  12332',
'SAPIENZA       0.001 73.308  12333',
'SANSON         0.001 73.308  12334',
'SANDEFUR       0.001 73.309  12335',
'SALAMONE       0.001 73.310  12336',
'RUSNAK         0.001 73.311  12337',
'RUDISILL       0.001 73.312  12338',
'ROYALTY        0.001 73.312  12339',
'ROTHERMEL      0.001 73.313  12340',
'ROCA           0.001 73.314  12341',
'RESENDIZ       0.001 73.315  12342',
'RELIFORD       0.001 73.316  12343',
'RASCO          0.001 73.317  12344',
'RAIFORD        0.001 73.317  12345',
'QUISENBERRY    0.001 73.318  12346',
'QUIJADA        0.001 73.319  12347',
'PULLINS        0.001 73.320  12348',
'PUCCIO         0.001 73.321  12349',
'POSTELL        0.001 73.322  12350',
'POPPE          0.001 73.322  12351',
'PINTER         0.001 73.323  12352',
'PICHE          0.001 73.324  12353',
'PETRUCCI       0.001 73.325  12354',
'PELLEGRIN      0.001 73.326  12355',
'PELAEZ         0.001 73.327  12356',
'PATTI          0.001 73.327  12357',
'PATON          0.001 73.328  12358',
'PASCO          0.001 73.329  12359',
'PARKES         0.001 73.330  12360',
'PADEN          0.001 73.331  12361',
'PABST          0.001 73.331  12362',
'ORCHARD        0.001 73.332  12363',
'OLMSTED        0.001 73.333  12364',
'NEWLON         0.001 73.334  12365',
'MYNATT         0.001 73.335  12366',
'MUSTAFA        0.001 73.336  12367',
'MOWER          0.001 73.336  12368',
'MORRONE        0.001 73.337  12369',
'MOREE          0.001 73.338  12370',
'MOFFAT         0.001 73.339  12371',
'MIXSON         0.001 73.340  12372',
'MINNER         0.001 73.341  12373',
'MIN            0.001 73.341  12374',
'MILLETTE       0.001 73.342  12375',
'MEDEROS        0.001 73.343  12376',
'MCGAHAN        0.001 73.344  12377',
'MCCONVILLE     0.001 73.345  12378',
'MAUGHAN        0.001 73.346  12379',
'MASSINGILL     0.001 73.346  12380',
'MARANO         0.001 73.347  12381',
'MACRI          0.001 73.348  12382',
'LOVERN         0.001 73.349  12383',
'LICHTENSTEIN   0.001 73.350  12384',
'LEONETTI       0.001 73.351  12385',
'LEHNER         0.001 73.351  12386',
'LAWLEY         0.001 73.352  12387',
'LARAMIE        0.001 73.353  12388',
'LAPPIN         0.001 73.354  12389',
'LAHTI          0.001 73.355  12390',
'LAGO           0.001 73.355  12391',
'LACAYO         0.001 73.356  12392',
'KUESTER        0.001 73.357  12393',
'KNEE           0.001 73.358  12394',
'KINCADE        0.001 73.359  12395',
'JUNIOR         0.001 73.360  12396',
'JUHL           0.001 73.360  12397',
'JOSLYN         0.001 73.361  12398',
'JIRON          0.001 73.362  12399',
'JESSOP         0.001 73.363  12400',
'JERRY          0.001 73.364  12401',
'JAROSZ         0.001 73.365  12402',
'JAIN           0.001 73.365  12403',
'HULTS          0.001 73.366  12404',
'HOGE           0.001 73.367  12405',
'HODGINS        0.001 73.368  12406',
'HOBAN          0.001 73.369  12407',
'HINKSON        0.001 73.370  12408',
'HILLYARD       0.001 73.370  12409',
'HERZIG         0.001 73.371  12410',
'HERVEY         0.001 73.372  12411',
'HENRIKSEN      0.001 73.373  12412',
'HAWKER         0.001 73.374  12413',
'HAUSE          0.001 73.374  12414',
'HARD           0.001 73.375  12415',
'HANKERSON      0.001 73.376  12416',
'GREGSON        0.001 73.377  12417',
'GOLLIDAY       0.001 73.378  12418',
'GILCREASE      0.001 73.379  12419',
'GESSNER        0.001 73.379  12420',
'GERACE         0.001 73.380  12421',
'GARWOOD        0.001 73.381  12422',
'GARST          0.001 73.382  12423',
'GAILLARD       0.001 73.383  12424',
'FLINCHUM       0.001 73.384  12425',
'FISHEL         0.001 73.384  12426',
'FISHBACK       0.001 73.385  12427',
'FILKINS        0.001 73.386  12428',
'FENTRESS       0.001 73.387  12429',
'FABRE          0.001 73.388  12430',
'ETHIER         0.001 73.389  12431',
'ESPANA         0.001 73.389  12432',
'EISNER         0.001 73.390  12433',
'EHRHART        0.001 73.391  12434',
'EFIRD          0.001 73.392  12435',
'DRENNON        0.001 73.393  12436',
'DOMINY         0.001 73.393  12437',
'DOMINIQUE      0.001 73.394  12438',
'DOMINGUE       0.001 73.395  12439',
'DIPAOLO        0.001 73.396  12440',
'DINAN          0.001 73.397  12441',
'DIMARTINO      0.001 73.398  12442',
'DESKINS        0.001 73.398  12443',
'DENGLER        0.001 73.399  12444',
'DEFREITAS      0.001 73.400  12445',
'DEFRANCO       0.001 73.401  12446',
'DANCER         0.001 73.402  12447',
'DAHLIN         0.001 73.403  12448',
'CUTSHAW        0.001 73.403  12449',
'CUTHBERT       0.001 73.404  12450',
'CROYLE         0.001 73.405  12451',
'CROTHERS       0.001 73.406  12452',
'CRITCHFIELD    0.001 73.407  12453',
'COWIE          0.001 73.408  12454',
'COSTNER        0.001 73.408  12455',
'COPPEDGE       0.001 73.409  12456',
'COPES          0.001 73.410  12457',
'CICCONE        0.001 73.411  12458',
'CHAMP          0.001 73.412  12459',
'CESAR          0.001 73.413  12460',
'CAUFIELD       0.001 73.413  12461',
'CAPO           0.001 73.414  12462',
'CAMBRON        0.001 73.415  12463',
'CAMBRIDGE      0.001 73.416  12464',
'BUSER          0.001 73.417  12465',
'BURNES         0.001 73.417  12466',
'BUHL           0.001 73.418  12467',
'BUENDIA        0.001 73.419  12468',
'BRINDLEY       0.001 73.420  12469',
'BRECHT         0.001 73.421  12470',
'BOURGOIN       0.001 73.422  12471',
'BOOMER         0.001 73.422  12472',
'BLACKSHIRE     0.001 73.423  12473',
'BIRGE          0.001 73.424  12474',
'BENNINGER      0.001 73.425  12475',
'BEMBRY         0.001 73.426  12476',
'BEIL           0.001 73.427  12477',
'BEGAYE         0.001 73.427  12478',
'BARRENTINE     0.001 73.428  12479',
'BARKS          0.001 73.429  12480',
'BANTON         0.001 73.430  12481',
'BALMER         0.001 73.431  12482',
'BAITY          0.001 73.432  12483',
'AUERBACH       0.001 73.432  12484',
'AMBLER         0.001 73.433  12485',
'ALEXANDRE      0.001 73.434  12486',
'ACKERSON       0.001 73.435  12487',
'ZURCHER        0.001 73.436  12488',
'ZELL           0.001 73.436  12489',
'WYNKOOP        0.001 73.437  12490',
'WALLICK        0.001 73.438  12491',
'WAID           0.001 73.439  12492',
'VOS            0.001 73.440  12493',
'VIZCAINO       0.001 73.441  12494',
'VESTER         0.001 73.441  12495',
'VEALE          0.001 73.442  12496',
'VANDERMARK     0.001 73.443  12497',
'VANDERFORD     0.001 73.444  12498',
'TUTHILL        0.001 73.445  12499',
'TRIVETTE       0.001 73.445  12500',
'THIESSEN       0.001 73.446  12501',
'TEWKSBURY      0.001 73.447  12502',
'TAO            0.001 73.448  12503',
'TABRON         0.001 73.449  12504',
'SWIM           0.001 73.449  12505',
'SWASEY         0.001 73.450  12506',
'SWANIGAN       0.001 73.451  12507',
'STOUGHTON      0.001 73.452  12508',
'STOUDT         0.001 73.453  12509',
'STIMSON        0.001 73.453  12510',
'STECKER        0.001 73.454  12511',
'STEAD          0.001 73.455  12512',
'STALL          0.001 73.456  12513',
'SPADY          0.001 73.457  12514',
'SOUTHER        0.001 73.458  12515',
'SMOAK          0.001 73.458  12516',
'SKLAR          0.001 73.459  12517',
'SIMCOX         0.001 73.460  12518',
'SIDWELL        0.001 73.461  12519',
'SHARON         0.001 73.462  12520',
'SEYBERT        0.001 73.462  12521',
'SESCO          0.001 73.463  12522',
'SEEMAN         0.001 73.464  12523',
'SEABORN        0.001 73.465  12524',
'SCHWENK        0.001 73.466  12525',
'SCHMELING      0.001 73.466  12526',
'ROSSIGNOL      0.001 73.467  12527',
'ROBILLARD      0.001 73.468  12528',
'ROBICHEAUX     0.001 73.469  12529',
'RIVERIA        0.001 73.470  12530',
'RIPPEON        0.001 73.471  12531',
'RIDGLEY        0.001 73.471  12532',
'REMALEY        0.001 73.472  12533',
'REHKOP         0.001 73.473  12534',
'REDDISH        0.001 73.474  12535',
'REACH          0.001 73.475  12536',
'RAUSCHER       0.001 73.475  12537',
'RACHEL         0.001 73.476  12538',
'QUIRION        0.001 73.477  12539',
'PUSEY          0.001 73.478  12540',
'PRUDEN         0.001 73.479  12541',
'PRESSLER       0.001 73.479  12542',
'POTVIN         0.001 73.480  12543',
'POSPISIL       0.001 73.481  12544',
'PARADISO       0.001 73.482  12545',
'PANGBURN       0.001 73.483  12546',
'PALMATEER      0.001 73.483  12547',
'OWNBY          0.001 73.484  12548',
'OTWELL         0.001 73.485  12549',
'OSTERBERG      0.001 73.486  12550',
'OSMOND         0.001 73.487  12551',
'OLSSON         0.001 73.488  12552',
'OLD            0.001 73.488  12553',
'OBERLANDER     0.001 73.489  12554',
'NUSBAUM        0.001 73.490  12555',
'NOVACK         0.001 73.491  12556',
'NOKES          0.001 73.492  12557',
'NICASTRO       0.001 73.492  12558',
'NEHLS          0.001 73.493  12559',
'NAY            0.001 73.494  12560',
'NABER          0.001 73.495  12561',
'MULHERN        0.001 73.496  12562',
'MOTTER         0.001 73.496  12563',
'MORETZ         0.001 73.497  12564',
'MILIAN         0.001 73.498  12565',
'MERCEDES       0.001 73.499  12566',
'MCKEEL         0.001 73.500  12567',
'MCCLAY         0.001 73.501  12568',
'MCCART         0.001 73.501  12569',
'MATSUDA        0.001 73.502  12570',
'MARY           0.001 73.503  12571',
'MARTUCCI       0.001 73.504  12572',
'MARPLE         0.001 73.505  12573',
'MARKO          0.001 73.505  12574',
'MARCINIAK      0.001 73.506  12575',
'MANES          0.001 73.507  12576',
'MANCIA         0.001 73.508  12577',
'MAKER          0.001 73.509  12578',
'MACRAE         0.001 73.509  12579',
'LYBARGER       0.001 73.510  12580',
'LINT           0.001 73.511  12581',
'LINEBERGER     0.001 73.512  12582',
'LEVINGSTON     0.001 73.513  12583',
'LECROY         0.001 73.513  12584',
'LATTIMER       0.001 73.514  12585',
'LASETER        0.001 73.515  12586',
'KULICK         0.001 73.516  12587',
'KRIER          0.001 73.517  12588',
'KNUTSEN        0.001 73.518  12589',
'KLEM           0.001 73.518  12590',
'KINNE          0.001 73.519  12591',
'KINKADE        0.001 73.520  12592',
'KETTERMAN      0.001 73.521  12593',
'KERSTETTER     0.001 73.522  12594',
'KERSTEN        0.001 73.522  12595',
'KARAM          0.001 73.523  12596',
'JURY           0.001 73.524  12597',
'JOSHI          0.001 73.525  12598',
'JIN            0.001 73.526  12599',
'JENT           0.001 73.526  12600',
'JEFCOAT        0.001 73.527  12601',
'HILLIER        0.001 73.528  12602',
'HILLHOUSE      0.001 73.529  12603',
'HETTINGER      0.001 73.530  12604',
'HENTHORN       0.001 73.530  12605',
'HENLINE        0.001 73.531  12606',
'HELZER         0.001 73.532  12607',
'HEITZMAN       0.001 73.533  12608',
'HEINEMAN       0.001 73.534  12609',
'HEENAN         0.001 73.535  12610',
'HAUGHTON       0.001 73.535  12611',
'HARIS          0.001 73.536  12612',
'HARBERT        0.001 73.537  12613',
'HAMAN          0.001 73.538  12614',
'GRINSTEAD      0.001 73.539  12615',
'GREMILLION     0.001 73.539  12616',
'GORBY          0.001 73.540  12617',
'GIRALDO        0.001 73.541  12618',
'GIOIA          0.001 73.542  12619',
'GERARDI        0.001 73.543  12620',
'GERAGHTY       0.001 73.543  12621',
'GAUNT          0.001 73.544  12622',
'GATSON         0.001 73.545  12623',
'GARDIN         0.001 73.546  12624',
'GANS           0.001 73.547  12625',
'GAMMILL        0.001 73.548  12626',
'GAMES          0.001 73.548  12627',
'GAIN           0.001 73.549  12628',
'FRIEDLANDER    0.001 73.550  12629',
'FRAHM          0.001 73.551  12630',
'FOSSETT        0.001 73.552  12631',
'FOSDICK        0.001 73.552  12632',
'FORTH          0.001 73.553  12633',
'FORBUSH        0.001 73.554  12634',
'FONDREN        0.001 73.555  12635',
'FLECKENSTEIN   0.001 73.556  12636',
'FITCHETT       0.001 73.556  12637',
'FILER          0.001 73.557  12638',
'FELIZ          0.001 73.558  12639',
'FEIST          0.001 73.559  12640',
'EWART          0.001 73.560  12641',
'EVELYN         0.001 73.560  12642',
'ESTERS         0.001 73.561  12643',
'ELSNER         0.001 73.562  12644',
'EDGIN          0.001 73.563  12645',
'EDDIE          0.001 73.564  12646',
'EASTERLY       0.001 73.565  12647',
'DUSSAULT       0.001 73.565  12648',
'DURAZO         0.001 73.566  12649',
'DON            0.001 73.567  12650',
'DEVEREAUX      0.001 73.568  12651',
'DESHOTEL       0.001 73.569  12652',
'DECKERT        0.001 73.569  12653',
'DARGAN         0.001 73.570  12654',
'DARE           0.001 73.571  12655',
'CORNMAN        0.001 73.572  12656',
'CONKLE         0.001 73.573  12657',
'CONDIT         0.001 73.573  12658',
'COMMANDER      0.001 73.574  12659',
'CLAUNCH        0.001 73.575  12660',
'CLABAUGH       0.001 73.576  12661',
'CHUTE          0.001 73.577  12662',
'CHEESMAN       0.001 73.578  12663',
'CHEA           0.001 73.578  12664',
'CHARNEY        0.001 73.579  12665',
'CHARLESTON     0.001 73.580  12666',
'CASELLA        0.001 73.581  12667',
'CARONE         0.001 73.582  12668',
'CARBONELL      0.001 73.582  12669',
'CANIPE         0.001 73.583  12670',
'CAMPANA        0.001 73.584  12671',
'CALLES         0.001 73.585  12672',
'CABEZAS        0.001 73.586  12673',
'CABELL         0.001 73.586  12674',
'BUTTRAM        0.001 73.587  12675',
'BUSTILLOS      0.001 73.588  12676',
'BUSKIRK        0.001 73.589  12677',
'BOYLAND        0.001 73.590  12678',
'BOURKE         0.001 73.590  12679',
'BLAKELEY       0.001 73.591  12680',
'BIG            0.001 73.592  12681',
'BERUMEN        0.001 73.593  12682',
'BERRIER        0.001 73.594  12683',
'BENCH          0.001 73.595  12684',
'BELLI          0.001 73.595  12685',
'BEHRENDT       0.001 73.596  12686',
'BAUMBACH       0.001 73.597  12687',
'BARTSCH        0.001 73.598  12688',
'BANEY          0.001 73.599  12689',
'ARAMBULA       0.001 73.599  12690',
'ALLDREDGE      0.001 73.600  12691',
'ALLBRITTON     0.001 73.601  12692',
'ZIEMBA         0.001 73.602  12693',
'ZANDERS        0.001 73.603  12694',
'YOUNGQUIST     0.001 73.603  12695',
'YOSHIOKA       0.001 73.604  12696',
'YOHE           0.001 73.605  12697',
'WUNDER         0.001 73.606  12698',
'WOODFIN        0.001 73.607  12699',
'WOJTOWICZ      0.001 73.607  12700',
'WINKEL         0.001 73.608  12701',
'WILMORE        0.001 73.609  12702',
'WILLBANKS      0.001 73.610  12703',
'WESOLOWSKI     0.001 73.611  12704',
'WENDLAND       0.001 73.611  12705',
'WALKO          0.001 73.612  12706',
'VOTAW          0.001 73.613  12707',
'VANEK          0.001 73.614  12708',
'URIARTE        0.001 73.615  12709',
'URBANO         0.001 73.615  12710',
'TURNIPSEED     0.001 73.616  12711',
'TRICHE         0.001 73.617  12712',
'TRAUTMAN       0.001 73.618  12713',
'TOWLER         0.001 73.619  12714',
'TOKARZ         0.001 73.619  12715',
'TEMPLES        0.001 73.620  12716',
'TEFFT          0.001 73.621  12717',
'TEEGARDEN      0.001 73.622  12718',
'SYED           0.001 73.622  12719',
'SWIGART        0.001 73.623  12720',
'STRYKER        0.001 73.624  12721',
'STOLLER        0.001 73.625  12722',
'STAPLER        0.001 73.626  12723',
'STANSFIELD     0.001 73.626  12724',
'SMIT           0.001 73.627  12725',
'SMELLEY        0.001 73.628  12726',
'SICARD         0.001 73.629  12727',
'SHULMAN        0.001 73.630  12728',
'SHEW           0.001 73.630  12729',
'SHEAR          0.001 73.631  12730',
'SHEAHAN        0.001 73.632  12731',
'SHARPTON       0.001 73.633  12732',
'SELVIDGE       0.001 73.634  12733',
'SCHLESINGER    0.001 73.634  12734',
'SAVELL         0.001 73.635  12735',
'SANDFORD       0.001 73.636  12736',
'SABATINO       0.001 73.637  12737',
'ROSENBLOOM     0.001 73.638  12738',
'ROEPKE         0.001 73.638  12739',
'RISH           0.001 73.639  12740',
'RHAMES         0.001 73.640  12741',
'RENKEN         0.001 73.641  12742',
'REGER          0.001 73.642  12743',
'RAPPAPORT      0.001 73.642  12744',
'QUARTERMAN     0.001 73.643  12745',
'PUIG           0.001 73.644  12746',
'PRASAD         0.001 73.645  12747',
'POPLAR         0.001 73.646  12748',
'PIZANO         0.001 73.646  12749',
'PIGOTT         0.001 73.647  12750',
'PICK           0.001 73.648  12751',
'PHAIR          0.001 73.649  12752',
'PETRICK        0.001 73.650  12753',
'PATT           0.001 73.650  12754',
'PASCUA         0.001 73.651  12755',
'PARAMORE       0.001 73.652  12756',
'PAPINEAU       0.001 73.653  12757',
'OLIVIERI       0.001 73.653  12758',
'OGREN          0.001 73.654  12759',
'NORDEN         0.001 73.655  12760',
'NOGA           0.001 73.656  12761',
'NISBET         0.001 73.657  12762',
'MUNK           0.001 73.657  12763',
'MUNCH          0.001 73.658  12764',
'MUI            0.001 73.659  12765',
'MORVANT        0.001 73.660  12766',
'MORO           0.001 73.661  12767',
'MOLONEY        0.001 73.661  12768',
'MERZ           0.001 73.662  12769',
'MENG           0.001 73.663  12770',
'MELTZER        0.001 73.664  12771',
'MELLINGER      0.001 73.665  12772',
'MEHL           0.001 73.665  12773',
'MCNEALY        0.001 73.666  12774',
'MCKERNAN       0.001 73.667  12775',
'MCHANEY        0.001 73.668  12776',
'MCCLESKEY      0.001 73.669  12777',
'MCANDREWS      0.001 73.669  12778',
'MAYTON         0.001 73.670  12779',
'MAYOR          0.001 73.671  12780',
'MARKERT        0.001 73.672  12781',
'MARESCA        0.001 73.673  12782',
'MARCELLUS      0.001 73.673  12783',
'MANER          0.001 73.674  12784',
'MANDUJANO      0.001 73.675  12785',
'MALPASS        0.001 73.676  12786',
'MACINTYRE      0.001 73.677  12787',
'LYTTON         0.001 73.677  12788',
'LYALL          0.001 73.678  12789',
'LUMMUS         0.001 73.679  12790',
'LONGSHORE      0.001 73.680  12791',
'LONGFELLOW     0.001 73.681  12792',
'LOKEY          0.001 73.681  12793',
'LOCHER         0.001 73.682  12794',
'LEVERETTE      0.001 73.683  12795',
'LEPE           0.001 73.684  12796',
'LEFEVER        0.001 73.685  12797',
'LEESON         0.001 73.685  12798',
'LEDERER        0.001 73.686  12799',
'LAMPERT        0.001 73.687  12800',
'LAGRONE        0.001 73.688  12801',
'LA             0.001 73.688  12802',
'KREIDER        0.001 73.689  12803',
'KORTH          0.001 73.690  12804',
'KNOPF          0.001 73.691  12805',
'KLEIST         0.001 73.692  12806',
'KISS           0.001 73.692  12807',
'KELTNER        0.001 73.693  12808',
'KELLING        0.001 73.694  12809',
'KASPAR         0.001 73.695  12810',
'KAPPLER        0.001 73.696  12811',
'JUSTIN         0.001 73.696  12812',
'JOSEPHS        0.001 73.697  12813',
'JIANG          0.001 73.698  12814',
'HUCKINS        0.001 73.699  12815',
'HORACE         0.001 73.700  12816',
'HOLUB          0.001 73.700  12817',
'HOFSTETTER     0.001 73.701  12818',
'HOEHN          0.001 73.702  12819',
'HIGGINSON      0.001 73.703  12820',
'HENNINGS       0.001 73.704  12821',
'HEID           0.001 73.704  12822',
'HAVEL          0.001 73.705  12823',
'HAUER          0.001 73.706  12824',
'HARNDEN        0.001 73.707  12825',
'HARGREAVES     0.001 73.708  12826',
'HANGER         0.001 73.708  12827',
'GUILD          0.001 73.709  12828',
'GUIDI          0.001 73.710  12829',
'GRATE          0.001 73.711  12830',
'GRANDY         0.001 73.712  12831',
'GRANDSTAFF     0.001 73.712  12832',
'GOZA           0.001 73.713  12833',
'GOODRIDGE      0.001 73.714  12834',
'GOODFELLOW     0.001 73.715  12835',
'GOGGANS        0.001 73.716  12836',
'GODLEY         0.001 73.716  12837',
'GIUSTI         0.001 73.717  12838',
'GILYARD        0.001 73.718  12839',
'GEOGHEGAN      0.001 73.719  12840',
'GALYON         0.001 73.719  12841',
'GAETA          0.001 73.720  12842',
'FUNES          0.001 73.721  12843',
'FONT           0.001 73.722  12844',
'FLOR           0.001 73.723  12845',
'FLANARY        0.001 73.723  12846',
'FALES          0.001 73.724  12847',
'ERLANDSON      0.001 73.725  12848',
'ELLETT         0.001 73.726  12849',
'ELIA           0.001 73.727  12850',
'EDINGER        0.001 73.727  12851',
'DZIEDZIC       0.001 73.728  12852',
'DUERR          0.001 73.729  12853',
'DRAUGHN        0.001 73.730  12854',
'DONOHO         0.001 73.731  12855',
'DIMATTEO       0.001 73.731  12856',
'DEVOS          0.001 73.732  12857',
'DEMATTEO       0.001 73.733  12858',
'DEGNAN         0.001 73.734  12859',
'DARLINGTON     0.001 73.735  12860',
'DANIS          0.001 73.735  12861',
'DAM            0.001 73.736  12862',
'DAHLSTROM      0.001 73.737  12863',
'DAHLKE         0.001 73.738  12864',
'CZAJKOWSKI     0.001 73.739  12865',
'CUMBIE         0.001 73.739  12866',
'CULBERT        0.001 73.740  12867',
'CROSIER        0.001 73.741  12868',
'CROLEY         0.001 73.742  12869',
'CORRY          0.001 73.743  12870',
'CLINGER        0.001 73.743  12871',
'CHESHIRE       0.001 73.744  12872',
'CHALKER        0.001 73.745  12873',
'CEPHAS         0.001 73.746  12874',
'CAYWOOD        0.001 73.747  12875',
'CAVALIER       0.001 73.747  12876',
'CAPEHART       0.001 73.748  12877',
'CALES          0.001 73.749  12878',
'CADIZ          0.001 73.750  12879',
'BUSSIERE       0.001 73.750  12880',
'BURRISS        0.001 73.751  12881',
'BURKART        0.001 73.752  12882',
'BRUNDIDGE      0.001 73.753  12883',
'BRONSTEIN      0.001 73.754  12884',
'BREEZE         0.001 73.754  12885',
'BRADT          0.001 73.755  12886',
'BOYDSTON       0.001 73.756  12887',
'BOSTROM        0.001 73.757  12888',
'BOREL          0.001 73.758  12889',
'BOLLES         0.001 73.758  12890',
'BLAY           0.001 73.759  12891',
'BLACKWELDER    0.001 73.760  12892',
'BISSETT        0.001 73.761  12893',
'BEVERS         0.001 73.762  12894',
'BESTER         0.001 73.762  12895',
'BERNARDINO     0.001 73.763  12896',
'BENEFIEL       0.001 73.764  12897',
'BELOTE         0.001 73.765  12898',
'BEEDLE         0.001 73.766  12899',
'BECKLES        0.001 73.766  12900',
'BAYSINGER      0.001 73.767  12901',
'BASSLER        0.001 73.768  12902',
'BARTEE         0.001 73.769  12903',
'BARLETT        0.001 73.770  12904',
'BARGAS         0.001 73.770  12905',
'BAREFIELD      0.001 73.771  12906',
'BAPTISTA       0.001 73.772  12907',
'ARTERBURN      0.001 73.773  12908',
'ARMAS          0.001 73.774  12909',
'APPERSON       0.001 73.774  12910',
'AMOROSO        0.001 73.775  12911',
'AMEDEE         0.001 73.776  12912',
'ZULLO          0.001 73.777  12913',
'ZELLNER        0.001 73.777  12914',
'YELTON         0.001 73.778  12915',
'WILLEMS        0.001 73.779  12916',
'WILKIN         0.001 73.780  12917',
'WIGGIN         0.001 73.781  12918',
'WIDMAN         0.001 73.781  12919',
'WELK           0.001 73.782  12920',
'WEINGARTEN     0.001 73.783  12921',
'WALLA          0.001 73.784  12922',
'VIERS          0.001 73.784  12923',
'VESS           0.001 73.785  12924',
'VERDI          0.001 73.786  12925',
'VEAZEY         0.001 73.787  12926',
'VANNOTE        0.001 73.788  12927',
'TULLOS         0.001 73.788  12928',
'TRUDELL        0.001 73.789  12929',
'TROWER         0.001 73.790  12930',
'TROSPER        0.001 73.791  12931',
'TRIMM          0.001 73.791  12932',
'TREW           0.001 73.792  12933',
'TOUSIGNANT     0.001 73.793  12934',
'TOPP           0.001 73.794  12935',
'TOCCO          0.001 73.795  12936',
'THORESON       0.001 73.795  12937',
'TERHUNE        0.001 73.796  12938',
'TATOM          0.001 73.797  12939',
'SUNIGA         0.001 73.798  12940',
'SUMTER         0.001 73.799  12941',
'STEEVES        0.001 73.799  12942',
'STANSELL       0.001 73.800  12943',
'SOLTIS         0.001 73.801  12944',
'SLOSS          0.001 73.802  12945',
'SLAVEN         0.001 73.802  12946',
'SING           0.001 73.803  12947',
'SHISLER        0.001 73.804  12948',
'SHERIFF        0.001 73.805  12949',
'SHANLEY        0.001 73.806  12950',
'SERVANTES      0.001 73.806  12951',
'SELDERS        0.001 73.807  12952',
'SEGREST        0.001 73.808  12953',
'SEESE          0.001 73.809  12954',
'SEEBER         0.001 73.809  12955',
'SCHAIBLE       0.001 73.810  12956',
'SAVALA         0.001 73.811  12957',
'SARTOR         0.001 73.812  12958',
'RUTT           0.001 73.813  12959',
'RUMBAUGH       0.001 73.813  12960',
'RUIS           0.001 73.814  12961',
'ROTEN          0.001 73.815  12962',
'ROESSLER       0.001 73.816  12963',
'RITENOUR       0.001 73.816  12964',
'RINEY          0.001 73.817  12965',
'RESTIVO        0.001 73.818  12966',
'RENE           0.001 73.819  12967',
'RENARD         0.001 73.820  12968',
'RAKESTRAW      0.001 73.820  12969',
'RAKE           0.001 73.821  12970',
'RACHAL         0.001 73.822  12971',
'QUIROS         0.001 73.823  12972',
'PULLIN         0.001 73.823  12973',
'PRUDHOMME      0.001 73.824  12974',
'PRIMEAUX       0.001 73.825  12975',
'PRESTRIDGE     0.001 73.826  12976',
'PRESSWOOD      0.001 73.827  12977',
'PONTE          0.001 73.827  12978',
'POLZIN         0.001 73.828  12979',
'POARCH         0.001 73.829  12980',
'PITTENGER      0.001 73.830  12981',
'PIGGOTT        0.001 73.830  12982',
'PICKELL        0.001 73.831  12983',
'PHANEUF        0.001 73.832  12984',
'PARVIN         0.001 73.833  12985',
'PARMLEY        0.001 73.834  12986',
'PALMERI        0.001 73.834  12987',
'PAISLEY        0.001 73.835  12988',
'OZMENT         0.001 73.836  12989',
'ORMOND         0.001 73.837  12990',
'ORDAZ          0.001 73.837  12991',
'ONO            0.001 73.838  12992',
'OLEA           0.001 73.839  12993',
'OBANION        0.001 73.840  12994',
'OAKMAN         0.001 73.841  12995',
'NOVICK         0.001 73.841  12996',
'NICKLAS        0.001 73.842  12997',
'NEMEC          0.001 73.843  12998',
'NAPPI          0.001 73.844  12999',
'MUND           0.001 73.844  13000',
'MORFIN         0.001 73.845  13001',
'MERA           0.001 73.846  13002',
'MELGOZA        0.001 73.847  13003',
'MELBY          0.001 73.848  13004',
'MCGOLDRICK     0.001 73.848  13005',
'MCELWAIN       0.001 73.849  13006',
'MCCHRISTIAN    0.001 73.850  13007',
'MCCAW          0.001 73.851  13008',
'MARQUART       0.001 73.851  13009',
'MARLATT        0.001 73.852  13010',
'MARKOVICH      0.001 73.853  13011',
'MAHR           0.001 73.854  13012',
'LUPTON         0.001 73.855  13013',
'LUCUS          0.001 73.855  13014',
'LORUSSO        0.001 73.856  13015',
'LERMAN         0.001 73.857  13016',
'LEDDY          0.001 73.858  13017',
'LEAMAN         0.001 73.858  13018',
'LEACHMAN       0.001 73.859  13019',
'LAVALLE        0.001 73.860  13020',
'LADUKE         0.001 73.861  13021',
'KUMMER         0.001 73.862  13022',
'KOURY          0.001 73.862  13023',
'KONOPKA        0.001 73.863  13024',
'KOH            0.001 73.864  13025',
'KOEPP          0.001 73.865  13026',
'KLOSS          0.001 73.865  13027',
'KLOCK          0.001 73.866  13028',
'KHALIL         0.001 73.867  13029',
'KERNAN         0.001 73.868  13030',
'KAPPEL         0.001 73.869  13031',
'JAKES          0.001 73.869  13032',
'INOUE          0.001 73.870  13033',
'HUTSELL        0.001 73.871  13034',
'HOWLE          0.001 73.872  13035',
'HONORE         0.001 73.873  13036',
'HOLE           0.001 73.873  13037',
'HOCKMAN        0.001 73.874  13038',
'HOCKADAY       0.001 73.875  13039',
'HILTZ          0.001 73.876  13040',
'HETHERINGTON   0.001 73.876  13041',
'HESSER         0.001 73.877  13042',
'HERSHMAN       0.001 73.878  13043',
'HENG           0.001 73.879  13044',
'HEFFRON        0.001 73.880  13045',
'HEADEN         0.001 73.880  13046',
'HASKETT        0.001 73.881  13047',
'HARTLINE       0.001 73.882  13048',
'HARNED         0.001 73.883  13049',
'GUILLEMETTE    0.001 73.883  13050',
'GUGLIELMO      0.001 73.884  13051',
'GUERCIO        0.001 73.885  13052',
'GREENBAUM      0.001 73.886  13053',
'GORIS          0.001 73.887  13054',
'GLINES         0.001 73.887  13055',
'GILMOUR        0.001 73.888  13056',
'GARDELLA       0.001 73.889  13057',
'GADD           0.001 73.890  13058',
'GABLER         0.001 73.890  13059',
'GABBERT        0.001 73.891  13060',
'FUSELIER       0.001 73.892  13061',
'FREUDENBURG    0.001 73.893  13062',
'FRAGOSO        0.001 73.894  13063',
'FOLLIS         0.001 73.894  13064',
'FLEMINGS       0.001 73.895  13065',
'FELTMAN        0.001 73.896  13066',
'FEBUS          0.001 73.897  13067',
'FARREN         0.001 73.897  13068',
'FALLIS         0.001 73.898  13069',
'EVERT          0.001 73.899  13070',
'EKSTROM        0.001 73.900  13071',
'EASTRIDGE      0.001 73.901  13072',
'DYCK           0.001 73.901  13073',
'DUFAULT        0.001 73.902  13074',
'DUBREUIL       0.001 73.903  13075',
'DRESSER        0.001 73.904  13076',
'DRAPEAU        0.001 73.904  13077',
'DOMINGUES      0.001 73.905  13078',
'DOLEZAL        0.001 73.906  13079',
'DINKEL         0.001 73.907  13080',
'DIDONATO       0.001 73.908  13081',
'DEVITT         0.001 73.908  13082',
'DEVANE         0.001 73.909  13083',
'DEMOTT         0.001 73.910  13084',
'DAUGHTREY      0.001 73.911  13085',
'DAUBERT        0.001 73.911  13086',
'DAS            0.001 73.912  13087',
'DARRELL        0.001 73.913  13088',
'CREASON        0.001 73.914  13089',
'CRARY          0.001 73.915  13090',
'COSTILLA       0.001 73.915  13091',
'CHIPPS         0.001 73.916  13092',
'CHEATWOOD      0.001 73.917  13093',
'CARMEAN        0.001 73.918  13094',
'CANTON         0.001 73.918  13095',
'CAFFREY        0.001 73.919  13096',
'BURGHER        0.001 73.920  13097',
'BUKER          0.001 73.921  13098',
'BRUNK          0.001 73.922  13099',
'BRODBECK       0.001 73.922  13100',
'BRANTNER       0.001 73.923  13101',
'BRANDY         0.001 73.924  13102',
'BOLIVAR        0.001 73.925  13103',
'BOERNER        0.001 73.925  13104',
'BODKIN         0.001 73.926  13105',
'BIEL           0.001 73.927  13106',
'BETTY          0.001 73.928  13107',
'BENCOMO        0.001 73.929  13108',
'BELLINO        0.001 73.929  13109',
'BELIVEAU       0.001 73.930  13110',
'BEAUVAIS       0.001 73.931  13111',
'BEAUPRE        0.001 73.932  13112',
'BAYLIS         0.001 73.932  13113',
'BASKETT        0.001 73.933  13114',
'BARCUS         0.001 73.934  13115',
'BARBERA        0.001 73.935  13116',
'BALTZ          0.001 73.936  13117',
'ASAY           0.001 73.936  13118',
'ARNEY          0.001 73.937  13119',
'ARCURI         0.001 73.938  13120',
'ANKNEY         0.001 73.939  13121',
'AGOSTINI       0.001 73.939  13122',
'ADDY           0.001 73.940  13123',
'ZWILLING       0.001 73.941  13124',
'ZUBIA          0.001 73.942  13125',
'ZOLLINGER      0.001 73.943  13126',
'ZEITZ          0.001 73.943  13127',
'YARD           0.001 73.944  13128',
'YANES          0.001 73.945  13129',
'WINSHIP        0.001 73.946  13130',
'WINNINGHAM     0.001 73.946  13131',
'WICKLINE       0.001 73.947  13132',
'WEBRE          0.001 73.948  13133',
'WADDINGTON     0.001 73.949  13134',
'VOSBURGH       0.001 73.949  13135',
'VESSELS        0.001 73.950  13136',
'VERRETT        0.001 73.951  13137',
'VEDDER         0.001 73.952  13138',
'VARNUM         0.001 73.952  13139',
'VANDEVENTER    0.001 73.953  13140',
'VACCA          0.001 73.954  13141',
'USRY           0.001 73.955  13142',
'TOWRY          0.001 73.956  13143',
'TOUCHET        0.001 73.956  13144',
'TOOKES         0.001 73.957  13145',
'TONKIN         0.001 73.958  13146',
'TIMKO          0.001 73.959  13147',
'TIBBITTS       0.001 73.959  13148',
'THEDFORD       0.001 73.960  13149',
'TARLETON       0.001 73.961  13150',
'TALTY          0.001 73.962  13151',
'TALAMANTEZ     0.001 73.962  13152',
'TAFOLLA        0.001 73.963  13153',
'SUGG           0.001 73.964  13154',
'STRECKER       0.001 73.965  13155',
'STIRLING       0.001 73.965  13156',
'STEFFAN        0.001 73.966  13157',
'SPIVA          0.001 73.967  13158',
'SLAPE          0.001 73.968  13159',
'SIEMENS        0.001 73.969  13160',
'SHATZER        0.001 73.969  13161',
'SEYLER         0.001 73.970  13162',
'SEAMANS        0.001 73.971  13163',
'SCHMALTZ       0.001 73.972  13164',
'SCHIPPER       0.001 73.972  13165',
'SASSO          0.001 73.973  13166',
'SAILOR         0.001 73.974  13167',
'RUPPE          0.001 73.975  13168',
'RUNNER         0.001 73.975  13169',
'ROYALS         0.001 73.976  13170',
'ROUDEBUSH      0.001 73.977  13171',
'RIPPLE         0.001 73.978  13172',
'RIEMER         0.001 73.978  13173',
'RICHARSON      0.001 73.979  13174',
'REVILLA        0.001 73.980  13175',
'REICHENBACH    0.001 73.981  13176',
'RATLEY         0.001 73.981  13177',
'RAILSBACK      0.001 73.982  13178',
'QUAYLE         0.001 73.983  13179',
'POPLIN         0.001 73.984  13180',
'POORMAN        0.001 73.985  13181',
'PONTON         0.001 73.985  13182',
'POLO           0.001 73.986  13183',
'POLLITT        0.001 73.987  13184',
'POITRAS        0.001 73.988  13185',
'PISCITELLI     0.001 73.988  13186',
'PIEDRA         0.001 73.989  13187',
'PICKLES        0.001 73.990  13188',
'PEW            0.001 73.991  13189',
'PERERA         0.001 73.991  13190',
'PEOPLE         0.001 73.992  13191',
'PENWELL        0.001 73.993  13192',
'PELT           0.001 73.994  13193',
'PAULINE        0.001 73.994  13194',
'PARKHILL       0.001 73.995  13195',
'PALADINO       0.001 73.996  13196',
'ORE            0.001 73.997  13197',
'ORAM           0.001 73.998  13198',
'OLMO           0.001 73.998  13199',
'OLIVERAS       0.001 73.999  13200',
'OLIVARRIA      0.001 74.000  13201',
'OGORMAN        0.001 74.001  13202',
'NEAR           0.001 74.001  13203',
'NARON          0.001 74.002  13204',
'NA             0.001 74.003  13205',
'MUNCIE         0.001 74.004  13206',
'MOWBRAY        0.001 74.004  13207',
'MORONES        0.001 74.005  13208',
'MORETTI        0.001 74.006  13209',
'MONN           0.001 74.007  13210',
'MITTS          0.001 74.007  13211',
'MINKS          0.001 74.008  13212',
'MINARIK        0.001 74.009  13213',
'MIMMS          0.001 74.010  13214',
'MILLIRON       0.001 74.010  13215',
'MILLINGTON     0.001 74.011  13216',
'MILLHOUSE      0.001 74.012  13217',
'MESSERSMITH    0.001 74.013  13218',
'MCNETT         0.001 74.014  13219',
'MCKINSTRY      0.001 74.014  13220',
'MCGEORGE       0.001 74.015  13221',
'MCDILL         0.001 74.016  13222',
'MCATEER        0.001 74.017  13223',
'MAZZEO         0.001 74.017  13224',
'MATCHETT       0.001 74.018  13225',
'MAHOOD         0.001 74.019  13226',
'MABERY         0.001 74.020  13227',
'LUNDELL        0.001 74.020  13228',
'LOUDEN         0.001 74.021  13229',
'LOSOYA         0.001 74.022  13230',
'LISK           0.001 74.023  13231',
'LEZAMA         0.001 74.023  13232',
'LEIB           0.001 74.024  13233',
'LEBO           0.001 74.025  13234',
'LANOUE         0.001 74.026  13235',
'LANFORD        0.001 74.027  13236',
'LAFORTUNE      0.001 74.027  13237',
'KUMP           0.001 74.028  13238',
'KRONE          0.001 74.029  13239',
'KREPS          0.001 74.030  13240',
'KOTT           0.001 74.030  13241',
'KOPECKY        0.001 74.031  13242',
'KOLODZIEJ      0.001 74.032  13243',
'KNUCKLES       0.001 74.033  13244',
'KINMAN         0.001 74.033  13245',
'KIMMONS        0.001 74.034  13246',
'KELTY          0.001 74.035  13247',
'KASTER         0.001 74.036  13248',
'KARLSON        0.001 74.036  13249',
'KANIA          0.001 74.037  13250',
'JULES          0.001 74.038  13251',
'JOYAL          0.001 74.039  13252',
'JOB            0.001 74.039  13253',
'JENNER         0.001 74.040  13254',
'JASINSKI       0.001 74.041  13255',
'JANDREAU       0.001 74.042  13256',
'ISENHOUR       0.001 74.043  13257',
'HUNZIKER       0.001 74.043  13258',
'HUHN           0.001 74.044  13259',
'HOUDE          0.001 74.045  13260',
'HOUCHINS       0.001 74.046  13261',
'HOLTMAN        0.001 74.046  13262',
'HODO           0.001 74.047  13263',
'HEYMAN         0.001 74.048  13264',
'HENTGES        0.001 74.049  13265',
'HEDBERG        0.001 74.049  13266',
'HAYNE          0.001 74.050  13267',
'HAYCRAFT       0.001 74.051  13268',
'HARSHBARGER    0.001 74.052  13269',
'HARSHAW        0.001 74.052  13270',
'HARRISS        0.001 74.053  13271',
'HARING         0.001 74.054  13272',
'HANSELL        0.001 74.055  13273',
'HANFORD        0.001 74.056  13274',
'HANDLER        0.001 74.056  13275',
'HAMBURG        0.001 74.057  13276',
'HAMBLEN        0.001 74.058  13277',
'GUNNELL        0.001 74.059  13278',
'GROAT          0.001 74.059  13279',
'GORECKI        0.001 74.060  13280',
'GOCHENOUR      0.001 74.061  13281',
'GLEESON        0.001 74.062  13282',
'GENEST         0.001 74.062  13283',
'GEISER         0.001 74.063  13284',
'GABRIELE       0.001 74.064  13285',
'FULGHUM        0.001 74.065  13286',
'FRIESE         0.001 74.065  13287',
'FRIDLEY        0.001 74.066  13288',
'FREEBORN       0.001 74.067  13289',
'FRAILEY        0.001 74.068  13290',
'FLAUGHER       0.001 74.068  13291',
'FIALA          0.001 74.069  13292',
'ETTINGER       0.001 74.070  13293',
'ETHEREDGE      0.001 74.071  13294',
'ESPITIA        0.001 74.072  13295',
'ERIKSEN        0.001 74.072  13296',
'ENGELBRECHT    0.001 74.073  13297',
'ENGEBRETSON    0.001 74.074  13298',
'ELIE           0.001 74.075  13299',
'EICKHOFF       0.001 74.075  13300',
'EDNEY          0.001 74.076  13301',
'EDELEN         0.001 74.077  13302',
'EBERHARD       0.001 74.078  13303',
'EASTIN         0.001 74.078  13304',
'EAKES          0.001 74.079  13305',
'DRIGGS         0.001 74.080  13306',
'DONER          0.001 74.081  13307',
'DONAGHY        0.001 74.081  13308',
'DISALVO        0.001 74.082  13309',
'DESHONG        0.001 74.083  13310',
'DAHMS          0.001 74.084  13311',
'DAHLQUIST      0.001 74.084  13312',
'CURREN         0.001 74.085  13313',
'CRIPE          0.001 74.086  13314',
'CREE           0.001 74.087  13315',
'CREAGER        0.001 74.088  13316',
'CORLE          0.001 74.088  13317',
'CONATSER       0.001 74.089  13318',
'COMMONS        0.001 74.090  13319',
'COGGIN         0.001 74.091  13320',
'CODER          0.001 74.091  13321',
'COAXUM         0.001 74.092  13322',
'CLOSSON        0.001 74.093  13323',
'CLODFELTER     0.001 74.094  13324',
'CLASSEN        0.001 74.094  13325',
'CHITTENDEN     0.001 74.095  13326',
'CASTILLEJA     0.001 74.096  13327',
'CASALE         0.001 74.097  13328',
'CARTEE         0.001 74.097  13329',
'CARRIERE       0.001 74.098  13330',
'CANUP          0.001 74.099  13331',
'CANIZALES      0.001 74.100  13332',
'BURGOON        0.001 74.101  13333',
'BUNGER         0.001 74.101  13334',
'BUGARIN        0.001 74.102  13335',
'BUCHANON       0.001 74.103  13336',
'BRUNING        0.001 74.104  13337',
'BRUCK          0.001 74.104  13338',
'BROOKES        0.001 74.105  13339',
'BROADWELL      0.001 74.106  13340',
'BRIER          0.001 74.107  13341',
'BREKKE         0.001 74.107  13342',
'BREESE         0.001 74.108  13343',
'BRACERO        0.001 74.109  13344',
'BOWLEY         0.001 74.110  13345',
'BOWERSOX       0.001 74.110  13346',
'BOSE           0.001 74.111  13347',
'BOGAR          0.001 74.112  13348',
'BLOSSOM        0.001 74.113  13349',
'BLAUSER        0.001 74.113  13350',
'BLACKER        0.001 74.114  13351',
'BJORKLUND      0.001 74.115  13352',
'BELAIR         0.001 74.116  13353',
'BAUMER         0.001 74.117  13354',
'BASLER         0.001 74.117  13355',
'BARB           0.001 74.118  13356',
'BALTIMORE      0.001 74.119  13357',
'BAIZE          0.001 74.120  13358',
'BADEN          0.001 74.120  13359',
'AUMAN          0.001 74.121  13360',
'AMUNDSEN       0.001 74.122  13361',
'AMORE          0.001 74.123  13362',
'ALVARENGA      0.001 74.123  13363',
'ADAN           0.001 74.124  13364',
'ADAMCZYK       0.001 74.125  13365',
'YERKES         0.001 74.126  13366',
'YERBY          0.001 74.126  13367',
'YAWN           0.001 74.127  13368',
'YAMAGUCHI      0.001 74.128  13369',
'WORTHEY        0.001 74.129  13370',
'WOLK           0.001 74.129  13371',
'WIXOM          0.001 74.130  13372',
'WIERSMA        0.001 74.131  13373',
'WIECZOREK      0.001 74.132  13374',
'WHIDDON        0.001 74.132  13375',
'WEYER          0.001 74.133  13376',
'WETHERINGTON   0.001 74.134  13377',
'WEIN           0.001 74.135  13378',
'WATCHMAN       0.001 74.135  13379',
'WARF           0.001 74.136  13380',
'WANSLEY        0.001 74.137  13381',
'VESELY         0.001 74.138  13382',
'VELAZCO        0.001 74.138  13383',
'VANNORMAN      0.001 74.139  13384',
'VALASQUEZ      0.001 74.140  13385',
'UTZ            0.001 74.141  13386',
'URSO           0.001 74.141  13387',
'TURCO          0.001 74.142  13388',
'TURBEVILLE     0.001 74.143  13389',
'TRIVETT        0.001 74.144  13390',
'TORRANCE       0.001 74.144  13391',
'TOOTHAKER      0.001 74.145  13392',
'TOOHEY         0.001 74.146  13393',
'TONDREAU       0.001 74.147  13394',
'THALER         0.001 74.147  13395',
'SYLVAIN        0.001 74.148  13396',
'SWINDLER       0.001 74.149  13397',
'SWIGERT        0.001 74.150  13398',
'SWIDER         0.001 74.150  13399',
'STINER         0.001 74.151  13400',
'STEVER         0.001 74.152  13401',
'STEFFES        0.001 74.153  13402',
'STAMPLEY       0.001 74.153  13403',
'STAIR          0.001 74.154  13404',
'SMIDT          0.001 74.155  13405',
'SKEETE         0.001 74.156  13406',
'SILVESTRE      0.001 74.156  13407',
'SHY            0.001 74.157  13408',
'SHUTTS         0.001 74.158  13409',
'SHOCK          0.001 74.159  13410',
'SHEALEY        0.001 74.159  13411',
'SEIGLER        0.001 74.160  13412',
'SCHWEIZER      0.001 74.161  13413',
'SCHULDT        0.001 74.162  13414',
'SCHLICHTING    0.001 74.162  13415',
'SCHERR         0.001 74.163  13416',
'SAULSBERRY     0.001 74.164  13417',
'SANER          0.001 74.165  13418',
'ROSIN          0.001 74.165  13419',
'ROSATO         0.001 74.166  13420',
'ROLING         0.001 74.167  13421',
'ROHN           0.001 74.168  13422',
'RIX            0.001 74.168  13423',
'RISTER         0.001 74.169  13424',
'REMLEY         0.001 74.170  13425',
'REMICK         0.001 74.171  13426',
'RECINOS        0.001 74.171  13427',
'RAMM           0.001 74.172  13428',
'RAABE          0.001 74.173  13429',
'PURSELL        0.001 74.174  13430',
'POYTHRESS      0.001 74.174  13431',
'POLI           0.001 74.175  13432',
'POKORNY        0.001 74.176  13433',
'PLUM           0.001 74.176  13434',
'PETTRY         0.001 74.177  13435',
'PETREY         0.001 74.178  13436',
'PETITT         0.001 74.179  13437',
'PENMAN         0.001 74.179  13438',
'PAYSON         0.001 74.180  13439',
'PAQUET         0.001 74.181  13440',
'PAPPALARDO     0.001 74.182  13441',
'OUTLAND        0.001 74.182  13442',
'OSCAR          0.001 74.183  13443',
'ORENSTEIN      0.001 74.184  13444',
'NUTTALL        0.001 74.185  13445',
'NUCKOLS        0.001 74.185  13446',
'NOTT           0.001 74.186  13447',
'NIMMO          0.001 74.187  13448',
'MURTAGH        0.001 74.188  13449',
'MOUSSEAU       0.001 74.188  13450',
'MOULDER        0.001 74.189  13451',
'MOONEYHAN      0.001 74.190  13452',
'MOAK           0.001 74.191  13453',
'MINCH          0.001 74.191  13454',
'MIERA          0.001 74.192  13455',
'MERCURI        0.001 74.193  13456',
'MEIGHAN        0.001 74.194  13457',
'MCNELLY        0.001 74.194  13458',
'MCGUFFIN       0.001 74.195  13459',
'MCCREERY       0.001 74.196  13460',
'MCCLASKEY      0.001 74.197  13461',
'MAN            0.001 74.197  13462',
'MAINOR         0.001 74.198  13463',
'LUONGO         0.001 74.199  13464',
'LUNDSTROM      0.001 74.200  13465',
'LOUGHMAN       0.001 74.200  13466',
'LOOSE          0.001 74.201  13467',
'LOBO           0.001 74.202  13468',
'LOBB           0.001 74.203  13469',
'LINHART        0.001 74.203  13470',
'LIBERTY        0.001 74.204  13471',
'LEVER          0.001 74.205  13472',
'LEU            0.001 74.206  13473',
'LEITER         0.001 74.206  13474',
'LEHOUX         0.001 74.207  13475',
'LEHN           0.001 74.208  13476',
'LARES          0.001 74.209  13477',
'LAPAN          0.001 74.209  13478',
'LANGHORNE      0.001 74.210  13479',
'LAMON          0.001 74.211  13480',
'LADWIG         0.001 74.212  13481',
'LADSON         0.001 74.212  13482',
'KUZMA          0.001 74.213  13483',
'KREITZER       0.001 74.214  13484',
'KNOP           0.001 74.215  13485',
'KEECH          0.001 74.215  13486',
'KEA            0.001 74.216  13487',
'KADLEC         0.001 74.217  13488',
'JO             0.001 74.218  13489',
'JHONSON        0.001 74.218  13490',
'JANTZ          0.001 74.219  13491',
'INGLIS         0.001 74.220  13492',
'HUSK           0.001 74.221  13493',
'HULME          0.001 74.221  13494',
'HOUSEL         0.001 74.222  13495',
'HOFMAN         0.001 74.223  13496',
'HILLERY        0.001 74.224  13497',
'HEIDENREICH    0.001 74.224  13498',
'HEAPS          0.001 74.225  13499',
'HASLETT        0.001 74.226  13500',
'HARTING        0.001 74.227  13501',
'HARTIG         0.001 74.227  13502',
'HAMLER         0.001 74.228  13503',
'HALTON         0.001 74.229  13504',
'HALLUM         0.001 74.230  13505',
'GUTIERRES      0.001 74.230  13506',
'GUIDA          0.001 74.231  13507',
'GUERRIER       0.001 74.232  13508',
'GROSSI         0.001 74.233  13509',
'GRESS          0.001 74.233  13510',
'GREENHALGH     0.001 74.234  13511',
'GRAVELLE       0.001 74.235  13512',
'GOW            0.001 74.236  13513',
'GOSLIN         0.001 74.236  13514',
'GONYEA         0.001 74.237  13515',
'GIPE           0.001 74.238  13516',
'GERSTNER       0.001 74.239  13517',
'GASSER         0.001 74.239  13518',
'GARCEAU        0.001 74.240  13519',
'GANNAWAY       0.001 74.241  13520',
'GAMA           0.001 74.242  13521',
'GALLOP         0.001 74.242  13522',
'GAISER         0.001 74.243  13523',
'FULLILOVE      0.001 74.244  13524',
'FOUTZ          0.001 74.244  13525',
'FOSSUM         0.001 74.245  13526',
'FLANNAGAN      0.001 74.246  13527',
'FARRIOR        0.001 74.247  13528',
'FALLER         0.001 74.247  13529',
'ERICKSEN       0.001 74.248  13530',
'ENTREKIN       0.001 74.249  13531',
'ENOCHS         0.001 74.250  13532',
'ENGLUND        0.001 74.250  13533',
'ELLENBERGER    0.001 74.251  13534',
'EASTLAND       0.001 74.252  13535',
'EARWOOD        0.001 74.253  13536',
'DUDASH         0.001 74.253  13537',
'DU             0.001 74.254  13538',
'DROZD          0.001 74.255  13539',
'DESOTO         0.001 74.256  13540',
'DELPH          0.001 74.256  13541',
'DEKKER         0.001 74.257  13542',
'DEJOHN         0.001 74.258  13543',
'DEGARMO        0.001 74.259  13544',
'DEFEO          0.001 74.259  13545',
'DEFALCO        0.001 74.260  13546',
'DEBLOIS        0.001 74.261  13547',
'DACUS          0.001 74.262  13548',
'CUDD           0.001 74.262  13549',
'CROSSEN        0.001 74.263  13550',
'CROOMS         0.001 74.264  13551',
'CRONAN         0.001 74.265  13552',
'COSTIN         0.001 74.265  13553',
'COSTANZA       0.001 74.266  13554',
'CORDRAY        0.001 74.267  13555',
'COMERFORD      0.001 74.268  13556',
'COLLIE         0.001 74.268  13557',
'COLEGROVE      0.001 74.269  13558',
'COLDWELL       0.001 74.270  13559',
'CLAASSEN       0.001 74.271  13560',
'CHARTRAND      0.001 74.271  13561',
'CASTIGLIONE    0.001 74.272  13562',
'CARTE          0.001 74.273  13563',
'CARDELLA       0.001 74.274  13564',
'CARBERRY       0.001 74.274  13565',
'CAPP           0.001 74.275  13566',
'CAPOBIANCO     0.001 74.276  13567',
'CANGELOSI      0.001 74.277  13568',
'BUCH           0.001 74.277  13569',
'BRUNELL        0.001 74.278  13570',
'BRUCKER        0.001 74.279  13571',
'BROCKETT       0.001 74.280  13572',
'BRIZENDINE     0.001 74.280  13573',
'BRINEGAR       0.001 74.281  13574',
'BRIMER         0.001 74.282  13575',
'BRASE          0.001 74.283  13576',
'BOSQUE         0.001 74.283  13577',
'BONK           0.001 74.284  13578',
'BOLGER         0.001 74.285  13579',
'BOHANON        0.001 74.286  13580',
'BOHAN          0.001 74.286  13581',
'BLAZEK         0.001 74.287  13582',
'BERNING        0.001 74.288  13583',
'BERGAN         0.001 74.289  13584',
'BENNETTE       0.001 74.289  13585',
'BEAUCHEMIN     0.001 74.290  13586',
'BATTISTE       0.001 74.291  13587',
'BARRA          0.001 74.292  13588',
'BALOGH         0.001 74.292  13589',
'AVIS           0.001 74.293  13590',
'AVALLONE       0.001 74.294  13591',
'AUBRY          0.001 74.295  13592',
'ASHCROFT       0.001 74.295  13593',
'ASENCIO        0.001 74.296  13594',
'ARLEDGE        0.001 74.297  13595',
'ANCHONDO       0.001 74.298  13596',
'AMY            0.001 74.298  13597',
'ALVORD         0.001 74.299  13598',
'ACHESON        0.001 74.300  13599',
'ZALESKI        0.001 74.301  13600',
'YONKER         0.001 74.301  13601',
'WYSS           0.001 74.302  13602',
'WYCOFF         0.001 74.303  13603',
'WOODBURN       0.001 74.303  13604',
'WININGER       0.001 74.304  13605',
'WINDERS        0.001 74.305  13606',
'WILLMON        0.001 74.306  13607',
'WIECHMANN      0.001 74.306  13608',
'WESTLEY        0.001 74.307  13609',
'WEATHERHOLT    0.001 74.308  13610',
'WARNICK        0.001 74.309  13611',
'WARDLE         0.001 74.309  13612',
'WARBURTON      0.001 74.310  13613',
'VOLKERT        0.001 74.311  13614',
'VIRGIN         0.001 74.311  13615',
'VILLANVEVA     0.001 74.312  13616',
'VEIT           0.001 74.313  13617',
'VASS           0.001 74.314  13618',
'VANALLEN       0.001 74.314  13619',
'TUNG           0.001 74.315  13620',
'TORIBIO        0.001 74.316  13621',
'TOOTHMAN       0.001 74.317  13622',
'TIGGS          0.001 74.317  13623',
'THORNSBERRY    0.001 74.318  13624',
'THOME          0.001 74.319  13625',
'TEPPER         0.001 74.320  13626',
'TEEPLE         0.001 74.320  13627',
'TEBO           0.001 74.321  13628',
'TASSONE        0.001 74.322  13629',
'TANN           0.001 74.322  13630',
'SULTAN         0.001 74.323  13631',
'STUCKER        0.001 74.324  13632',
'STOTLER        0.001 74.325  13633',
'STONEMAN       0.001 74.325  13634',
'STEHLE         0.001 74.326  13635',
'STANBACK       0.001 74.327  13636',
'STALLCUP       0.001 74.328  13637',
'SPURR          0.001 74.328  13638',
'SPEERS         0.001 74.329  13639',
'SPADA          0.001 74.330  13640',
'SOLUM          0.001 74.330  13641',
'SMOLEN         0.001 74.331  13642',
'SINN           0.001 74.332  13643',
'SILVERNAIL     0.001 74.333  13644',
'SHOLES         0.001 74.333  13645',
'SHIVES         0.001 74.334  13646',
'SHAIN          0.001 74.335  13647',
'SECREST        0.001 74.336  13648',
'SEAGLE         0.001 74.336  13649',
'SCHUETTE       0.001 74.337  13650',
'SCHOCH         0.001 74.338  13651',
'SCHNIEDERS     0.001 74.339  13652',
'SCHILD         0.001 74.339  13653',
'SCHIAVONE      0.001 74.340  13654',
'SCHIAVO        0.001 74.341  13655',
'SCHARFF        0.001 74.341  13656',
'SANTEE         0.001 74.342  13657',
'SANDELL        0.001 74.343  13658',
'SALVO          0.001 74.344  13659',
'ROLLINGS       0.001 74.344  13660',
'ROLLIN         0.001 74.345  13661',
'RIVENBURG      0.001 74.346  13662',
'RITZMAN        0.001 74.347  13663',
'RIST           0.001 74.347  13664',
'RIO            0.001 74.348  13665',
'RICARDO        0.001 74.349  13666',
'REYNOSA        0.001 74.350  13667',
'RETANA         0.001 74.350  13668',
'REIBER         0.001 74.351  13669',
'REGNIER        0.001 74.352  13670',
'RARICK         0.001 74.352  13671',
'RANSOME        0.001 74.353  13672',
'RALL           0.001 74.354  13673',
'PROPES         0.001 74.355  13674',
'PRALL          0.001 74.355  13675',
'POYNER         0.001 74.356  13676',
'PONDS          0.001 74.357  13677',
'POITRA         0.001 74.358  13678',
'PLASTER        0.001 74.358  13679',
'PIPPINS        0.001 74.359  13680',
'PINION         0.001 74.360  13681',
'PICCOLO        0.001 74.360  13682',
'PHU            0.001 74.361  13683',
'PERILLO        0.001 74.362  13684',
'PENROSE        0.001 74.363  13685',
'PENDERGRAFT    0.001 74.363  13686',
'PELCHAT        0.001 74.364  13687',
'PEED           0.001 74.365  13688',
'PATENAUDE      0.001 74.366  13689',
'PALKO          0.001 74.366  13690',
'ODOMS          0.001 74.367  13691',
'ODDO           0.001 74.368  13692',
'NOVOA          0.001 74.369  13693',
'NOONE          0.001 74.369  13694',
'NEWBURN        0.001 74.370  13695',
'NEGRI          0.001 74.371  13696',
'NANTZ          0.001 74.371  13697',
'MOSSER         0.001 74.372  13698',
'MOSHIER        0.001 74.373  13699',
'MOLTER         0.001 74.374  13700',
'MOLINARI       0.001 74.374  13701',
'MOLER          0.001 74.375  13702',
'MILLMAN        0.001 74.376  13703',
'MEURER         0.001 74.377  13704',
'MENDEL         0.001 74.377  13705',
'MCRAY          0.001 74.378  13706',
'MCNICHOLAS     0.001 74.379  13707',
'MCNERNEY       0.001 74.379  13708',
'MCKILLIP       0.001 74.380  13709',
'MCILVAIN       0.001 74.381  13710',
'MCADORY        0.001 74.382  13711',
'MATTER         0.001 74.382  13712',
'MASTER         0.001 74.383  13713',
'MARMOL         0.001 74.384  13714',
'MARINEZ        0.001 74.385  13715',
'MANZER         0.001 74.385  13716',
'MANKIN         0.001 74.386  13717',
'MAKRIS         0.001 74.387  13718',
'MAJESKI        0.001 74.388  13719',
'MAGNUS         0.001 74.388  13720',
'MAFFEI         0.001 74.389  13721',
'LUOMA          0.001 74.390  13722',
'LUMAN          0.001 74.390  13723',
'LUEBKE         0.001 74.391  13724',
'LUBY           0.001 74.392  13725',
'LOMONACO       0.001 74.393  13726',
'LOAR           0.001 74.393  13727',
'LITCHFORD      0.001 74.394  13728',
'LINTZ          0.001 74.395  13729',
'LICHT          0.001 74.396  13730',
'LEVENSON       0.001 74.396  13731',
'LEGGE          0.001 74.397  13732',
'LAUGHTER       0.001 74.398  13733',
'LANIGAN        0.001 74.399  13734',
'KROM           0.001 74.399  13735',
'KREGER         0.001 74.400  13736',
'KOOP           0.001 74.401  13737',
'KOBER          0.001 74.401  13738',
'KLIMA          0.001 74.402  13739',
'KITTERMAN      0.001 74.403  13740',
'KINKEAD        0.001 74.404  13741',
'KIMBELL        0.001 74.404  13742',
'KILIAN         0.001 74.405  13743',
'KIBBE          0.001 74.406  13744',
'KENDIG         0.001 74.407  13745',
'KEMMER         0.001 74.407  13746',
'KASH           0.001 74.408  13747',
'JENKIN         0.001 74.409  13748',
'INNISS         0.001 74.409  13749',
'HURLBUT        0.001 74.410  13750',
'HUNSUCKER      0.001 74.411  13751',
'HUGO           0.001 74.412  13752',
'HUCKABEE       0.001 74.412  13753',
'HOXIE          0.001 74.413  13754',
'HOGLUND        0.001 74.414  13755',
'HOCKENSMITH    0.001 74.415  13756',
'HOADLEY        0.001 74.415  13757',
'HINKEL         0.001 74.416  13758',
'HIGUERA        0.001 74.417  13759',
'HERRMAN        0.001 74.418  13760',
'HEINER         0.001 74.418  13761',
'HAUSMANN       0.001 74.419  13762',
'HAUBRICH       0.001 74.420  13763',
'HASSEN         0.001 74.420  13764',
'HANLIN         0.001 74.421  13765',
'HALLINAN       0.001 74.422  13766',
'HAGLUND        0.001 74.423  13767',
'HAGBERG        0.001 74.423  13768',
'GULLO          0.001 74.424  13769',
'GULLION        0.001 74.425  13770',
'GRONER         0.001 74.426  13771',
'GREENWALT      0.001 74.426  13772',
'GRAND          0.001 74.427  13773',
'GOODWILL       0.001 74.428  13774',
'GONG           0.001 74.428  13775',
'GOBERT         0.001 74.429  13776',
'GLOWACKI       0.001 74.430  13777',
'GLESSNER       0.001 74.431  13778',
'GINES          0.001 74.431  13779',
'GILDERSLEEVE   0.001 74.432  13780',
'GILDEA         0.001 74.433  13781',
'GERKE          0.001 74.434  13782',
'GERHARD        0.001 74.434  13783',
'GEBHARD        0.001 74.435  13784',
'GATTON         0.001 74.436  13785',
'GATELY         0.001 74.437  13786',
'GALASSO        0.001 74.437  13787',
'FRALICK        0.001 74.438  13788',
'FOUSE          0.001 74.439  13789',
'FLUHARTY       0.001 74.439  13790',
'FAUCETTE       0.001 74.440  13791',
'FAIRFAX        0.001 74.441  13792',
'EVANOFF        0.001 74.442  13793',
'ELSER          0.001 74.442  13794',
'ELLARD         0.001 74.443  13795',
'EGERTON        0.001 74.444  13796',
'EDIE           0.001 74.445  13797',
'ECTOR          0.001 74.445  13798',
'EBLING         0.001 74.446  13799',
'DUNKEL         0.001 74.447  13800',
'DUHART         0.001 74.448  13801',
'DRYSDALE       0.001 74.448  13802',
'DOSTAL         0.001 74.449  13803',
'DOREY          0.001 74.450  13804',
'DOLPH          0.001 74.450  13805',
'DOLES          0.001 74.451  13806',
'DISMUKES       0.001 74.452  13807',
'DIGREGORIO     0.001 74.453  13808',
'DIGBY          0.001 74.453  13809',
'DEWEES         0.001 74.454  13810',
'DERAMUS        0.001 74.455  13811',
'DENNISTON      0.001 74.456  13812',
'DENNETT        0.001 74.456  13813',
'DELONEY        0.001 74.457  13814',
'DELAUGHTER     0.001 74.458  13815',
'DARCY          0.001 74.458  13816',
'CUNEO          0.001 74.459  13817',
'CUMBERLAND     0.001 74.460  13818',
'CROTTS         0.001 74.461  13819',
'CROSSWHITE     0.001 74.461  13820',
'CREMEANS       0.001 74.462  13821',
'CREASEY        0.001 74.463  13822',
'COTTMAN        0.001 74.464  13823',
'COTHERN        0.001 74.464  13824',
'COSTALES       0.001 74.465  13825',
'COSNER         0.001 74.466  13826',
'CORPUS         0.001 74.467  13827',
'CORA           0.001 74.467  13828',
'CONSTABLE      0.001 74.468  13829',
'COLLIGAN       0.001 74.469  13830',
'COBBLE         0.001 74.469  13831',
'CLUTTER        0.001 74.470  13832',
'CHUPP          0.001 74.471  13833',
'CHEVEZ         0.001 74.472  13834',
'CHATMON        0.001 74.472  13835',
'CHAIRES        0.001 74.473  13836',
'CAPLAN         0.001 74.474  13837',
'CAFFEE         0.001 74.475  13838',
'CABANA         0.001 74.475  13839',
'BURROUGH       0.001 74.476  13840',
'BURDITT        0.001 74.477  13841',
'BUCKLER        0.001 74.477  13842',
'BRUNSWICK      0.001 74.478  13843',
'BROUILLARD     0.001 74.479  13844',
'BROADY         0.001 74.480  13845',
'BOWLBY         0.001 74.480  13846',
'BOULEY         0.001 74.481  13847',
'BORGMAN        0.001 74.482  13848',
'BOLTZ          0.001 74.483  13849',
'BODDY          0.001 74.483  13850',
'BLACKSTON      0.001 74.484  13851',
'BIRDSELL       0.001 74.485  13852',
'BEDGOOD        0.001 74.486  13853',
'BATE           0.001 74.486  13854',
'BASIL          0.001 74.487  13855',
'BARTOS         0.001 74.488  13856',
'BARRIGA        0.001 74.488  13857',
'BARRIE         0.001 74.489  13858',
'BARNA          0.001 74.490  13859',
'BARCENAS       0.001 74.491  13860',
'BANACH         0.001 74.491  13861',
'BACCUS         0.001 74.492  13862',
'AUCLAIR        0.001 74.493  13863',
'ASHMAN         0.001 74.494  13864',
'ARTER          0.001 74.494  13865',
'ARENDT         0.001 74.495  13866',
'ANSELL         0.001 74.496  13867',
'ALLUMS         0.001 74.497  13868',
'ALLSOP         0.001 74.497  13869',
'ALLENDER       0.001 74.498  13870',
'ALBER          0.001 74.499  13871',
'ALBARRAN       0.001 74.499  13872',
'ADELSON        0.001 74.500  13873',
'ZOLL           0.001 74.501  13874',
'WYSONG         0.001 74.502  13875',
'WIMBLEY        0.001 74.502  13876',
'WILDES         0.001 74.503  13877',
'WHITIS         0.001 74.504  13878',
'WHITEHILL      0.001 74.504  13879',
'WHICKER        0.001 74.505  13880',
'WEYMOUTH       0.001 74.506  13881',
'WELL           0.001 74.507  13882',
'WELDY          0.001 74.507  13883',
'WARK           0.001 74.508  13884',
'WAREHAM        0.001 74.509  13885',
'WADDY          0.001 74.509  13886',
'VIVEIROS       0.001 74.510  13887',
'VITO           0.001 74.511  13888',
'VIDES          0.001 74.512  13889',
'VECCHIO        0.001 74.512  13890',
'VATH           0.001 74.513  13891',
'VANDOREN       0.001 74.514  13892',
'VANDERHOOF     0.001 74.514  13893',
'UNREIN         0.001 74.515  13894',
'UECKER         0.001 74.516  13895',
'TSAN           0.001 74.517  13896',
'TREPANIER      0.001 74.517  13897',
'TREGRE         0.001 74.518  13898',
'TORKELSON      0.001 74.519  13899',
'TON            0.001 74.519  13900',
'TOBLER         0.001 74.520  13901',
'TINEO          0.001 74.521  13902',
'TIMMER         0.001 74.522  13903',
'SWOPES         0.001 74.522  13904',
'SWOFFORD       0.001 74.523  13905',
'SWEETEN        0.001 74.524  13906',
'SWARTS         0.001 74.524  13907',
'SUMMERFIELD    0.001 74.525  13908',
'SUMLER         0.001 74.526  13909',
'STUCKY         0.001 74.527  13910',
'STROZIER       0.001 74.527  13911',
'STIGALL        0.001 74.528  13912',
'STICKEL        0.001 74.529  13913',
'STENNIS        0.001 74.529  13914',
'STELZER        0.001 74.530  13915',
'STEELY         0.001 74.531  13916',
'SOLAR          0.001 74.532  13917',
'SLAYDEN        0.001 74.532  13918',
'SKILLERN       0.001 74.533  13919',
'SHURTZ         0.001 74.534  13920',
'SHELOR         0.001 74.534  13921',
'SHELLENBARGER  0.001 74.535  13922',
'SHAND          0.001 74.536  13923',
'SHABAZZ        0.001 74.537  13924',
'SEO            0.001 74.537  13925',
'SCROGGS        0.001 74.538  13926',
'SCHWANDT       0.001 74.539  13927',
'SCHRECENGOST   0.001 74.540  13928',
'SCHOENROCK     0.001 74.540  13929',
'SCHIRMER       0.001 74.541  13930',
'SANDRIDGE      0.001 74.542  13931',
'RUZICKA        0.001 74.542  13932',
'ROZEK          0.001 74.543  13933',
'ROWLANDS       0.001 74.544  13934',
'ROSER          0.001 74.545  13935',
'ROSENDAHL      0.001 74.545  13936',
'ROMANOWSKI     0.001 74.546  13937',
'ROMAINE        0.001 74.547  13938',
'ROLSTON        0.001 74.547  13939',
'RINK           0.001 74.548  13940',
'RIGGIO         0.001 74.549  13941',
'REICHMAN       0.001 74.550  13942',
'REDONDO        0.001 74.550  13943',
'REAY           0.001 74.551  13944',
'RAWLINSON      0.001 74.552  13945',
'RASKIN         0.001 74.552  13946',
'RAINE          0.001 74.553  13947',
'QUANDT         0.001 74.554  13948',
'PURPURA        0.001 74.555  13949',
'PURDUE         0.001 74.555  13950',
'PRUNEDA        0.001 74.556  13951',
'PREVATTE       0.001 74.557  13952',
'PRETTYMAN      0.001 74.557  13953',
'PINEDO         0.001 74.558  13954',
'PIERRO         0.001 74.559  13955',
'PIDGEON        0.001 74.560  13956',
'PHILLIPPI      0.001 74.560  13957',
'PFEIL          0.001 74.561  13958',
'PENIX          0.001 74.562  13959',
'PEASLEY        0.001 74.562  13960',
'PARO           0.001 74.563  13961',
'OVERALL        0.001 74.564  13962',
'OSPINA         0.001 74.565  13963',
'ORTEGON        0.001 74.565  13964',
'OGATA          0.001 74.566  13965',
'OGARA          0.001 74.567  13966',
'NORMANDIN      0.001 74.567  13967',
'NORDMAN        0.001 74.568  13968',
'NIMS           0.001 74.569  13969',
'NASSAR         0.001 74.570  13970',
'MOTZ           0.001 74.570  13971',
'MORLAN         0.001 74.571  13972',
'MOORING        0.001 74.572  13973',
'MOLES          0.001 74.572  13974',
'MOIR           0.001 74.573  13975',
'MIZRAHI        0.001 74.574  13976',
'MIRE           0.001 74.575  13977',
'MINAYA         0.001 74.575  13978',
'MILLWOOD       0.001 74.576  13979',
'MIKULA         0.001 74.577  13980',
'MESSMER        0.001 74.577  13981',
'MEIKLE         0.001 74.578  13982',
'MCTAGGART      0.001 74.579  13983',
'MCGONAGLE      0.001 74.580  13984',
'MCEWAN         0.001 74.580  13985',
'MCCASLAND      0.001 74.581  13986',
'MCCANE         0.001 74.582  13987',
'MCCAFFERY      0.001 74.582  13988',
'MCALEXANDER    0.001 74.583  13989',
'MATTOCKS       0.001 74.584  13990',
'MATTIE         0.001 74.585  13991',
'MATRANGA       0.001 74.585  13992',
'MARTONE        0.001 74.586  13993',
'MARKLAND       0.001 74.587  13994',
'MARAVILLA      0.001 74.587  13995',
'MANNO          0.001 74.588  13996',
'MANLY          0.001 74.589  13997',
'MANCHA         0.001 74.590  13998',
'MALLERY        0.001 74.590  13999',
'MAGNO          0.001 74.591  14000',
'LORENTZ        0.001 74.592  14001',
'LOCKLIN        0.001 74.592  14002',
'LIVINGSTONE    0.001 74.593  14003',
'LIPFORD        0.001 74.594  14004',
'LININGER       0.001 74.595  14005',
'LINE           0.001 74.595  14006',
'LIAO           0.001 74.596  14007',
'LEPLEY         0.001 74.597  14008',
'LEMING         0.001 74.597  14009',
'LEMELIN        0.001 74.598  14010',
'LEADBETTER     0.001 74.599  14011',
'LAWHON         0.001 74.600  14012',
'LATTIN         0.001 74.600  14013',
'LANGWORTHY     0.001 74.601  14014',
'LAMPMAN        0.001 74.602  14015',
'LAMBETH        0.001 74.602  14016',
'LAMARR         0.001 74.603  14017',
'LAHEY          0.001 74.604  14018',
'KRAJEWSKI      0.001 74.605  14019',
'KLOPP          0.001 74.605  14020',
'KINNISON       0.001 74.606  14021',
'KESTNER        0.001 74.607  14022',
'KERRY          0.001 74.607  14023',
'KENNELL        0.001 74.608  14024',
'KARIM          0.001 74.609  14025',
'JOZWIAK        0.001 74.610  14026',
'JAKUBOWSKI     0.001 74.610  14027',
'JAGGER         0.001 74.611  14028',
'IVERY          0.001 74.612  14029',
'ISHMAEL        0.001 74.612  14030',
'ILIFF          0.001 74.613  14031',
'IDDINGS        0.001 74.614  14032',
'HUDKINS        0.001 74.615  14033',
'HOUSEMAN       0.001 74.615  14034',
'HOLZ           0.001 74.616  14035',
'HOLDERMAN      0.001 74.617  14036',
'HOEHNE         0.001 74.617  14037',
'HIGHFILL       0.001 74.618  14038',
'HIETT          0.001 74.619  14039',
'HESKETT        0.001 74.620  14040',
'HELDT          0.001 74.620  14041',
'HEDMAN         0.001 74.621  14042',
'HAYSLETT       0.001 74.622  14043',
'HATCHELL       0.001 74.622  14044',
'HASSE          0.001 74.623  14045',
'HAMON          0.001 74.624  14046',
'HAMADA         0.001 74.625  14047',
'HAKALA         0.001 74.625  14048',
'HAISLIP        0.001 74.626  14049',
'HAFFEY         0.001 74.627  14050',
'HACKBARTH      0.001 74.627  14051',
'GUO            0.001 74.628  14052',
'GULLICKSON     0.001 74.629  14053',
'GUERRETTE      0.001 74.630  14054',
'GUAN           0.001 74.630  14055',
'GREENBLATT     0.001 74.631  14056',
'GOUDREAU       0.001 74.632  14057',
'GONGORA        0.001 74.633  14058',
'GODBOUT        0.001 74.633  14059',
'GLAUDE         0.001 74.634  14060',
'GILLS          0.001 74.635  14061',
'GILLISON       0.001 74.635  14062',
'GIGLIOTTI      0.001 74.636  14063',
'GARGANO        0.001 74.637  14064',
'GALLUCCI       0.001 74.638  14065',
'GALLI          0.001 74.638  14066',
'GALANTE        0.001 74.639  14067',
'FRASURE        0.001 74.640  14068',
'FODOR          0.001 74.640  14069',
'FIZER          0.001 74.641  14070',
'FISHBURN       0.001 74.642  14071',
'FINKBEINER     0.001 74.643  14072',
'FINCK          0.001 74.643  14073',
'FAGER          0.001 74.644  14074',
'ESTEY          0.001 74.645  14075',
'ESPIRITU       0.001 74.645  14076',
'EPPINGER       0.001 74.646  14077',
'EPPERLY        0.001 74.647  14078',
'EMIG           0.001 74.648  14079',
'ECKLEY         0.001 74.648  14080',
'DRAY           0.001 74.649  14081',
'DORSCH         0.001 74.650  14082',
'DILLE          0.001 74.650  14083',
'DEVITA         0.001 74.651  14084',
'DESLAURIERS    0.001 74.652  14085',
'DEMERY         0.001 74.653  14086',
'DELORME        0.001 74.653  14087',
'DELBOSQUE      0.001 74.654  14088',
'DAUPHIN        0.001 74.655  14089',
'DANTONIO       0.001 74.655  14090',
'CURD           0.001 74.656  14091',
'CRUME          0.001 74.657  14092',
'CROWN          0.001 74.658  14093',
'COZAD          0.001 74.658  14094',
'COSSETTE       0.001 74.659  14095',
'COMACHO        0.001 74.660  14096',
'CLIMER         0.001 74.660  14097',
'CHADBOURNE     0.001 74.661  14098',
'CESPEDES       0.001 74.662  14099',
'CAYTON         0.001 74.663  14100',
'CASTALDO       0.001 74.663  14101',
'CARPINO        0.001 74.664  14102',
'CARLS          0.001 74.665  14103',
'CAPOZZI        0.001 74.665  14104',
'CANELA         0.001 74.666  14105',
'CADET          0.001 74.667  14106',
'BUZARD         0.001 74.668  14107',
'BUSICK         0.001 74.668  14108',
'BURLISON       0.001 74.669  14109',
'BRINKMANN      0.001 74.670  14110',
'BRIDGEFORTH    0.001 74.670  14111',
'BOURBEAU       0.001 74.671  14112',
'BORNSTEIN      0.001 74.672  14113',
'BOOTS          0.001 74.673  14114',
'BONFIGLIO      0.001 74.673  14115',
'BOICE          0.001 74.674  14116',
'BOESE          0.001 74.675  14117',
'BIONDI         0.001 74.675  14118',
'BILSKI         0.001 74.676  14119',
'BETTON         0.001 74.677  14120',
'BERWICK        0.001 74.678  14121',
'BERLANGA       0.001 74.678  14122',
'BEHAN          0.001 74.679  14123',
'BECRAFT        0.001 74.680  14124',
'BARRIENTEZ     0.001 74.680  14125',
'BANH           0.001 74.681  14126',
'BALKE          0.001 74.682  14127',
'BALDERRAMA     0.001 74.683  14128',
'BAHE           0.001 74.683  14129',
'BACHAND        0.001 74.684  14130',
'ATLAS          0.001 74.685  14131',
'ARMER          0.001 74.685  14132',
'ARCEO          0.001 74.686  14133',
'ALIFF          0.001 74.687  14134',
'ALATORRE       0.001 74.688  14135',
'ZERMENO        0.001 74.688  14136',
'ZANE           0.001 74.689  14137',
'YOUNCE         0.001 74.690  14138',
'YOU            0.001 74.690  14139',
'YEOMAN         0.001 74.691  14140',
'YAMASAKI       0.001 74.692  14141',
'WROTEN         0.001 74.692  14142',
'WORM           0.001 74.693  14143',
'WOODBY         0.001 74.694  14144',
'WINER          0.001 74.695  14145',
'WILMER         0.001 74.695  14146',
'WILLITS        0.001 74.696  14147',
'WILCOXON       0.001 74.697  14148',
'WEHMEYER       0.001 74.697  14149',
'WATERBURY      0.001 74.698  14150',
'WASS           0.001 74.699  14151',
'WANN           0.001 74.699  14152',
'WAKE           0.001 74.700  14153',
'WACHTEL        0.001 74.701  14154',
'VIZCARRA       0.001 74.702  14155',
'VINCE          0.001 74.702  14156',
'VICTORY        0.001 74.703  14157',
'VEITCH         0.001 74.704  14158',
'VANDERBILT     0.001 74.704  14159',
'VALLONE        0.001 74.705  14160',
'VALLERY        0.001 74.706  14161',
'URENO          0.001 74.706  14162',
'TYER           0.001 74.707  14163',
'TIPPS          0.001 74.708  14164',
'TIEDEMAN       0.001 74.709  14165',
'THEBERGE       0.001 74.709  14166',
'TEXEIRA        0.001 74.710  14167',
'TAUB           0.001 74.711  14168',
'TAPSCOTT       0.001 74.711  14169',
'STUTTS         0.001 74.712  14170',
'STULTS         0.001 74.713  14171',
'STUKES         0.001 74.713  14172',
'STAFF          0.001 74.714  14173',
'SPINK          0.001 74.715  14174',
'SOTTILE        0.001 74.716  14175',
'SMITHWICK      0.001 74.716  14176',
'SLANE          0.001 74.717  14177',
'SIMEONE        0.001 74.718  14178',
'SILVESTER      0.001 74.718  14179',
'SIEGRIST       0.001 74.719  14180',
'SHIFFER        0.001 74.720  14181',
'SHEEDY         0.001 74.720  14182',
'SHEAFFER       0.001 74.721  14183',
'SEVERIN        0.001 74.722  14184',
'SELLMAN        0.001 74.723  14185',
'SCOTTO         0.001 74.723  14186',
'SCHUPP         0.001 74.724  14187',
'SCHUELLER      0.001 74.725  14188',
'SCHREIER       0.001 74.725  14189',
'SCHOOLCRAFT    0.001 74.726  14190',
'SCHOENBERGER   0.001 74.727  14191',
'SCHNABEL       0.001 74.727  14192',
'SANGSTER       0.001 74.728  14193',
'SAMFORD        0.001 74.729  14194',
'SALIBA         0.001 74.730  14195',
'RYLES          0.001 74.730  14196',
'RYANS          0.001 74.731  14197',
'ROSSETTI       0.001 74.732  14198',
'RODRIGUZ       0.001 74.732  14199',
'RISCH          0.001 74.733  14200',
'RIEL           0.001 74.734  14201',
'REZENDES       0.001 74.734  14202',
'RESTER         0.001 74.735  14203',
'RENCHER        0.001 74.736  14204',
'RECKER         0.001 74.737  14205',
'RATHJEN        0.001 74.737  14206',
'PROFITT        0.001 74.738  14207',
'POTEETE        0.001 74.739  14208',
'POLIZZI        0.001 74.739  14209',
'PERRIGO        0.001 74.740  14210',
'PATRIDGE       0.001 74.741  14211',
'OSBY           0.001 74.741  14212',
'ORVIS          0.001 74.742  14213',
'OPPERMAN       0.001 74.743  14214',
'OPPENHEIM      0.001 74.744  14215',
'ONORATO        0.001 74.744  14216',
'OLAUGHLIN      0.001 74.745  14217',
'OHAGAN         0.001 74.746  14218',
'OGLES          0.001 74.746  14219',
'OEHLER         0.001 74.747  14220',
'OBYRNE         0.001 74.748  14221',
'NUZZO          0.001 74.748  14222',
'NICKLE         0.001 74.749  14223',
'NEASE          0.001 74.750  14224',
'NEAGLE         0.001 74.751  14225',
'NAVARETTE      0.001 74.751  14226',
'NAGATA         0.001 74.752  14227',
'MUSTO          0.001 74.753  14228',
'MORNING        0.001 74.753  14229',
'MORISON        0.001 74.754  14230',
'MONTZ          0.001 74.755  14231',
'MOGENSEN       0.001 74.755  14232',
'MIZER          0.001 74.756  14233',
'MIRAGLIA       0.001 74.757  14234',
'MINGUS         0.001 74.758  14235',
'MIGLIORE       0.001 74.758  14236',
'MERIDETH       0.001 74.759  14237',
'MENGES         0.001 74.760  14238',
'MELLOR         0.001 74.760  14239',
'MCNEAR         0.001 74.761  14240',
'MCNAB          0.001 74.762  14241',
'MCLOUD         0.001 74.762  14242',
'MCELLIGOTT     0.001 74.763  14243',
'MCCOLLOM       0.001 74.764  14244',
'MAYNES         0.001 74.765  14245',
'MARQUETTE      0.001 74.765  14246',
'MARKOWSKI      0.001 74.766  14247',
'MARCANTONIO    0.001 74.767  14248',
'MAR            0.001 74.767  14249',
'MALDANADO      0.001 74.768  14250',
'MAKIN          0.001 74.769  14251',
'MACEY          0.001 74.769  14252',
'LUNDEEN        0.001 74.770  14253',
'LOVIN          0.001 74.771  14254',
'LONGINO        0.001 74.772  14255',
'LISLE          0.001 74.772  14256',
'LINTHICUM      0.001 74.773  14257',
'LIMONES        0.001 74.774  14258',
'LESURE         0.001 74.774  14259',
'LESAGE         0.001 74.775  14260',
'LEISURE        0.001 74.776  14261',
'LAUVER         0.001 74.776  14262',
'LAUBACH        0.001 74.777  14263',
'LATSHAW        0.001 74.778  14264',
'LARY           0.001 74.779  14265',
'LAPHAM         0.001 74.779  14266',
'LACOSTE        0.001 74.780  14267',
'LACHER         0.001 74.781  14268',
'KUTCHER        0.001 74.781  14269',
'KNICKERBOCKER  0.001 74.782  14270',
'KLOS           0.001 74.783  14271',
'KLINGLER       0.001 74.783  14272',
'KLEIMAN        0.001 74.784  14273',
'KITTLESON      0.001 74.785  14274',
'KIMBREL        0.001 74.786  14275',
'KIMBERLY       0.001 74.786  14276',
'KEMMERER       0.001 74.787  14277',
'KELSON         0.001 74.788  14278',
'KEESE          0.001 74.788  14279',
'KAM            0.001 74.789  14280',
'KALLAS         0.001 74.790  14281',
'JURGENSEN      0.001 74.790  14282',
'JUNKINS        0.001 74.791  14283',
'JUNEAU         0.001 74.792  14284',
'JUERGENS       0.001 74.793  14285',
'JOLLIFF        0.001 74.793  14286',
'JELKS          0.001 74.794  14287',
'JANICKI        0.001 74.795  14288',
'JANG           0.001 74.795  14289',
'INNOCENT       0.001 74.796  14290',
'INGLES         0.001 74.797  14291',
'INGE           0.001 74.797  14292',
'HUGULEY        0.001 74.798  14293',
'HUGGARD        0.001 74.799  14294',
'HOWTON         0.001 74.800  14295',
'HONE           0.001 74.800  14296',
'HOLFORD        0.001 74.801  14297',
'HOLDING        0.001 74.802  14298',
'HOGLE          0.001 74.802  14299',
'HIPPLE         0.001 74.803  14300',
'HEIMBACH       0.001 74.804  14301',
'HEIDER         0.001 74.804  14302',
'HEIDEL         0.001 74.805  14303',
'HAVENER        0.001 74.806  14304',
'HATTAWAY       0.001 74.807  14305',
'HARRAH         0.001 74.807  14306',
'HANSCOM        0.001 74.808  14307',
'HANKINSON      0.001 74.809  14308',
'HAMDAN         0.001 74.809  14309',
'GRIDLEY        0.001 74.810  14310',
'GOULETTE       0.001 74.811  14311',
'GOULART        0.001 74.811  14312',
'GOODSPEED      0.001 74.812  14313',
'GOODROW        0.001 74.813  14314',
'GO             0.001 74.814  14315',
'GIRARDI        0.001 74.814  14316',
'GENT           0.001 74.815  14317',
'GAUTREAU       0.001 74.816  14318',
'GANZ           0.001 74.816  14319',
'GANDARA        0.001 74.817  14320',
'GAMBLIN        0.001 74.818  14321',
'GALIPEAU       0.001 74.818  14322',
'FYFFE          0.001 74.819  14323',
'FURROW         0.001 74.820  14324',
'FULP           0.001 74.820  14325',
'FRICKS         0.001 74.821  14326',
'FRASE          0.001 74.822  14327',
'FRANDSEN       0.001 74.823  14328',
'FOUT           0.001 74.823  14329',
'FOULKS         0.001 74.824  14330',
'FOUCHE         0.001 74.825  14331',
'FOSKEY         0.001 74.825  14332',
'FORGEY         0.001 74.826  14333',
'FOOR           0.001 74.827  14334',
'FOBBS          0.001 74.827  14335',
'FINKLEA        0.001 74.828  14336',
'FINCHAM        0.001 74.829  14337',
'FIGUEIREDO     0.001 74.830  14338',
'FESTA          0.001 74.830  14339',
'FERRIER        0.001 74.831  14340',
'FELLMAN        0.001 74.832  14341',
'ESLICK         0.001 74.832  14342',
'EILERMAN       0.001 74.833  14343',
'ECKART         0.001 74.834  14344',
'EAGLIN         0.001 74.834  14345',
'DUNFEE         0.001 74.835  14346',
'DUMOND         0.001 74.836  14347',
'DREWRY         0.001 74.837  14348',
'DOUSE          0.001 74.837  14349',
'DOMINO         0.001 74.838  14350',
'DIMICK         0.001 74.839  14351',
'DIENER         0.001 74.839  14352',
'DICKERT        0.001 74.840  14353',
'DEINES         0.001 74.841  14354',
'DEGREE         0.001 74.841  14355',
'DECLUE         0.001 74.842  14356',
'DAW            0.001 74.843  14357',
'DATTILO        0.001 74.844  14358',
'DANKO          0.001 74.844  14359',
'CUSTODIO       0.001 74.845  14360',
'CUCCIA         0.001 74.846  14361',
'CRUNK          0.001 74.846  14362',
'CRISPIN        0.001 74.847  14363',
'CORP           0.001 74.848  14364',
'CORNWALL       0.001 74.848  14365',
'COREA          0.001 74.849  14366',
'COPPIN         0.001 74.850  14367',
'CONSIDINE      0.001 74.851  14368',
'CONIGLIO       0.001 74.851  14369',
'CONBOY         0.001 74.852  14370',
'COLLAR         0.001 74.853  14371',
'COCKRUM        0.001 74.853  14372',
'CLUTE          0.001 74.854  14373',
'CLEWIS         0.001 74.855  14374',
'CLAUDE         0.001 74.855  14375',
'CHRISTIANO     0.001 74.856  14376',
'CHANNELL       0.001 74.857  14377',
'CHANNEL        0.001 74.858  14378',
'CERRATO        0.001 74.858  14379',
'CECERE         0.001 74.859  14380',
'CATOE          0.001 74.860  14381',
'CASTILLON      0.001 74.860  14382',
'CASTILE        0.001 74.861  14383',
'CARSTARPHEN    0.001 74.862  14384',
'CARMOUCHE      0.001 74.862  14385',
'CAPERTON       0.001 74.863  14386',
'BUTEAU         0.001 74.864  14387',
'BURY           0.001 74.865  14388',
'BUMPERS        0.001 74.865  14389',
'BREY           0.001 74.866  14390',
'BRENTON        0.001 74.867  14391',
'BRAZEAL        0.001 74.867  14392',
'BRASSARD       0.001 74.868  14393',
'BRASS          0.001 74.869  14394',
'BRAGA          0.001 74.869  14395',
'BRADHAM        0.001 74.870  14396',
'BOURGET        0.001 74.871  14397',
'BORRELLI       0.001 74.872  14398',
'BORBA          0.001 74.872  14399',
'BOOTHBY        0.001 74.873  14400',
'BOHR           0.001 74.874  14401',
'BOHM           0.001 74.874  14402',
'BOEHME         0.001 74.875  14403',
'BODIN          0.001 74.876  14404',
'BLOSS          0.001 74.876  14405',
'BLOCHER        0.001 74.877  14406',
'BIZZELL        0.001 74.878  14407',
'BIEKER         0.001 74.879  14408',
'BERTHELOT      0.001 74.879  14409',
'BERNARDINI     0.001 74.880  14410',
'BERENDS        0.001 74.881  14411',
'BENARD         0.001 74.881  14412',
'BELSER         0.001 74.882  14413',
'BAZE           0.001 74.883  14414',
'BARTLING       0.001 74.883  14415',
'BARRIENTES     0.001 74.884  14416',
'BARRAS         0.001 74.885  14417',
'BARCIA         0.001 74.886  14418',
'BANFIELD       0.001 74.886  14419',
'AURAND         0.001 74.887  14420',
'ARTMAN         0.001 74.888  14421',
'ARNOTT         0.001 74.888  14422',
'AREND          0.001 74.889  14423',
'ARDIS          0.001 74.890  14424',
'AMON           0.001 74.890  14425',
'ALMAGUER       0.001 74.891  14426',
'ALLEE          0.001 74.892  14427',
'ALBARADO       0.001 74.893  14428',
'ALAMEDA        0.001 74.893  14429',
'ABDO           0.001 74.894  14430',
'ZUEHLKE        0.001 74.895  14431',
'ZOELLER        0.001 74.895  14432',
'YOKOYAMA       0.001 74.896  14433',
'YOCOM          0.001 74.897  14434',
'WYLLIE         0.001 74.897  14435',
'WOOLUM         0.001 74.898  14436',
'WINT           0.001 74.899  14437',
'WINLAND        0.001 74.899  14438',
'WINK           0.001 74.900  14439',
'WILNER         0.001 74.901  14440',
'WILMES         0.001 74.901  14441',
'WHITLATCH      0.001 74.902  14442',
'WESTERVELT     0.001 74.903  14443',
'WALTHALL       0.001 74.904  14444',
'WALKOWIAK      0.001 74.904  14445',
'WALBURN        0.001 74.905  14446',
'VIVIANO        0.001 74.906  14447',
'VANDERHOFF     0.001 74.906  14448',
'VALEZ          0.001 74.907  14449',
'UGALDE         0.001 74.908  14450',
'TRUMBULL       0.001 74.908  14451',
'TODARO         0.001 74.909  14452',
'TILFORD        0.001 74.910  14453',
'TIDD           0.001 74.910  14454',
'TIBBITS        0.001 74.911  14455',
'TERRANOVA      0.001 74.912  14456',
'TEMPLEMAN      0.001 74.912  14457',
'TANNENBAUM     0.001 74.913  14458',
'TALMAGE        0.001 74.914  14459',
'TABAREZ        0.001 74.914  14460',
'SWEARENGIN     0.001 74.915  14461',
'SWARTWOOD      0.001 74.916  14462',
'SVENDSEN       0.001 74.917  14463',
'STRUM          0.001 74.917  14464',
'STRACK         0.001 74.918  14465',
'STORIE         0.001 74.919  14466',
'STOCKARD       0.001 74.919  14467',
'STEINBECK      0.001 74.920  14468',
'STARNS         0.001 74.921  14469',
'STANKO         0.001 74.921  14470',
'STANKIEWICZ    0.001 74.922  14471',
'STACKS         0.001 74.923  14472',
'STACH          0.001 74.923  14473',
'SPROLES        0.001 74.924  14474',
'SPENSER        0.001 74.925  14475',
'SMOTHERMAN     0.001 74.925  14476',
'SLUSSER        0.001 74.926  14477',
'SINHA          0.001 74.927  14478',
'SILBER         0.001 74.927  14479',
'SIEFERT        0.001 74.928  14480',
'SIDDIQUI       0.001 74.929  14481',
'SHUFF          0.001 74.929  14482',
'SHERBURNE      0.001 74.930  14483',
'SELDON         0.001 74.931  14484',
'SEDDON         0.001 74.932  14485',
'SCHWEIGERT     0.001 74.932  14486',
'SCHROETER      0.001 74.933  14487',
'SCHMUCKER      0.001 74.934  14488',
'SAFFOLD        0.001 74.934  14489',
'RUTZ           0.001 74.935  14490',
'RUNDLE         0.001 74.936  14491',
'ROSINSKI       0.001 74.936  14492',
'ROSENOW        0.001 74.937  14493',
'ROGALSKI       0.001 74.938  14494',
'RIDOUT         0.001 74.938  14495',
'RHYMER         0.001 74.939  14496',
'REPLOGLE       0.001 74.940  14497',
'REGINA         0.001 74.940  14498',
'REDA           0.001 74.941  14499',
'RAYGOZA        0.001 74.942  14500',
'RATNER         0.001 74.942  14501',
'RASCOE         0.001 74.943  14502',
'RAHM           0.001 74.944  14503',
'QUINCY         0.001 74.945  14504',
'QUAST          0.001 74.945  14505',
'PRY            0.001 74.946  14506',
'PRESSNELL      0.001 74.947  14507',
'PREDMORE       0.001 74.947  14508',
'POU            0.001 74.948  14509',
'PORTO          0.001 74.949  14510',
'PLEASANTS      0.001 74.949  14511',
'PIGFORD        0.001 74.950  14512',
'PAVONE         0.001 74.951  14513',
'PATNAUDE       0.001 74.951  14514',
'PARRAMORE      0.001 74.952  14515',
'PAPADOPOULOS   0.001 74.953  14516',
'PALMATIER      0.001 74.953  14517',
'OUZTS          0.001 74.954  14518',
'OSHIELDS       0.001 74.955  14519',
'ORTIS          0.001 74.955  14520',
'OLMEDA         0.001 74.956  14521',
'OLDEN          0.001 74.957  14522',
'OKAMOTO        0.001 74.958  14523',
'NORBY          0.001 74.958  14524',
'NITZ           0.001 74.959  14525',
'NIEBUHR        0.001 74.960  14526',
'NEVIUS         0.001 74.960  14527',
'NEIMAN         0.001 74.961  14528',
'NEIDIG         0.001 74.962  14529',
'NEECE          0.001 74.962  14530',
'MURAWSKI       0.001 74.963  14531',
'MROZ           0.001 74.964  14532',
'MOYLAN         0.001 74.964  14533',
'MOULTRY        0.001 74.965  14534',
'MOSTELLER      0.001 74.966  14535',
'MORING         0.001 74.966  14536',
'MORGANTI       0.001 74.967  14537',
'MOOK           0.001 74.968  14538',
'MOFFET         0.001 74.968  14539',
'METTLER        0.001 74.969  14540',
'MERLO          0.001 74.970  14541',
'MENGEL         0.001 74.971  14542',
'MENDELSOHN     0.001 74.971  14543',
'MELI           0.001 74.972  14544',
'MELCHIOR       0.001 74.973  14545',
'MCMEANS        0.001 74.973  14546',
'MCFADDIN       0.001 74.974  14547',
'MCCULLERS      0.001 74.975  14548',
'MCCOLLISTER    0.001 74.975  14549',
'MCCLOY         0.001 74.976  14550',
'MCCLAINE       0.001 74.977  14551',
'MAURY          0.001 74.977  14552',
'MASER          0.001 74.978  14553',
'MARTELLI       0.001 74.979  14554',
'MANTHEY        0.001 74.979  14555',
'MALKIN         0.001 74.980  14556',
'MAIO           0.001 74.981  14557',
'MAGWOOD        0.001 74.981  14558',
'MAGINNIS       0.001 74.982  14559',
'MABON          0.001 74.983  14560',
'LUTON          0.001 74.983  14561',
'LUSHER         0.001 74.984  14562',
'LUCHT          0.001 74.985  14563',
'LOBATO         0.001 74.986  14564',
'LEVIS          0.001 74.986  14565',
'LETELLIER      0.001 74.987  14566',
'LEGENDRE       0.001 74.988  14567',
'LAUREL         0.001 74.988  14568',
'LATSON         0.001 74.989  14569',
'LARMON         0.001 74.990  14570',
'LARGO          0.001 74.990  14571',
'LANDRENEAU     0.001 74.991  14572',
'LANDGRAF       0.001 74.992  14573',
'LAMBERSON      0.001 74.992  14574',
'KURLAND        0.001 74.993  14575',
'KRESGE         0.001 74.994  14576',
'KORMAN         0.001 74.994  14577',
'KORANDO        0.001 74.995  14578',
'KLAPPER        0.001 74.996  14579',
'KITSON         0.001 74.996  14580',
'KINYON         0.001 74.997  14581',
'KINCHELOE      0.001 74.998  14582',
'KAWAMOTO       0.001 74.999  14583',
'KAWAKAMI       0.001 74.999  14584',
'JENNEY         0.001 75.000  14585',
'JEANPIERRE     0.001 75.001  14586',
'IVERS          0.001 75.001  14587',
'ISSA           0.001 75.002  14588',
'INCE           0.001 75.003  14589',
'HUGH           0.001 75.003  14590',
'HUG            0.001 75.004  14591',
'HONDA          0.001 75.005  14592',
'HOLLIER        0.001 75.005  14593',
'HOLLARS        0.001 75.006  14594',
'HOERNER        0.001 75.007  14595',
'HODGKINSON     0.001 75.007  14596',
'HIOTT          0.001 75.008  14597',
'HIBBITTS       0.001 75.009  14598',
'HERLIHY        0.001 75.009  14599',
'HENRICKS       0.001 75.010  14600',
'HEAVNER        0.001 75.011  14601',
'HAYHURST       0.001 75.012  14602',
'HARVILL        0.001 75.012  14603',
'HAREWOOD       0.001 75.013  14604',
'HANSELMAN      0.001 75.014  14605',
'HANNING        0.001 75.014  14606',
'GWYN           0.001 75.015  14607',
'GUSTAVSON      0.001 75.016  14608',
'GROUNDS        0.001 75.016  14609',
'GRIZZARD       0.001 75.017  14610',
'GRINDER        0.001 75.018  14611',
'GRAYBEAL       0.001 75.018  14612',
'GRAVLEY        0.001 75.019  14613',
'GORNEY         0.001 75.020  14614',
'GOLL           0.001 75.020  14615',
'GOEHRING       0.001 75.021  14616',
'GODINES        0.001 75.022  14617',
'GOBEIL         0.001 75.022  14618',
'GLICKMAN       0.001 75.023  14619',
'GIULIANO       0.001 75.024  14620',
'GIMBEL         0.001 75.025  14621',
'GIFT           0.001 75.025  14622',
'GEIB           0.001 75.026  14623',
'GAYHART        0.001 75.027  14624',
'GATTI          0.001 75.027  14625',
'GAINS          0.001 75.028  14626',
'GADBERRY       0.001 75.029  14627',
'FREI           0.001 75.029  14628',
'FRAISE         0.001 75.030  14629',
'FOUCH          0.001 75.031  14630',
'FORST          0.001 75.031  14631',
'FORSMAN        0.001 75.032  14632',
'FOLDEN         0.001 75.033  14633',
'FOGLEMAN       0.001 75.033  14634',
'FIGARO         0.001 75.034  14635',
'FETTY          0.001 75.035  14636',
'FEELY          0.001 75.035  14637',
'FABRY          0.001 75.036  14638',
'EURY           0.001 75.037  14639',
'ESTILL         0.001 75.037  14640',
'EPLING         0.001 75.038  14641',
'ELAMIN         0.001 75.039  14642',
'ECHAVARRIA     0.001 75.040  14643',
'DUTIL          0.001 75.040  14644',
'DURYEA         0.001 75.041  14645',
'DUMAIS         0.001 75.042  14646',
'DRAGO          0.001 75.042  14647',
'DOWNARD        0.001 75.043  14648',
'DOUTHIT        0.001 75.044  14649',
'DOOLIN         0.001 75.044  14650',
'DOBOS          0.001 75.045  14651',
'DISON          0.001 75.046  14652',
'DINGES         0.001 75.046  14653',
'DIEBOLD        0.001 75.047  14654',
'DESILETS       0.001 75.048  14655',
'DESHAZO        0.001 75.048  14656',
'DEPAZ          0.001 75.049  14657',
'DEGENNARO      0.001 75.050  14658',
'DALL           0.001 75.050  14659',
'CYPHERS        0.001 75.051  14660',
'CRYER          0.001 75.052  14661',
'CROCE          0.001 75.053  14662',
'CRISMAN        0.001 75.053  14663',
'CREDLE         0.001 75.054  14664',
'CORIELL        0.001 75.055  14665',
'COPP           0.001 75.055  14666',
'COOP           0.001 75.056  14667',
'COMPOS         0.001 75.057  14668',
'COLMENERO      0.001 75.057  14669',
'COGAR          0.001 75.058  14670',
'CLIFF          0.001 75.059  14671',
'CHAPEL         0.001 75.059  14672',
'CARNEVALE      0.001 75.060  14673',
'CAMPANELLA     0.001 75.061  14674',
'CALEY          0.001 75.061  14675',
'CALDERONE      0.001 75.062  14676',
'BURTCH         0.001 75.063  14677',
'BROUWER        0.001 75.063  14678',
'BREHMER        0.001 75.064  14679',
'BRASSELL       0.001 75.065  14680',
'BRAFFORD       0.001 75.066  14681',
'BOURQUIN       0.001 75.066  14682',
'BOURN          0.001 75.067  14683',
'BOHNERT        0.001 75.068  14684',
'BLEWETT        0.001 75.068  14685',
'BLASS          0.001 75.069  14686',
'BLAKES         0.001 75.070  14687',
'BHAKTA         0.001 75.070  14688',
'BESSER         0.001 75.071  14689',
'BERGE          0.001 75.072  14690',
'BELLIS         0.001 75.072  14691',
'BALFOUR        0.001 75.073  14692',
'AVERA          0.001 75.074  14693',
'AUSTRIA        0.001 75.074  14694',
'APPLIN         0.001 75.075  14695',
'AMMON          0.001 75.076  14696',
'ALSOP          0.001 75.076  14697',
'ALESHIRE       0.001 75.077  14698',
'AKBAR          0.001 75.078  14699',
'ZOLLER         0.001 75.078  14700',
'ZAPIEN         0.001 75.079  14701',
'WYMORE         0.001 75.080  14702',
'WYBLE          0.001 75.081  14703',
'WOLKEN         0.001 75.081  14704',
'WIX            0.001 75.082  14705',
'WICKSTROM      0.001 75.083  14706',
'WHOBREY        0.001 75.083  14707',
'WHIGHAM        0.001 75.084  14708',
'WESTERLUND     0.001 75.085  14709',
'WELSCH         0.001 75.085  14710',
'WEISSER        0.001 75.086  14711',
'WEISNER        0.001 75.087  14712',
'WEINSTOCK      0.001 75.087  14713',
'WEHNER         0.001 75.088  14714',
'WATLINGTON     0.001 75.089  14715',
'WAKELAND       0.001 75.089  14716',
'WAFER          0.001 75.090  14717',
'VIRGEN         0.001 75.091  14718',
'VICTORINO      0.001 75.091  14719',
'VELTRI         0.001 75.092  14720',
'VEITH          0.001 75.093  14721',
'URICH          0.001 75.093  14722',
'URESTI         0.001 75.094  14723',
'UMBERGER       0.001 75.095  14724',
'TWEDT          0.001 75.095  14725',
'TUOHY          0.001 75.096  14726',
'TSCHIDA        0.001 75.097  14727',
'TRUMBLE        0.001 75.097  14728',
'TROIA          0.001 75.098  14729',
'TRISTAN        0.001 75.099  14730',
'TRIMMER        0.001 75.099  14731',
'TOPPS          0.001 75.100  14732',
'TONN           0.001 75.101  14733',
'TIERNAN        0.001 75.101  14734',
'THREET         0.001 75.102  14735',
'THRALL         0.001 75.103  14736',
'THETFORD       0.001 75.103  14737',
'TENEYCK        0.001 75.104  14738',
'TARTAGLIA      0.001 75.105  14739',
'SWORDS         0.001 75.105  14740',
'STROHL         0.001 75.106  14741',
'STREATER       0.001 75.107  14742',
'STRAUSBAUGH    0.001 75.107  14743',
'STRADLEY       0.001 75.108  14744',
'STONECIPHER    0.001 75.109  14745',
'STEADHAM       0.001 75.109  14746',
'STANSEL        0.001 75.110  14747',
'STALCUP        0.001 75.111  14748',
'STABILE        0.001 75.111  14749',
'SPRENGER       0.001 75.112  14750',
'SPRADLEY       0.001 75.113  14751',
'SPEIER         0.001 75.113  14752',
'SOUTHWOOD      0.001 75.114  14753',
'SORRELS        0.001 75.115  14754',
'SLEZAK         0.001 75.115  14755',
'SKOW           0.001 75.116  14756',
'SIRMANS        0.001 75.117  14757',
'SIMENTAL       0.001 75.117  14758',
'SILK           0.001 75.118  14759',
'SIFFORD        0.001 75.119  14760',
'SIEVERT        0.001 75.119  14761',
'SHOVER         0.001 75.120  14762',
'SHELEY         0.001 75.121  14763',
'SELZER         0.001 75.121  14764',
'SCRIVEN        0.001 75.122  14765',
'SCHWINDT       0.001 75.123  14766',
'SCHWAN         0.001 75.123  14767',
'SCHROTH        0.001 75.124  14768',
'SAYLORS        0.001 75.125  14769',
'SARAGOSA       0.001 75.125  14770',
'SANT           0.001 75.126  14771',
'SALAAM         0.001 75.127  14772',
'SAEPHAN        0.001 75.127  14773',
'ROUTT          0.001 75.128  14774',
'ROUSEY         0.001 75.129  14775',
'ROS            0.001 75.129  14776',
'ROLFES         0.001 75.130  14777',
'RIEKE          0.001 75.131  14778',
'RIEDER         0.001 75.131  14779',
'RICHESON       0.001 75.132  14780',
'REDINGER       0.001 75.133  14781',
'RASNICK        0.001 75.133  14782',
'RAPOZA         0.001 75.134  14783',
'RAMBERT        0.001 75.135  14784',
'RAFAEL         0.001 75.135  14785',
'QUIST          0.001 75.136  14786',
'PYRON          0.001 75.137  14787',
'PUNCH          0.001 75.137  14788',
'PULLMAN        0.001 75.138  14789',
'PRZYBYLSKI     0.001 75.139  14790',
'PRIDMORE       0.001 75.139  14791',
'POOLEY         0.001 75.140  14792',
'PINES          0.001 75.141  14793',
'PERKINSON      0.001 75.141  14794',
'PERINE         0.001 75.142  14795',
'PERHAM         0.001 75.143  14796',
'PECOR          0.001 75.143  14797',
'PEAVLER        0.001 75.144  14798',
'PARTINGTON     0.001 75.145  14799',
'PANTON         0.001 75.145  14800',
'OLIVERIO       0.001 75.146  14801',
'OLAGUE         0.001 75.147  14802',
'OHMAN          0.001 75.147  14803',
'OHEARN         0.001 75.148  14804',
'NOYOLA         0.001 75.149  14805',
'NICOLAI        0.001 75.149  14806',
'NEBEL          0.001 75.150  14807',
'MURTHA         0.001 75.151  14808',
'MUFF           0.001 75.151  14809',
'MOWREY         0.001 75.152  14810',
'MORONEY        0.001 75.153  14811',
'MORGENSTERN    0.001 75.153  14812',
'MORANT         0.001 75.154  14813',
'MONTY          0.001 75.155  14814',
'MONSOUR        0.001 75.155  14815',
'MOHAMMAD       0.001 75.156  14816',
'MOFFIT         0.001 75.157  14817',
'MIJARES        0.001 75.157  14818',
'MERIWETHER     0.001 75.158  14819',
'MENDIETA       0.001 75.159  14820',
'MELENDREZ      0.001 75.159  14821',
'MEJORADO       0.001 75.160  14822',
'MCKITTRICK     0.001 75.161  14823',
'MCKEY          0.001 75.161  14824',
'MCKENNY        0.001 75.162  14825',
'MCKELVY        0.001 75.163  14826',
'MCKECHNIE      0.001 75.163  14827',
'MCELVAIN       0.001 75.164  14828',
'MCCOIN         0.001 75.165  14829',
'MAZZARELLA     0.001 75.165  14830',
'MAZON          0.001 75.166  14831',
'MAURIN         0.001 75.167  14832',
'MATTHIES       0.001 75.167  14833',
'MASTON         0.001 75.168  14834',
'MASKE          0.001 75.169  14835',
'MARZANO        0.001 75.169  14836',
'MARMON         0.001 75.170  14837',
'MARBURGER      0.001 75.171  14838',
'MANGUS         0.001 75.171  14839',
'MANGINO        0.001 75.172  14840',
'MALLET         0.001 75.173  14841',
'LUO            0.001 75.173  14842',
'LOSADA         0.001 75.174  14843',
'LONDONO        0.001 75.175  14844',
'LOBDELL        0.001 75.175  14845',
'LIPSON         0.001 75.176  14846',
'LESNIAK        0.001 75.177  14847',
'LEIGHTY        0.001 75.177  14848',
'LEI            0.001 75.178  14849',
'LEAGUE         0.001 75.179  14850',
'LAVALLIE       0.001 75.179  14851',
'LAREAU         0.001 75.180  14852',
'LAPERLE        0.001 75.181  14853',
'LAPE           0.001 75.181  14854',
'LAFORCE        0.001 75.182  14855',
'LAFFEY         0.001 75.183  14856',
'KUEHNER        0.001 75.183  14857',
'KRAVITZ        0.001 75.184  14858',
'KOWALSKY       0.001 75.185  14859',
'KOHR           0.001 75.185  14860',
'KINSMAN        0.001 75.186  14861',
'KEPPLER        0.001 75.187  14862',
'KENNEMER       0.001 75.187  14863',
'KEIPER         0.001 75.188  14864',
'KEELY          0.001 75.189  14865',
'KALER          0.001 75.189  14866',
'JUN            0.001 75.190  14867',
'JELINEK        0.001 75.191  14868',
'JARNAGIN       0.001 75.191  14869',
'ISSAC          0.001 75.192  14870',
'ISAKSON        0.001 75.193  14871',
'HYPES          0.001 75.193  14872',
'HUTZLER        0.001 75.194  14873',
'HULS           0.001 75.195  14874',
'HORAK          0.001 75.195  14875',
'HITZ           0.001 75.196  14876',
'HICE           0.001 75.197  14877',
'HERRELL        0.001 75.197  14878',
'HENSLEE        0.001 75.198  14879',
'HEITZ          0.001 75.199  14880',
'HEISS          0.001 75.199  14881',
'HEIMAN         0.001 75.200  14882',
'HASTING        0.001 75.201  14883',
'HARTWICK       0.001 75.201  14884',
'HARMER         0.001 75.202  14885',
'HARLAND        0.001 75.203  14886',
'HAMMONTREE     0.001 75.203  14887',
'HALDEMAN       0.001 75.204  14888',
'HAKES          0.001 75.205  14889',
'GUSE           0.001 75.205  14890',
'GUILLOTTE      0.001 75.206  14891',
'GUARD          0.001 75.207  14892',
'GROLEAU        0.001 75.207  14893',
'GREVE          0.001 75.208  14894',
'GREENOUGH      0.001 75.209  14895',
'GOLUB          0.001 75.209  14896',
'GOLSON         0.001 75.210  14897',
'GOLDSCHMIDT    0.001 75.211  14898',
'GOLDER         0.001 75.211  14899',
'GODBOLT        0.001 75.212  14900',
'GILMARTIN      0.001 75.213  14901',
'GIES           0.001 75.213  14902',
'GIBBY          0.001 75.214  14903',
'GEREN          0.001 75.215  14904',
'GENTHNER       0.001 75.215  14905',
'GENDREAU       0.001 75.216  14906',
'GEMMILL        0.001 75.217  14907',
'GAYMON         0.001 75.217  14908',
'GALYEAN        0.001 75.218  14909',
'GALEANO        0.001 75.219  14910',
'FRIAR          0.001 75.219  14911',
'FOLKERTS       0.001 75.220  14912',
'FLEEMAN        0.001 75.221  14913',
'FITZGIBBONS    0.001 75.221  14914',
'FERRANTI       0.001 75.222  14915',
'FELAN          0.001 75.223  14916',
'FARRAND        0.001 75.223  14917',
'EOFF           0.001 75.224  14918',
'ENGER          0.001 75.225  14919',
'ENGELS         0.001 75.225  14920',
'DUCKSWORTH     0.001 75.226  14921',
'DUBY           0.001 75.227  14922',
'DRY            0.001 75.227  14923',
'DRUMHELLER     0.001 75.228  14924',
'DOUTHITT       0.001 75.229  14925',
'DORIS          0.001 75.229  14926',
'DONIS          0.001 75.230  14927',
'DIXION         0.001 75.231  14928',
'DITTRICH       0.001 75.231  14929',
'DIALS          0.001 75.232  14930',
'DESSERT        0.001 75.233  14931',
'DESCOTEAUX     0.001 75.233  14932',
'DEPAUL         0.001 75.234  14933',
'DENKER         0.001 75.235  14934',
'DEMUTH         0.001 75.235  14935',
'DEMELO         0.001 75.236  14936',
'DELACERDA      0.001 75.237  14937',
'DEFORGE        0.001 75.237  14938',
'DANOS          0.001 75.238  14939',
'DALLEY         0.001 75.239  14940',
'DAIGNEAULT     0.001 75.239  14941',
'CYBULSKI       0.001 75.240  14942',
'CRYSTAL        0.001 75.241  14943',
'CRISTOBAL      0.001 75.241  14944',
'COTHREN        0.001 75.242  14945',
'CORNS          0.001 75.243  14946',
'CORKERY        0.001 75.243  14947',
'COPAS          0.001 75.244  14948',
'COCO           0.001 75.245  14949',
'CLUBB          0.001 75.245  14950',
'CLORE          0.001 75.246  14951',
'CHITTY         0.001 75.247  14952',
'CHICHESTER     0.001 75.247  14953',
'CHERY          0.001 75.248  14954',
'CHARON         0.001 75.249  14955',
'CHAMBER        0.001 75.249  14956',
'CHACE          0.001 75.250  14957',
'CATANZARO      0.001 75.251  14958',
'CASTONGUAY     0.001 75.251  14959',
'CASSELLA       0.001 75.252  14960',
'CAROLL         0.001 75.253  14961',
'CARLBERG       0.001 75.253  14962',
'CAMMARATA      0.001 75.254  14963',
'CALLE          0.001 75.255  14964',
'CAJIGAS        0.001 75.255  14965',
'BYAS           0.001 75.256  14966',
'BUZBEE         0.001 75.257  14967',
'BUSEY          0.001 75.257  14968',
'BURLING        0.001 75.258  14969',
'BUFKIN         0.001 75.259  14970',
'BRZEZINSKI     0.001 75.259  14971',
'BRUN           0.001 75.260  14972',
'BRICKNER       0.001 75.261  14973',
'BRABHAM        0.001 75.261  14974',
'BOLLER         0.001 75.262  14975',
'BODILY         0.001 75.263  14976',
'BOCKMAN        0.001 75.263  14977',
'BLEICH         0.001 75.264  14978',
'BLAKEMAN       0.001 75.265  14979',
'BISBEE         0.001 75.265  14980',
'BIER           0.001 75.266  14981',
'BEZANSON       0.001 75.267  14982',
'BEVILACQUA     0.001 75.267  14983',
'BESAW          0.001 75.268  14984',
'BERRIAN        0.001 75.269  14985',
'BERKELEY       0.001 75.269  14986',
'BEQUETTE       0.001 75.270  14987',
'BEAUFORD       0.001 75.271  14988',
'BAUMGARTEN     0.001 75.271  14989',
'BAUDOIN        0.001 75.272  14990',
'BATIE          0.001 75.273  14991',
'BASALDUA       0.001 75.273  14992',
'BARDIN         0.001 75.274  14993',
'BANGERT        0.001 75.275  14994',
'BANES          0.001 75.275  14995',
'BACKLUND       0.001 75.276  14996',
'AVITIA         0.001 75.277  14997',
'ARTZ           0.001 75.277  14998',
'ARCHEY         0.001 75.278  14999',
'APEL           0.001 75.279  15000',
'AMICO          0.001 75.279  15001',
'ALAM           0.001 75.280  15002',
'ADEN           0.001 75.281  15003',
'ZEBROWSKI      0.001 75.281  15004',
'YOKOTA         0.001 75.282  15005',
'WORMLEY        0.001 75.283  15006',
'WOOTTON        0.001 75.283  15007',
'WOODIE         0.001 75.284  15008',
'WOMAC          0.001 75.285  15009',
'WILTZ          0.001 75.285  15010',
'WIGINGTON      0.001 75.286  15011',
'WHITEHORN      0.001 75.287  15012',
'WHISMAN        0.001 75.287  15013',
'WEISGERBER     0.001 75.288  15014',
'WEIGLE         0.001 75.289  15015',
'WEEDMAN        0.001 75.289  15016',
'WATKIN         0.001 75.290  15017',
'WASILEWSKI     0.001 75.291  15018',
'WADLINGTON     0.001 75.291  15019',
'WADKINS        0.001 75.292  15020',
'VIVERETTE      0.001 75.293  15021',
'VIDAURRI       0.001 75.293  15022',
'VIDALES        0.001 75.294  15023',
'VEZINA         0.001 75.294  15024',
'VANLEER        0.001 75.295  15025',
'VANHOY         0.001 75.296  15026',
'VANGUILDER     0.001 75.296  15027',
'VANBRUNT       0.001 75.297  15028',
'UY             0.001 75.298  15029',
'UPDEGRAFF      0.001 75.298  15030',
'TYLOR          0.001 75.299  15031',
'TRINKLE        0.001 75.300  15032',
'TOUCHETTE      0.001 75.300  15033',
'TILSON         0.001 75.301  15034',
'TILMAN         0.001 75.302  15035',
'TENGAN         0.001 75.302  15036',
'TARKINGTON     0.001 75.303  15037',
'SURRETT        0.001 75.304  15038',
'SUPER          0.001 75.304  15039',
'SUMMY          0.001 75.305  15040',
'STREETMAN      0.001 75.306  15041',
'STRAUGHTER     0.001 75.306  15042',
'STEERE         0.001 75.307  15043',
'STALLING       0.001 75.308  15044',
'SPRUELL        0.001 75.308  15045',
'SPADARO        0.001 75.309  15046',
'SOLLEY         0.001 75.309  15047',
'SMATHERS       0.001 75.310  15048',
'SILVERA        0.001 75.311  15049',
'SIEMS          0.001 75.311  15050',
'SHREFFLER      0.001 75.312  15051',
'SHOLAR         0.001 75.313  15052',
'SELDEN         0.001 75.313  15053',
'SCHAPER        0.001 75.314  15054',
'SAMAYOA        0.001 75.315  15055',
'RUGGERI        0.001 75.315  15056',
'ROWEN          0.001 75.316  15057',
'ROSSO          0.001 75.317  15058',
'ROSENBALM      0.001 75.317  15059',
'ROOSEVELT      0.001 75.318  15060',
'ROOSE          0.001 75.319  15061',
'RONQUILLO      0.001 75.319  15062',
'ROGOWSKI       0.001 75.320  15063',
'REXFORD        0.001 75.321  15064',
'REPASS         0.001 75.321  15065',
'RENZI          0.001 75.322  15066',
'RENICK         0.001 75.323  15067',
'RENDA          0.001 75.323  15068',
'REHBERG        0.001 75.324  15069',
'REAPER         0.001 75.324  15070',
'RANCK          0.001 75.325  15071',
'RAFFA          0.001 75.326  15072',
'RACKERS        0.001 75.326  15073',
'RAAP           0.001 75.327  15074',
'PUGSLEY        0.001 75.328  15075',
'PUGLISI        0.001 75.328  15076',
'PRINZ          0.001 75.329  15077',
'PRIMUS         0.001 75.330  15078',
'POUNDERS       0.001 75.330  15079',
'PON            0.001 75.331  15080',
'POMPA          0.001 75.332  15081',
'PLASENCIA      0.001 75.332  15082',
'PIPKINS        0.001 75.333  15083',
'PILLAR         0.001 75.334  15084',
'PETROSKY       0.001 75.334  15085',
'PELLEY         0.001 75.335  15086',
'PAULS          0.001 75.336  15087',
'PAULI          0.001 75.336  15088',
'PARKISON       0.001 75.337  15089',
'PARISIEN       0.001 75.338  15090',
'PANGLE         0.001 75.338  15091',
'PANCOAST       0.001 75.339  15092',
'PALAZZOLO      0.001 75.339  15093',
'OWENBY         0.001 75.340  15094',
'OVERBAY        0.001 75.341  15095',
'ORRIS          0.001 75.341  15096',
'ORLOWSKI       0.001 75.342  15097',
'NIPP           0.001 75.343  15098',
'NEWBERN        0.001 75.343  15099',
'NEDD           0.001 75.344  15100',
'NEALON         0.001 75.345  15101',
'NAJAR          0.001 75.345  15102',
'MYSLIWIEC      0.001 75.346  15103',
'MYRON          0.001 75.347  15104',
'MYRES          0.001 75.347  15105',
'MUSSON         0.001 75.348  15106',
'MURRIETA       0.001 75.349  15107',
'MUNSELL        0.001 75.349  15108',
'MUMMA          0.001 75.350  15109',
'MULDOWNEY      0.001 75.351  15110',
'MOYLE          0.001 75.351  15111',
'MOWEN          0.001 75.352  15112',
'MOSE           0.001 75.353  15113',
'MOREJON        0.001 75.353  15114',
'MOODIE         0.001 75.354  15115',
'MONIER         0.001 75.354  15116',
'MIKKELSEN      0.001 75.355  15117',
'MIERS          0.001 75.356  15118',
'METZINGER      0.001 75.356  15119',
'MELIN          0.001 75.357  15120',
'MCQUAY         0.001 75.358  15121',
'MCPEEK         0.001 75.358  15122',
'MCNEELEY       0.001 75.359  15123',
'MCGLOTHIN      0.001 75.360  15124',
'MCGHIE         0.001 75.360  15125',
'MCDONELL       0.001 75.361  15126',
'MCCUMBER       0.001 75.362  15127',
'MCCRANIE       0.001 75.362  15128',
'MCBEAN         0.001 75.363  15129',
'MAYHUGH        0.001 75.364  15130',
'MARTS          0.001 75.364  15131',
'MARENCO        0.001 75.365  15132',
'MANGES         0.001 75.366  15133',
'LYNAM          0.001 75.366  15134',
'LUPIEN         0.001 75.367  15135',
'LUFF           0.001 75.368  15136',
'LUEBBERT       0.001 75.368  15137',
'LOH            0.001 75.369  15138',
'LOFLIN         0.001 75.369  15139',
'LOCOCO         0.001 75.370  15140',
'LOCH           0.001 75.371  15141',
'LIS            0.001 75.371  15142',
'LINKE          0.001 75.372  15143',
'LIGHTLE        0.001 75.373  15144',
'LEWELLYN       0.001 75.373  15145',
'LEISHMAN       0.001 75.374  15146',
'LEBOW          0.001 75.375  15147',
'LEBOUEF        0.001 75.375  15148',
'LEANOS         0.001 75.376  15149',
'LANZ           0.001 75.377  15150',
'LANDY          0.001 75.377  15151',
'LANDAVERDE     0.001 75.378  15152',
'LACEFIELD      0.001 75.379  15153',
'KYLER          0.001 75.379  15154',
'KUEBLER        0.001 75.380  15155',
'KROPF          0.001 75.381  15156',
'KROEKER        0.001 75.381  15157',
'KLUESNER       0.001 75.382  15158',
'KLASS          0.001 75.382  15159',
'KIMBERLING     0.001 75.383  15160',
'KILKENNY       0.001 75.384  15161',
'KIKER          0.001 75.384  15162',
'KETTER         0.001 75.385  15163',
'KELEMEN        0.001 75.386  15164',
'KEASLER        0.001 75.386  15165',
'KAWAMURA       0.001 75.387  15166',
'KARST          0.001 75.388  15167',
'KARDOS         0.001 75.388  15168',
'JEREMIAH       0.001 75.389  15169',
'JARED          0.001 75.390  15170',
'IGO            0.001 75.390  15171',
'HUSEMAN        0.001 75.391  15172',
'HUSEBY         0.001 75.392  15173',
'HURLBERT       0.001 75.392  15174',
'HUARD          0.001 75.393  15175',
'HOTTINGER      0.001 75.394  15176',
'HORNBERGER     0.001 75.394  15177',
'HOPPS          0.001 75.395  15178',
'HOLDSWORTH     0.001 75.396  15179',
'HENSEN         0.001 75.396  15180',
'HEILIG         0.001 75.397  15181',
'HEETER         0.001 75.397  15182',
'HARPOLE        0.001 75.398  15183',
'HAAK           0.001 75.399  15184',
'GUTOWSKI       0.001 75.399  15185',
'GUNNELS        0.001 75.400  15186',
'GRIMMER        0.001 75.401  15187',
'GRIEVE         0.001 75.401  15188',
'GRAVATT        0.001 75.402  15189',
'GRANDERSON     0.001 75.403  15190',
'GOTCHER        0.001 75.403  15191',
'GLEAVES        0.001 75.404  15192',
'GENAO          0.001 75.405  15193',
'GARFINKEL      0.001 75.405  15194',
'FRERICHS       0.001 75.406  15195',
'FOUSHEE        0.001 75.407  15196',
'FLANERY        0.001 75.407  15197',
'FINNIE         0.001 75.408  15198',
'FELDT          0.001 75.409  15199',
'FAGIN          0.001 75.409  15200',
'EWALT          0.001 75.410  15201',
'ELLEFSON       0.001 75.411  15202',
'EILER          0.001 75.411  15203',
'ECKHART        0.001 75.412  15204',
'EASTEP         0.001 75.412  15205',
'DWIGHT         0.001 75.413  15206',
'DIGIROLAMO     0.001 75.414  15207',
'DIDOMENICO     0.001 75.414  15208',
'DEVERA         0.001 75.415  15209',
'DELAVEGA       0.001 75.416  15210',
'DEFILIPPO      0.001 75.416  15211',
'DEBUSK         0.001 75.417  15212',
'DAUB           0.001 75.418  15213',
'DAMIANI        0.001 75.418  15214',
'CUPPLES        0.001 75.419  15215',
'CUDDY          0.001 75.420  15216',
'CROFOOT        0.001 75.420  15217',
'COURTER        0.001 75.421  15218',
'COTO           0.001 75.422  15219',
'COSTIGAN       0.001 75.422  15220',
'CORNING        0.001 75.423  15221',
'CORMAN         0.001 75.424  15222',
'CORLETT        0.001 75.424  15223',
'COOPERMAN      0.001 75.425  15224',
'COLLISON       0.001 75.426  15225',
'COGHLAN        0.001 75.426  15226',
'COBBINS        0.001 75.427  15227',
'COADY          0.001 75.427  15228',
'COACHMAN       0.001 75.428  15229',
'CLOTHIER       0.001 75.429  15230',
'CLIENT         0.001 75.429  15231',
'CLEAR          0.001 75.430  15232',
'CIPOLLA        0.001 75.431  15233',
'CHMIELEWSKI    0.001 75.431  15234',
'CHIODO         0.001 75.432  15235',
'CHATTERTON     0.001 75.433  15236',
'CHAPPELLE      0.001 75.433  15237',
'CHAIREZ        0.001 75.434  15238',
'CERON          0.001 75.435  15239',
'CASPERSON      0.001 75.435  15240',
'CASLER         0.001 75.436  15241',
'CASADOS        0.001 75.437  15242',
'CARROW         0.001 75.437  15243',
'CAROLINA       0.001 75.438  15244',
'CARLINO        0.001 75.439  15245',
'CARICO         0.001 75.439  15246',
'CARDILLO       0.001 75.440  15247',
'CAOUETTE       0.001 75.441  15248',
'CANTO          0.001 75.441  15249',
'CANAVAN        0.001 75.442  15250',
'CAMBRA         0.001 75.442  15251',
'BYARD          0.001 75.443  15252',
'BUTERBAUGH     0.001 75.444  15253',
'BUSE           0.001 75.444  15254',
'BUCY           0.001 75.445  15255',
'BUCKWALTER     0.001 75.446  15256',
'BUBB           0.001 75.446  15257',
'BRYD           0.001 75.447  15258',
'BRISSETTE      0.001 75.448  15259',
'BRAULT         0.001 75.448  15260',
'BRADWELL       0.001 75.449  15261',
'BOSHEARS       0.001 75.450  15262',
'BORCHERT       0.001 75.450  15263',
'BLANSETT       0.001 75.451  15264',
'BLANCH         0.001 75.452  15265',
'BLADE          0.001 75.452  15266',
'BIONDO         0.001 75.453  15267',
'BILBO          0.001 75.454  15268',
'BIEHL          0.001 75.454  15269',
'BESSEY         0.001 75.455  15270',
'BERTA          0.001 75.455  15271',
'BELLES         0.001 75.456  15272',
'BELLA          0.001 75.457  15273',
'BEEKS          0.001 75.457  15274',
'BEEKMAN        0.001 75.458  15275',
'BEAUFORT       0.001 75.459  15276',
'BAYLISS        0.001 75.459  15277',
'BARDSLEY       0.001 75.460  15278',
'AVILLA         0.001 75.461  15279',
'ASTUDILLO      0.001 75.461  15280',
'ARDITO         0.001 75.462  15281',
'ANWAR          0.001 75.463  15282',
'ANTUNEZ        0.001 75.463  15283',
'AMEN           0.001 75.464  15284',
'ADERHOLT       0.001 75.465  15285',
'ABATE          0.001 75.465  15286',
'YOWELL         0.001 75.466  15287',
'YIN            0.001 75.467  15288',
'YEARBY         0.001 75.467  15289',
'YE             0.001 75.468  15290',
'WURST          0.001 75.468  15291',
'WOOLVERTON     0.001 75.469  15292',
'WOOLBRIGHT     0.001 75.470  15293',
'WILDERMUTH     0.001 75.470  15294',
'WHITTENBURG    0.001 75.471  15295',
'WHITELY        0.001 75.472  15296',
'WETTER         0.001 75.472  15297',
'WETHERBEE      0.001 75.473  15298',
'WENZ           0.001 75.474  15299',
'WELLIVER       0.001 75.474  15300',
'WELLING        0.001 75.475  15301',
'WELCOME        0.001 75.475  15302',
'WASON          0.001 75.476  15303',
'WARRIOR        0.001 75.477  15304',
'WARLICK        0.001 75.477  15305',
'VOORHIES       0.001 75.478  15306',
'VIVIER         0.001 75.479  15307',
'VILLINES       0.001 75.479  15308',
'VIDA           0.001 75.480  15309',
'VERDE          0.001 75.481  15310',
'VEIGA          0.001 75.481  15311',
'VARGHESE       0.001 75.482  15312',
'VANWYK         0.001 75.482  15313',
'VANWINGERDEN   0.001 75.483  15314',
'VANHORNE       0.001 75.484  15315',
'UMSTEAD        0.001 75.484  15316',
'TWIGGS         0.001 75.485  15317',
'TUSING         0.001 75.486  15318',
'TREGO          0.001 75.486  15319',
'TOMPSON        0.001 75.487  15320',
'TINKLE         0.001 75.488  15321',
'THOMAN         0.001 75.488  15322',
'THOLE          0.001 75.489  15323',
'TATMAN         0.001 75.489  15324',
'TARTT          0.001 75.490  15325',
'SUDA           0.001 75.491  15326',
'STUDLEY        0.001 75.491  15327',
'STROCK         0.001 75.492  15328',
'STRAWBRIDGE    0.001 75.493  15329',
'STOKELY        0.001 75.493  15330',
'STEC           0.001 75.494  15331',
'STANG          0.001 75.495  15332',
'STALTER        0.001 75.495  15333',
'SPEIDEL        0.001 75.496  15334',
'SPAFFORD       0.001 75.496  15335',
'SPADE          0.001 75.497  15336',
'SONTAG         0.001 75.498  15337',
'SOKOLOWSKI     0.001 75.498  15338',
'SKILLMAN       0.001 75.499  15339',
'SKELLEY        0.001 75.500  15340',
'SKALSKI        0.001 75.500  15341',
'SISON          0.001 75.501  15342',
'SIPPEL         0.001 75.502  15343',
'SINQUEFIELD    0.001 75.502  15344',
'SIN            0.001 75.503  15345',
'SIEGLE         0.001 75.503  15346',
'SHER           0.001 75.504  15347',
'SHARROW        0.001 75.505  15348',
'SETLIFF        0.001 75.505  15349',
'SERA           0.001 75.506  15350',
'SELLNER        0.001 75.507  15351',
'SELIG          0.001 75.507  15352',
'SEIBOLD        0.001 75.508  15353',
'SEERY          0.001 75.509  15354',
'SCRIBER        0.001 75.509  15355',
'SCHULL         0.001 75.510  15356',
'SCHRUPP        0.001 75.510  15357',
'SCHIPPERS      0.001 75.511  15358',
'SAY            0.001 75.512  15359',
'SAULSBURY      0.001 75.512  15360',
'SAO            0.001 75.513  15361',
'SANTILLO       0.001 75.514  15362',
'SANOR          0.001 75.514  15363',
'SANCHO         0.001 75.515  15364',
'RUFUS          0.001 75.516  15365',
'RUBALCABA      0.001 75.516  15366',
'ROOSA          0.001 75.517  15367',
'RONK           0.001 75.517  15368',
'ROBBS          0.001 75.518  15369',
'ROACHE         0.001 75.519  15370',
'RIVER          0.001 75.519  15371',
'RIEBE          0.001 75.520  15372',
'REINOSO        0.001 75.521  15373',
'QUIN           0.001 75.521  15374',
'PRUDE          0.001 75.522  15375',
'PREUSS         0.001 75.523  15376',
'POTTORFF       0.001 75.523  15377',
'PONTIFF        0.001 75.524  15378',
'PLOUFFE        0.001 75.524  15379',
'PICOU          0.001 75.525  15380',
'PICKLESIMER    0.001 75.526  15381',
'PETTYJOHN      0.001 75.526  15382',
'PETTI          0.001 75.527  15383',
'PENALOZA       0.001 75.528  15384',
'PARMELEE       0.001 75.528  15385',
'PARDEE         0.001 75.529  15386',
'PALAZZO        0.001 75.529  15387',
'OVERHOLT       0.001 75.530  15388',
'OGAWA          0.001 75.531  15389',
'OFARRELL       0.001 75.531  15390',
'NOVA           0.001 75.532  15391',
'NOLTING        0.001 75.533  15392',
'NODA           0.001 75.533  15393',
'NICOLA         0.001 75.534  15394',
'NICKSON        0.001 75.535  15395',
'NEVITT         0.001 75.535  15396',
'NEVEU          0.001 75.536  15397',
'NAVARRE        0.001 75.536  15398',
'NAM            0.001 75.537  15399',
'MURROW         0.001 75.538  15400',
'MUNZ           0.001 75.538  15401',
'MULLOY         0.001 75.539  15402',
'MONZO          0.001 75.540  15403',
'MILLIMAN       0.001 75.540  15404',
'METIVIER       0.001 75.541  15405',
'MERLINO        0.001 75.542  15406',
'MCPETERS       0.001 75.542  15407',
'MCKISSACK      0.001 75.543  15408',
'MCKEEN         0.001 75.543  15409',
'MCGURK         0.001 75.544  15410',
'MCFEE          0.001 75.545  15411',
'MCFARREN       0.001 75.545  15412',
'MCELWEE        0.001 75.546  15413',
'MCEACHIN       0.001 75.547  15414',
'MCDONAGH       0.001 75.547  15415',
'MCCARVILLE     0.001 75.548  15416',
'MAYHALL        0.001 75.549  15417',
'MATTOON        0.001 75.549  15418',
'MARTELLO       0.001 75.550  15419',
'MARCONI        0.001 75.550  15420',
'MARBURY        0.001 75.551  15421',
'MAO            0.001 75.552  15422',
'MANZELLA       0.001 75.552  15423',
'MALY           0.001 75.553  15424',
'MALEC          0.001 75.554  15425',
'MAITLAND       0.001 75.554  15426',
'MAHEU          0.001 75.555  15427',
'MACLENNAN      0.001 75.556  15428',
'LYKE           0.001 75.556  15429',
'LUERA          0.001 75.557  15430',
'LOYOLA         0.001 75.557  15431',
'LOWENSTEIN     0.001 75.558  15432',
'LOSH           0.001 75.559  15433',
'LOPICCOLO      0.001 75.559  15434',
'LONGACRE       0.001 75.560  15435',
'LOMAN          0.001 75.561  15436',
'LODEN          0.001 75.561  15437',
'LOAIZA         0.001 75.562  15438',
'LIEBER         0.001 75.563  15439',
'LIBBEY         0.001 75.563  15440',
'LENHARDT       0.001 75.564  15441',
'LEFEBRE        0.001 75.564  15442',
'LAUTERBACH     0.001 75.565  15443',
'LAURITSEN      0.001 75.566  15444',
'LASS           0.001 75.566  15445',
'LAROCCO        0.001 75.567  15446',
'LARIMER        0.001 75.568  15447',
'LANSFORD       0.001 75.568  15448',
'LANCLOS        0.001 75.569  15449',
'LAMAY          0.001 75.570  15450',
'LAL            0.001 75.570  15451',
'KULIKOWSKI     0.001 75.571  15452',
'KRIEBEL        0.001 75.571  15453',
'KOSINSKI       0.001 75.572  15454',
'KLEINMAN       0.001 75.573  15455',
'KLEINER        0.001 75.573  15456',
'KLECKNER       0.001 75.574  15457',
'KISTNER        0.001 75.575  15458',
'KISSNER        0.001 75.575  15459',
'KISSELL        0.001 75.576  15460',
'KILROY         0.001 75.577  15461',
'KENNA          0.001 75.577  15462',
'KEISLER        0.001 75.578  15463',
'KEEBLE         0.001 75.578  15464',
'KEANEY         0.001 75.579  15465',
'KALE           0.001 75.580  15466',
'JOLY           0.001 75.580  15467',
'JIMISON        0.001 75.581  15468',
'JEANS          0.001 75.582  15469',
'IKNER          0.001 75.582  15470',
'HURSEY         0.001 75.583  15471',
'HRUSKA         0.001 75.584  15472',
'HOVE           0.001 75.584  15473',
'HOU            0.001 75.585  15474',
'HOST           0.001 75.585  15475',
'HOSKING        0.001 75.586  15476',
'HOOSE          0.001 75.587  15477',
'HOLLE          0.001 75.587  15478',
'HOEPPNER       0.001 75.588  15479',
'HITTLE         0.001 75.589  15480',
'HITCHENS       0.001 75.589  15481',
'HIRTH          0.001 75.590  15482',
'HINERMAN       0.001 75.591  15483',
'HILARIO        0.001 75.591  15484',
'HIGBY          0.001 75.592  15485',
'HERTZOG        0.001 75.592  15486',
'HENTZ          0.001 75.593  15487',
'HENSLER        0.001 75.594  15488',
'HEIST          0.001 75.594  15489',
'HEIER          0.001 75.595  15490',
'HEGG           0.001 75.596  15491',
'HASSEL         0.001 75.596  15492',
'HARPE          0.001 75.597  15493',
'HARA           0.001 75.598  15494',
'HANK           0.001 75.598  15495',
'HAIN           0.001 75.599  15496',
'HAGOPIAN       0.001 75.599  15497',
'GRIMSHAW       0.001 75.600  15498',
'GRADO          0.001 75.601  15499',
'GOWIN          0.001 75.601  15500',
'GOWANS         0.001 75.602  15501',
'GOOGE          0.001 75.603  15502',
'GOODLOW        0.001 75.603  15503',
'GOERING        0.001 75.604  15504',
'GLEATON        0.001 75.605  15505',
'GIDLEY         0.001 75.605  15506',
'GIANNONE       0.001 75.606  15507',
'GASCON         0.001 75.606  15508',
'GARNEAU        0.001 75.607  15509',
'GAMBREL        0.001 75.608  15510',
'GALAZ          0.001 75.608  15511',
'FUENTEZ        0.001 75.609  15512',
'FRISINA        0.001 75.610  15513',
'FRESQUEZ       0.001 75.610  15514',
'FRAHER         0.001 75.611  15515',
'FITTING        0.001 75.612  15516',
'FEUERSTEIN     0.001 75.612  15517',
'FELTEN         0.001 75.613  15518',
'EVERMAN        0.001 75.613  15519',
'ESTELL         0.001 75.614  15520',
'ERTEL          0.001 75.615  15521',
'ERAZO          0.001 75.615  15522',
'ENSIGN         0.001 75.616  15523',
'ENDO           0.001 75.617  15524',
'ELLERMAN       0.001 75.617  15525',
'EICHORN        0.001 75.618  15526',
'EDGELL         0.001 75.619  15527',
'EBRON          0.001 75.619  15528',
'EAKER          0.001 75.620  15529',
'DUNDAS         0.001 75.620  15530',
'DUNCANSON      0.001 75.621  15531',
'DUCHENE        0.001 75.622  15532',
'DUCAN          0.001 75.622  15533',
'DOMBROSKI      0.001 75.623  15534',
'DOMAN          0.001 75.624  15535',
'DOCK           0.001 75.624  15536',
'DICKISON       0.001 75.625  15537',
'DEWOODY        0.001 75.626  15538',
'DELOERA        0.001 75.626  15539',
'DELAHOUSSAYE   0.001 75.627  15540',
'DEJEAN         0.001 75.627  15541',
'DEGROAT        0.001 75.628  15542',
'DECARO         0.001 75.629  15543',
'DEARMOND       0.001 75.629  15544',
'DASHNER        0.001 75.630  15545',
'DALES          0.001 75.631  15546',
'CROSSETT       0.001 75.631  15547',
'CRESSEY        0.001 75.632  15548',
'COWGER         0.001 75.633  15549',
'COURTS         0.001 75.633  15550',
'COURT          0.001 75.634  15551',
'CORNETTE       0.001 75.634  15552',
'CORBO          0.001 75.635  15553',
'COPLIN         0.001 75.636  15554',
'COOVER         0.001 75.636  15555',
'CONDIE         0.001 75.637  15556',
'COKLEY         0.001 75.638  15557',
'CICERO         0.001 75.638  15558',
'CEASER         0.001 75.639  15559',
'CANNADAY       0.001 75.640  15560',
'CALLANAN       0.001 75.640  15561',
'CADLE          0.001 75.641  15562',
'BUSCHER        0.001 75.641  15563',
'BULLION        0.001 75.642  15564',
'BUCKLIN        0.001 75.643  15565',
'BRUENING       0.001 75.643  15566',
'BRUCKNER       0.001 75.644  15567',
'BROSE          0.001 75.645  15568',
'BRANAN         0.001 75.645  15569',
'BRADWAY        0.001 75.646  15570',
'BOTSFORD       0.001 75.647  15571',
'BORTZ          0.001 75.647  15572',
'BORELLI        0.001 75.648  15573',
'BONETTI        0.001 75.648  15574',
'BOLAN          0.001 75.649  15575',
'BOERGER        0.001 75.650  15576',
'BLOOMBERG      0.001 75.650  15577',
'BINGMAN        0.001 75.651  15578',
'BILGER         0.001 75.652  15579',
'BERNS          0.001 75.652  15580',
'BERINGER       0.001 75.653  15581',
'BERES          0.001 75.653  15582',
'BEETS          0.001 75.654  15583',
'BEEDE          0.001 75.655  15584',
'BEAUDET        0.001 75.655  15585',
'BEACHUM        0.001 75.656  15586',
'BAUGHN         0.001 75.657  15587',
'BATOR          0.001 75.657  15588',
'BASTIEN        0.001 75.658  15589',
'BASQUEZ        0.001 75.659  15590',
'BARREIRO       0.001 75.659  15591',
'BARGA          0.001 75.660  15592',
'BARATTA        0.001 75.660  15593',
'BALSER         0.001 75.661  15594',
'BAILLIE        0.001 75.662  15595',
'AXFORD         0.001 75.662  15596',
'ATTEBERY       0.001 75.663  15597',
'ARAKAKI        0.001 75.664  15598',
'ANNUNZIATA     0.001 75.664  15599',
'ANDRZEJEWSKI   0.001 75.665  15600',
'AMENT          0.001 75.666  15601',
'AMENDOLA       0.001 75.666  15602',
'ADCOX          0.001 75.667  15603',
'ABRIL          0.001 75.667  15604',
'ZENON          0.001 75.668  15605',
'ZEITLER        0.001 75.669  15606',
'ZANG           0.001 75.669  15607',
'ZAMBRANA       0.001 75.670  15608',
'YBANEZ         0.001 75.671  15609',
'YAGI           0.001 75.671  15610',
'WOLAK          0.001 75.672  15611',
'WILCOXSON      0.001 75.672  15612',
'WHITESEL       0.001 75.673  15613',
'WHITEHAIR      0.001 75.674  15614',
'WEYAND         0.001 75.674  15615',
'WESTENDORF     0.001 75.675  15616',
'WELKE          0.001 75.676  15617',
'WEINMANN       0.001 75.676  15618',
'WEI            0.001 75.677  15619',
'WEESNER        0.001 75.677  15620',
'WEEKES         0.001 75.678  15621',
'WEDEL          0.001 75.679  15622',
'WEDDING        0.001 75.679  15623',
'WEATHERALL     0.001 75.680  15624',
'WARTHEN        0.001 75.681  15625',
'VOSE           0.001 75.681  15626',
'VILLALTA       0.001 75.682  15627',
'VILA           0.001 75.682  15628',
'VIATOR         0.001 75.683  15629',
'VAZ            0.001 75.684  15630',
'VALTIERRA      0.001 75.684  15631',
'URBANEK        0.001 75.685  15632',
'TULLEY         0.001 75.685  15633',
'TROJANOWSKI    0.001 75.686  15634',
'TRAPANI        0.001 75.687  15635',
'TOUPS          0.001 75.687  15636',
'TORPEY         0.001 75.688  15637',
'TOMITA         0.001 75.689  15638',
'TINDAL         0.001 75.689  15639',
'TIEMAN         0.001 75.690  15640',
'TEVIS          0.001 75.690  15641',
'TEDROW         0.001 75.691  15642',
'TAUL           0.001 75.692  15643',
'TASH           0.001 75.692  15644',
'TAMMARO        0.001 75.693  15645',
'SYLVA          0.001 75.694  15646',
'SWIDERSKI      0.001 75.694  15647',
'SWEETING       0.001 75.695  15648',
'SUND           0.001 75.695  15649',
'STUTLER        0.001 75.696  15650',
'STOCKING       0.001 75.697  15651',
'STICH          0.001 75.697  15652',
'STERNS         0.001 75.698  15653',
'STEGNER        0.001 75.698  15654',
'STALDER        0.001 75.699  15655',
'SPLAWN         0.001 75.700  15656',
'SPEIRS         0.001 75.700  15657',
'SOUTHWELL      0.001 75.701  15658',
'SOLTYS         0.001 75.702  15659',
'SMEAD          0.001 75.702  15660',
'SLYE           0.001 75.703  15661',
'SKIPWORTH      0.001 75.703  15662',
'SIPOS          0.001 75.704  15663',
'SIMMERMAN      0.001 75.705  15664',
'SIGMUND        0.001 75.705  15665',
'SIDHU          0.001 75.706  15666',
'SHUFFLER       0.001 75.707  15667',
'SHINGLETON     0.001 75.707  15668',
'SHADWICK       0.001 75.708  15669',
'SERMONS        0.001 75.708  15670',
'SEEFELDT       0.001 75.709  15671',
'SCIPIO         0.001 75.710  15672',
'SCHWANKE       0.001 75.710  15673',
'SCHREFFLER     0.001 75.711  15674',
'SCHIRO         0.001 75.712  15675',
'SCHEIBER       0.001 75.712  15676',
'SANDOZ         0.001 75.713  15677',
'SAMSEL         0.001 75.713  15678',
'RUDDELL        0.001 75.714  15679',
'ROYSE          0.001 75.715  15680',
'ROUILLARD      0.001 75.715  15681',
'ROTELLA        0.001 75.716  15682',
'ROSALEZ        0.001 75.716  15683',
'ROMRIELL       0.001 75.717  15684',
'ROMMEL         0.001 75.718  15685',
'RIZER          0.001 75.718  15686',
'RINER          0.001 75.719  15687',
'RICKARDS       0.001 75.720  15688',
'RHOTON         0.001 75.720  15689',
'RHEM           0.001 75.721  15690',
'REPPERT        0.001 75.721  15691',
'RAYL           0.001 75.722  15692',
'RAULSTON       0.001 75.723  15693',
'RAPOSO         0.001 75.723  15694',
'RAPIER         0.001 75.724  15695',
'RAINVILLE      0.001 75.725  15696',
'RADEL          0.001 75.725  15697',
'QUINNEY        0.001 75.726  15698',
'PURDIE         0.001 75.726  15699',
'PUFFER         0.001 75.727  15700',
'PIZZO          0.001 75.728  15701',
'PINCUS         0.001 75.728  15702',
'PETRUS         0.001 75.729  15703',
'PENDELTON      0.001 75.729  15704',
'PENDARVIS      0.001 75.730  15705',
'PELTZ          0.001 75.731  15706',
'PEGUERO        0.001 75.731  15707',
'PEETE          0.001 75.732  15708',
'PATRICIO       0.001 75.733  15709',
'PATCHETT       0.001 75.733  15710',
'PARRINO        0.001 75.734  15711',
'PAPKE          0.001 75.734  15712',
'PAM            0.001 75.735  15713',
'PALAFOX        0.001 75.736  15714',
'OTTLEY         0.001 75.736  15715',
'OSTBY          0.001 75.737  15716',
'ORITZ          0.001 75.738  15717',
'OREN           0.001 75.738  15718',
'OGAN           0.001 75.739  15719',
'ODEGAARD       0.001 75.739  15720',
'OATMAN         0.001 75.740  15721',
'NOELL          0.001 75.741  15722',
'NIDA           0.001 75.741  15723',
'NICOLL         0.001 75.742  15724',
'NEWHALL        0.001 75.743  15725',
'NEWBILL        0.001 75.743  15726',
'NETZER         0.001 75.744  15727',
'NETTLETON      0.001 75.744  15728',
'NEBLETT        0.001 75.745  15729',
'MURLEY         0.001 75.746  15730',
'MUNGO          0.001 75.746  15731',
'MULHALL        0.001 75.747  15732',
'MOSCA          0.001 75.747  15733',
'MORISSETTE     0.001 75.748  15734',
'MORFORD        0.001 75.749  15735',
'MONTAG         0.001 75.749  15736',
'MONSEN         0.001 75.750  15737',
'MITZEL         0.001 75.751  15738',
'MISKELL        0.001 75.751  15739',
'MINDER         0.001 75.752  15740',
'MEHAFFEY       0.001 75.752  15741',
'MCQUILLEN      0.001 75.753  15742',
'MCLENNAN       0.001 75.754  15743',
'MCGRAIL        0.001 75.754  15744',
'MCCREIGHT      0.001 75.755  15745',
'MAYVILLE       0.001 75.756  15746',
'MAYSONET       0.001 75.756  15747',
'MAUST          0.001 75.757  15748',
'MATHIESON      0.001 75.757  15749',
'MASTRANGELO    0.001 75.758  15750',
'MASKELL        0.001 75.759  15751',
'MARTINA        0.001 75.759  15752',
'MANZ           0.001 75.760  15753',
'MALMBERG       0.001 75.760  15754',
'MAKELA         0.001 75.761  15755',
'MADRUGA        0.001 75.762  15756',
'LUZ            0.001 75.762  15757',
'LOTTS          0.001 75.763  15758',
'LONGNECKER     0.001 75.764  15759',
'LOGSTON        0.001 75.764  15760',
'LITTELL        0.001 75.765  15761',
'LISKA          0.001 75.765  15762',
'LINDAUER       0.001 75.766  15763',
'LILLIBRIDGE    0.001 75.767  15764',
'LEVRON         0.001 75.767  15765',
'LETCHWORTH     0.001 75.768  15766',
'LESH           0.001 75.769  15767',
'LEFFEL         0.001 75.769  15768',
'LEDAY          0.001 75.770  15769',
'LEAMON         0.001 75.770  15770',
'LAURA          0.001 75.771  15771',
'KULAS          0.001 75.772  15772',
'KULA           0.001 75.772  15773',
'KUCHARSKI      0.001 75.773  15774',
'KROMER         0.001 75.774  15775',
'KRAATZ         0.001 75.774  15776',
'KONIECZNY      0.001 75.775  15777',
'KONEN          0.001 75.775  15778',
'KOMAR          0.001 75.776  15779',
'KIVETT         0.001 75.777  15780',
'KIRTS          0.001 75.777  15781',
'KINNEAR        0.001 75.778  15782',
'KERSH          0.001 75.778  15783',
'KEITHLEY       0.001 75.779  15784',
'KEIFER         0.001 75.780  15785',
'JUDAH          0.001 75.780  15786',
'JIMENES        0.001 75.781  15787',
'JEPPESEN       0.001 75.782  15788',
'JASMIN         0.001 75.782  15789',
'JANSSON        0.001 75.783  15790',
'HUNTSBERRY     0.001 75.783  15791',
'HUND           0.001 75.784  15792',
'HUITT          0.001 75.785  15793',
'HUFFINE        0.001 75.785  15794',
'HOSFORD        0.001 75.786  15795',
'HOPES          0.001 75.787  15796',
'HOLMSTROM      0.001 75.787  15797',
'HOLLEN         0.001 75.788  15798',
'HODGIN         0.001 75.788  15799',
'HIRSCHMAN      0.001 75.789  15800',
'HILTNER        0.001 75.790  15801',
'HILLIKER       0.001 75.790  15802',
'HIBNER         0.001 75.791  15803',
'HENNIS         0.001 75.791  15804',
'HELT           0.001 75.792  15805',
'HEIDELBERG     0.001 75.793  15806',
'HEGER          0.001 75.793  15807',
'HEER           0.001 75.794  15808',
'HARTNESS       0.001 75.795  15809',
'HARDRICK       0.001 75.795  15810',
'HALLADAY       0.001 75.796  15811',
'GULA           0.001 75.796  15812',
'GUILLAUME      0.001 75.797  15813',
'GUERRIERO      0.001 75.798  15814',
'GRUNEWALD      0.001 75.798  15815',
'GROSSE         0.001 75.799  15816',
'GRIFFETH       0.001 75.800  15817',
'GRENZ          0.001 75.800  15818',
'GRASSI         0.001 75.801  15819',
'GRANDISON      0.001 75.801  15820',
'GINTHER        0.001 75.802  15821',
'GIMENEZ        0.001 75.803  15822',
'GILLINGHAM     0.001 75.803  15823',
'GILLHAM        0.001 75.804  15824',
'GESS           0.001 75.805  15825',
'GELMAN         0.001 75.805  15826',
'GEARHEART      0.001 75.806  15827',
'GASKELL        0.001 75.806  15828',
'GARIEPY        0.001 75.807  15829',
'GAMINO         0.001 75.808  15830',
'GALLIEN        0.001 75.808  15831',
'GALENTINE      0.001 75.809  15832',
'FUQUAY         0.001 75.809  15833',
'FROMAN         0.001 75.810  15834',
'FROELICH       0.001 75.811  15835',
'FRIEDEL        0.001 75.811  15836',
'FOOS           0.001 75.812  15837',
'FOMBY          0.001 75.813  15838',
'FOCHT          0.001 75.813  15839',
'FLYTHE         0.001 75.814  15840',
'FIQUEROA       0.001 75.814  15841',
'FILSON         0.001 75.815  15842',
'FILIP          0.001 75.816  15843',
'FIERROS        0.001 75.816  15844',
'FETT           0.001 75.817  15845',
'FEDELE         0.001 75.818  15846',
'FASCHING       0.001 75.818  15847',
'FARNEY         0.001 75.819  15848',
'FARGO          0.001 75.819  15849',
'EVERTS         0.001 75.820  15850',
'EVEN           0.001 75.821  15851',
'ETZEL          0.001 75.821  15852',
'ELZEY          0.001 75.822  15853',
'EICHNER        0.001 75.822  15854',
'EGER           0.001 75.823  15855',
'EATMAN         0.001 75.824  15856',
'DUCKER         0.001 75.824  15857',
'DUCHESNE       0.001 75.825  15858',
'DONATI         0.001 75.826  15859',
'DOMENECH       0.001 75.826  15860',
'DOLLARD        0.001 75.827  15861',
'DODRILL        0.001 75.827  15862',
'DINAPOLI       0.001 75.828  15863',
'DENN           0.001 75.829  15864',
'DELFINO        0.001 75.829  15865',
'DELCID         0.001 75.830  15866',
'DELAUNE        0.001 75.831  15867',
'DELATTE        0.001 75.831  15868',
'DEEMS          0.001 75.832  15869',
'DALUZ          0.001 75.832  15870',
'CUSSON         0.001 75.833  15871',
'CULLISON       0.001 75.834  15872',
'CUE            0.001 75.834  15873',
'CUADRADO       0.001 75.835  15874',
'CRUMRINE       0.001 75.836  15875',
'CRUICKSHANK    0.001 75.836  15876',
'CROSLAND       0.001 75.837  15877',
'CROLL          0.001 75.837  15878',
'CRIDDLE        0.001 75.838  15879',
'CREPEAU        0.001 75.839  15880',
'COUTU          0.001 75.839  15881',
'COUEY          0.001 75.840  15882',
'CORT           0.001 75.840  15883',
'COPPINGER      0.001 75.841  15884',
'COLLMAN        0.001 75.842  15885',
'COCKBURN       0.001 75.842  15886',
'COCA           0.001 75.843  15887',
'CLAYBORNE      0.001 75.844  15888',
'CLAFLIN        0.001 75.844  15889',
'CISSELL        0.001 75.845  15890',
'CHOWDHURY      0.001 75.845  15891',
'CHICOINE       0.001 75.846  15892',
'CHENIER        0.001 75.847  15893',
'CAUSBY         0.001 75.847  15894',
'CAULDER        0.001 75.848  15895',
'CASSANO        0.001 75.849  15896',
'CASNER         0.001 75.849  15897',
'CARDIEL        0.001 75.850  15898',
'BURNER         0.001 75.850  15899',
'BRUNTON        0.001 75.851  15900',
'BRUCH          0.001 75.852  15901',
'BROXTON        0.001 75.852  15902',
'BROSIUS        0.001 75.853  15903',
'BROOKING       0.001 75.853  15904',
'BRANCO         0.001 75.854  15905',
'BRACCO         0.001 75.855  15906',
'BOURGAULT      0.001 75.855  15907',
'BOSSERMAN      0.001 75.856  15908',
'BOOKS          0.001 75.857  15909',
'BONET          0.001 75.857  15910',
'BOLDS          0.001 75.858  15911',
'BOLANDER       0.001 75.858  15912',
'BOHMAN         0.001 75.859  15913',
'BOELTER        0.001 75.860  15914',
'BLOHM          0.001 75.860  15915',
'BLEA           0.001 75.861  15916',
'BLAISE         0.001 75.862  15917',
'BISCHOF        0.001 75.862  15918',
'BILLIE         0.001 75.863  15919',
'BEUS           0.001 75.863  15920',
'BELLEW         0.001 75.864  15921',
'BASTARACHE     0.001 75.865  15922',
'BAST           0.001 75.865  15923',
'BARTOLOME      0.001 75.866  15924',
'BARK           0.001 75.867  15925',
'BARCOMB        0.001 75.867  15926',
'BARCO          0.001 75.868  15927',
'BALLS          0.001 75.868  15928',
'BALK           0.001 75.869  15929',
'BALAS          0.001 75.870  15930',
'BAKOS          0.001 75.870  15931',
'AVEY           0.001 75.871  15932',
'ATNIP          0.001 75.871  15933',
'ASHBROOK       0.001 75.872  15934',
'ARNO           0.001 75.873  15935',
'ARBOUR         0.001 75.873  15936',
'AQUIRRE        0.001 75.874  15937',
'APPELL         0.001 75.875  15938',
'ALDACO         0.001 75.875  15939',
'ALCAZAR        0.001 75.876  15940',
'ALBAN          0.001 75.876  15941',
'AHLSTROM       0.001 75.877  15942',
'ABADIE         0.001 75.878  15943',
'ZYLSTRA        0.001 75.878  15944',
'ZICK           0.001 75.879  15945',
'ZHENG          0.001 75.879  15946',
'YOTHER         0.001 75.880  15947',
'WYSE           0.001 75.881  15948',
'WUNSCH         0.001 75.881  15949',
'WHITTY         0.001 75.882  15950',
'WEIST          0.001 75.883  15951',
'VROOMAN        0.001 75.883  15952',
'VINE           0.001 75.884  15953',
'VILLALON       0.001 75.884  15954',
'VIDRIO         0.001 75.885  15955',
'VAVRA          0.001 75.886  15956',
'VASBINDER      0.001 75.886  15957',
'VANMATRE       0.001 75.887  15958',
'VANDORN        0.001 75.887  15959',
'UGARTE         0.001 75.888  15960',
'TURBERVILLE    0.001 75.889  15961',
'TUEL           0.001 75.889  15962',
'TROGDON        0.001 75.890  15963',
'TOWN           0.001 75.890  15964',
'TOUPIN         0.001 75.891  15965',
'TOONE          0.001 75.892  15966',
'TOLLESON       0.001 75.892  15967',
'TINKHAM        0.001 75.893  15968',
'TINCH          0.001 75.893  15969',
'TIANO          0.001 75.894  15970',
'TESTON         0.001 75.895  15971',
'TEER           0.001 75.895  15972',
'TEA            0.001 75.896  15973',
'TAWNEY         0.001 75.896  15974',
'TAPLIN         0.001 75.897  15975',
'TANT           0.001 75.898  15976',
'TANSEY         0.001 75.898  15977',
'SWAYNE         0.001 75.899  15978',
'SUTCLIFFE      0.001 75.899  15979',
'SUNDERMAN      0.001 75.900  15980',
'SUITS          0.001 75.901  15981',
'STROTHERS      0.001 75.901  15982',
'STROMAIN       0.001 75.902  15983',
'STORK          0.001 75.902  15984',
'STONEBURNER    0.001 75.903  15985',
'STOLTE         0.001 75.904  15986',
'STOLP          0.001 75.904  15987',
'STOEHR         0.001 75.905  15988',
'STINGLEY       0.001 75.905  15989',
'STEGMAN        0.001 75.906  15990',
'STANGL         0.001 75.907  15991',
'SPINELLA       0.001 75.907  15992',
'SPIER          0.001 75.908  15993',
'SOULES         0.001 75.908  15994',
'SOMMERFIELD    0.001 75.909  15995',
'SIPP           0.001 75.910  15996',
'SIMEK          0.001 75.910  15997',
'SIDERS         0.001 75.911  15998',
'SHUFELT        0.001 75.912  15999',
'SHUE           0.001 75.912  16000',
'SHOR           0.001 75.913  16001',
'SHIRES         0.001 75.913  16002',
'SHELLENBERGER  0.001 75.914  16003',
'SHEELY         0.001 75.915  16004',
'SERVICE        0.001 75.915  16005',
'SEPE           0.001 75.916  16006',
'SEABERG        0.001 75.916  16007',
'SCHWING        0.001 75.917  16008',
'SCHERRER       0.001 75.918  16009',
'SCALZO         0.001 75.918  16010',
'SAVER          0.001 75.919  16011',
'SASSE          0.001 75.919  16012',
'SARVIS         0.001 75.920  16013',
'SANTORA        0.001 75.921  16014',
'SANSBURY       0.001 75.921  16015',
'SALLS          0.001 75.922  16016',
'SALEEM         0.001 75.922  16017',
'RYLAND         0.001 75.923  16018',
'RYBICKI        0.001 75.924  16019',
'RUGGIERI       0.001 75.924  16020',
'ROTHENBERG     0.001 75.925  16021',
'ROSENSTEIN     0.001 75.925  16022',
'ROQUEMORE      0.001 75.926  16023',
'ROLLISON       0.001 75.927  16024',
'RODDEN         0.001 75.927  16025',
'RIVET          0.001 75.928  16026',
'RITA           0.001 75.928  16027',
'RIDLON         0.001 75.929  16028',
'RICHE          0.001 75.930  16029',
'RICCARDI       0.001 75.930  16030',
'REILEY         0.001 75.931  16031',
'REGNER         0.001 75.931  16032',
'RECH           0.001 75.932  16033',
'RAYO           0.001 75.933  16034',
'RAWLEY         0.001 75.933  16035',
'RANGER         0.001 75.934  16036',
'RAFF           0.001 75.934  16037',
'RADABAUGH      0.001 75.935  16038',
'QUON           0.001 75.936  16039',
'QUILL          0.001 75.936  16040',
'PRIVETTE       0.001 75.937  16041',
'PRANGE         0.001 75.937  16042',
'PICKRELL       0.001 75.938  16043',
'PERINO         0.001 75.939  16044',
'PENNING        0.001 75.939  16045',
'PANKRATZ       0.001 75.940  16046',
'ORLANDI        0.001 75.940  16047',
'NYQUIST        0.001 75.941  16048',
'NORRELL        0.001 75.942  16049',
'NOREN          0.001 75.942  16050',
'NAPLES         0.001 75.943  16051',
'NALE           0.001 75.944  16052',
'NAKASHIMA      0.001 75.944  16053',
'MUSSELWHITE    0.001 75.945  16054',
'MURRIN         0.001 75.945  16055',
'MURCH          0.001 75.946  16056',
'MULLINIX       0.001 75.947  16057',
'MULLICAN       0.001 75.947  16058',
'MULLAN         0.001 75.948  16059',
'MORNEAU        0.001 75.948  16060',
'MONDOR         0.001 75.949  16061',
'MOLINAR        0.001 75.950  16062',
'MO             0.001 75.950  16063',
'MINJARES       0.001 75.951  16064',
'MINIX          0.001 75.951  16065',
'MINGLE         0.001 75.952  16066',
'MINCHEW        0.001 75.953  16067',
'MILL           0.001 75.953  16068',
'MILEWSKI       0.001 75.954  16069',
'MIKKELSON      0.001 75.954  16070',
'MIFFLIN        0.001 75.955  16071',
'MESSING        0.001 75.956  16072',
'MERKLEY        0.001 75.956  16073',
'MEIS           0.001 75.957  16074',
'MEAS           0.001 75.957  16075',
'MCROY          0.001 75.958  16076',
'MCPHEARSON     0.001 75.959  16077',
'MCNEEL         0.001 75.959  16078',
'MCMUNN         0.001 75.960  16079',
'MCMORROW       0.001 75.960  16080',
'MCDORMAN       0.001 75.961  16081',
'MCCROSKEY      0.001 75.962  16082',
'MCCOLL         0.001 75.962  16083',
'MCCLUSKY       0.001 75.963  16084',
'MCCLARAN       0.001 75.963  16085',
'MCCAMPBELL     0.001 75.964  16086',
'MAZZARIELLO    0.001 75.965  16087',
'MAUZY          0.001 75.965  16088',
'MAUCH          0.001 75.966  16089',
'MASTRO         0.001 75.966  16090',
'MARTINEK       0.001 75.967  16091',
'MARSALA        0.001 75.968  16092',
'MARCANTEL      0.001 75.968  16093',
'MAHLE          0.001 75.969  16094',
'LYDA           0.001 75.969  16095',
'LUCIUS         0.001 75.970  16096',
'LUCIANI        0.001 75.971  16097',
'LUBBERS        0.001 75.971  16098',
'LOUDER         0.001 75.972  16099',
'LOBEL          0.001 75.973  16100',
'LINSEY         0.001 75.973  16101',
'LINCH          0.001 75.974  16102',
'LILLER         0.001 75.974  16103',
'LEGROS         0.001 75.975  16104',
'LAYDEN         0.001 75.976  16105',
'LAPINE         0.001 75.976  16106',
'LANSBERRY      0.001 75.977  16107',
'LAGE           0.001 75.977  16108',
'LAFOREST       0.001 75.978  16109',
'LABRIOLA       0.001 75.979  16110',
'KOGA           0.001 75.979  16111',
'KNUPP          0.001 75.980  16112',
'KLIMEK         0.001 75.980  16113',
'KITTINGER      0.001 75.981  16114',
'KIRCHOFF       0.001 75.982  16115',
'KINZEL         0.001 75.982  16116',
'KILLINGER      0.001 75.983  16117',
'KILBOURNE      0.001 75.983  16118',
'KETNER         0.001 75.984  16119',
'KEPLEY         0.001 75.985  16120',
'KEMBLE         0.001 75.985  16121',
'KELLS          0.001 75.986  16122',
'KEAR           0.001 75.986  16123',
'KAYA           0.001 75.987  16124',
'KARSTEN        0.001 75.988  16125',
'KANESHIRO      0.001 75.988  16126',
'KAMM           0.001 75.989  16127',
'JOINES         0.001 75.989  16128',
'JOACHIM        0.001 75.990  16129',
'JANELLE        0.001 75.991  16130',
'JACOBUS        0.001 75.991  16131',
'ILER           0.001 75.992  16132',
'HOLGATE        0.001 75.992  16133',
'HOAR           0.001 75.993  16134',
'HISEY          0.001 75.994  16135',
'HIRD           0.001 75.994  16136',
'HILYARD        0.001 75.995  16137',
'HESLIN         0.001 75.995  16138',
'HERZBERG       0.001 75.996  16139',
'HENNIGAN       0.001 75.997  16140',
'HEGLAND        0.001 75.997  16141',
'HARTL          0.001 75.998  16142',
'HANER          0.001 75.998  16143',
'HANDEL         0.001 75.999  16144',
'GUALTIERI      0.001 76.000  16145',
'GREENLY        0.001 76.000  16146',
'GRASSER        0.001 76.001  16147',
'GRAN           0.001 76.002  16148',
'GOETSCH        0.001 76.002  16149',
'GODBOLD        0.001 76.003  16150',
'GILLAND        0.001 76.003  16151',
'GIDNEY         0.001 76.004  16152',
'GIBNEY         0.001 76.005  16153',
'GIANCOLA       0.001 76.005  16154',
'GETTINGER      0.001 76.006  16155',
'GARZON         0.001 76.006  16156',
'GARRET         0.001 76.007  16157',
'GALLE          0.001 76.008  16158',
'GALGANO        0.001 76.008  16159',
'GAIER          0.001 76.009  16160',
'GAERTNER       0.001 76.009  16161',
'FUSTON         0.001 76.010  16162',
'FREEL          0.001 76.011  16163',
'FORTES         0.001 76.011  16164',
'FLOCK          0.001 76.012  16165',
'FIORILLO       0.001 76.012  16166',
'FIGGS          0.001 76.013  16167',
'FENSTERMACHER  0.001 76.014  16168',
'FEDLER         0.001 76.014  16169',
'FACER          0.001 76.015  16170',
'FABIANO        0.001 76.015  16171',
'EVINS          0.001 76.016  16172',
'EUSEBIO        0.001 76.017  16173',
'EULER          0.001 76.017  16174',
'ESQUER         0.001 76.018  16175',
'ENYEART        0.001 76.018  16176',
'ELEM           0.001 76.019  16177',
'EISENHOWER     0.001 76.020  16178',
'EICH           0.001 76.020  16179',
'EDGERLY        0.001 76.021  16180',
'DUROCHER       0.001 76.021  16181',
'DURGAN         0.001 76.022  16182',
'DUFFIN         0.001 76.023  16183',
'DROLET         0.001 76.023  16184',
'DREWES         0.001 76.024  16185',
'DOTTS          0.001 76.024  16186',
'DOSSANTOS      0.001 76.025  16187',
'DOLLY          0.001 76.026  16188',
'DOCKINS        0.001 76.026  16189',
'DIRKSEN        0.001 76.027  16190',
'DIFIORE        0.001 76.027  16191',
'DIERKS         0.001 76.028  16192',
'DICKERMAN      0.001 76.029  16193',
'DICE           0.001 76.029  16194',
'DERY           0.001 76.030  16195',
'DENAULT        0.001 76.031  16196',
'DEMAREE        0.001 76.031  16197',
'DELMONTE       0.001 76.032  16198',
'DELCAMBRE      0.001 76.032  16199',
'DAYS           0.001 76.033  16200',
'DAULTON        0.001 76.034  16201',
'DARST          0.001 76.034  16202',
'DAHLE          0.001 76.035  16203',
'CURNUTT        0.001 76.035  16204',
'CULLY          0.001 76.036  16205',
'CULLIGAN       0.001 76.037  16206',
'CUEVA          0.001 76.037  16207',
'CROSSLIN       0.001 76.038  16208',
'CROSKEY        0.001 76.038  16209',
'CROMARTIE      0.001 76.039  16210',
'CROFTS         0.001 76.040  16211',
'COVIN          0.001 76.040  16212',
'COUTEE         0.001 76.041  16213',
'COUNTESS       0.001 76.041  16214',
'COST           0.001 76.042  16215',
'COPPA          0.001 76.043  16216',
'COOGAN         0.001 76.043  16217',
'CONDREY        0.001 76.044  16218',
'CONCANNON      0.001 76.044  16219',
'COGER          0.001 76.045  16220',
'CLOER          0.001 76.046  16221',
'CLATTERBUCK    0.001 76.046  16222',
'CIESLAK        0.001 76.047  16223',
'CHUMBLEY       0.001 76.047  16224',
'CHOUDHURY      0.001 76.048  16225',
'CHIARAMONTE    0.001 76.049  16226',
'CHARBONEAU     0.001 76.049  16227',
'CHAI           0.001 76.050  16228',
'CARNEAL        0.001 76.050  16229',
'CAPPELLO       0.001 76.051  16230',
'CAMPISI        0.001 76.052  16231',
'CALLICOAT      0.001 76.052  16232',
'BURGOYNE       0.001 76.053  16233',
'BUCHOLZ        0.001 76.053  16234',
'BRUMBACK       0.001 76.054  16235',
'BROSNAN        0.001 76.055  16236',
'BROGDEN        0.001 76.055  16237',
'BRODER         0.001 76.056  16238',
'BRENDLE        0.001 76.056  16239',
'BREECE         0.001 76.057  16240',
'BOWN           0.001 76.058  16241',
'BOU            0.001 76.058  16242',
'BOSER          0.001 76.059  16243',
'BONDY          0.001 76.060  16244',
'BOLSTER        0.001 76.060  16245',
'BOLL           0.001 76.061  16246',
'BLUFORD        0.001 76.061  16247',
'BLANDON        0.001 76.062  16248',
'BISCOE         0.001 76.063  16249',
'BEVILL         0.001 76.063  16250',
'BENCE          0.001 76.064  16251',
'BATTIN         0.001 76.064  16252',
'BASEL          0.001 76.065  16253',
'BARTRAM        0.001 76.066  16254',
'BARNABY        0.001 76.066  16255',
'BARMORE        0.001 76.067  16256',
'BALBUENA       0.001 76.067  16257',
'BADGLEY        0.001 76.068  16258',
'BACKSTROM      0.001 76.069  16259',
'AUYEUNG        0.001 76.069  16260',
'ATER           0.001 76.070  16261',
'ARRELLANO      0.001 76.070  16262',
'ARANT          0.001 76.071  16263',
'ANSARI         0.001 76.072  16264',
'ALLING         0.001 76.072  16265',
'ALEJANDRE      0.001 76.073  16266',
'ALCOCK         0.001 76.073  16267',
'ALAIMO         0.001 76.074  16268',
'AGUINALDO      0.001 76.075  16269',
'AARONS         0.001 76.075  16270',
'ZURITA         0.001 76.076  16271',
'ZEIGER         0.001 76.076  16272',
'ZAWACKI        0.001 76.077  16273',
'YUTZY          0.001 76.078  16274',
'YARGER         0.001 76.078  16275',
'WYGANT         0.001 76.079  16276',
'WURM           0.001 76.079  16277',
'WUEST          0.001 76.080  16278',
'WOLFRAM        0.001 76.081  16279',
'WITHERELL      0.001 76.081  16280',
'WISNESKI       0.001 76.082  16281',
'WHITBY         0.001 76.082  16282',
'WHELCHEL       0.001 76.083  16283',
'WEISZ          0.001 76.083  16284',
'WEISINGER      0.001 76.084  16285',
'WEISHAAR       0.001 76.085  16286',
'WEHR           0.001 76.085  16287',
'WEDGE          0.001 76.086  16288',
'WAXMAN         0.001 76.086  16289',
'WALDSCHMIDT    0.001 76.087  16290',
'WALCK          0.001 76.088  16291',
'WAGGENER       0.001 76.088  16292',
'VOSBURG        0.001 76.089  16293',
'VITA           0.001 76.089  16294',
'VILLELA        0.001 76.090  16295',
'VERCHER        0.001 76.091  16296',
'VENTERS        0.001 76.091  16297',
'VANSCYOC       0.001 76.092  16298',
'VANDYNE        0.001 76.092  16299',
'VALENZA        0.001 76.093  16300',
'UTT            0.001 76.093  16301',
'URICK          0.001 76.094  16302',
'UNGAR          0.001 76.095  16303',
'ULM            0.001 76.095  16304',
'TUMLIN         0.001 76.096  16305',
'TSAO           0.001 76.096  16306',
'TRYON          0.001 76.097  16307',
'TRUDEL         0.001 76.098  16308',
'TREIBER        0.001 76.098  16309',
'TOW            0.001 76.099  16310',
'TOBER          0.001 76.099  16311',
'TIPLER         0.001 76.100  16312',
'TILLSON        0.001 76.101  16313',
'TIEDEMANN      0.001 76.101  16314',
'THORNLEY       0.001 76.102  16315',
'TETRAULT       0.001 76.102  16316',
'TEMME          0.001 76.103  16317',
'TARRANCE       0.001 76.103  16318',
'TACKITT        0.001 76.104  16319',
'SYKORA         0.001 76.105  16320',
'SWEETMAN       0.001 76.105  16321',
'SWATZELL       0.001 76.106  16322',
'SUTLIFF        0.001 76.106  16323',
'SUHR           0.001 76.107  16324',
'STURTZ         0.001 76.108  16325',
'STRUB          0.001 76.108  16326',
'STRAYHORN      0.001 76.109  16327',
'STORMER        0.001 76.109  16328',
'STEVESON       0.001 76.110  16329',
'STENGEL        0.001 76.111  16330',
'STEINFELDT     0.001 76.111  16331',
'SPIRO          0.001 76.112  16332',
'SPIEKER        0.001 76.112  16333',
'SPETH          0.001 76.113  16334',
'SPERO          0.001 76.113  16335',
'SOZA           0.001 76.114  16336',
'SOULIERE       0.001 76.115  16337',
'SOUCIE         0.001 76.115  16338',
'SNEDEKER       0.001 76.116  16339',
'SLIFER         0.001 76.116  16340',
'SKILLINGS      0.001 76.117  16341',
'SITU           0.001 76.118  16342',
'SINIARD        0.001 76.118  16343',
'SIMEON         0.001 76.119  16344',
'SIGNORELLI     0.001 76.119  16345',
'SIGGERS        0.001 76.120  16346',
'SHULTIS        0.001 76.121  16347',
'SHREWSBURY     0.001 76.121  16348',
'SHIPPEE        0.001 76.122  16349',
'SHIMP          0.001 76.122  16350',
'SHERRON        0.001 76.123  16351',
'SHEPLER        0.001 76.123  16352',
'SHARPLESS      0.001 76.124  16353',
'SHADRICK       0.001 76.125  16354',
'SEVERT         0.001 76.125  16355',
'SEVERS         0.001 76.126  16356',
'SEMON          0.001 76.126  16357',
'SEMMES         0.001 76.127  16358',
'SEITER         0.001 76.128  16359',
'SEGERS         0.001 76.128  16360',
'SCLAFANI       0.001 76.129  16361',
'SCIORTINO      0.001 76.129  16362',
'SCHROYER       0.001 76.130  16363',
'SCHRACK        0.001 76.131  16364',
'SCHOENBERG     0.001 76.131  16365',
'SCHOBER        0.001 76.132  16366',
'SCHEIDT        0.001 76.132  16367',
'SCHEELE        0.001 76.133  16368',
'SATTER         0.001 76.133  16369',
'SARTORI        0.001 76.134  16370',
'SARRIS         0.001 76.135  16371',
'SARRATT        0.001 76.135  16372',
'SALVAGGIO      0.001 76.136  16373',
'SALADINO       0.001 76.136  16374',
'SAKAMOTO       0.001 76.137  16375',
'SAINE          0.001 76.138  16376',
'RYMAN          0.001 76.138  16377',
'RUMLEY         0.001 76.139  16378',
'RUGGERIO       0.001 76.139  16379',
'RUCKS          0.001 76.140  16380',
'ROUGHTON       0.001 76.141  16381',
'ROOM           0.001 76.141  16382',
'ROBARDS        0.001 76.142  16383',
'RICCA          0.001 76.142  16384',
'REXROAD        0.001 76.143  16385',
'RESLER         0.001 76.143  16386',
'RENY           0.001 76.144  16387',
'RENTSCHLER     0.001 76.145  16388',
'REDRICK        0.001 76.145  16389',
'REDICK         0.001 76.146  16390',
'REAGLE         0.001 76.146  16391',
'RAYMO          0.001 76.147  16392',
'RAPE           0.001 76.148  16393',
'RAKER          0.001 76.148  16394',
'RACETTE        0.001 76.149  16395',
'PYBURN         0.001 76.149  16396',
'PRITT          0.001 76.150  16397',
'PRESSON        0.001 76.151  16398',
'PRESSMAN       0.001 76.151  16399',
'POUGH          0.001 76.152  16400',
'PLAIN          0.001 76.152  16401',
'PISANI         0.001 76.153  16402',
'PERZ           0.001 76.153  16403',
'PERRAS         0.001 76.154  16404',
'PELZER         0.001 76.155  16405',
'PEDROSA        0.001 76.155  16406',
'PALOS          0.001 76.156  16407',
'PALMISANO      0.001 76.156  16408',
'PAILLE         0.001 76.157  16409',
'OREM           0.001 76.158  16410',
'ORBISON        0.001 76.158  16411',
'OLIVEROS       0.001 76.159  16412',
'NOURSE         0.001 76.159  16413',
'NORDQUIST      0.001 76.160  16414',
'NEWBURY        0.001 76.161  16415',
'NELLIGAN       0.001 76.161  16416',
'NAWROCKI       0.001 76.162  16417',
'MYLER          0.001 76.162  16418',
'MUMAW          0.001 76.163  16419',
'MORPHIS        0.001 76.163  16420',
'MOLDENHAUER    0.001 76.164  16421',
'MIYASHIRO      0.001 76.165  16422',
'MIGNONE        0.001 76.165  16423',
'MICKELSEN      0.001 76.166  16424',
'MICHALEC       0.001 76.166  16425',
'MESTA          0.001 76.167  16426',
'MCREE          0.001 76.168  16427',
'MCQUEARY       0.001 76.168  16428',
'MCNINCH        0.001 76.169  16429',
'MCNEILLY       0.001 76.169  16430',
'MCLELLAND      0.001 76.170  16431',
'MCLAWHORN      0.001 76.171  16432',
'MCGREEVY       0.001 76.171  16433',
'MCCONKEY       0.001 76.172  16434',
'MATTES         0.001 76.172  16435',
'MASELLI        0.001 76.173  16436',
'MARTEN         0.001 76.173  16437',
'MART           0.001 76.174  16438',
'MARCUCCI       0.001 76.175  16439',
'MANSEAU        0.001 76.175  16440',
'MANJARREZ      0.001 76.176  16441',
'MALBROUGH      0.001 76.176  16442',
'MACHIN         0.001 76.177  16443',
'MABIE          0.001 76.178  16444',
'LYNDE          0.001 76.178  16445',
'LYKES          0.001 76.179  16446',
'LUERAS         0.001 76.179  16447',
'LOKKEN         0.001 76.180  16448',
'LOKEN          0.001 76.181  16449',
'LINZY          0.001 76.181  16450',
'LILLIS         0.001 76.182  16451',
'LILIENTHAL     0.001 76.182  16452',
'LEVEY          0.001 76.183  16453',
'LEGLER         0.001 76.183  16454',
'LEEDOM         0.001 76.184  16455',
'LEBOWITZ       0.001 76.185  16456',
'LAZZARO        0.001 76.185  16457',
'LARABEE        0.001 76.186  16458',
'LAPINSKI       0.001 76.186  16459',
'LANGNER        0.001 76.187  16460',
'LANGENFELD     0.001 76.188  16461',
'LAMPKINS       0.001 76.188  16462',
'LAMOTTE        0.001 76.189  16463',
'LAMBRIGHT      0.001 76.189  16464',
'LAGARDE        0.001 76.190  16465',
'LADOUCEUR      0.001 76.191  16466',
'LABRADOR       0.001 76.191  16467',
'LABOUNTY       0.001 76.192  16468',
'LABLANC        0.001 76.192  16469',
'LABERGE        0.001 76.193  16470',
'KYTE           0.001 76.193  16471',
'KROON          0.001 76.194  16472',
'KRON           0.001 76.195  16473',
'KRAKER         0.001 76.195  16474',
'KOUBA          0.001 76.196  16475',
'KIRWIN         0.001 76.196  16476',
'KINCER         0.001 76.197  16477',
'KIMBLER        0.001 76.198  16478',
'KEGLER         0.001 76.198  16479',
'KEACH          0.001 76.199  16480',
'KATZMAN        0.001 76.199  16481',
'KATZER         0.001 76.200  16482',
'KALMAN         0.001 76.201  16483',
'JOURNEY        0.001 76.201  16484',
'JIMMERSON      0.001 76.202  16485',
'JENNING        0.001 76.202  16486',
'JANUS          0.001 76.203  16487',
'IACOVELLI      0.001 76.203  16488',
'HUST           0.001 76.204  16489',
'HUSON          0.001 76.205  16490',
'HUSBY          0.001 76.205  16491',
'HUMPHERY       0.001 76.206  16492',
'HUFNAGEL       0.001 76.206  16493',
'HONIG          0.001 76.207  16494',
'HOLSEY         0.001 76.208  16495',
'HOLOMAN        0.001 76.208  16496',
'HOHL           0.001 76.209  16497',
'HOGGE          0.001 76.209  16498',
'HINDERLITER    0.001 76.210  16499',
'HILDEBRANT     0.001 76.211  16500',
'HICK           0.001 76.211  16501',
'HEY            0.001 76.212  16502',
'HEMBY          0.001 76.212  16503',
'HELLE          0.001 76.213  16504',
'HEINTZELMAN    0.001 76.213  16505',
'HEIDRICK       0.001 76.214  16506',
'HEARON         0.001 76.215  16507',
'HEAP           0.001 76.215  16508',
'HAZELIP        0.001 76.216  16509',
'HAUK           0.001 76.216  16510',
'HASBROUCK      0.001 76.217  16511',
'HARTON         0.001 76.218  16512',
'HARTIN         0.001 76.218  16513',
'HARPSTER       0.001 76.219  16514',
'HANSLEY        0.001 76.219  16515',
'HANCHETT       0.001 76.220  16516',
'HAAR           0.001 76.221  16517',
'GUTHRIDGE      0.001 76.221  16518',
'GULBRANSON     0.001 76.222  16519',
'GUILL          0.001 76.222  16520',
'GUERRERA       0.001 76.223  16521',
'GRUND          0.001 76.223  16522',
'GROSVENOR      0.001 76.224  16523',
'GRIST          0.001 76.225  16524',
'GRELL          0.001 76.225  16525',
'GREAR          0.001 76.226  16526',
'GRANBERRY      0.001 76.226  16527',
'GONSER         0.001 76.227  16528',
'GIUNTA         0.001 76.228  16529',
'GIULIANI       0.001 76.228  16530',
'GILLON         0.001 76.229  16531',
'GILLMORE       0.001 76.229  16532',
'GILLAN         0.001 76.230  16533',
'GIBBON         0.001 76.231  16534',
'GETTYS         0.001 76.231  16535',
'GELB           0.001 76.232  16536',
'GANO           0.001 76.232  16537',
'GALLIHER       0.001 76.233  16538',
'FULLEN         0.001 76.233  16539',
'FRESE          0.001 76.234  16540',
'FRATES         0.001 76.235  16541',
'FOXWELL        0.001 76.235  16542',
'FLEISHMAN      0.001 76.236  16543',
'FLEENER        0.001 76.236  16544',
'FIELDEN        0.001 76.237  16545',
'FERRERA        0.001 76.238  16546',
'FENG           0.001 76.238  16547',
'FELLS          0.001 76.239  16548',
'FEEMSTER       0.001 76.239  16549',
'FAUNTLEROY     0.001 76.240  16550',
'FAILS          0.001 76.241  16551',
'EVATT          0.001 76.241  16552',
'ESPY           0.001 76.242  16553',
'ENO            0.001 76.242  16554',
'EMMERICH       0.001 76.243  16555',
'EDWIN          0.001 76.243  16556',
'EDLER          0.001 76.244  16557',
'EASTHAM        0.001 76.245  16558',
'DUNAVANT       0.001 76.245  16559',
'DUCA           0.001 76.246  16560',
'DRINNON        0.001 76.246  16561',
'DOWE           0.001 76.247  16562',
'DORGAN         0.001 76.248  16563',
'DOLLINGER      0.001 76.248  16564',
'DIVERS         0.001 76.249  16565',
'DIPALMA        0.001 76.249  16566',
'DIFRANCO       0.001 76.250  16567',
'DIETRICK       0.001 76.251  16568',
'DENZER         0.001 76.251  16569',
'DEMAREST       0.001 76.252  16570',
'DELEE          0.001 76.252  16571',
'DELARIVA       0.001 76.253  16572',
'DELANY         0.001 76.253  16573',
'DECESARE       0.001 76.254  16574',
'DEBELLIS       0.001 76.255  16575',
'DEAVERS        0.001 76.255  16576',
'DEARDORFF      0.001 76.256  16577',
'DAWE           0.001 76.256  16578',
'DAROSA         0.001 76.257  16579',
'DARLEY         0.001 76.258  16580',
'DALZELL        0.001 76.258  16581',
'DAHLEN         0.001 76.259  16582',
'CURTO          0.001 76.259  16583',
'CUPPS          0.001 76.260  16584',
'CUNNIFF        0.001 76.261  16585',
'CUDE           0.001 76.261  16586',
'CRIVELLO       0.001 76.262  16587',
'CRIPPS         0.001 76.262  16588',
'CRESSWELL      0.001 76.263  16589',
'COUSAR         0.001 76.263  16590',
'COTTA          0.001 76.264  16591',
'COMPO          0.001 76.265  16592',
'COLORADO       0.001 76.265  16593',
'CLYNE          0.001 76.266  16594',
'CLAYSON        0.001 76.266  16595',
'CEARLEY        0.001 76.267  16596',
'CATANIA        0.001 76.268  16597',
'CARINI         0.001 76.268  16598',
'CARGO          0.001 76.269  16599',
'CANTERO        0.001 76.269  16600',
'CALI           0.001 76.270  16601',
'BUTTREY        0.001 76.271  16602',
'BUTTLER        0.001 76.271  16603',
'BURPEE         0.001 76.272  16604',
'BULKLEY        0.001 76.272  16605',
'BUITRON        0.001 76.273  16606',
'BUDA           0.001 76.273  16607',
'BUBLITZ        0.001 76.274  16608',
'BRYER          0.001 76.275  16609',
'BRYDEN         0.001 76.275  16610',
'BROUILLETTE    0.001 76.276  16611',
'BROTT          0.001 76.276  16612',
'BROOKMAN       0.001 76.277  16613',
'BRONK          0.001 76.278  16614',
'BRESHEARS      0.001 76.278  16615',
'BRENNEN        0.001 76.279  16616',
'BRANNUM        0.001 76.279  16617',
'BRANDL         0.001 76.280  16618',
'BRAMAN         0.001 76.281  16619',
'BRACEWELL      0.001 76.281  16620',
'BOYTER         0.001 76.282  16621',
'BOMBERGER      0.001 76.282  16622',
'BOLD           0.001 76.283  16623',
'BOGEN          0.001 76.283  16624',
'BOEDING        0.001 76.284  16625',
'BOB            0.001 76.285  16626',
'BLAUVELT       0.001 76.285  16627',
'BLANDFORD      0.001 76.286  16628',
'BIGGER         0.001 76.286  16629',
'BIERMANN       0.001 76.287  16630',
'BIELECKI       0.001 76.288  16631',
'BIBBY          0.001 76.288  16632',
'BERTHOLD       0.001 76.289  16633',
'BERKMAN        0.001 76.289  16634',
'BELVIN         0.001 76.290  16635',
'BELLOMY        0.001 76.291  16636',
'BELAND         0.001 76.291  16637',
'BEHNE          0.001 76.292  16638',
'BEECHAM        0.001 76.292  16639',
'BECHER         0.001 76.293  16640',
'BEAMS          0.001 76.293  16641',
'BAX            0.001 76.294  16642',
'BASSHAM        0.001 76.295  16643',
'BARRET         0.001 76.295  16644',
'BALEY          0.001 76.296  16645',
'BACCHUS        0.001 76.296  16646',
'AUXIER         0.001 76.297  16647',
'ATKISON        0.001 76.298  16648',
'ARY            0.001 76.298  16649',
'AROCHA         0.001 76.299  16650',
'ARECHIGA       0.001 76.299  16651',
'ANSPACH        0.001 76.300  16652',
'AN             0.001 76.301  16653',
'ALGARIN        0.001 76.301  16654',
'ALCOTT         0.001 76.302  16655',
'ALBERTY        0.001 76.302  16656',
'AGER           0.001 76.303  16657',
'ADOLPH         0.001 76.303  16658',
'ACKMAN         0.001 76.304  16659',
'ABDUL          0.001 76.305  16660',
'ABDALLAH       0.001 76.305  16661',
'ZWICK          0.001 76.306  16662',
'ZIEMER         0.001 76.306  16663',
'ZASTROW        0.001 76.307  16664',
'ZAJICEK        0.001 76.307  16665',
'YOKUM          0.001 76.308  16666',
'YOKLEY         0.001 76.309  16667',
'WITTROCK       0.001 76.309  16668',
'WINEBARGER     0.001 76.310  16669',
'WILKER         0.001 76.310  16670',
'WILHAM         0.001 76.311  16671',
'WHITHAM        0.001 76.312  16672',
'WETZLER        0.001 76.312  16673',
'WESTLING       0.001 76.313  16674',
'WESTBURY       0.001 76.313  16675',
'WENDLER        0.001 76.314  16676',
'WELLBORN       0.001 76.314  16677',
'WEITZMAN       0.001 76.315  16678',
'WEITZ          0.001 76.316  16679',
'WEIGHT         0.001 76.316  16680',
'WALLNER        0.001 76.317  16681',
'WALDROUP       0.001 76.317  16682',
'VRABEL         0.001 76.318  16683',
'VOWELS         0.001 76.318  16684',
'VOLKER         0.001 76.319  16685',
'VITIELLO       0.001 76.320  16686',
'VISCONTI       0.001 76.320  16687',
'VILLICANA      0.001 76.321  16688',
'VIBBERT        0.001 76.321  16689',
'VESEY          0.001 76.322  16690',
'VANNATTER      0.001 76.322  16691',
'VANGILDER      0.001 76.323  16692',
'VANDERVORT     0.001 76.324  16693',
'VANDEGRIFT     0.001 76.324  16694',
'VANALSTYNE     0.001 76.325  16695',
'VALLECILLO     0.001 76.325  16696',
'USREY          0.001 76.326  16697',
'TYNAN          0.001 76.326  16698',
'TURPEN         0.001 76.327  16699',
'TULLER         0.001 76.328  16700',
'TRISLER        0.001 76.328  16701',
'TOWNSON        0.001 76.329  16702',
'TILLMON        0.001 76.329  16703',
'THRELKELD      0.001 76.330  16704',
'THORNELL       0.001 76.330  16705',
'TERRIO         0.001 76.331  16706',
'TAUNTON        0.001 76.332  16707',
'TARRY          0.001 76.332  16708',
'TARDY          0.001 76.333  16709',
'SWOBODA        0.001 76.333  16710',
'SWIHART        0.001 76.334  16711',
'SUSTAITA       0.001 76.334  16712',
'SUITT          0.001 76.335  16713',
'STUBER         0.001 76.336  16714',
'STRINE         0.001 76.336  16715',
'STOOKEY        0.001 76.337  16716',
'STMARTIN       0.001 76.337  16717',
'STIGER         0.001 76.338  16718',
'STAINBROOK     0.001 76.338  16719',
'SOLEM          0.001 76.339  16720',
'SMAIL          0.001 76.340  16721',
'SLIGH          0.001 76.340  16722',
'SIPLE          0.001 76.341  16723',
'SIEBEN         0.001 76.341  16724',
'SHUMAKE        0.001 76.342  16725',
'SHRINER        0.001 76.342  16726',
'SHOWMAN        0.001 76.343  16727',
'SHINER         0.001 76.344  16728',
'SHEEN          0.001 76.344  16729',
'SHECKLER       0.001 76.345  16730',
'SEIM           0.001 76.345  16731',
'SECRIST        0.001 76.346  16732',
'SCOGGIN        0.001 76.346  16733',
'SCHULTHEIS     0.001 76.347  16734',
'SCHMALZ        0.001 76.348  16735',
'SCHENDEL       0.001 76.348  16736',
'SCHACHER       0.001 76.349  16737',
'SAVARD         0.001 76.349  16738',
'SAULTER        0.001 76.350  16739',
'SANTILLANES    0.001 76.350  16740',
'SANDIFORD      0.001 76.351  16741',
'SANDE          0.001 76.352  16742',
'SALZER         0.001 76.352  16743',
'SALVATO        0.001 76.353  16744',
'SALTZ          0.001 76.353  16745',
'SAKAI          0.001 76.354  16746',
'RYCKMAN        0.001 76.354  16747',
'RYANT          0.001 76.355  16748',
'RUCK           0.001 76.356  16749',
'RONALD         0.001 76.356  16750',
'ROCKER         0.001 76.357  16751',
'RITTENBERRY    0.001 76.357  16752',
'RISTAU         0.001 76.358  16753',
'RISK           0.001 76.358  16754',
'RICHART        0.001 76.359  16755',
'RHYNES         0.001 76.360  16756',
'REYER          0.001 76.360  16757',
'REULET         0.001 76.361  16758',
'RESER          0.001 76.361  16759',
'REDINGTON      0.001 76.362  16760',
'REDDINGTON     0.001 76.362  16761',
'REBELLO        0.001 76.363  16762',
'REASOR         0.001 76.364  16763',
'RAFTERY        0.001 76.364  16764',
'RABAGO         0.001 76.365  16765',
'RAASCH         0.001 76.365  16766',
'QUINTANAR      0.001 76.366  16767',
'PYLANT         0.001 76.366  16768',
'PURINGTON      0.001 76.367  16769',
'PROVENCAL      0.001 76.368  16770',
'PROM           0.001 76.368  16771',
'PRIOLEAU       0.001 76.369  16772',
'PRESTWOOD      0.001 76.369  16773',
'POTHIER        0.001 76.370  16774',
'POPA           0.001 76.370  16775',
'POLSTER        0.001 76.371  16776',
'POLITTE        0.001 76.372  16777',
'POFFENBERGER   0.001 76.372  16778',
'PINNER         0.001 76.373  16779',
'PIETRZAK       0.001 76.373  16780',
'PETTIE         0.001 76.374  16781',
'PENAFLOR       0.001 76.374  16782',
'PELLOT         0.001 76.375  16783',
'PELLHAM        0.001 76.376  16784',
'PAYLOR         0.001 76.376  16785',
'PAYEUR         0.001 76.377  16786',
'PAPAS          0.001 76.377  16787',
'PAIK           0.001 76.378  16788',
'OYOLA          0.001 76.378  16789',
'OSBOURN        0.001 76.379  16790',
'ORZECHOWSKI    0.001 76.380  16791',
'OPPENHEIMER    0.001 76.380  16792',
'OLESEN         0.001 76.381  16793',
'OJA            0.001 76.381  16794',
'OHL            0.001 76.382  16795',
'NUCKOLLS       0.001 76.382  16796',
'NORDBERG       0.001 76.383  16797',
'NOONKESTER     0.001 76.384  16798',
'NOLD           0.001 76.384  16799',
'NITTA          0.001 76.385  16800',
'NIBLETT        0.001 76.385  16801',
'NEUHAUS        0.001 76.386  16802',
'NESLER         0.001 76.386  16803',
'NED            0.001 76.387  16804',
'NANNEY         0.001 76.388  16805',
'MYRIE          0.001 76.388  16806',
'MUTCH          0.001 76.389  16807',
'MOTTO          0.001 76.389  16808',
'MOSQUERA       0.001 76.390  16809',
'MORENA         0.001 76.390  16810',
'MONTALTO       0.001 76.391  16811',
'MONTAGNA       0.001 76.392  16812',
'MIZELLE        0.001 76.392  16813',
'MINCY          0.001 76.393  16814',
'MILLIKAN       0.001 76.393  16815',
'MILLAY         0.001 76.394  16816',
'MILER          0.001 76.394  16817',
'MILBOURN       0.001 76.395  16818',
'MIKELS         0.001 76.396  16819',
'MIGUES         0.001 76.396  16820',
'MIESNER        0.001 76.397  16821',
'MERSHON        0.001 76.397  16822',
'MERROW         0.001 76.398  16823',
'MERLIN         0.001 76.398  16824',
'MELIA          0.001 76.399  16825',
'MEIGS          0.001 76.400  16826',
'MEALEY         0.001 76.400  16827',
'MCRANEY        0.001 76.401  16828',
'MCMARTIN       0.001 76.401  16829',
'MCLACHLAN      0.001 76.402  16830',
'MCGEEHAN       0.001 76.402  16831',
'MCFERREN       0.001 76.403  16832',
'MCDOLE         0.001 76.404  16833',
'MCCAULLEY      0.001 76.404  16834',
'MCANULTY       0.001 76.405  16835',
'MAZIARZ        0.001 76.405  16836',
'MAUL           0.001 76.406  16837',
'MATEER         0.001 76.407  16838',
'MARTINSEN      0.001 76.407  16839',
'MARSON         0.001 76.408  16840',
'MARIOTTI       0.001 76.408  16841',
'MANNA          0.001 76.409  16842',
'MANG           0.001 76.409  16843',
'MANCE          0.001 76.410  16844',
'MALBON         0.001 76.411  16845',
'MAH            0.001 76.411  16846',
'MAGNUSSON      0.001 76.412  16847',
'MACLACHLAN     0.001 76.412  16848',
'MACEK          0.001 76.413  16849',
'LURIE          0.001 76.413  16850',
'LUC            0.001 76.414  16851',
'LOWN           0.001 76.415  16852',
'LORANGER       0.001 76.415  16853',
'LONON          0.001 76.416  16854',
'LISENBY        0.001 76.416  16855',
'LINSLEY        0.001 76.417  16856',
'LINGER         0.001 76.417  16857',
'LENK           0.001 76.418  16858',
'LEAVENS        0.001 76.419  16859',
'LEARNED        0.001 76.419  16860',
'LAURITZEN      0.001 76.420  16861',
'LATHEM         0.001 76.420  16862',
'LASHBROOK      0.001 76.421  16863',
'LANDMAN        0.001 76.421  16864',
'LAMARCHE       0.001 76.422  16865',
'LAMANTIA       0.001 76.423  16866',
'LAGUERRE       0.001 76.423  16867',
'LAGRANGE       0.001 76.424  16868',
'KOGAN          0.001 76.424  16869',
'KLINGBEIL      0.001 76.425  16870',
'KIST           0.001 76.425  16871',
'KIMPEL         0.001 76.426  16872',
'KIME           0.001 76.427  16873',
'KIER           0.001 76.427  16874',
'KERFOOT        0.001 76.428  16875',
'KENNAMER       0.001 76.428  16876',
'KELLEMS        0.001 76.429  16877',
'KAMMER         0.001 76.429  16878',
'KAMEN          0.001 76.430  16879',
'JESS           0.001 76.431  16880',
'JEPSEN         0.001 76.431  16881',
'JARNIGAN       0.001 76.432  16882',
'ISLER          0.001 76.432  16883',
'ISHEE          0.001 76.433  16884',
'ISABEL         0.001 76.433  16885',
'HUX            0.001 76.434  16886',
'HUNGATE        0.001 76.435  16887',
'HUMMELL        0.001 76.435  16888',
'HULTGREN       0.001 76.436  16889',
'HUFFAKER       0.001 76.436  16890',
'HRUBY          0.001 76.437  16891',
'HOVER          0.001 76.437  16892',
'HORNICK        0.001 76.438  16893',
'HOOSER         0.001 76.439  16894',
'HOOLEY         0.001 76.439  16895',
'HOGGAN         0.001 76.440  16896',
'HIRANO         0.001 76.440  16897',
'HILLEY         0.001 76.441  16898',
'HIGHAM         0.001 76.441  16899',
'HEUSER         0.001 76.442  16900',
'HENRICKSON     0.001 76.443  16901',
'HENEGAR        0.001 76.443  16902',
'HELLWIG        0.001 76.444  16903',
'HEIDE          0.001 76.444  16904',
'HEDLEY         0.001 76.445  16905',
'HASEGAWA       0.001 76.445  16906',
'HARTT          0.001 76.446  16907',
'HAMBRIGHT      0.001 76.447  16908',
'HALFACRE       0.001 76.447  16909',
'HAFLEY         0.001 76.448  16910',
'GUION          0.001 76.448  16911',
'GUINAN         0.001 76.449  16912',
'GRUNWALD       0.001 76.449  16913',
'GROTHE         0.001 76.450  16914',
'GRIES          0.001 76.451  16915',
'GREANEY        0.001 76.451  16916',
'GRANDA         0.001 76.452  16917',
'GRABILL        0.001 76.452  16918',
'GOTHARD        0.001 76.453  16919',
'GOSSMAN        0.001 76.453  16920',
'GOSSER         0.001 76.454  16921',
'GOSSARD        0.001 76.455  16922',
'GOSHA          0.001 76.455  16923',
'GOLDNER        0.001 76.456  16924',
'GOBIN          0.001 76.456  16925',
'GLOSS          0.001 76.457  16926',
'GINYARD        0.001 76.457  16927',
'GILKES         0.001 76.458  16928',
'GILDEN         0.001 76.459  16929',
'GERSON         0.001 76.459  16930',
'GEPHART        0.001 76.460  16931',
'GENGLER        0.001 76.460  16932',
'GAUTIER        0.001 76.461  16933',
'GASSETT        0.001 76.461  16934',
'GARON          0.001 76.462  16935',
'GANDHI         0.001 76.463  16936',
'GALUSHA        0.001 76.463  16937',
'GALLAGER       0.001 76.464  16938',
'GALDAMEZ       0.001 76.464  16939',
'FULMORE        0.001 76.465  16940',
'FRITSCHE       0.001 76.465  16941',
'FOWLES         0.001 76.466  16942',
'FOUTCH         0.001 76.467  16943',
'FORWARD        0.001 76.467  16944',
'FOOTMAN        0.001 76.468  16945',
'FLUDD          0.001 76.468  16946',
'FLAKES         0.001 76.469  16947',
'FERRIERA       0.001 76.469  16948',
'FERRERO        0.001 76.470  16949',
'FERRERI        0.001 76.471  16950',
'FENIMORE       0.001 76.471  16951',
'FEGLEY         0.001 76.472  16952',
'FEGAN          0.001 76.472  16953',
'FEARN          0.001 76.473  16954',
'FARRIER        0.001 76.473  16955',
'FANSLER        0.001 76.474  16956',
'FANE           0.001 76.475  16957',
'FALZONE        0.001 76.475  16958',
'FAIRWEATHER    0.001 76.476  16959',
'ETHERTON       0.001 76.476  16960',
'ELSBERRY       0.001 76.477  16961',
'DYKEMA         0.001 76.477  16962',
'DUPPSTADT      0.001 76.478  16963',
'DUNNAM         0.001 76.479  16964',
'DUNKLIN        0.001 76.479  16965',
'DUET           0.001 76.480  16966',
'DUE            0.001 76.480  16967',
'DUDGEON        0.001 76.481  16968',
'DUBUC          0.001 76.481  16969',
'DOXEY          0.001 76.482  16970',
'DORY           0.001 76.483  16971',
'DONMOYER       0.001 76.483  16972',
'DODGEN         0.001 76.484  16973',
'DISANTO        0.001 76.484  16974',
'DINGLER        0.001 76.485  16975',
'DIMATTIA       0.001 76.485  16976',
'DILDAY         0.001 76.486  16977',
'DIGENNARO      0.001 76.487  16978',
'DIEDRICH       0.001 76.487  16979',
'DEROSSETT      0.001 76.488  16980',
'DEPUTY         0.001 76.488  16981',
'DEPP           0.001 76.489  16982',
'DEMASI         0.001 76.489  16983',
'DEGRAFFENREID  0.001 76.490  16984',
'DEAKINS        0.001 76.491  16985',
'DEADY          0.001 76.491  16986',
'DAVIN          0.001 76.492  16987',
'DAIGRE         0.001 76.492  16988',
'DADDARIO       0.001 76.493  16989',
'CZERWINSKI     0.001 76.493  16990',
'CULLENS        0.001 76.494  16991',
'CUBBAGE        0.001 76.495  16992',
'CRACRAFT       0.001 76.495  16993',
'CONSTANCE      0.001 76.496  16994',
'COMES          0.001 76.496  16995',
'COMBEST        0.001 76.497  16996',
'COLETTI        0.001 76.498  16997',
'COGHILL        0.001 76.498  16998',
'CLERK          0.001 76.499  16999',
'CLAYBROOKS     0.001 76.499  17000',
'CLASS          0.001 76.500  17001',
'CHRISTOFFERSE  0.001 76.500  17002',
'CHIESA         0.001 76.501  17003',
'CHASON         0.001 76.502  17004',
'CHAMORRO       0.001 76.502  17005',
'CESSNA         0.001 76.503  17006',
'CELENTANO      0.001 76.503  17007',
'CAYER          0.001 76.504  17008',
'CAROLAN        0.001 76.504  17009',
'CARNEGIE       0.001 76.505  17010',
'CAPETILLO      0.001 76.506  17011',
'CALLIER        0.001 76.506  17012',
'CADOGAN        0.001 76.507  17013',
'CABA           0.001 76.507  17014',
'BYROM          0.001 76.508  17015',
'BYRNS          0.001 76.508  17016',
'BURROWES       0.001 76.509  17017',
'BURKET         0.001 76.510  17018',
'BURDGE         0.001 76.510  17019',
'BURBAGE        0.001 76.511  17020',
'BUKOWSKI       0.001 76.511  17021',
'BUCHHOLTZ      0.001 76.512  17022',
'BRUNT          0.001 76.512  17023',
'BRUNGARDT      0.001 76.513  17024',
'BRUNETTI       0.001 76.514  17025',
'BRUMBELOW      0.001 76.514  17026',
'BRUGGER        0.001 76.515  17027',
'BROADHURST     0.001 76.515  17028',
'BRIGANCE       0.001 76.516  17029',
'BRANDOW        0.001 76.516  17030',
'BOUKNIGHT      0.001 76.517  17031',
'BOTTORFF       0.001 76.518  17032',
'BOTTOMLEY      0.001 76.518  17033',
'BOSARGE        0.001 76.519  17034',
'BORGER         0.001 76.519  17035',
'BONA           0.001 76.520  17036',
'BOMBARDIER     0.001 76.520  17037',
'BOLOGNA        0.001 76.521  17038',
'BOGGAN         0.001 76.522  17039',
'BLUMER         0.001 76.522  17040',
'BLECHA         0.001 76.523  17041',
'BIRNEY         0.001 76.523  17042',
'BIRKLAND       0.001 76.524  17043',
'BETANCES       0.001 76.524  17044',
'BERAN          0.001 76.525  17045',
'BENNY          0.001 76.526  17046',
'BENES          0.001 76.526  17047',
'BELIN          0.001 76.527  17048',
'BELGRAVE       0.001 76.527  17049',
'BEALER         0.001 76.528  17050',
'BAUCH          0.001 76.528  17051',
'BATH           0.001 76.529  17052',
'BASHIR         0.001 76.530  17053',
'BARTOW         0.001 76.530  17054',
'BARO           0.001 76.531  17055',
'BARNHOUSE      0.001 76.531  17056',
'BARILE         0.001 76.532  17057',
'BALLWEG        0.001 76.532  17058',
'BAISLEY        0.001 76.533  17059',
'BAINS          0.001 76.534  17060',
'BAEHR          0.001 76.534  17061',
'BADILLA        0.001 76.535  17062',
'BACHUS         0.001 76.535  17063',
'BACHER         0.001 76.536  17064',
'BACHELDER      0.001 76.536  17065',
'AUZENNE        0.001 76.537  17066',
'ATEN           0.001 76.538  17067',
'ASTLE          0.001 76.538  17068',
'ALLIS          0.001 76.539  17069',
'AGARWAL        0.001 76.539  17070',
'ADGER          0.001 76.540  17071',
'ADAMEK         0.001 76.540  17072',
'ZIOLKOWSKI     0.001 76.541  17073',
'ZINKE          0.001 76.542  17074',
'ZAZUETA        0.001 76.542  17075',
'ZAMORANO       0.001 76.543  17076',
'YOUNKIN        0.001 76.543  17077',
'WON            0.001 76.544  17078',
'WITTIG         0.001 76.544  17079',
'WITMAN         0.001 76.545  17080',
'WINSETT        0.001 76.545  17081',
'WINKLES        0.001 76.546  17082',
'WIEDMAN        0.001 76.547  17083',
'WHITNER        0.001 76.547  17084',
'WHITCHER       0.001 76.548  17085',
'WETHERBY       0.001 76.548  17086',
'WESTRA         0.001 76.549  17087',
'WESTHOFF       0.001 76.549  17088',
'WEHRLE         0.001 76.550  17089',
'WEE            0.001 76.550  17090',
'WAGAMAN        0.001 76.551  17091',
'VORIS          0.001 76.552  17092',
'VICKNAIR       0.001 76.552  17093',
'VEGAS          0.001 76.553  17094',
'VEASLEY        0.001 76.553  17095',
'VAUGH          0.001 76.554  17096',
'VANISH         0.001 76.554  17097',
'VANDERBURG     0.001 76.555  17098',
'VALLETTA       0.001 76.555  17099',
'TUNNEY         0.001 76.556  17100',
'TRUMBO         0.001 76.557  17101',
'TRULUCK        0.001 76.557  17102',
'TRUEMAN        0.001 76.558  17103',
'TRUBY          0.001 76.558  17104',
'TROMBLY        0.001 76.559  17105',
'TROJAN         0.001 76.559  17106',
'TOURVILLE      0.001 76.560  17107',
'TOSTADO        0.001 76.560  17108',
'TONE           0.001 76.561  17109',
'TITCOMB        0.001 76.562  17110',
'TIMPSON        0.001 76.562  17111',
'TIGNOR         0.001 76.563  17112',
'THRUSH         0.001 76.563  17113',
'THRESHER       0.001 76.564  17114',
'THIEDE         0.001 76.564  17115',
'TEWS           0.001 76.565  17116',
'TAMPLIN        0.001 76.565  17117',
'TAFF           0.001 76.566  17118',
'TACKER         0.001 76.567  17119',
'SYVERSON       0.001 76.567  17120',
'SYLVESTRE      0.001 76.568  17121',
'SUMMERALL      0.001 76.568  17122',
'STUMBAUGH      0.001 76.569  17123',
'STROUTH        0.001 76.569  17124',
'STRAKER        0.001 76.570  17125',
'STRADFORD      0.001 76.570  17126',
'STONEY         0.001 76.571  17127',
'STOKLEY        0.001 76.572  17128',
'STEINHOFF      0.001 76.572  17129',
'STEINBERGER    0.001 76.573  17130',
'STAIRS         0.001 76.573  17131',
'SPIGNER        0.001 76.574  17132',
'SOLTERO        0.001 76.574  17133',
'SNIVELY        0.001 76.575  17134',
'SLETTEN        0.001 76.575  17135',
'SINKLER        0.001 76.576  17136',
'SINEGAL        0.001 76.577  17137',
'SIMOES         0.001 76.577  17138',
'SILLER         0.001 76.578  17139',
'SIGEL          0.001 76.578  17140',
'SHOE           0.001 76.579  17141',
'SHIRE          0.001 76.579  17142',
'SHINKLE        0.001 76.580  17143',
'SHELLMAN       0.001 76.580  17144',
'SHELLER        0.001 76.581  17145',
'SHEATS         0.001 76.582  17146',
'SHARER         0.001 76.582  17147',
'SELVAGE        0.001 76.583  17148',
'SEDLAK         0.001 76.583  17149',
'SEA            0.001 76.584  17150',
'SCHRIVER       0.001 76.584  17151',
'SCHIMKE        0.001 76.585  17152',
'SCHEUERMAN     0.001 76.585  17153',
'SCHANZ         0.001 76.586  17154',
'SAVORY         0.001 76.587  17155',
'SAULTERS       0.001 76.587  17156',
'SAUERS         0.001 76.588  17157',
'SAIS           0.001 76.588  17158',
'RUSIN          0.001 76.589  17159',
'RUMFELT        0.001 76.589  17160',
'RUHLAND        0.001 76.590  17161',
'ROZAR          0.001 76.591  17162',
'ROSBOROUGH     0.001 76.591  17163',
'RONNING        0.001 76.592  17164',
'ROLPH          0.001 76.592  17165',
'ROLOFF         0.001 76.593  17166',
'ROGUE          0.001 76.593  17167',
'ROBIE          0.001 76.594  17168',
'RIVIERA        0.001 76.594  17169',
'RIMER          0.001 76.595  17170',
'RIEHLE         0.001 76.596  17171',
'RICCO          0.001 76.596  17172',
'RHEIN          0.001 76.597  17173',
'RETZLAFF       0.001 76.597  17174',
'REISMAN        0.001 76.598  17175',
'REIMANN        0.001 76.598  17176',
'RE             0.001 76.599  17177',
'RAYES          0.001 76.599  17178',
'RAUB           0.001 76.600  17179',
'RAMINEZ        0.001 76.601  17180',
'QUESINBERRY    0.001 76.601  17181',
'PUA            0.001 76.602  17182',
'PROCOPIO       0.001 76.602  17183',
'PRIOLO         0.001 76.603  17184',
'PRINTZ         0.001 76.603  17185',
'PREWETT        0.001 76.604  17186',
'PREAS          0.001 76.604  17187',
'PRAHL          0.001 76.605  17188',
'PORTUGAL       0.001 76.606  17189',
'POOVEY         0.001 76.606  17190',
'PLOOF          0.001 76.607  17191',
'PLATZ          0.001 76.607  17192',
'PLAISTED       0.001 76.608  17193',
'PINZON         0.001 76.608  17194',
'PINEIRO        0.001 76.609  17195',
'PICKNEY        0.001 76.609  17196',
'PETROVICH      0.001 76.610  17197',
'PERL           0.001 76.611  17198',
'PEHRSON        0.001 76.611  17199',
'PEETS          0.001 76.612  17200',
'PAVON          0.001 76.612  17201',
'PAUTZ          0.001 76.613  17202',
'PASCARELLA     0.001 76.613  17203',
'PARAS          0.001 76.614  17204',
'PAOLINI        0.001 76.614  17205',
'PALS           0.001 76.615  17206',
'PAFFORD        0.001 76.616  17207',
'OYER           0.001 76.616  17208',
'OVELLETTE      0.001 76.617  17209',
'OUTTEN         0.001 76.617  17210',
'OUTEN          0.001 76.618  17211',
'OURS           0.001 76.618  17212',
'ORDUNA         0.001 76.619  17213',
'ODRISCOLL      0.001 76.619  17214',
'OBERLIN        0.001 76.620  17215',
'NOSAL          0.001 76.621  17216',
'NIVEN          0.001 76.621  17217',
'NISBETT        0.001 76.622  17218',
'NEVERS         0.001 76.622  17219',
'NATHANSON      0.001 76.623  17220',
'MULE           0.001 76.623  17221',
'MUKAI          0.001 76.624  17222',
'MOZEE          0.001 76.624  17223',
'MOWERS         0.001 76.625  17224',
'MOTYKA         0.001 76.626  17225',
'MORENCY        0.001 76.626  17226',
'MONTFORD       0.001 76.627  17227',
'MOLLICA        0.001 76.627  17228',
'MOLDEN         0.001 76.628  17229',
'MITTEN         0.001 76.628  17230',
'MISER          0.001 76.629  17231',
'MINA           0.001 76.629  17232',
'MILLENDER      0.001 76.630  17233',
'MIDGETTE       0.001 76.631  17234',
'MESSERLY       0.001 76.631  17235',
'MELENDY        0.001 76.632  17236',
'MEISEL         0.001 76.632  17237',
'MEIDINGER      0.001 76.633  17238',
'MEANY          0.001 76.633  17239',
'MCNITT         0.001 76.634  17240',
'MCNEMAR        0.001 76.634  17241',
'MCMAKIN        0.001 76.635  17242',
'MCGAUGH        0.001 76.636  17243',
'MCCAA          0.001 76.636  17244',
'MAURIELLO      0.001 76.637  17245',
'MAUDLIN        0.001 76.637  17246',
'MATZKE         0.001 76.638  17247',
'MATTIA         0.001 76.638  17248',
'MATTEO         0.001 76.639  17249',
'MATSUMURA      0.001 76.639  17250',
'MASUDA         0.001 76.640  17251',
'MANGELS        0.001 76.641  17252',
'MALOOF         0.001 76.641  17253',
'MALIZIA        0.001 76.642  17254',
'MAHMOUD        0.001 76.642  17255',
'MAGLIONE       0.001 76.643  17256',
'MADDIX         0.001 76.643  17257',
'LUCCHESI       0.001 76.644  17258',
'LOCHNER        0.001 76.644  17259',
'LINQUIST       0.001 76.645  17260',
'LINO           0.001 76.646  17261',
'LIETZ          0.001 76.646  17262',
'LEVENTHAL      0.001 76.647  17263',
'LEOPARD        0.001 76.647  17264',
'LEMANSKI       0.001 76.648  17265',
'LEISER         0.001 76.648  17266',
'LAURY          0.001 76.649  17267',
'LAUBER         0.001 76.649  17268',
'LAMBERTH       0.001 76.650  17269',
'KUSS           0.001 76.651  17270',
'KUNG           0.001 76.651  17271',
'KULIK          0.001 76.652  17272',
'KUIPER         0.001 76.652  17273',
'KROUT          0.001 76.653  17274',
'KOTTER         0.001 76.653  17275',
'KORT           0.001 76.654  17276',
'KOHLMEIER      0.001 76.654  17277',
'KOFFLER        0.001 76.655  17278',
'KOELLER        0.001 76.656  17279',
'KNIPE          0.001 76.656  17280',
'KNAUSS         0.001 76.657  17281',
'KLEIBER        0.001 76.657  17282',
'KISSEE         0.001 76.658  17283',
'KIRST          0.001 76.658  17284',
'KIRCH          0.001 76.659  17285',
'KILGO          0.001 76.660  17286',
'KERLIN         0.001 76.660  17287',
'KELLISON       0.001 76.661  17288',
'KEHL           0.001 76.661  17289',
'KALB           0.001 76.662  17290',
'JORDEN         0.001 76.662  17291',
'JANTZEN        0.001 76.663  17292',
'JAMAR          0.001 76.663  17293',
'INABINET       0.001 76.664  17294',
'IKARD          0.001 76.665  17295',
'HUSMAN         0.001 76.665  17296',
'HUNSBERGER     0.001 76.666  17297',
'HUNDT          0.001 76.666  17298',
'HUCKS          0.001 76.667  17299',
'HOUTZ          0.001 76.667  17300',
'HOUSEKNECHT    0.001 76.668  17301',
'HOOTS          0.001 76.668  17302',
'HOGSETT        0.001 76.669  17303',
'HOGANS         0.001 76.670  17304',
'HINTZE         0.001 76.670  17305',
'HESSION        0.001 76.671  17306',
'HENAULT        0.001 76.671  17307',
'HEMMING        0.001 76.672  17308',
'HELSLEY        0.001 76.672  17309',
'HEINEN         0.001 76.673  17310',
'HEFFINGTON     0.001 76.673  17311',
'HEBERLING      0.001 76.674  17312',
'HEASLEY        0.001 76.675  17313',
'HEAL           0.001 76.675  17314',
'HAZLEY         0.001 76.676  17315',
'HAZELTINE      0.001 76.676  17316',
'HAYTON         0.001 76.677  17317',
'HAYSE          0.001 76.677  17318',
'HAWKE          0.001 76.678  17319',
'HASTON         0.001 76.678  17320',
'HARWARD        0.001 76.679  17321',
'HARVARD        0.001 76.680  17322',
'HARROW         0.001 76.680  17323',
'HANNEMAN       0.001 76.681  17324',
'HAFFORD        0.001 76.681  17325',
'HADNOT         0.001 76.682  17326',
'GUERRO         0.001 76.682  17327',
'GRAIG          0.001 76.683  17328',
'GRAHM          0.001 76.683  17329',
'GOWINS         0.001 76.684  17330',
'GORDILLO       0.001 76.685  17331',
'GOOSBY         0.001 76.685  17332',
'GLATT          0.001 76.686  17333',
'GIBBENS        0.001 76.686  17334',
'GHENT          0.001 76.687  17335',
'GERRARD        0.001 76.687  17336',
'GERMANN        0.001 76.688  17337',
'GEIL           0.001 76.688  17338',
'GEBO           0.001 76.689  17339',
'GEAN           0.001 76.690  17340',
'GARLING        0.001 76.690  17341',
'GARDENHIRE     0.001 76.691  17342',
'GARBUTT        0.001 76.691  17343',
'GAGNER         0.001 76.692  17344',
'FURGUSON       0.001 76.692  17345',
'FUNCHESS       0.001 76.693  17346',
'FUJIWARA       0.001 76.693  17347',
'FUJITA         0.001 76.694  17348',
'FRILEY         0.001 76.695  17349',
'FRIGO          0.001 76.695  17350',
'FORSHEE        0.001 76.696  17351',
'FOLKES         0.001 76.696  17352',
'FILLER         0.001 76.697  17353',
'FERNALD        0.001 76.697  17354',
'FERBER         0.001 76.698  17355',
'FEINGOLD       0.001 76.698  17356',
'FAVORITE       0.001 76.699  17357',
'FAUL           0.001 76.700  17358',
'FARRELLY       0.001 76.700  17359',
'FAIRBANK       0.001 76.701  17360',
'FAILLA         0.001 76.701  17361',
'ESTELLE        0.001 76.702  17362',
'ESPEY          0.001 76.702  17363',
'ESHLEMAN       0.001 76.703  17364',
'ERTL           0.001 76.703  17365',
'ERHART         0.001 76.704  17366',
'ERHARDT        0.001 76.705  17367',
'ERBE           0.001 76.705  17368',
'ELSEA          0.001 76.706  17369',
'ELLS           0.001 76.706  17370',
'ELLMAN         0.001 76.707  17371',
'EISENHART      0.001 76.707  17372',
'EHMANN         0.001 76.708  17373',
'EARNHARDT      0.001 76.708  17374',
'DUPLANTIS      0.001 76.709  17375',
'DULAC          0.001 76.710  17376',
'DUCOTE         0.001 76.710  17377',
'DRAVES         0.001 76.711  17378',
'DOSCH          0.001 76.711  17379',
'DOLCE          0.001 76.712  17380',
'DIVITO         0.001 76.712  17381',
'DITCH          0.001 76.713  17382',
'DIMAURO        0.001 76.713  17383',
'DERRINGER      0.001 76.714  17384',
'DEMEO          0.001 76.715  17385',
'DEMARTINI      0.001 76.715  17386',
'DELIMA         0.001 76.716  17387',
'DEHNER         0.001 76.716  17388',
'DEGEN          0.001 76.717  17389',
'DEFRANCISCO    0.001 76.717  17390',
'DEFOOR         0.001 76.718  17391',
'DEDEAUX        0.001 76.718  17392',
'DEBNAM         0.001 76.719  17393',
'CYPERT         0.001 76.720  17394',
'CUTRER         0.001 76.720  17395',
'CUSUMANO       0.001 76.721  17396',
'CUSTIS         0.001 76.721  17397',
'CROKER         0.001 76.722  17398',
'COURTOIS       0.001 76.722  17399',
'COSTANTINO     0.001 76.723  17400',
'CORMACK        0.001 76.723  17401',
'CORBEIL        0.001 76.724  17402',
'COPHER         0.001 76.725  17403',
'CONLAN         0.001 76.725  17404',
'CONKLING       0.001 76.726  17405',
'COGDELL        0.001 76.726  17406',
'CILLEY         0.001 76.727  17407',
'CHAPDELAINE    0.001 76.727  17408',
'CENDEJAS       0.001 76.728  17409',
'CASTIGLIA      0.001 76.728  17410',
'CASSETTE       0.001 76.729  17411',
'CASHIN         0.001 76.730  17412',
'CARSTENSEN     0.001 76.730  17413',
'CAROL          0.001 76.731  17414',
'CAPRIO         0.001 76.731  17415',
'CALCOTE        0.001 76.732  17416',
'CALAWAY        0.001 76.732  17417',
'BYFIELD        0.001 76.733  17418',
'BUTNER         0.001 76.734  17419',
'BUSHWAY        0.001 76.734  17420',
'BURRITT        0.001 76.735  17421',
'BROWNER        0.001 76.735  17422',
'BROBST         0.001 76.736  17423',
'BRINER         0.001 76.736  17424',
'BRIGHTON       0.001 76.737  17425',
'BRIDGER        0.001 76.737  17426',
'BRICKLEY       0.001 76.738  17427',
'BRENDEL        0.001 76.739  17428',
'BRATTEN        0.001 76.739  17429',
'BRATT          0.001 76.740  17430',
'BRAINERD       0.001 76.740  17431',
'BRACKMAN       0.001 76.741  17432',
'BOWNE          0.001 76.741  17433',
'BOUCK          0.001 76.742  17434',
'BORUNDA        0.001 76.742  17435',
'BORDNER        0.001 76.743  17436',
'BONENFANT      0.001 76.744  17437',
'BOER           0.001 76.744  17438',
'BOEHMER        0.001 76.745  17439',
'BODIFORD       0.001 76.745  17440',
'BLEAU          0.001 76.746  17441',
'BLANKINSHIP    0.001 76.746  17442',
'BLANE          0.001 76.747  17443',
'BLAHA          0.001 76.747  17444',
'BITTING        0.001 76.748  17445',
'BISSONETTE     0.001 76.749  17446',
'BIGBY          0.001 76.749  17447',
'BIBEAU         0.001 76.750  17448',
'BEVERAGE       0.001 76.750  17449',
'BERMUDES       0.001 76.751  17450',
'BERKE          0.001 76.751  17451',
'BERGEVIN       0.001 76.752  17452',
'BERGERSON      0.001 76.752  17453',
'BENDEL         0.001 76.753  17454',
'BELVILLE       0.001 76.754  17455',
'BECHARD        0.001 76.754  17456',
'BEARCE         0.001 76.755  17457',
'BEADLES        0.001 76.755  17458',
'BATZ           0.001 76.756  17459',
'BARTLOW        0.001 76.756  17460',
'BARREN         0.001 76.757  17461',
'AYOUB          0.001 76.757  17462',
'AVANS          0.001 76.758  17463',
'AUMILLER       0.001 76.759  17464',
'ARVISO         0.001 76.759  17465',
'ARPIN          0.001 76.760  17466',
'ARNWINE        0.001 76.760  17467',
'ARMWOOD        0.001 76.761  17468',
'ARENT          0.001 76.761  17469',
'AREHART        0.001 76.762  17470',
'ARCAND         0.001 76.762  17471',
'ANTLE          0.001 76.763  17472',
'AMBROSINO      0.001 76.764  17473',
'ALONGI         0.001 76.764  17474',
'ALM            0.001 76.765  17475',
'ALLSHOUSE      0.001 76.765  17476',
'AHART          0.001 76.766  17477',
'AGUON          0.001 76.766  17478',
'ZIEBARTH       0.001 76.767  17479',
'ZELEDON        0.001 76.767  17480',
'ZAKRZEWSKI     0.001 76.768  17481',
'YUHAS          0.001 76.768  17482',
'YINGST         0.001 76.769  17483',
'YEDINAK        0.001 76.770  17484',
'WOMMACK        0.001 76.770  17485',
'WINNETT        0.001 76.771  17486',
'WINGLER        0.001 76.771  17487',
'WILCOXEN       0.001 76.772  17488',
'WHITMARSH      0.001 76.772  17489',
'WHISTLER       0.001 76.773  17490',
'WAYT           0.001 76.773  17491',
'WATLEY         0.001 76.774  17492',
'WASSER         0.001 76.774  17493',
'WARKENTIN      0.001 76.775  17494',
'VOLL           0.001 76.776  17495',
'VOGELSANG      0.001 76.776  17496',
'VOEGELE        0.001 76.777  17497',
'VIVANCO        0.001 76.777  17498',
'VINTON         0.001 76.778  17499',
'VILLAFANE      0.001 76.778  17500',
'VILES          0.001 76.779  17501',
'VERSACE        0.001 76.779  17502',
'VER            0.001 76.780  17503',
'VENNE          0.001 76.780  17504',
'VANWAGONER     0.001 76.781  17505',
'VANWAGENEN     0.001 76.781  17506',
'VANLEUVEN      0.001 76.782  17507',
'VANAUKEN       0.001 76.783  17508',
'USELTON        0.001 76.783  17509',
'UREN           0.001 76.784  17510',
'TRUMBAUER      0.001 76.784  17511',
'TRITT          0.001 76.785  17512',
'TREADAWAY      0.001 76.785  17513',
'TOZIER         0.001 76.786  17514',
'TOPE           0.001 76.786  17515',
'TOMCZAK        0.001 76.787  17516',
'TOMBERLIN      0.001 76.787  17517',
'TOMASINI       0.001 76.788  17518',
'TOLLETT        0.001 76.788  17519',
'TOLLER         0.001 76.789  17520',
'TITSWORTH      0.001 76.790  17521',
'TIRRELL        0.001 76.790  17522',
'TILLY          0.001 76.791  17523',
'TAVERA         0.001 76.791  17524',
'TARNOWSKI      0.001 76.792  17525',
'TANOUYE        0.001 76.792  17526',
'TALL           0.001 76.793  17527',
'SWARTHOUT      0.001 76.793  17528',
'SUTERA         0.001 76.794  17529',
'SURETTE        0.001 76.794  17530',
'STYERS         0.001 76.795  17531',
'STYER          0.001 76.796  17532',
'STIPE          0.001 76.796  17533',
'STICKLAND      0.001 76.797  17534',
'STEVE          0.001 76.797  17535',
'STEMBRIDGE     0.001 76.798  17536',
'STEARN         0.001 76.798  17537',
'STARKES        0.001 76.799  17538',
'STANBERRY      0.001 76.799  17539',
'STAHR          0.001 76.800  17540',
'SPINO          0.001 76.800  17541',
'SPICHER        0.001 76.801  17542',
'SPERBER        0.001 76.801  17543',
'SPEECE         0.001 76.802  17544',
'SOO            0.001 76.803  17545',
'SONNTAG        0.001 76.803  17546',
'SNELLER        0.001 76.804  17547',
'SMALLING       0.001 76.804  17548',
'SLOWIK         0.001 76.805  17549',
'SLOCUMB        0.001 76.805  17550',
'SLIVA          0.001 76.806  17551',
'SLEMP          0.001 76.806  17552',
'SLAMA          0.001 76.807  17553',
'SITZ           0.001 76.807  17554',
'SISTO          0.001 76.808  17555',
'SISEMORE       0.001 76.808  17556',
'SINDELAR       0.001 76.809  17557',
'SHIPTON        0.001 76.810  17558',
'SHILLINGS      0.001 76.810  17559',
'SHEELEY        0.001 76.811  17560',
'SHARBER        0.001 76.811  17561',
'SHADDIX        0.001 76.812  17562',
'SEVERNS        0.001 76.812  17563',
'SEVERINO       0.001 76.813  17564',
'SEVER          0.001 76.813  17565',
'SENSABAUGH     0.001 76.814  17566',
'SEDER          0.001 76.814  17567',
'SEAWELL        0.001 76.815  17568',
'SEAMONS        0.001 76.816  17569',
'SCHRANTZ       0.001 76.816  17570',
'SCHOOLER       0.001 76.817  17571',
'SCHEFFER       0.001 76.817  17572',
'SCHEERER       0.001 76.818  17573',
'SCALIA         0.001 76.818  17574',
'SAUM           0.001 76.819  17575',
'SANTIBANEZ     0.001 76.819  17576',
'SANO           0.001 76.820  17577',
'SANJUAN        0.001 76.820  17578',
'SAMPLEY        0.001 76.821  17579',
'SAILER         0.001 76.821  17580',
'SABELLA        0.001 76.822  17581',
'SABBAGH        0.001 76.823  17582',
'ROYALL         0.001 76.823  17583',
'ROTTMAN        0.001 76.824  17584',
'RIVENBARK      0.001 76.824  17585',
'RIKARD         0.001 76.825  17586',
'RICKETSON      0.001 76.825  17587',
'RICKEL         0.001 76.826  17588',
'RETHMAN        0.001 76.826  17589',
'REILY          0.001 76.827  17590',
'REDDIN         0.001 76.827  17591',
'REASONER       0.001 76.828  17592',
'READE          0.001 76.828  17593',
'RAST           0.001 76.829  17594',
'RANALLO        0.001 76.830  17595',
'RANA           0.001 76.830  17596',
'QUINTAL        0.001 76.831  17597',
'PUNG           0.001 76.831  17598',
'PUCCI          0.001 76.832  17599',
'PROTO          0.001 76.832  17600',
'PROSPERIE      0.001 76.833  17601',
'PRIM           0.001 76.833  17602',
'PREUSSER       0.001 76.834  17603',
'PRESLAR        0.001 76.834  17604',
'POWLEY         0.001 76.835  17605',
'POSTMA         0.001 76.836  17606',
'PINNIX         0.001 76.836  17607',
'PILLA          0.001 76.837  17608',
'PIETSCH        0.001 76.837  17609',
'PICKEREL       0.001 76.838  17610',
'PICA           0.001 76.838  17611',
'PHARRIS        0.001 76.839  17612',
'PETWAY         0.001 76.839  17613',
'PETILLO        0.001 76.840  17614',
'PERIN          0.001 76.840  17615',
'PEREDA         0.001 76.841  17616',
'PENNYPACKER    0.001 76.841  17617',
'PENNEBAKER     0.001 76.842  17618',
'PEDRICK        0.001 76.843  17619',
'PATIN          0.001 76.843  17620',
'PATCHELL       0.001 76.844  17621',
'PARODI         0.001 76.844  17622',
'PARMAN         0.001 76.845  17623',
'PANTANO        0.001 76.845  17624',
'PADUA          0.001 76.846  17625',
'PADRO          0.001 76.846  17626',
'OSTERHOUT      0.001 76.847  17627',
'ORNER          0.001 76.847  17628',
'OPP            0.001 76.848  17629',
'OLIVAR         0.001 76.848  17630',
'OHLSON         0.001 76.849  17631',
'ODONOGHUE      0.001 76.850  17632',
'OCEGUERA       0.001 76.850  17633',
'OBERRY         0.001 76.851  17634',
'NOVELLO        0.001 76.851  17635',
'NOGUERA        0.001 76.852  17636',
'NEWQUIST       0.001 76.852  17637',
'NEWCOMBE       0.001 76.853  17638',
'NEIHOFF        0.001 76.853  17639',
'NEHRING        0.001 76.854  17640',
'NEES           0.001 76.854  17641',
'NEBEKER        0.001 76.855  17642',
'NAU            0.001 76.856  17643',
'MUNDO          0.001 76.856  17644',
'MULLENIX       0.001 76.857  17645',
'MORRISEY       0.001 76.857  17646',
'MORONTA        0.001 76.858  17647',
'MORILLO        0.001 76.858  17648',
'MOREFIELD      0.001 76.859  17649',
'MONGILLO       0.001 76.859  17650',
'MOLINO         0.001 76.860  17651',
'MINTO          0.001 76.860  17652',
'MIDGLEY        0.001 76.861  17653',
'MICHIE         0.001 76.861  17654',
'MENZIES        0.001 76.862  17655',
'MEDVED         0.001 76.863  17656',
'MECHLING       0.001 76.863  17657',
'MEALY          0.001 76.864  17658',
'MCSHAN         0.001 76.864  17659',
'MCQUAIG        0.001 76.865  17660',
'MCNEES         0.001 76.865  17661',
'MCGLADE        0.001 76.866  17662',
'MCGARITY       0.001 76.866  17663',
'MCGAHEY        0.001 76.867  17664',
'MCDUFF         0.001 76.867  17665',
'MAYWEATHER     0.001 76.868  17666',
'MASTROPIETRO   0.001 76.868  17667',
'MASTEN         0.001 76.869  17668',
'MARANTO        0.001 76.870  17669',
'MANISCALCO     0.001 76.870  17670',
'MAIZE          0.001 76.871  17671',
'MAHMOOD        0.001 76.871  17672',
'MADDOCKS       0.001 76.872  17673',
'MADAY          0.001 76.872  17674',
'MACHA          0.001 76.873  17675',
'MAAG           0.001 76.873  17676',
'LUKEN          0.001 76.874  17677',
'LOPP           0.001 76.874  17678',
'LOLLEY         0.001 76.875  17679',
'LLANAS         0.001 76.876  17680',
'LITZ           0.001 76.876  17681',
'LITHERLAND     0.001 76.877  17682',
'LINDENBERG     0.001 76.877  17683',
'LIEU           0.001 76.878  17684',
'LETCHER        0.001 76.878  17685',
'LENTINI        0.001 76.879  17686',
'LEMELLE        0.001 76.879  17687',
'LEET           0.001 76.880  17688',
'LECUYER        0.001 76.880  17689',
'LEBER          0.001 76.881  17690',
'LAURSEN        0.001 76.881  17691',
'LATCH          0.001 76.882  17692',
'LARRICK        0.001 76.883  17693',
'LANTIGUA       0.001 76.883  17694',
'LANGLINAIS     0.001 76.884  17695',
'LALLI          0.001 76.884  17696',
'LAFEVER        0.001 76.885  17697',
'LABAT          0.001 76.885  17698',
'LABADIE        0.001 76.886  17699',
'KURT           0.001 76.886  17700',
'KROGMAN        0.001 76.887  17701',
'KOHUT          0.001 76.887  17702',
'KNARR          0.001 76.888  17703',
'KLIMAS         0.001 76.888  17704',
'KLAR           0.001 76.889  17705',
'KITTELSON      0.001 76.890  17706',
'KIRSCHBAUM     0.001 76.890  17707',
'KINTZEL        0.001 76.891  17708',
'KINCANNON      0.001 76.891  17709',
'KIMMELL        0.001 76.892  17710',
'KILLGORE       0.001 76.892  17711',
'KETTNER        0.001 76.893  17712',
'KELSCH         0.001 76.893  17713',
'KARLE          0.001 76.894  17714',
'KAPOOR         0.001 76.894  17715',
'JOHANSSON      0.001 76.895  17716',
'JOCK           0.001 76.896  17717',
'JENKINSON      0.001 76.896  17718',
'JANNEY         0.001 76.897  17719',
'ISABELLE       0.001 76.897  17720',
'IRAHETA        0.001 76.898  17721',
'INSLEY         0.001 76.898  17722',
'HYSLOP         0.001 76.899  17723',
'HY             0.001 76.899  17724',
'HUMAN          0.001 76.900  17725',
'HUCKSTEP       0.001 76.900  17726',
'HOLLERAN       0.001 76.901  17727',
'HOERR          0.001 76.901  17728',
'HINZE          0.001 76.902  17729',
'HINNENKAMP     0.001 76.903  17730',
'HILGER         0.001 76.903  17731',
'HIGGIN         0.001 76.904  17732',
'HICKLIN        0.001 76.904  17733',
'HEROUX         0.001 76.905  17734',
'HENKLE         0.001 76.905  17735',
'HELFER         0.001 76.906  17736',
'HEIKKINEN      0.001 76.906  17737',
'HECKSTALL      0.001 76.907  17738',
'HECKLER        0.001 76.907  17739',
'HEAVENER       0.001 76.908  17740',
'HAYDEL         0.001 76.908  17741',
'HAVEMAN        0.001 76.909  17742',
'HAUBERT        0.001 76.910  17743',
'HARROP         0.001 76.910  17744',
'HARNOIS        0.001 76.911  17745',
'HANSARD        0.001 76.911  17746',
'HANOVER        0.001 76.912  17747',
'HAMMITT        0.001 76.912  17748',
'HALIBURTON     0.001 76.913  17749',
'HAEFNER        0.001 76.913  17750',
'HADSELL        0.001 76.914  17751',
'HAAKENSON      0.001 76.914  17752',
'GUYNN          0.001 76.915  17753',
'GUIZAR         0.001 76.916  17754',
'GROUT          0.001 76.916  17755',
'GROSZ          0.001 76.917  17756',
'GOO            0.001 76.917  17757',
'GOMER          0.001 76.918  17758',
'GOLLA          0.001 76.918  17759',
'GODBY          0.001 76.919  17760',
'GLANZ          0.001 76.919  17761',
'GLANCY         0.001 76.920  17762',
'GIVAN          0.001 76.920  17763',
'GIESEN         0.001 76.921  17764',
'GERST          0.001 76.921  17765',
'GAYMAN         0.001 76.922  17766',
'GARRAWAY       0.001 76.923  17767',
'GABOR          0.001 76.923  17768',
'FURNESS        0.001 76.924  17769',
'FRISK          0.001 76.924  17770',
'FREMONT        0.001 76.925  17771',
'FRARY          0.001 76.925  17772',
'FORAND         0.001 76.926  17773',
'FESSENDEN      0.001 76.926  17774',
'FERRIGNO       0.001 76.927  17775',
'FEARON         0.001 76.927  17776',
'FAVREAU        0.001 76.928  17777',
'FAULKS         0.001 76.928  17778',
'FALBO          0.001 76.929  17779',
'EWEN           0.001 76.930  17780',
'EVERTON        0.001 76.930  17781',
'EURICH         0.001 76.931  17782',
'ETCHISON       0.001 76.931  17783',
'ESTERLY        0.001 76.932  17784',
'ENTWISTLE      0.001 76.932  17785',
'ELLINGSWORTH   0.001 76.933  17786',
'ELDERS         0.001 76.933  17787',
'EK             0.001 76.934  17788',
'EISENBARTH     0.001 76.934  17789',
'EDELSON        0.001 76.935  17790',
'ECKEL          0.001 76.936  17791',
'EARNSHAW       0.001 76.936  17792',
'DUNNEBACK      0.001 76.937  17793',
'DOYAL          0.001 76.937  17794',
'DONNELLAN      0.001 76.938  17795',
'DOLIN          0.001 76.938  17796',
'DIBIASE        0.001 76.939  17797',
'DESCHENES      0.001 76.939  17798',
'DERMODY        0.001 76.940  17799',
'DENMARK        0.001 76.940  17800',
'DEGREGORIO     0.001 76.941  17801',
'DARNALL        0.001 76.941  17802',
'DANT           0.001 76.942  17803',
'DANSEREAU      0.001 76.943  17804',
'DANAHER        0.001 76.943  17805',
'DAMMANN        0.001 76.944  17806',
'DAMES          0.001 76.944  17807',
'CZARNECKI      0.001 76.945  17808',
'CUYLER         0.001 76.945  17809',
'CUSTARD        0.001 76.946  17810',
'CUMMINGHAM     0.001 76.946  17811',
'CUFFIE         0.001 76.947  17812',
'CUFFEE         0.001 76.947  17813',
'CUDNEY         0.001 76.948  17814',
'CUADRA         0.001 76.948  17815',
'CRIGLER        0.001 76.949  17816',
'CREGER         0.001 76.950  17817',
'COUGHLAN       0.001 76.950  17818',
'CORVIN         0.001 76.951  17819',
'CORTRIGHT      0.001 76.951  17820',
'CORCHADO       0.001 76.952  17821',
'CONNERY        0.001 76.952  17822',
'CONFORTI       0.001 76.953  17823',
'CONDRON        0.001 76.953  17824',
'COLOSIMO       0.001 76.954  17825',
'COLCLOUGH      0.001 76.954  17826',
'COLA           0.001 76.955  17827',
'COHEE          0.001 76.956  17828',
'CLAIRE         0.001 76.956  17829',
'CIOTTI         0.001 76.957  17830',
'CHILL          0.001 76.957  17831',
'CHIEN          0.001 76.958  17832',
'CHECK          0.001 76.958  17833',
'CHACKO         0.001 76.959  17834',
'CEVALLOS       0.001 76.959  17835',
'CAVITT         0.001 76.960  17836',
'CAVINS         0.001 76.960  17837',
'CASTAGNA       0.001 76.961  17838',
'CASHWELL       0.001 76.961  17839',
'CARROZZA       0.001 76.962  17840',
'CARRARA        0.001 76.963  17841',
'CAPRA          0.001 76.963  17842',
'CAMPAS         0.001 76.964  17843',
'CALLAS         0.001 76.964  17844',
'CAISON         0.001 76.965  17845',
'CAI            0.001 76.965  17846',
'CAGGIANO       0.001 76.966  17847',
'CABOT          0.001 76.966  17848',
'BYNOE          0.001 76.967  17849',
'BUSWELL        0.001 76.967  17850',
'BURPO          0.001 76.968  17851',
'BURNAM         0.001 76.968  17852',
'BURGES         0.001 76.969  17853',
'BUERGER        0.001 76.970  17854',
'BUELOW         0.001 76.970  17855',
'BUECHE         0.001 76.971  17856',
'BUCKLE         0.001 76.971  17857',
'BRUNI          0.001 76.972  17858',
'BRUMMITT       0.001 76.972  17859',
'BRODERSEN      0.001 76.973  17860',
'BRIESE         0.001 76.973  17861',
'BREIT          0.001 76.974  17862',
'BRAKEBILL      0.001 76.974  17863',
'BRAATZ         0.001 76.975  17864',
'BOYERS         0.001 76.976  17865',
'BOUGHNER       0.001 76.976  17866',
'BORROR         0.001 76.977  17867',
'BORQUEZ        0.001 76.977  17868',
'BONELLI        0.001 76.978  17869',
'BOHNER         0.001 76.978  17870',
'BLAZE          0.001 76.979  17871',
'BLAKER         0.001 76.979  17872',
'BLACKMER       0.001 76.980  17873',
'BISSETTE       0.001 76.980  17874',
'BIBBINS        0.001 76.981  17875',
'BHATT          0.001 76.981  17876',
'BHATIA         0.001 76.982  17877',
'BESSLER        0.001 76.983  17878',
'BERGH          0.001 76.983  17879',
'BERESFORD      0.001 76.984  17880',
'BENSEN         0.001 76.984  17881',
'BENNINGFIELD   0.001 76.985  17882',
'BENITO         0.001 76.985  17883',
'BELLANTONI     0.001 76.986  17884',
'BEHLER         0.001 76.986  17885',
'BEEHLER        0.001 76.987  17886',
'BEAZLEY        0.001 76.987  17887',
'BEAUCHESNE     0.001 76.988  17888',
'BARGO          0.001 76.988  17889',
'BANNERMAN      0.001 76.989  17890',
'BALTES         0.001 76.990  17891',
'BALOG          0.001 76.990  17892',
'BALLANTYNE     0.001 76.991  17893',
'BAD            0.001 76.991  17894',
'AXELSON        0.001 76.992  17895',
'APGAR          0.001 76.992  17896',
'AOKI           0.001 76.993  17897',
'ANSTETT        0.001 76.993  17898',
'ALEJOS         0.001 76.994  17899',
'ALCOCER        0.001 76.994  17900',
'ALBURY         0.001 76.995  17901',
'AICHELE        0.001 76.996  17902',
'AHL            0.001 76.996  17903',
'ACKLES         0.001 76.997  17904',
'ZERANGUE       0.001 76.997  17905',
'ZEHNER         0.001 76.998  17906',
'ZANK           0.001 76.998  17907',
'ZACARIAS       0.001 76.999  17908',
'YOUNGBERG      0.001 76.999  17909',
'YORKE          0.001 77.000  17910',
'YARBRO         0.001 77.000  17911',
'XIE            0.001 77.001  17912',
'WYDRA          0.001 77.001  17913',
'WORTHLEY       0.001 77.002  17914',
'WOLBERT        0.001 77.002  17915',
'WITTMER        0.001 77.003  17916',
'WITHERINGTON   0.001 77.003  17917',
'WISHART        0.001 77.004  17918',
'WIRE           0.001 77.004  17919',
'WINNIE         0.001 77.005  17920',
'WINKLEMAN      0.001 77.006  17921',
'WILLILAMS      0.001 77.006  17922',
'WILLER         0.001 77.007  17923',
'WIEDEMAN       0.001 77.007  17924',
'WHITTINGHAM    0.001 77.008  17925',
'WHITBECK       0.001 77.008  17926',
'WHETSEL        0.001 77.009  17927',
'WHELESS        0.001 77.009  17928',
'WESTERBERG     0.001 77.010  17929',
'WELCHER        0.001 77.010  17930',
'WEGMAN         0.001 77.011  17931',
'WATERFIELD     0.001 77.011  17932',
'WASINGER       0.001 77.012  17933',
'WARFEL         0.001 77.012  17934',
'WANNAMAKER     0.001 77.013  17935',
'WALBORN        0.001 77.013  17936',
'WADA           0.001 77.014  17937',
'VOGL           0.001 77.014  17938',
'VIZCARRONDO    0.001 77.015  17939',
'VITELA         0.001 77.015  17940',
'VILLEDA        0.001 77.016  17941',
'VERAS          0.001 77.017  17942',
'VENUTI         0.001 77.017  17943',
'VENEY          0.001 77.018  17944',
'ULREY          0.001 77.018  17945',
'UHLIG          0.001 77.019  17946',
'TURCIOS        0.001 77.019  17947',
'TREMPER        0.001 77.020  17948',
'TORIAN         0.001 77.020  17949',
'TORBETT        0.001 77.021  17950',
'THRAILKILL     0.001 77.021  17951',
'TERRONES       0.001 77.022  17952',
'TEITELBAUM     0.001 77.022  17953',
'TEEMS          0.001 77.023  17954',
'TAY            0.001 77.023  17955',
'SWOOPE         0.001 77.024  17956',
'SUNSERI        0.001 77.024  17957',
'STUTES         0.001 77.025  17958',
'STTHOMAS       0.001 77.025  17959',
'STROHM         0.001 77.026  17960',
'STROBLE        0.001 77.026  17961',
'STRIEGEL       0.001 77.027  17962',
'STREICHER      0.001 77.028  17963',
'STODOLA        0.001 77.028  17964',
'STINCHCOMB     0.001 77.029  17965',
'STEVES         0.001 77.029  17966',
'STEPPE         0.001 77.030  17967',
'STEM           0.001 77.030  17968',
'STELLER        0.001 77.031  17969',
'STAUDT         0.001 77.031  17970',
'STARNER        0.001 77.032  17971',
'STAMANT        0.001 77.032  17972',
'STAM           0.001 77.033  17973',
'STACKPOLE      0.001 77.033  17974',
'SPRANKLE       0.001 77.034  17975',
'SPECIALE       0.001 77.034  17976',
'SPAHR          0.001 77.035  17977',
'SOWDERS        0.001 77.035  17978',
'SOVA           0.001 77.036  17979',
'SOLURI         0.001 77.036  17980',
'SODERLUND      0.001 77.037  17981',
'SLINKARD       0.001 77.038  17982',
'SKATES         0.001 77.038  17983',
'SJOGREN        0.001 77.039  17984',
'SIRIANNI       0.001 77.039  17985',
'SIEWERT        0.001 77.040  17986',
'SICKELS        0.001 77.040  17987',
'SICA           0.001 77.041  17988',
'SHUGART        0.001 77.041  17989',
'SHOULTS        0.001 77.042  17990',
'SHIVE          0.001 77.042  17991',
'SHIMER         0.001 77.043  17992',
'SHIER          0.001 77.043  17993',
'SHIELD         0.001 77.044  17994',
'SHEPLEY        0.001 77.044  17995',
'SHEERAN        0.001 77.045  17996',
'SHARPER        0.001 77.045  17997',
'SEVIN          0.001 77.046  17998',
'SEVERE         0.001 77.046  17999',
'SETO           0.001 77.047  18000',
'SEGUNDO        0.001 77.047  18001',
'SEDLACEK       0.001 77.048  18002',
'SCUDERI        0.001 77.049  18003',
'SCHURMAN       0.001 77.049  18004',
'SCHUELKE       0.001 77.050  18005',
'SCHOLTEN       0.001 77.050  18006',
'SCHLATER       0.001 77.051  18007',
'SCHISLER       0.001 77.051  18008',
'SCHIEFELBEIN   0.001 77.052  18009',
'SCHALK         0.001 77.052  18010',
'SANON          0.001 77.053  18011',
'SAE            0.001 77.053  18012',
'SABALA         0.001 77.054  18013',
'RUYLE          0.001 77.054  18014',
'RUYBAL         0.001 77.055  18015',
'RUF            0.001 77.055  18016',
'RUEB           0.001 77.056  18017',
'ROWSEY         0.001 77.056  18018',
'ROSOL          0.001 77.057  18019',
'ROCHELEAU      0.001 77.057  18020',
'RISHEL         0.001 77.058  18021',
'RIPPEY         0.001 77.058  18022',
'RINGGOLD       0.001 77.059  18023',
'RIEVES         0.001 77.060  18024',
'RIDINGER       0.001 77.060  18025',
'REW            0.001 77.061  18026',
'RETHERFORD     0.001 77.061  18027',
'REMPE          0.001 77.062  18028',
'REITH          0.001 77.062  18029',
'RAFTER         0.001 77.063  18030',
'RAFFAELE       0.001 77.063  18031',
'QUINTO         0.001 77.064  18032',
'PUTZ           0.001 77.064  18033',
'PURDOM         0.001 77.065  18034',
'PULS           0.001 77.065  18035',
'PULASKI        0.001 77.066  18036',
'PROPP          0.001 77.066  18037',
'PRINCIPATO     0.001 77.067  18038',
'PREISS         0.001 77.067  18039',
'PRADA          0.001 77.068  18040',
'POLANSKY       0.001 77.068  18041',
'POCH           0.001 77.069  18042',
'PLATH          0.001 77.070  18043',
'PITTARD        0.001 77.070  18044',
'PINNOCK        0.001 77.071  18045',
'PFARR          0.001 77.071  18046',
'PFANNENSTIEL   0.001 77.072  18047',
'PENNIMAN       0.001 77.072  18048',
'PAULING        0.001 77.073  18049',
'PATCHEN        0.001 77.073  18050',
'PASCHKE        0.001 77.074  18051',
'PARKEY         0.001 77.074  18052',
'PANDO          0.001 77.075  18053',
'OVERLY         0.001 77.075  18054',
'OUIMET         0.001 77.076  18055',
'OTTMAN         0.001 77.076  18056',
'OTTER          0.001 77.077  18057',
'OSTLUND        0.001 77.077  18058',
'ORMISTON       0.001 77.078  18059',
'OCCHIPINTI     0.001 77.078  18060',
'NOWACKI        0.001 77.079  18061',
'NORRED         0.001 77.079  18062',
'NOACK          0.001 77.080  18063',
'NISHIDA        0.001 77.081  18064',
'NILLES         0.001 77.081  18065',
'NICODEMUS      0.001 77.082  18066',
'NETH           0.001 77.082  18067',
'NEALEY         0.001 77.083  18068',
'MYRICKS        0.001 77.083  18069',
'MURFF          0.001 77.084  18070',
'MUNGIA         0.001 77.084  18071',
'MULLET         0.001 77.085  18072',
'MOTSINGER      0.001 77.085  18073',
'MOSCATO        0.001 77.086  18074',
'MORT           0.001 77.086  18075',
'MORADO         0.001 77.087  18076',
'MOORS          0.001 77.087  18077',
'MONNIER        0.001 77.088  18078',
'MOLYNEUX       0.001 77.088  18079',
'MODZELEWSKI    0.001 77.089  18080',
'MIURA          0.001 77.089  18081',
'MINICH         0.001 77.090  18082',
'MILITELLO      0.001 77.091  18083',
'MILBRANDT      0.001 77.091  18084',
'MICHALIK       0.001 77.092  18085',
'MESERVE        0.001 77.092  18086',
'MERLE          0.001 77.093  18087',
'MENDIVIL       0.001 77.093  18088',
'MELARA         0.001 77.094  18089',
'MEADOW         0.001 77.094  18090',
'MCNISH         0.001 77.095  18091',
'MCELHANNON     0.001 77.095  18092',
'MCCROY         0.001 77.096  18093',
'MCCRADY        0.001 77.096  18094',
'MAZZELLA       0.001 77.097  18095',
'MAULE          0.001 77.097  18096',
'MATTERA        0.001 77.098  18097',
'MATHENA        0.001 77.098  18098',
'MATAS          0.001 77.099  18099',
'MASS           0.001 77.099  18100',
'MASCORRO       0.001 77.100  18101',
'MARONE         0.001 77.100  18102',
'MARINELLO      0.001 77.101  18103',
'MARGUEZ        0.001 77.102  18104',
'MARCELL        0.001 77.102  18105',
'MANWARING      0.001 77.103  18106',
'MANHART        0.001 77.103  18107',
'MANGANO        0.001 77.104  18108',
'MAGGI          0.001 77.104  18109',
'LYMON          0.001 77.105  18110',
'LUTER          0.001 77.105  18111',
'LUSE           0.001 77.106  18112',
'LUKASIK        0.001 77.106  18113',
'LUIZ           0.001 77.107  18114',
'LUDLUM         0.001 77.107  18115',
'LUCZAK         0.001 77.108  18116',
'LOWENTHAL      0.001 77.108  18117',
'LOSSETT        0.001 77.109  18118',
'LORENTZEN      0.001 77.109  18119',
'LOREDO         0.001 77.110  18120',
'LONGWORTH      0.001 77.110  18121',
'LOMANTO        0.001 77.111  18122',
'LISI           0.001 77.111  18123',
'LISH           0.001 77.112  18124',
'LIPSKY         0.001 77.113  18125',
'LINCK          0.001 77.113  18126',
'LIEDTKE        0.001 77.114  18127',
'LEVERING       0.001 77.114  18128',
'LESSMAN        0.001 77.115  18129',
'LEMOND         0.001 77.115  18130',
'LEMBO          0.001 77.116  18131',
'LEDONNE        0.001 77.116  18132',
'LEATHAM        0.001 77.117  18133',
'LAUFER         0.001 77.117  18134',
'LANPHEAR       0.001 77.118  18135',
'LANGLAIS       0.001 77.118  18136',
'LANDO          0.001 77.119  18137',
'LAMPHEAR       0.001 77.119  18138',
'LAMBERTON      0.001 77.120  18139',
'LAFON          0.001 77.120  18140',
'LADE           0.001 77.121  18141',
'LACROSS        0.001 77.121  18142',
'KYZER          0.001 77.122  18143',
'KROK           0.001 77.123  18144',
'KRING          0.001 77.123  18145',
'KRELL          0.001 77.124  18146',
'KREHBIEL       0.001 77.124  18147',
'KRATOCHVIL     0.001 77.125  18148',
'KRACH          0.001 77.125  18149',
'KOVAR          0.001 77.126  18150',
'KOSTKA         0.001 77.126  18151',
'KNUDTSON       0.001 77.127  18152',
'KNAACK         0.001 77.127  18153',
'KLIEBERT       0.001 77.128  18154',
'KLAHN          0.001 77.128  18155',
'KIRKLEY        0.001 77.129  18156',
'KIMZEY         0.001 77.129  18157',
'KETTLE         0.001 77.130  18158',
'KERRICK        0.001 77.130  18159',
'KENNERSON      0.001 77.131  18160',
'KEESLER        0.001 77.131  18161',
'KARLIN         0.001 77.132  18162',
'KAN            0.001 77.132  18163',
'JENNY          0.001 77.133  18164',
'JANOUSEK       0.001 77.134  18165',
'JAN            0.001 77.134  18166',
'IMEL           0.001 77.135  18167',
'ICENHOUR       0.001 77.135  18168',
'HYLER          0.001 77.136  18169',
'HUNGER         0.001 77.136  18170',
'HUDOCK         0.001 77.137  18171',
'HOUPT          0.001 77.137  18172',
'HOPPING        0.001 77.138  18173',
'HOOPS          0.001 77.138  18174',
'HOLQUIN        0.001 77.139  18175',
'HOLIMAN        0.001 77.139  18176',
'HOLAHAN        0.001 77.140  18177',
'HODAPP         0.001 77.140  18178',
'HIRES          0.001 77.141  18179',
'HILLEN         0.001 77.141  18180',
'HICKMON        0.001 77.142  18181',
'HERSOM         0.001 77.142  18182',
'HENRICH        0.001 77.143  18183',
'HELVEY         0.001 77.143  18184',
'HEIDT          0.001 77.144  18185',
'HEIDEMAN       0.001 77.145  18186',
'HEDSTROM       0.001 77.145  18187',
'HEDIN          0.001 77.146  18188',
'HEBRON         0.001 77.146  18189',
'HAYTER         0.001 77.147  18190',
'HARN           0.001 77.147  18191',
'HARDAGE        0.001 77.148  18192',
'HARBOR         0.001 77.148  18193',
'HALSTED        0.001 77.149  18194',
'HAHNE          0.001 77.149  18195',
'HAGEMANN       0.001 77.150  18196',
'GUZIK          0.001 77.150  18197',
'GUEL           0.001 77.151  18198',
'GROESBECK      0.001 77.151  18199',
'GRITTON        0.001 77.152  18200',
'GREGO          0.001 77.152  18201',
'GRAZIANI       0.001 77.153  18202',
'GRASTY         0.001 77.153  18203',
'GRANEY         0.001 77.154  18204',
'GOUIN          0.001 77.155  18205',
'GOSSAGE        0.001 77.155  18206',
'GOLSTON        0.001 77.156  18207',
'GOHEEN         0.001 77.156  18208',
'GODINA         0.001 77.157  18209',
'GLADE          0.001 77.157  18210',
'GIORGI         0.001 77.158  18211',
'GIAMBRONE      0.001 77.158  18212',
'GERRITY        0.001 77.159  18213',
'GERRISH        0.001 77.159  18214',
'GERO           0.001 77.160  18215',
'GERLING        0.001 77.160  18216',
'GAULKE         0.001 77.161  18217',
'GARLICK        0.001 77.161  18218',
'GALIANO        0.001 77.162  18219',
'GAITER         0.001 77.162  18220',
'GAHAGAN        0.001 77.163  18221',
'GAGNIER        0.001 77.163  18222',
'FRIDDLE        0.001 77.164  18223',
'FREDERICKSEN   0.001 77.164  18224',
'FRANQUI        0.001 77.165  18225',
'FOLLANSBEE     0.001 77.166  18226',
'FOERSTER       0.001 77.166  18227',
'FLURY          0.001 77.167  18228',
'FITZMAURICE    0.001 77.167  18229',
'FIORINI        0.001 77.168  18230',
'FINLAYSON      0.001 77.168  18231',
'FIECKE         0.001 77.169  18232',
'FICKES         0.001 77.169  18233',
'FICHTER        0.001 77.170  18234',
'FERRON         0.001 77.170  18235',
'FERDINAND      0.001 77.171  18236',
'FARREL         0.001 77.171  18237',
'FACKLER        0.001 77.172  18238',
'EYMAN          0.001 77.172  18239',
'ESCARCEGA      0.001 77.173  18240',
'ERRICO         0.001 77.173  18241',
'ERLER          0.001 77.174  18242',
'ERBY           0.001 77.174  18243',
'ENGMAN         0.001 77.175  18244',
'ENGELMANN      0.001 77.175  18245',
'ELSASS         0.001 77.176  18246',
'ELLISTON       0.001 77.177  18247',
'EDDLEMAN       0.001 77.177  18248',
'EADIE          0.001 77.178  18249',
'DUMMER         0.001 77.178  18250',
'DROST          0.001 77.179  18251',
'DORROUGH       0.001 77.179  18252',
'DORRANCE       0.001 77.180  18253',
'DOOLAN         0.001 77.180  18254',
'DONALSON       0.001 77.181  18255',
'DOMENICO       0.001 77.181  18256',
'DITULLIO       0.001 77.182  18257',
'DITTMAR        0.001 77.182  18258',
'DISHON         0.001 77.183  18259',
'DIONISIO       0.001 77.183  18260',
'DIKE           0.001 77.184  18261',
'DEVINNEY       0.001 77.184  18262',
'DESIR          0.001 77.185  18263',
'DESCHAMP       0.001 77.185  18264',
'DERRICKSON     0.001 77.186  18265',
'DELAMORA       0.001 77.187  18266',
'DEITCH         0.001 77.187  18267',
'DECHANT        0.001 77.188  18268',
'DAVE           0.001 77.188  18269',
'DANEK          0.001 77.189  18270',
'DAHMEN         0.001 77.189  18271',
'CURCI          0.001 77.190  18272',
'CUDJOE         0.001 77.190  18273',
'CRUMBLE        0.001 77.191  18274',
'CROXTON        0.001 77.191  18275',
'CREASMAN       0.001 77.192  18276',
'CRANEY         0.001 77.192  18277',
'CRADER         0.001 77.193  18278',
'COWLING        0.001 77.193  18279',
'COULSTON       0.001 77.194  18280',
'CORTINA        0.001 77.194  18281',
'CORLEW         0.001 77.195  18282',
'CORL           0.001 77.195  18283',
'COPLAND        0.001 77.196  18284',
'CONVERY        0.001 77.196  18285',
'COHRS          0.001 77.197  18286',
'CLUNE          0.001 77.198  18287',
'CLAUSING       0.001 77.198  18288',
'CIPRIANI       0.001 77.199  18289',
'CINNAMON       0.001 77.199  18290',
'CIANCIOLO      0.001 77.200  18291',
'CHUBB          0.001 77.200  18292',
'CHITTUM        0.001 77.201  18293',
'CHENARD        0.001 77.201  18294',
'CHARLESWORTH   0.001 77.202  18295',
'CHARLEBOIS     0.001 77.202  18296',
'CHAMPINE       0.001 77.203  18297',
'CHAMLEE        0.001 77.203  18298',
'CHAGOYA        0.001 77.204  18299',
'CASSELMAN      0.001 77.204  18300',
'CARDELLO       0.001 77.205  18301',
'CAPASSO        0.001 77.205  18302',
'CANNELLA       0.001 77.206  18303',
'CALDERWOOD     0.001 77.206  18304',
'BYFORD         0.001 77.207  18305',
'BUTTARS        0.001 77.207  18306',
'BUSHEE         0.001 77.208  18307',
'BURRAGE        0.001 77.209  18308',
'BUENTELLO      0.001 77.209  18309',
'BRZOZOWSKI     0.001 77.210  18310',
'BRYNER         0.001 77.210  18311',
'BRUMIT         0.001 77.211  18312',
'BROOKOVER      0.001 77.211  18313',
'BRONNER        0.001 77.212  18314',
'BROMBERG       0.001 77.212  18315',
'BRIXEY         0.001 77.213  18316',
'BRINN          0.001 77.213  18317',
'BRIGANTI       0.001 77.214  18318',
'BREMNER        0.001 77.214  18319',
'BRAWN          0.001 77.215  18320',
'BRANSCOME      0.001 77.215  18321',
'BRANNIGAN      0.001 77.216  18322',
'BRADSHER       0.001 77.216  18323',
'BOZEK          0.001 77.217  18324',
'BOULAY         0.001 77.217  18325',
'BORMANN        0.001 77.218  18326',
'BONGIORNO      0.001 77.219  18327',
'BOLLIN         0.001 77.219  18328',
'BOHLER         0.001 77.220  18329',
'BOGERT         0.001 77.220  18330',
'BODENHAMER     0.001 77.221  18331',
'BLOSE          0.001 77.221  18332',
'BLIND          0.001 77.222  18333',
'BIVONA         0.001 77.222  18334',
'BITTER         0.001 77.223  18335',
'BILLIPS        0.001 77.223  18336',
'BIBLER         0.001 77.224  18337',
'BENFER         0.001 77.224  18338',
'BENEDETTI      0.001 77.225  18339',
'BELUE          0.001 77.225  18340',
'BELLANGER      0.001 77.226  18341',
'BELFORD        0.001 77.226  18342',
'BEHN           0.001 77.227  18343',
'BEERMAN        0.001 77.227  18344',
'BARNHARDT      0.001 77.228  18345',
'BALTZELL       0.001 77.228  18346',
'BALLING        0.001 77.229  18347',
'BALDUCCI       0.001 77.230  18348',
'BAINTER        0.001 77.230  18349',
'BABINEAU       0.001 77.231  18350',
'BABICH         0.001 77.231  18351',
'BAADE          0.001 77.232  18352',
'ATTWOOD        0.001 77.232  18353',
'ASMUS          0.001 77.233  18354',
'ASARO          0.001 77.233  18355',
'ARTIAGA        0.001 77.234  18356',
'APRIL          0.001 77.234  18357',
'APPLEBAUM      0.001 77.235  18358',
'ANG            0.001 77.235  18359',
'ANDING         0.001 77.236  18360',
'AMAR           0.001 77.236  18361',
'AMAKER         0.001 77.237  18362',
'ALLSUP         0.001 77.237  18363',
'ALLIGOOD       0.001 77.238  18364',
'ALERS          0.001 77.238  18365',
'AGIN           0.001 77.239  18366',
'AGAR           0.001 77.239  18367',
'ACHENBACH      0.001 77.240  18368',
'ABRAMOWITZ     0.001 77.241  18369',
'ABBAS          0.001 77.241  18370',
'AASEN          0.001 77.242  18371',
'ZEHNDER        0.001 77.242  18372',
'YOPP           0.001 77.243  18373',
'YELLE          0.001 77.243  18374',
'YELDELL        0.001 77.244  18375',
'WYNTER         0.001 77.244  18376',
'WOODMANSEE     0.001 77.245  18377',
'WOODING        0.001 77.245  18378',
'WOLL           0.001 77.246  18379',
'WINBORNE       0.001 77.246  18380',
'WILLSEY        0.001 77.247  18381',
'WILLEFORD      0.001 77.247  18382',
'WIDGER         0.001 77.248  18383',
'WHITEN         0.001 77.248  18384',
'WHITCHURCH     0.001 77.249  18385',
'WHANG          0.001 77.249  18386',
'WEN            0.001 77.250  18387',
'WEISSINGER     0.001 77.250  18388',
'WEINMAN        0.001 77.251  18389',
'WEINGARTNER    0.001 77.251  18390',
'WEIDLER        0.001 77.252  18391',
'WALTRIP        0.001 77.252  18392',
'WALT           0.001 77.253  18393',
'WAGAR          0.001 77.253  18394',
'WAFFORD        0.001 77.254  18395',
'VITAGLIANO     0.001 77.254  18396',
'VILLALVAZO     0.001 77.255  18397',
'VILLACORTA     0.001 77.255  18398',
'VIGNA          0.001 77.256  18399',
'VICKREY        0.001 77.256  18400',
'VICINI         0.001 77.257  18401',
'VENTIMIGLIA    0.001 77.257  18402',
'VANDENBOSCH    0.001 77.258  18403',
'VALVO          0.001 77.258  18404',
'VALAZQUEZ      0.001 77.259  18405',
'UTSEY          0.001 77.259  18406',
'URBANIAK       0.001 77.260  18407',
'UNZUETA        0.001 77.260  18408',
'TROMBETTA      0.001 77.261  18409',
'TREVIZO        0.001 77.261  18410',
'TREMBLEY       0.001 77.262  18411',
'TREMAINE       0.001 77.262  18412',
'TRAVERSO       0.001 77.263  18413',
'TORES          0.001 77.263  18414',
'TOLAN          0.001 77.264  18415',
'TILLISON       0.001 77.264  18416',
'TIETJEN        0.001 77.265  18417',
'TEE            0.001 77.266  18418',
'TEACHOUT       0.001 77.266  18419',
'TAUBE          0.001 77.267  18420',
'TATHAM         0.001 77.267  18421',
'TARWATER       0.001 77.268  18422',
'TARBELL        0.001 77.268  18423',
'SYDOW          0.001 77.269  18424',
'SY             0.001 77.269  18425',
'SWIMS          0.001 77.270  18426',
'SWADER         0.001 77.270  18427',
'STRIPLIN       0.001 77.271  18428',
'STOPS          0.001 77.271  18429',
'STOLTENBERG    0.001 77.272  18430',
'STEINHAUER     0.001 77.272  18431',
'STEIL          0.001 77.273  18432',
'STEIGERWALD    0.001 77.273  18433',
'STARKWEATHER   0.001 77.274  18434',
'STALLMAN       0.001 77.274  18435',
'SQUIER         0.001 77.275  18436',
'SPARACINO      0.001 77.275  18437',
'SPAN           0.001 77.276  18438',
'SPADAFORA      0.001 77.276  18439',
'SHIFLET        0.001 77.277  18440',
'SHIBATA        0.001 77.277  18441',
'SHEVLIN        0.001 77.278  18442',
'SHERRICK       0.001 77.278  18443',
'SHAKE          0.001 77.279  18444',
'SESSUMS        0.001 77.279  18445',
'SERVAIS        0.001 77.280  18446',
'SENTERS        0.001 77.280  18447',
'SEEVERS        0.001 77.281  18448',
'SEELYE         0.001 77.281  18449',
'SEARFOSS       0.001 77.282  18450',
'SEABROOKS      0.001 77.282  18451',
'SCOLES         0.001 77.283  18452',
'SCHWAGER       0.001 77.283  18453',
'SCHROM         0.001 77.284  18454',
'SCHMELTZER     0.001 77.284  18455',
'SCHEFFEL       0.001 77.285  18456',
'SAX            0.001 77.285  18457',
'SAWIN          0.001 77.286  18458',
'SATERFIEL      0.001 77.286  18459',
'SARDINA        0.001 77.287  18460',
'SANROMAN       0.001 77.287  18461',
'SANE           0.001 77.288  18462',
'SANDIN         0.001 77.288  18463',
'SALAMANCA      0.001 77.289  18464',
'SALADIN        0.001 77.289  18465',
'SAK            0.001 77.290  18466',
'SABIA          0.001 77.290  18467',
'RUSTIN         0.001 77.291  18468',
'RUSHIN         0.001 77.291  18469',
'RULEY          0.001 77.292  18470',
'RUETER         0.001 77.292  18471',
'ROW            0.001 77.293  18472',
'ROTTER         0.001 77.293  18473',
'ROSENZWEIG     0.001 77.294  18474',
'ROLES          0.001 77.294  18475',
'ROHE           0.001 77.295  18476',
'RODER          0.001 77.296  18477',
'ROCKEY         0.001 77.296  18478',
'RO             0.001 77.297  18479',
'RITER          0.001 77.297  18480',
'RIETH          0.001 77.298  18481',
'RIED           0.001 77.298  18482',
'RIDING         0.001 77.299  18483',
'RIDDLES        0.001 77.299  18484',
'RIDDER         0.001 77.300  18485',
'RENNICK        0.001 77.300  18486',
'REMMERS        0.001 77.301  18487',
'REMER          0.001 77.301  18488',
'RELYEA         0.001 77.302  18489',
'REILLEY        0.001 77.302  18490',
'REDER          0.001 77.303  18491',
'RASHEED        0.001 77.303  18492',
'RAKOWSKI       0.001 77.304  18493',
'RABIN          0.001 77.304  18494',
'QUEENER        0.001 77.305  18495',
'PURSEL         0.001 77.305  18496',
'PRUE           0.001 77.306  18497',
'PROWELL        0.001 77.306  18498',
'PRITTS         0.001 77.307  18499',
'PRIMO          0.001 77.307  18500',
'PRESLER        0.001 77.308  18501',
'POUNCY         0.001 77.308  18502',
'PORCHE         0.001 77.309  18503',
'PORCARO        0.001 77.309  18504',
'POLLMAN        0.001 77.310  18505',
'PLEAS          0.001 77.310  18506',
'PLANAS         0.001 77.311  18507',
'PINKLEY        0.001 77.311  18508',
'PINEGAR        0.001 77.312  18509',
'PILGER         0.001 77.312  18510',
'PHILSON        0.001 77.313  18511',
'PETTIES        0.001 77.313  18512',
'PERRODIN       0.001 77.314  18513',
'PENDERGRAST    0.001 77.314  18514',
'PATAO          0.001 77.315  18515',
'PASTERNAK      0.001 77.315  18516',
'PASSARELLI     0.001 77.316  18517',
'PASKO          0.001 77.316  18518',
'PARSHALL       0.001 77.317  18519',
'PANOS          0.001 77.317  18520',
'PANELLA        0.001 77.318  18521',
'PALOMBO        0.001 77.318  18522',
'PADILLO        0.001 77.319  18523',
'OYAMA          0.001 77.319  18524',
'OVERLOCK       0.001 77.320  18525',
'OVERBECK       0.001 77.320  18526',
'OTTERSON       0.001 77.321  18527',
'ORRELL         0.001 77.321  18528',
'ORNELLAS       0.001 77.322  18529',
'OPITZ          0.001 77.322  18530',
'OKELLY         0.001 77.323  18531',
'OFFICER        0.001 77.323  18532',
'OBANDO         0.001 77.324  18533',
'NOGGLE         0.001 77.325  18534',
'NICOSIA        0.001 77.325  18535',
'NETTO          0.001 77.326  18536',
'NEGRIN         0.001 77.326  18537',
'NATALI         0.001 77.327  18538',
'NAKAYAMA       0.001 77.327  18539',
'NAGAO          0.001 77.328  18540',
'NADEL          0.001 77.328  18541',
'MUSIAL         0.001 77.329  18542',
'MURRILL        0.001 77.329  18543',
'MURRAH         0.001 77.330  18544',
'MUNSCH         0.001 77.330  18545',
'MUCCI          0.001 77.331  18546',
'MROZEK         0.001 77.331  18547',
'MOYES          0.001 77.332  18548',
'MOWRER         0.001 77.332  18549',
'MORIS          0.001 77.333  18550',
'MORAIS         0.001 77.333  18551',
'MOORHOUSE      0.001 77.334  18552',
'MONICO         0.001 77.334  18553',
'MONE           0.001 77.335  18554',
'MONDY          0.001 77.335  18555',
'MONCAYO        0.001 77.336  18556',
'MOLE           0.001 77.336  18557',
'MILTENBERGER   0.001 77.337  18558',
'MILSAP         0.001 77.337  18559',
'MILONE         0.001 77.338  18560',
'MILLIKIN       0.001 77.338  18561',
'MILARDO        0.001 77.339  18562',
'MIKA           0.001 77.339  18563',
'MICHEALS       0.001 77.340  18564',
'MICCO          0.001 77.340  18565',
'MEYERSON       0.001 77.341  18566',
'MERICLE        0.001 77.341  18567',
'MENDELL        0.001 77.342  18568',
'MEINHARDT      0.001 77.342  18569',
'MEACHUM        0.001 77.343  18570',
'MCLEROY        0.001 77.343  18571',
'MCGRAY         0.001 77.344  18572',
'MCGONIGAL      0.001 77.344  18573',
'MAULTSBY       0.001 77.345  18574',
'MATIS          0.001 77.345  18575',
'MATHENEY       0.001 77.346  18576',
'MATAMOROS      0.001 77.346  18577',
'MARRO          0.001 77.347  18578',
'MARCIL         0.001 77.347  18579',
'MARCIAL        0.001 77.348  18580',
'MANTZ          0.001 77.348  18581',
'MANNINGS       0.001 77.349  18582',
'MALTBY         0.001 77.349  18583',
'MALCHOW        0.001 77.350  18584',
'MAIORANO       0.001 77.350  18585',
'MAHN           0.001 77.351  18586',
'MAHLUM         0.001 77.351  18587',
'MAGLIO         0.001 77.352  18588',
'MAE            0.001 77.352  18589',
'MABERRY        0.001 77.353  18590',
'LUSTIG         0.001 77.354  18591',
'LUELLEN        0.001 77.354  18592',
'LONGWELL       0.001 77.355  18593',
'LONGENECKER    0.001 77.355  18594',
'LOFLAND        0.001 77.356  18595',
'LOCASCIO       0.001 77.356  18596',
'LINNEY         0.001 77.357  18597',
'LINNEMAN       0.001 77.357  18598',
'LIGHTY         0.001 77.358  18599',
'LEVELL         0.001 77.358  18600',
'LEVAY          0.001 77.359  18601',
'LENAHAN        0.001 77.359  18602',
'LEMEN          0.001 77.360  18603',
'LEHTO          0.001 77.360  18604',
'LEBARON        0.001 77.361  18605',
'LANCTOT        0.001 77.361  18606',
'LAMY           0.001 77.362  18607',
'LAINEZ         0.001 77.362  18608',
'LAFFOON        0.001 77.363  18609',
'LABOMBARD      0.001 77.363  18610',
'KUJAWSKI       0.001 77.364  18611',
'KROGER         0.001 77.364  18612',
'KREUTZER       0.001 77.365  18613',
'KORHONEN       0.001 77.365  18614',
'KONDO          0.001 77.366  18615',
'KOLLMAN        0.001 77.366  18616',
'KOHAN          0.001 77.367  18617',
'KOGUT          0.001 77.367  18618',
'KNAUS          0.001 77.368  18619',
'KIVI           0.001 77.368  18620',
'KITTEL         0.001 77.369  18621',
'KINNER         0.001 77.369  18622',
'KINDIG         0.001 77.370  18623',
'KINDEL         0.001 77.370  18624',
'KIESEL         0.001 77.371  18625',
'KIDNEY         0.001 77.371  18626',
'KIBBY          0.001 77.372  18627',
'KHANG          0.001 77.372  18628',
'KETTLER        0.001 77.373  18629',
'KETTERER       0.001 77.373  18630',
'KEPNER         0.001 77.374  18631',
'KELLIHER       0.001 77.374  18632',
'KEENUM         0.001 77.375  18633',
'KANODE         0.001 77.375  18634',
'KAIL           0.001 77.376  18635',
'JULY           0.001 77.376  18636',
'JUHASZ         0.001 77.377  18637',
'JOWETT         0.001 77.377  18638',
'JOLICOEUR      0.001 77.378  18639',
'JEON           0.001 77.378  18640',
'ISER           0.001 77.379  18641',
'INGRASSIA      0.001 77.379  18642',
'IMAI           0.001 77.380  18643',
'HUTCHCRAFT     0.001 77.380  18644',
'HUMISTON       0.001 77.381  18645',
'HULINGS        0.001 77.381  18646',
'HUKILL         0.001 77.382  18647',
'HUIZENGA       0.001 77.383  18648',
'HUGLEY         0.001 77.383  18649',
'HUDDLE         0.001 77.384  18650',
'HOSE           0.001 77.384  18651',
'HORNYAK        0.001 77.385  18652',
'HODDER         0.001 77.385  18653',
'HISLE          0.001 77.386  18654',
'HILLENBRAND    0.001 77.386  18655',
'HILLE          0.001 77.387  18656',
'HIGUCHI        0.001 77.387  18657',
'HERTZLER       0.001 77.388  18658',
'HERDON         0.001 77.388  18659',
'HEPPNER        0.001 77.389  18660',
'HEPP           0.001 77.389  18661',
'HEITMANN       0.001 77.390  18662',
'HECKART        0.001 77.390  18663',
'HAZLEWOOD      0.001 77.391  18664',
'HAYLES         0.001 77.391  18665',
'HAYEK          0.001 77.392  18666',
'HAWTHORN       0.001 77.392  18667',
'HAWKIN         0.001 77.393  18668',
'HAUGLAND       0.001 77.393  18669',
'HASLER         0.001 77.394  18670',
'HARBUCK        0.001 77.394  18671',
'HAPPEL         0.001 77.395  18672',
'HAMBLY         0.001 77.395  18673',
'HAMBLETON      0.001 77.396  18674',
'HAGAMAN        0.001 77.396  18675',
'GUZZI          0.001 77.397  18676',
'GULLETTE       0.001 77.397  18677',
'GUINYARD       0.001 77.398  18678',
'GROGG          0.001 77.398  18679',
'GRISE          0.001 77.399  18680',
'GRIFFING       0.001 77.399  18681',
'GOTO           0.001 77.400  18682',
'GOSNEY         0.001 77.400  18683',
'GOODS          0.001 77.401  18684',
'GOLEY          0.001 77.401  18685',
'GOLDBLATT      0.001 77.402  18686',
'GLEDHILL       0.001 77.402  18687',
'GIRTON         0.001 77.403  18688',
'GILTNER        0.001 77.403  18689',
'GILLOCK        0.001 77.404  18690',
'GILHAM         0.001 77.404  18691',
'GILFILLAN      0.001 77.405  18692',
'GIBLIN         0.001 77.405  18693',
'GENTNER        0.001 77.406  18694',
'GEHLERT        0.001 77.406  18695',
'GEHL           0.001 77.407  18696',
'GARTEN         0.001 77.407  18697',
'GARNEY         0.001 77.408  18698',
'GARLOW         0.001 77.408  18699',
'GARETT         0.001 77.409  18700',
'GALLES         0.001 77.409  18701',
'GALEANA        0.001 77.410  18702',
'FUTRAL         0.001 77.410  18703',
'FUHR           0.001 77.411  18704',
'FRIEDLAND      0.001 77.412  18705',
'FRANSON        0.001 77.412  18706',
'FRANSEN        0.001 77.413  18707',
'FOULDS         0.001 77.413  18708',
'FOLLMER        0.001 77.414  18709',
'FOLAND         0.001 77.414  18710',
'FLAX           0.001 77.415  18711',
'FLAVIN         0.001 77.415  18712',
'FIRKINS        0.001 77.416  18713',
'FILLION        0.001 77.416  18714',
'FIGUEREDO      0.001 77.417  18715',
'FERRILL        0.001 77.417  18716',
'FENSTER        0.001 77.418  18717',
'FENLEY         0.001 77.418  18718',
'FAUVER         0.001 77.419  18719',
'FARFAN         0.001 77.419  18720',
'FACTOR         0.001 77.420  18721',
'EUSTICE        0.001 77.420  18722',
'EPPLER         0.001 77.421  18723',
'ENGELMAN       0.001 77.421  18724',
'ENGELKE        0.001 77.422  18725',
'EMMER          0.001 77.422  18726',
'ELZY           0.001 77.423  18727',
'ELLWOOD        0.001 77.423  18728',
'ELLERBEE       0.001 77.424  18729',
'ELKS           0.001 77.424  18730',
'EHRET          0.001 77.425  18731',
'EBBERT         0.001 77.425  18732',
'DURRAH         0.001 77.426  18733',
'DUPRAS         0.001 77.426  18734',
'DUBUQUE        0.001 77.427  18735',
'DRAGOO         0.001 77.427  18736',
'DONLON         0.001 77.428  18737',
'DOLLOFF        0.001 77.428  18738',
'DOI            0.001 77.429  18739',
'DIBELLA        0.001 77.429  18740',
'DERRICO        0.001 77.430  18741',
'DEMKO          0.001 77.430  18742',
'DEMAR          0.001 77.431  18743',
'DARRINGTON     0.001 77.431  18744',
'CZAPLA         0.001 77.432  18745',
'CROOKER        0.001 77.432  18746',
'CREAGH         0.001 77.433  18747',
'CRANOR         0.001 77.433  18748',
'CRANER         0.001 77.434  18749',
'CRAFTS         0.001 77.434  18750',
'CRABILL        0.001 77.435  18751',
'COYER          0.001 77.435  18752',
'COWMAN         0.001 77.436  18753',
'COWHERD        0.001 77.436  18754',
'COTTONE        0.001 77.437  18755',
'COSTILLO       0.001 77.437  18756',
'COSTER         0.001 77.438  18757',
'COSTAS         0.001 77.438  18758',
'COSENZA        0.001 77.439  18759',
'CORKER         0.001 77.439  18760',
'COLLINSON      0.001 77.440  18761',
'COELLO         0.001 77.441  18762',
'CLINGMAN       0.001 77.441  18763',
'CLINGERMAN     0.001 77.442  18764',
'CLABORN        0.001 77.442  18765',
'CITIZEN        0.001 77.443  18766',
'CHMURA         0.001 77.443  18767',
'CHAUSSE        0.001 77.444  18768',
'CHAUDHRY       0.001 77.444  18769',
'CHAPELL        0.001 77.445  18770',
'CHANCY         0.001 77.445  18771',
'CERRONE        0.001 77.446  18772',
'CAVES          0.001 77.446  18773',
'CAVERLY        0.001 77.447  18774',
'CAULKINS       0.001 77.447  18775',
'CARN           0.001 77.448  18776',
'CAMPFIELD      0.001 77.448  18777',
'CAMPANELLI     0.001 77.449  18778',
'CALLAHAM       0.001 77.449  18779',
'CADORETTE      0.001 77.450  18780',
'BUTKOVICH      0.001 77.450  18781',
'BUSKE          0.001 77.451  18782',
'BURRIER        0.001 77.451  18783',
'BURKLEY        0.001 77.452  18784',
'BUNYARD        0.001 77.452  18785',
'BUDGE          0.001 77.453  18786',
'BUCKELEW       0.001 77.453  18787',
'BUCHHEIT       0.001 77.454  18788',
'BROMAN         0.001 77.454  18789',
'BRESCIA        0.001 77.455  18790',
'BRASEL         0.001 77.455  18791',
'BRAIN          0.001 77.456  18792',
'BOYSTER        0.001 77.456  18793',
'BOOE           0.001 77.457  18794',
'BONOMO         0.001 77.457  18795',
'BONNET         0.001 77.458  18796',
'BONDI          0.001 77.458  18797',
'BOHNSACK       0.001 77.459  18798',
'BOBBY          0.001 77.459  18799',
'BLOMBERG       0.001 77.460  18800',
'BLANFORD       0.001 77.460  18801',
'BILDERBACK     0.001 77.461  18802',
'BIGGINS        0.001 77.461  18803',
'BENTLY         0.001 77.462  18804',
'BEHRENDS       0.001 77.462  18805',
'BEEGLE         0.001 77.463  18806',
'BEDOYA         0.001 77.463  18807',
'BECHTOL        0.001 77.464  18808',
'BEAUBIEN       0.001 77.464  18809',
'BAYERL         0.001 77.465  18810',
'BAUMGART       0.001 77.465  18811',
'BAUMEISTER     0.001 77.466  18812',
'BARRATT        0.001 77.466  18813',
'BARLOWE        0.001 77.467  18814',
'BARKMAN        0.001 77.467  18815',
'BARBAGALLO     0.001 77.468  18816',
'BALDREE        0.001 77.468  18817',
'BAINE          0.001 77.469  18818',
'BAIL           0.001 77.470  18819',
'BAGGS          0.001 77.470  18820',
'BACOTE         0.001 77.471  18821',
'AYLWARD        0.001 77.471  18822',
'ASHURST        0.001 77.472  18823',
'ARVIDSON       0.001 77.472  18824',
'ARTHURS        0.001 77.473  18825',
'ARRIETA        0.001 77.473  18826',
'ARREY          0.001 77.474  18827',
'ARREGUIN       0.001 77.474  18828',
'ARRANT         0.001 77.475  18829',
'ARNER          0.001 77.475  18830',
'ARMOR          0.001 77.476  18831',
'ARIZMENDI      0.001 77.476  18832',
'ANKER          0.001 77.477  18833',
'AMIS           0.001 77.477  18834',
'AMEND          0.001 77.478  18835',
'ALPHIN         0.001 77.478  18836',
'ALLBRIGHT      0.001 77.479  18837',
'AIKIN          0.001 77.479  18838',
'ACRES          0.001 77.480  18839',
'ZUPAN          0.000 77.480  18840',
'ZUCHOWSKI      0.000 77.481  18841',
'ZEOLLA         0.000 77.481  18842',
'ZANCHEZ        0.000 77.482  18843',
'ZAHRADNIK      0.000 77.482  18844',
'ZAHLER         0.000 77.483  18845',
'YOUNAN         0.000 77.483  18846',
'YEATER         0.000 77.484  18847',
'YEARTA         0.000 77.484  18848',
'YARRINGTON     0.000 77.485  18849',
'YANTIS         0.000 77.485  18850',
'WOOMER         0.000 77.486  18851',
'WOLLARD        0.000 77.486  18852',
'WOLFINGER      0.000 77.487  18853',
'WOERNER        0.000 77.487  18854',
'WITEK          0.000 77.488  18855',
'WISHON         0.000 77.488  18856',
'WISENER        0.000 77.489  18857',
'WINGERTER      0.000 77.489  18858',
'WILLET         0.000 77.490  18859',
'WILDING        0.000 77.490  18860',
'WIEDEMANN      0.000 77.491  18861',
'WEISEL         0.000 77.491  18862',
'WEDEKING       0.000 77.492  18863',
'WEARY          0.000 77.492  18864',
'WAYBRIGHT      0.000 77.492  18865',
'WARDWELL       0.000 77.493  18866',
'WALKINS        0.000 77.493  18867',
'WALDORF        0.000 77.494  18868',
'VOTH           0.000 77.494  18869',
'VOIT           0.000 77.495  18870',
'VIRDEN         0.000 77.495  18871',
'VILORIA        0.000 77.496  18872',
'VILLAGRAN      0.000 77.496  18873',
'VASTA          0.000 77.497  18874',
'VASHON         0.000 77.497  18875',
'VAQUERA        0.000 77.498  18876',
'VANTASSELL     0.000 77.498  18877',
'VANDERLINDEN   0.000 77.499  18878',
'VANDERGRIFT    0.000 77.499  18879',
'VANCUREN       0.000 77.500  18880',
'VALENTA        0.000 77.500  18881',
'UNDERDAHL      0.000 77.501  18882',
'TYRA           0.000 77.501  18883',
'TYGART         0.000 77.502  18884',
'TWINING        0.000 77.502  18885',
'TWIFORD        0.000 77.503  18886',
'TURLINGTON     0.000 77.503  18887',
'TULLIUS        0.000 77.504  18888',
'TUBMAN         0.000 77.504  18889',
'TROWELL        0.000 77.505  18890',
'TRIEU          0.000 77.505  18891',
'TRANSUE        0.000 77.506  18892',
'TOUSANT        0.000 77.506  18893',
'TORGERSEN      0.000 77.507  18894',
'TOOKER         0.000 77.507  18895',
'TONY           0.000 77.508  18896',
'TOME           0.000 77.508  18897',
'TOMA           0.000 77.509  18898',
'TOCCI          0.000 77.509  18899',
'TIPPINS        0.000 77.510  18900',
'TINNER         0.000 77.510  18901',
'TIMLIN         0.000 77.511  18902',
'TILLINGHAST    0.000 77.511  18903',
'TIDMORE        0.000 77.512  18904',
'TETI           0.000 77.512  18905',
'TEDRICK        0.000 77.513  18906',
'TACEY          0.000 77.513  18907',
'SWANBERG       0.000 77.514  18908',
'SUNDE          0.000 77.514  18909',
'SUMMITT        0.000 77.515  18910',
'SUMMERFORD     0.000 77.515  18911',
'SUMMA          0.000 77.516  18912',
'SUE            0.000 77.516  18913',
'STRATMAN       0.000 77.517  18914',
'STRANDBERG     0.000 77.517  18915',
'STORCK         0.000 77.518  18916',
'STOBER         0.000 77.518  18917',
'STEITZ         0.000 77.519  18918',
'STAYER         0.000 77.519  18919',
'STAUBER        0.000 77.520  18920',
'STAIGER        0.000 77.520  18921',
'SPONAUGLE      0.000 77.521  18922',
'SPOFFORD       0.000 77.521  18923',
'SPARANO        0.000 77.522  18924',
'SPAGNOLA       0.000 77.522  18925',
'SOKOLOSKI      0.000 77.523  18926',
'SNAY           0.000 77.523  18927',
'SLOUGH         0.000 77.524  18928',
'SKOWRONSKI     0.000 77.524  18929',
'SIECK          0.000 77.525  18930',
'SHIMKUS        0.000 77.525  18931',
'SHETH          0.000 77.526  18932',
'SHERK          0.000 77.526  18933',
'SHANKLES       0.000 77.526  18934',
'SHAKESPEARE    0.000 77.527  18935',
'SHAHID         0.000 77.527  18936',
'SEVY           0.000 77.528  18937',
'SERGEANT       0.000 77.528  18938',
'SENEGAL        0.000 77.529  18939',
'SEIDEN         0.000 77.529  18940',
'SEIDELL        0.000 77.530  18941',
'SEARLS         0.000 77.530  18942',
'SEARIGHT       0.000 77.531  18943',
'SCHWALM        0.000 77.531  18944',
'SCHUG          0.000 77.532  18945',
'SCHILKE        0.000 77.532  18946',
'SCHIER         0.000 77.533  18947',
'SCHECK         0.000 77.533  18948',
'SAWTELLE       0.000 77.534  18949',
'SANTORE        0.000 77.534  18950',
'SANTA          0.000 77.535  18951',
'SANKS          0.000 77.535  18952',
'SANDQUIST      0.000 77.536  18953',
'SANDEN         0.000 77.536  18954',
'SALING         0.000 77.537  18955',
'SABINE         0.000 77.537  18956',
'SAATHOFF       0.000 77.538  18957',
'RYBERG         0.000 77.538  18958',
'RUSTAD         0.000 77.539  18959',
'RUFFING        0.000 77.539  18960',
'RUDNICKI       0.000 77.540  18961',
'RUANE          0.000 77.540  18962',
'ROZZI          0.000 77.541  18963',
'ROWSE          0.000 77.541  18964',
'ROSENAU        0.000 77.542  18965',
'RODES          0.000 77.542  18966',
'RISSER         0.000 77.543  18967',
'RIGGIN         0.000 77.543  18968',
'RIESS          0.000 77.544  18969',
'RIESE          0.000 77.544  18970',
'RHOTEN         0.000 77.545  18971',
'REINECKE       0.000 77.545  18972',
'REIGLE         0.000 77.546  18973',
'REICHLING      0.000 77.546  18974',
'REDNER         0.000 77.547  18975',
'REBELO         0.000 77.547  18976',
'RAYNES         0.000 77.548  18977',
'RAIMONDI       0.000 77.548  18978',
'RAHE           0.000 77.549  18979',
'RADA           0.000 77.549  18980',
'QUERRY         0.000 77.550  18981',
'QUELLETTE      0.000 77.550  18982',
'PULSIFER       0.000 77.551  18983',
'PROCHNOW       0.000 77.551  18984',
'PRETTY         0.000 77.552  18985',
'PRATO          0.000 77.552  18986',
'POULTON        0.000 77.553  18987',
'POUDRIER       0.000 77.553  18988',
'POLL           0.000 77.554  18989',
'POLICASTRO     0.000 77.554  18990',
'POLHEMUS       0.000 77.555  18991',
'POLASEK        0.000 77.555  18992',
'POISSANT       0.000 77.556  18993',
'POHLMANN       0.000 77.556  18994',
'PLOTNER        0.000 77.557  18995',
'PITKIN         0.000 77.557  18996',
'PITA           0.000 77.558  18997',
'PIO            0.000 77.558  18998',
'PINKETT        0.000 77.559  18999',
'PILOT          0.000 77.559  19000',
'PIEKARSKI      0.000 77.560  19001',
'PICHON         0.000 77.560  19002',
'PHILIPPE       0.000 77.560  19003',
'PFAU           0.000 77.561  19004',
'PETROFF        0.000 77.561  19005',
'PETERMANN      0.000 77.562  19006',
'PEPLINSKI      0.000 77.562  19007',
'PELLER         0.000 77.563  19008',
'PECINOVSKY     0.000 77.563  19009',
'PEARSE         0.000 77.564  19010',
'PATTILLO       0.000 77.564  19011',
'PATAGUE        0.000 77.565  19012',
'PARLIER        0.000 77.565  19013',
'PARENTI        0.000 77.566  19014',
'PARCHMAN       0.000 77.566  19015',
'PANE           0.000 77.567  19016',
'PAFF           0.000 77.567  19017',
'OTA            0.000 77.568  19018',
'ORTNER         0.000 77.568  19019',
'OROS           0.000 77.569  19020',
'NOLLEY         0.000 77.569  19021',
'NOAKES         0.000 77.570  19022',
'NIGH           0.000 77.570  19023',
'NICOLOSI       0.000 77.571  19024',
'NICOLAY        0.000 77.571  19025',
'NEWNAM         0.000 77.572  19026',
'NETTER         0.000 77.572  19027',
'NASS           0.000 77.573  19028',
'NAPOLES        0.000 77.573  19029',
'NAKATA         0.000 77.574  19030',
'NAKAMOTO       0.000 77.574  19031',
'MURIEL         0.000 77.575  19032',
'MUCK           0.000 77.575  19033',
'MORLOCK        0.000 77.576  19034',
'MORAGA         0.000 77.576  19035',
'MONTILLA       0.000 77.577  19036',
'MONGEAU        0.000 77.577  19037',
'MOLITOR        0.000 77.578  19038',
'MOHNEY         0.000 77.578  19039',
'MITCHENER      0.000 77.579  19040',
'MEYERHOFF      0.000 77.579  19041',
'MEDEL          0.000 77.580  19042',
'MCNIFF         0.000 77.580  19043',
'MCMONAGLE      0.000 77.581  19044',
'MCGLOWN        0.000 77.581  19045',
'MCGLINCHEY     0.000 77.582  19046',
'MCGARRITY      0.000 77.582  19047',
'MCCRIGHT       0.000 77.583  19048',
'MCCORVEY       0.000 77.583  19049',
'MCCONNEL       0.000 77.584  19050',
'MCCARGO        0.000 77.584  19051',
'MAZZEI         0.000 77.585  19052',
'MATULA         0.000 77.585  19053',
'MASTROIANNI    0.000 77.586  19054',
'MASSINGALE     0.000 77.586  19055',
'MARING         0.000 77.587  19056',
'MARICLE        0.000 77.587  19057',
'MARC           0.000 77.588  19058',
'MANS           0.000 77.588  19059',
'MANNON         0.000 77.589  19060',
'MANNIX         0.000 77.589  19061',
'MANNEY         0.000 77.590  19062',
'MANGER         0.000 77.590  19063',
'MANALO         0.000 77.591  19064',
'MALO           0.000 77.591  19065',
'MALAN          0.000 77.592  19066',
'MAHONY         0.000 77.592  19067',
'MADRIL         0.000 77.593  19068',
'MACKOWIAK      0.000 77.593  19069',
'MACKO          0.000 77.594  19070',
'MACINTOSH      0.000 77.594  19071',
'LURRY          0.000 77.595  19072',
'LUCZYNSKI      0.000 77.595  19073',
'LUCKE          0.000 77.595  19074',
'LUCARELLI      0.000 77.596  19075',
'LUCA           0.000 77.596  19076',
'LOUD           0.000 77.597  19077',
'LOU            0.000 77.597  19078',
'LOSEE          0.000 77.598  19079',
'LORENCE        0.000 77.598  19080',
'LOIACONO       0.000 77.599  19081',
'LOHSE          0.000 77.599  19082',
'LODER          0.000 77.600  19083',
'LIPARI         0.000 77.600  19084',
'LINEBARGER     0.000 77.601  19085',
'LINDAMOOD      0.000 77.601  19086',
'LIMBAUGH       0.000 77.602  19087',
'LETTS          0.000 77.602  19088',
'LELEUX         0.000 77.603  19089',
'LEEP           0.000 77.603  19090',
'LEEDER         0.000 77.604  19091',
'LEARD          0.000 77.604  19092',
'LAXSON         0.000 77.605  19093',
'LAWRY          0.000 77.605  19094',
'LAVERDIERE     0.000 77.606  19095',
'LAUGHTON       0.000 77.606  19096',
'LASTRA         0.000 77.607  19097',
'KUREK          0.000 77.607  19098',
'KRISS          0.000 77.608  19099',
'KRISHNAN       0.000 77.608  19100',
'KRETSCHMER     0.000 77.609  19101',
'KREBSBACH      0.000 77.609  19102',
'KONTOS         0.000 77.610  19103',
'KNOBEL         0.000 77.610  19104',
'KNAUF          0.000 77.611  19105',
'KLICK          0.000 77.611  19106',
'KLEVEN         0.000 77.612  19107',
'KLAWITTER      0.000 77.612  19108',
'KITCHIN        0.000 77.613  19109',
'KIRKENDOLL     0.000 77.613  19110',
'KINKEL         0.000 77.614  19111',
'KINGREY        0.000 77.614  19112',
'KILBOURN       0.000 77.615  19113',
'KENSINGER      0.000 77.615  19114',
'KENNERLY       0.000 77.616  19115',
'KAMIN          0.000 77.616  19116',
'JUSTINIANO     0.000 77.617  19117',
'JUREK          0.000 77.617  19118',
'JUNKIN         0.000 77.618  19119',
'JULIA          0.000 77.618  19120',
'JUDON          0.000 77.619  19121',
'JORDAHL        0.000 77.619  19122',
'JEANES         0.000 77.620  19123',
'JARRELLS       0.000 77.620  19124',
'JAMAL          0.000 77.621  19125',
'IWAMOTO        0.000 77.621  19126',
'ISREAL         0.000 77.622  19127',
'ISHIDA         0.000 77.622  19128',
'INES           0.000 77.623  19129',
'IMMEL          0.000 77.623  19130',
'IMAN           0.000 77.624  19131',
'IHLE           0.000 77.624  19132',
'HYRE           0.000 77.625  19133',
'HURN           0.000 77.625  19134',
'HUNN           0.000 77.626  19135',
'HULTMAN        0.000 77.626  19136',
'HUFFSTETLER    0.000 77.627  19137',
'HUFFER         0.000 77.627  19138',
'HUBNER         0.000 77.628  19139',
'HOWEY          0.000 77.628  19140',
'HORNEY         0.000 77.629  19141',
'HOOTON         0.000 77.629  19142',
'HOLTS          0.000 77.629  19143',
'HOLSCHER       0.000 77.630  19144',
'HOLEN          0.000 77.630  19145',
'HOGGATT        0.000 77.631  19146',
'HILAIRE        0.000 77.631  19147',
'HERZ           0.000 77.632  19148',
'HENNE          0.000 77.632  19149',
'HELSTROM       0.000 77.633  19150',
'HELLICKSON     0.000 77.633  19151',
'HEINLEIN       0.000 77.634  19152',
'HECKATHORN     0.000 77.634  19153',
'HECKARD        0.000 77.635  19154',
'HEATHER        0.000 77.635  19155',
'HEART          0.000 77.636  19156',
'HEADLEE        0.000 77.636  19157',
'HAUPTMAN       0.000 77.637  19158',
'HAUGHEY        0.000 77.637  19159',
'HATT           0.000 77.638  19160',
'HARRING        0.000 77.638  19161',
'HARFORD        0.000 77.639  19162',
'HAMMILL        0.000 77.639  19163',
'HAMED          0.000 77.640  19164',
'HALPERIN       0.000 77.640  19165',
'HAIG           0.000 77.641  19166',
'HAGWOOD        0.000 77.641  19167',
'HAGSTROM       0.000 77.642  19168',
'GUNNELLS       0.000 77.642  19169',
'GUNDLACH       0.000 77.643  19170',
'GUARDIOLA      0.000 77.643  19171',
'GREENO         0.000 77.644  19172',
'GREENLAND      0.000 77.644  19173',
'GONCE          0.000 77.645  19174',
'GOLDSBY        0.000 77.645  19175',
'GOBEL          0.000 77.646  19176',
'GISI           0.000 77.646  19177',
'GILLINS        0.000 77.647  19178',
'GILLIE         0.000 77.647  19179',
'GERMANO        0.000 77.648  19180',
'GEIBEL         0.000 77.648  19181',
'GAUGER         0.000 77.649  19182',
'GARRIOTT       0.000 77.649  19183',
'GARBARINO      0.000 77.650  19184',
'GANDER         0.000 77.650  19185',
'GAJEWSKI       0.000 77.651  19186',
'FUNARI         0.000 77.651  19187',
'FULLBRIGHT     0.000 77.652  19188',
'FUELL          0.000 77.652  19189',
'FRITZLER       0.000 77.653  19190',
'FRESHWATER     0.000 77.653  19191',
'FREAS          0.000 77.654  19192',
'FORTINO        0.000 77.654  19193',
'FORBUS         0.000 77.655  19194',
'FONDA          0.000 77.655  19195',
'FLOHR          0.000 77.656  19196',
'FLEMISTER      0.000 77.656  19197',
'FISCH          0.000 77.657  19198',
'FINKS          0.000 77.657  19199',
'FENSTERMAKER   0.000 77.658  19200',
'FELDSTEIN      0.000 77.658  19201',
'FAW            0.000 77.659  19202',
'FARHAT         0.000 77.659  19203',
'FARAH          0.000 77.660  19204',
'FANKHAUSER     0.000 77.660  19205',
'FAGG           0.000 77.661  19206',
'FADER          0.000 77.661  19207',
'EXLINE         0.000 77.662  19208',
'EMIGH          0.000 77.662  19209',
'EGUIA          0.000 77.663  19210',
'EDMAN          0.000 77.663  19211',
'ECKLER         0.000 77.663  19212',
'EASTBURN       0.000 77.664  19213',
'DY             0.000 77.664  19214',
'DUNMORE        0.000 77.665  19215',
'DUBUISSON      0.000 77.665  19216',
'DUBINSKY       0.000 77.666  19217',
'DRAYER         0.000 77.666  19218',
'DOVERSPIKE     0.000 77.667  19219',
'DOUBLEDAY      0.000 77.667  19220',
'DOTEN          0.000 77.668  19221',
'DORNER         0.000 77.668  19222',
'DOLSON         0.000 77.669  19223',
'DOHRMANN       0.000 77.669  19224',
'DISLA          0.000 77.670  19225',
'DIRENZO        0.000 77.670  19226',
'DIPAOLA        0.000 77.671  19227',
'DINES          0.000 77.671  19228',
'DICKIE         0.000 77.672  19229',
'DIBLASI        0.000 77.672  19230',
'DEWOLF         0.000 77.673  19231',
'DESANTI        0.000 77.673  19232',
'DENNEHY        0.000 77.674  19233',
'DEMMING        0.000 77.674  19234',
'DELKER         0.000 77.675  19235',
'DECOLA         0.000 77.675  19236',
'DAVILLA        0.000 77.676  19237',
'DAVIDS         0.000 77.676  19238',
'DAUGHTRIDGE    0.000 77.677  19239',
'DARVILLE       0.000 77.677  19240',
'DARLAND        0.000 77.678  19241',
'DANZY          0.000 77.678  19242',
'DANDY          0.000 77.679  19243',
'DAGENAIS       0.000 77.679  19244',
'CULOTTA        0.000 77.680  19245',
'CRUZADO        0.000 77.680  19246',
'CRUDUP         0.000 77.681  19247',
'CROSWELL       0.000 77.681  19248',
'COVERDALE      0.000 77.682  19249',
'COVELLI        0.000 77.682  19250',
'COUTS          0.000 77.683  19251',
'CORBELL        0.000 77.683  19252',
'COPLAN         0.000 77.684  19253',
'COOLBAUGH      0.000 77.684  19254',
'CONYER         0.000 77.685  19255',
'CONLEE         0.000 77.685  19256',
'CONIGLIARO     0.000 77.686  19257',
'COMISKEY       0.000 77.686  19258',
'COBERLY        0.000 77.687  19259',
'CLENDENING     0.000 77.687  19260',
'CLAIRMONT      0.000 77.688  19261',
'CIENFUEGOS     0.000 77.688  19262',
'CHOJNACKI      0.000 77.689  19263',
'CHILCOTE       0.000 77.689  19264',
'CHAMPNEY       0.000 77.690  19265',
'CASSARA        0.000 77.690  19266',
'CASAZZA        0.000 77.691  19267',
'CASADO         0.000 77.691  19268',
'CAREW          0.000 77.692  19269',
'CARBIN         0.000 77.692  19270',
'CARABAJAL      0.000 77.693  19271',
'CALCAGNI       0.000 77.693  19272',
'CAIL           0.000 77.694  19273',
'CADDY          0.000 77.694  19274',
'BUSBEE         0.000 77.695  19275',
'BURTS          0.000 77.695  19276',
'BURBRIDGE      0.000 77.696  19277',
'BUNGE          0.000 77.696  19278',
'BUNDICK        0.000 77.697  19279',
'BUHLER         0.000 77.697  19280',
'BUCKER         0.000 77.698  19281',
'BUCHOLTZ       0.000 77.698  19282',
'BRUEN          0.000 77.698  19283',
'BROCE          0.000 77.699  19284',
'BRITE          0.000 77.699  19285',
'BRIGNAC        0.000 77.700  19286',
'BRIERLY        0.000 77.700  19287',
'BRIDGMAN       0.000 77.701  19288',
'BRAHAM         0.000 77.701  19289',
'BRADISH        0.000 77.702  19290',
'BOYINGTON      0.000 77.702  19291',
'BORJAS         0.000 77.703  19292',
'BONNIE         0.000 77.703  19293',
'BONN           0.000 77.704  19294',
'BONHOMME       0.000 77.704  19295',
'BOHLEN         0.000 77.705  19296',
'BOGARDUS       0.000 77.705  19297',
'BOCKELMAN      0.000 77.706  19298',
'BLICK          0.000 77.706  19299',
'BLACKERBY      0.000 77.707  19300',
'BIZIER         0.000 77.707  19301',
'BIRO           0.000 77.708  19302',
'BINNEY         0.000 77.708  19303',
'BERTOLINI      0.000 77.709  19304',
'BERTIN         0.000 77.709  19305',
'BERTI          0.000 77.710  19306',
'BERT           0.000 77.710  19307',
'BENTO          0.000 77.711  19308',
'BENO           0.000 77.711  19309',
'BELGARDE       0.000 77.712  19310',
'BELDING        0.000 77.712  19311',
'BECKEL         0.000 77.713  19312',
'BECERRIL       0.000 77.713  19313',
'BAZALDUA       0.000 77.714  19314',
'BAYES          0.000 77.714  19315',
'BAYARD         0.000 77.715  19316',
'BARRUS         0.000 77.715  19317',
'BARRIS         0.000 77.716  19318',
'BAROS          0.000 77.716  19319',
'BARA           0.000 77.717  19320',
'BALLOW         0.000 77.717  19321',
'BALBOA         0.000 77.718  19322',
'BAKEWELL       0.000 77.718  19323',
'BAGINSKI       0.000 77.719  19324',
'BADALAMENTI    0.000 77.719  19325',
'BACKHAUS       0.000 77.720  19326',
'AVILEZ         0.000 77.720  19327',
'AUVIL          0.000 77.721  19328',
'ATTEBERRY      0.000 77.721  19329',
'ARDON          0.000 77.722  19330',
'ANZALDUA       0.000 77.722  19331',
'ANELLO         0.000 77.723  19332',
'AMSLER         0.000 77.723  19333',
'AMO            0.000 77.724  19334',
'AMBROSIO       0.000 77.724  19335',
'ALTHOUSE       0.000 77.725  19336',
'ALLES          0.000 77.725  19337',
'ALIX           0.000 77.726  19338',
'ALBERTI        0.000 77.726  19339',
'ALBERSON       0.000 77.727  19340',
'AITCHISON      0.000 77.727  19341',
'AGUINAGA       0.000 77.728  19342',
'ZIEMANN        0.000 77.728  19343',
'ZICKEFOOSE     0.000 77.729  19344',
'ZERR           0.000 77.729  19345',
'ZEH            0.000 77.729  19346',
'ZECK           0.000 77.730  19347',
'ZARTMAN        0.000 77.730  19348',
'ZAHM           0.000 77.731  19349',
'ZABRISKIE      0.000 77.731  19350',
'YOHN           0.000 77.732  19351',
'YELLOWHAIR     0.000 77.732  19352',
'YEATON         0.000 77.733  19353',
'YARNALL        0.000 77.733  19354',
'YAPLE          0.000 77.734  19355',
'WOLSKI         0.000 77.734  19356',
'WIXON          0.000 77.735  19357',
'WINFORD        0.000 77.735  19358',
'WILLNER        0.000 77.736  19359',
'WILLMS         0.000 77.736  19360',
'WHITSITT       0.000 77.737  19361',
'WHEELWRIGHT    0.000 77.737  19362',
'WEYANDT        0.000 77.738  19363',
'WESS           0.000 77.738  19364',
'WENGERD        0.000 77.739  19365',
'WEATHERHOLTZ   0.000 77.739  19366',
'WATTENBARGER   0.000 77.739  19367',
'WALRATH        0.000 77.740  19368',
'WALPOLE        0.000 77.740  19369',
'WALDRIP        0.000 77.741  19370',
'VOGES          0.000 77.741  19371',
'VIOLET         0.000 77.742  19372',
'VINZANT        0.000 77.742  19373',
'VIARS          0.000 77.743  19374',
'VERES          0.000 77.743  19375',
'VENEZIANO      0.000 77.744  19376',
'VEILLON        0.000 77.744  19377',
'VAWTER         0.000 77.745  19378',
'VAUGHNS        0.000 77.745  19379',
'VANWART        0.000 77.746  19380',
'VANOSTRAND     0.000 77.746  19381',
'VALIENTE       0.000 77.747  19382',
'VALDERAS       0.000 77.747  19383',
'UHRIG          0.000 77.748  19384',
'TUNISON        0.000 77.748  19385',
'TULLOCH        0.000 77.749  19386',
'TROSTLE        0.000 77.749  19387',
'TREASTER       0.000 77.750  19388',
'TRAYWICK       0.000 77.750  19389',
'TOYE           0.000 77.750  19390',
'TOMSON         0.000 77.751  19391',
'TOMASELLO      0.000 77.751  19392',
'TOMASEK        0.000 77.752  19393',
'TIPPIT         0.000 77.752  19394',
'TINAJERO       0.000 77.753  19395',
'TIFT           0.000 77.753  19396',
'TIENDA         0.000 77.754  19397',
'THORINGTON     0.000 77.754  19398',
'THIERRY        0.000 77.755  19399',
'THIEME         0.000 77.755  19400',
'THIBEAU        0.000 77.756  19401',
'THAKKAR        0.000 77.756  19402',
'TEWELL         0.000 77.757  19403',
'TEST           0.000 77.757  19404',
'TELFER         0.000 77.758  19405',
'SWEETSER       0.000 77.758  19406',
'SUM            0.000 77.759  19407',
'STRATFORD      0.000 77.759  19408',
'STRACENER      0.000 77.760  19409',
'STOKE          0.000 77.760  19410',
'STIVERSON      0.000 77.760  19411',
'STELLING       0.000 77.761  19412',
'STEFAN         0.000 77.761  19413',
'STAVROS        0.000 77.762  19414',
'SPEAKER        0.000 77.762  19415',
'SPATZ          0.000 77.763  19416',
'SPAGNOLI       0.000 77.763  19417',
'SORGE          0.000 77.764  19418',
'SOBER          0.000 77.764  19419',
'SLEVIN         0.000 77.765  19420',
'SLABAUGH       0.000 77.765  19421',
'SIMSON         0.000 77.766  19422',
'SHUPP          0.000 77.766  19423',
'SHOULTZ        0.000 77.767  19424',
'SHOTTS         0.000 77.767  19425',
'SHIROMA        0.000 77.768  19426',
'SHETLEY        0.000 77.768  19427',
'SHERROW        0.000 77.769  19428',
'SHEFFEY        0.000 77.769  19429',
'SHAWGO         0.000 77.770  19430',
'SHAMBURGER     0.000 77.770  19431',
'SESTER         0.000 77.770  19432',
'SEGRAVES       0.000 77.771  19433',
'SEELIG         0.000 77.771  19434',
'SEATS          0.000 77.772  19435',
'SCIONEAUX      0.000 77.772  19436',
'SCHWARTZKOPF   0.000 77.773  19437',
'SCHWABE        0.000 77.773  19438',
'SCHOLES        0.000 77.774  19439',
'SCHMUCK        0.000 77.774  19440',
'SCHLUTER       0.000 77.775  19441',
'SCHLECHT       0.000 77.775  19442',
'SCHILLACI      0.000 77.776  19443',
'SCHILDGEN      0.000 77.776  19444',
'SCHIEBER       0.000 77.777  19445',
'SCHEWE         0.000 77.777  19446',
'SCHECTER       0.000 77.778  19447',
'SCARPELLI      0.000 77.778  19448',
'SCAGLIONE      0.000 77.779  19449',
'SAUTTER        0.000 77.779  19450',
'SANTELLI       0.000 77.780  19451',
'SANDMAN        0.000 77.780  19452',
'SALMI          0.000 77.781  19453',
'SABADO         0.000 77.781  19454',
'RYER           0.000 77.781  19455',
'RYDBERG        0.000 77.782  19456',
'RYBA           0.000 77.782  19457',
'RUSHFORD       0.000 77.783  19458',
'RUNNING        0.000 77.783  19459',
'RUNK           0.000 77.784  19460',
'RUDDICK        0.000 77.784  19461',
'ROTONDO        0.000 77.785  19462',
'ROTE           0.000 77.785  19463',
'ROSENFIELD     0.000 77.786  19464',
'ROESNER        0.000 77.786  19465',
'ROCCHIO        0.000 77.787  19466',
'RITZER         0.000 77.787  19467',
'RIPPEL         0.000 77.788  19468',
'RIMES          0.000 77.788  19469',
'RIFFEL         0.000 77.789  19470',
'RICHISON       0.000 77.789  19471',
'RIBBLE         0.000 77.790  19472',
'REYNOLD        0.000 77.790  19473',
'RESH           0.000 77.791  19474',
'REHN           0.000 77.791  19475',
'RATTI          0.000 77.791  19476',
'RASOR          0.000 77.792  19477',
'RASNAKE        0.000 77.792  19478',
'RAPPOLD        0.000 77.793  19479',
'RANDO          0.000 77.793  19480',
'RADOSEVICH     0.000 77.794  19481',
'PULICE         0.000 77.794  19482',
'PUFF           0.000 77.795  19483',
'PRICHETT       0.000 77.795  19484',
'PRIBBLE        0.000 77.796  19485',
'POYNOR         0.000 77.796  19486',
'PLOWDEN        0.000 77.797  19487',
'PITZEN         0.000 77.797  19488',
'PITTSLEY       0.000 77.798  19489',
'PITTER         0.000 77.798  19490',
'PIGEON         0.000 77.799  19491',
'PHILYAW        0.000 77.799  19492',
'PHILIPPS       0.000 77.800  19493',
'PETITE         0.000 77.800  19494',
'PESTANA        0.000 77.801  19495',
'PERRO          0.000 77.801  19496',
'PERONE         0.000 77.801  19497',
'PERA           0.000 77.802  19498',
'PEIL           0.000 77.802  19499',
'PEDONE         0.000 77.803  19500',
'PAWLOWICZ      0.000 77.803  19501',
'PATTEE         0.000 77.804  19502',
'PARTEN         0.000 77.804  19503',
'PARLIN         0.000 77.805  19504',
'PARISEAU       0.000 77.805  19505',
'PAREDEZ        0.000 77.806  19506',
'PARDON         0.000 77.806  19507',
'PANTHER        0.000 77.807  19508',
'PAEK           0.000 77.807  19509',
'PACIFICO       0.000 77.808  19510',
'OTTS           0.000 77.808  19511',
'OSTROW         0.000 77.809  19512',
'OSORNIO        0.000 77.809  19513',
'OSLUND         0.000 77.810  19514',
'ORSO           0.000 77.810  19515',
'OOTEN          0.000 77.811  19516',
'ONKEN          0.000 77.811  19517',
'ONIEL          0.000 77.812  19518',
'ONAN           0.000 77.812  19519',
'OLLISON        0.000 77.812  19520',
'OHLSEN         0.000 77.813  19521',
'OHLINGER       0.000 77.813  19522',
'ODOWD          0.000 77.814  19523',
'NIEMIEC        0.000 77.814  19524',
'NEUBERT        0.000 77.815  19525',
'NEMBHARD       0.000 77.815  19526',
'NEAVES         0.000 77.816  19527',
'NEATHERY       0.000 77.816  19528',
'NAKASONE       0.000 77.817  19529',
'MYERSON        0.000 77.817  19530',
'MUTO           0.000 77.818  19531',
'MUNTZ          0.000 77.818  19532',
'MUNEZ          0.000 77.819  19533',
'MUMME          0.000 77.819  19534',
'MUMM           0.000 77.820  19535',
'MUJICA         0.000 77.820  19536',
'MUISE          0.000 77.821  19537',
'MUENCH         0.000 77.821  19538',
'MORRISS        0.000 77.822  19539',
'MOLOCK         0.000 77.822  19540',
'MISHOE         0.000 77.822  19541',
'MINIER         0.000 77.823  19542',
'METZGAR        0.000 77.823  19543',
'MERO           0.000 77.824  19544',
'MEISER         0.000 77.824  19545',
'MEESE          0.000 77.825  19546',
'MEALS          0.000 77.825  19547',
'MCSWEEN        0.000 77.826  19548',
'MCQUIRE        0.000 77.826  19549',
'MCQUINN        0.000 77.827  19550',
'MCPHEETERS     0.000 77.827  19551',
'MCKELLER       0.000 77.828  19552',
'MCILRATH       0.000 77.828  19553',
'MCGOWN         0.000 77.829  19554',
'MCDAVIS        0.000 77.829  19555',
'MCCUEN         0.000 77.830  19556',
'MCCLENTON      0.000 77.830  19557',
'MAXHAM         0.000 77.831  19558',
'MATSUI         0.000 77.831  19559',
'MARRINER       0.000 77.832  19560',
'MARLETTE       0.000 77.832  19561',
'MANTLE         0.000 77.832  19562',
'MANSUR         0.000 77.833  19563',
'MANCINO        0.000 77.833  19564',
'MALAND         0.000 77.834  19565',
'MAJKA          0.000 77.834  19566',
'MAISCH         0.000 77.835  19567',
'MAHEUX         0.000 77.835  19568',
'MADRY          0.000 77.836  19569',
'MADRIZ         0.000 77.836  19570',
'MACKLEY        0.000 77.837  19571',
'MACKE          0.000 77.837  19572',
'LYDICK         0.000 77.838  19573',
'LUTTERMAN      0.000 77.838  19574',
'LUPPINO        0.000 77.839  19575',
'LUNDAHL        0.000 77.839  19576',
'LOVINGOOD      0.000 77.840  19577',
'LOUDON         0.000 77.840  19578',
'LONGMORE       0.000 77.841  19579',
'LIPPMAN        0.000 77.841  19580',
'LIEFER         0.000 77.842  19581',
'LEVEQUE        0.000 77.842  19582',
'LESCARBEAU     0.000 77.843  19583',
'LEMMER         0.000 77.843  19584',
'LEDGERWOOD     0.000 77.843  19585',
'LAWVER         0.000 77.844  19586',
'LAWRIE         0.000 77.844  19587',
'LATTEA         0.000 77.845  19588',
'LASKO          0.000 77.845  19589',
'LAHMAN         0.000 77.846  19590',
'KULPA          0.000 77.846  19591',
'KUKOWSKI       0.000 77.847  19592',
'KUKLA          0.000 77.847  19593',
'KUBOTA         0.000 77.848  19594',
'KUBALA         0.000 77.848  19595',
'KRIZAN         0.000 77.849  19596',
'KRIZ           0.000 77.849  19597',
'KRIKORIAN      0.000 77.850  19598',
'KRAVETZ        0.000 77.850  19599',
'KRAMP          0.000 77.851  19600',
'KOWALESKI      0.000 77.851  19601',
'KNOBLOCH       0.000 77.852  19602',
'KLOSTERMAN     0.000 77.852  19603',
'KLOSTER        0.000 77.853  19604',
'KLEPPER        0.000 77.853  19605',
'KIRVEN         0.000 77.853  19606',
'KINNAMAN       0.000 77.854  19607',
'KINNAIRD       0.000 77.854  19608',
'KILLAM         0.000 77.855  19609',
'KIESLING       0.000 77.855  19610',
'KESNER         0.000 77.856  19611',
'KEEBLER        0.000 77.856  19612',
'KEAGLE         0.000 77.857  19613',
'KARLS          0.000 77.857  19614',
'KAPINOS        0.000 77.858  19615',
'KANTNER        0.000 77.858  19616',
'KABA           0.000 77.859  19617',
'JUNIOUS        0.000 77.859  19618',
'JEFFERYS       0.000 77.860  19619',
'JACQUET        0.000 77.860  19620',
'IZZI           0.000 77.861  19621',
'ISHII          0.000 77.861  19622',
'IRION          0.000 77.862  19623',
'IFILL          0.000 77.862  19624',
'HYUN           0.000 77.863  19625',
'HOTARD         0.000 77.863  19626',
'HORMAN         0.000 77.863  19627',
'HOPPES         0.000 77.864  19628',
'HOPKIN         0.000 77.864  19629',
'HOKANSON       0.000 77.865  19630',
'HODA           0.000 77.865  19631',
'HOCUTT         0.000 77.866  19632',
'HOAGLIN        0.000 77.866  19633',
'HITES          0.000 77.867  19634',
'HIRAI          0.000 77.867  19635',
'HINDLE         0.000 77.868  19636',
'HINCH          0.000 77.868  19637',
'HILTY          0.000 77.869  19638',
'HILD           0.000 77.869  19639',
'HIER           0.000 77.870  19640',
'HICKLE         0.000 77.870  19641',
'HIBLER         0.000 77.871  19642',
'HENRICHS       0.000 77.871  19643',
'HEMPSTEAD      0.000 77.872  19644',
'HELMERS        0.000 77.872  19645',
'HELLARD        0.000 77.873  19646',
'HEIMS          0.000 77.873  19647',
'HEIDLER        0.000 77.874  19648',
'HEARST         0.000 77.874  19649',
'HAWBAKER       0.000 77.874  19650',
'HAU            0.000 77.875  19651',
'HARKLEROAD     0.000 77.875  19652',
'HARARI         0.000 77.876  19653',
'HANNEY         0.000 77.876  19654',
'HANNAFORD      0.000 77.877  19655',
'HAMID          0.000 77.877  19656',
'HAMBURGER      0.000 77.878  19657',
'HALTOM         0.000 77.878  19658',
'HALLFORD       0.000 77.879  19659',
'GUILLIAMS      0.000 77.879  19660',
'GUERETTE       0.000 77.880  19661',
'GRYDER         0.000 77.880  19662',
'GROSECLOSE     0.000 77.881  19663',
'GROEN          0.000 77.881  19664',
'GRIMLEY        0.000 77.882  19665',
'GREENIDGE      0.000 77.882  19666',
'GREEK          0.000 77.883  19667',
'GRAFFAM        0.000 77.883  19668',
'GOUCHER        0.000 77.884  19669',
'GOODENOUGH     0.000 77.884  19670',
'GOLDSBOROUGH   0.000 77.884  19671',
'GOLDIE         0.000 77.885  19672',
'GLOSTER        0.000 77.885  19673',
'GLANTON        0.000 77.886  19674',
'GLADSON        0.000 77.886  19675',
'GLADDING       0.000 77.887  19676',
'GHEE           0.000 77.887  19677',
'GETHERS        0.000 77.888  19678',
'GERSTEIN       0.000 77.888  19679',
'GEESEY         0.000 77.889  19680',
'GEDDIE         0.000 77.889  19681',
'GAYER          0.000 77.890  19682',
'GAW            0.000 77.890  19683',
'GAVER          0.000 77.891  19684',
'GAUNTT         0.000 77.891  19685',
'GARTLAND       0.000 77.892  19686',
'GARRIGA        0.000 77.892  19687',
'GAROUTTE       0.000 77.893  19688',
'GAO            0.000 77.893  19689',
'GAN            0.000 77.894  19690',
'FRONK          0.000 77.894  19691',
'FRITZE         0.000 77.894  19692',
'FRENZEL        0.000 77.895  19693',
'FORGIONE       0.000 77.895  19694',
'FLUITT         0.000 77.896  19695',
'FLINCHBAUGH    0.000 77.896  19696',
'FLACH          0.000 77.897  19697',
'FIORITO        0.000 77.897  19698',
'FINAN          0.000 77.898  19699',
'FINAMORE       0.000 77.898  19700',
'FIMBRES        0.000 77.899  19701',
'FILLMAN        0.000 77.899  19702',
'FILE           0.000 77.900  19703',
'FIGEROA        0.000 77.900  19704',
'FICKLIN        0.000 77.901  19705',
'FEHER          0.000 77.901  19706',
'FEDDERSEN      0.000 77.902  19707',
'FAMBRO         0.000 77.902  19708',
'FAIRBAIRN      0.000 77.903  19709',
'EVES           0.000 77.903  19710',
'ESPERANZA      0.000 77.904  19711',
'ESCALONA       0.000 77.904  19712',
'ELSEY          0.000 77.905  19713',
'EISENSTEIN     0.000 77.905  19714',
'EHRENBERG      0.000 77.905  19715',
'EARGLE         0.000 77.906  19716',
'DRESS          0.000 77.906  19717',
'DRANE          0.000 77.907  19718',
'DOROTHY        0.000 77.907  19719',
'DORIA          0.000 77.908  19720',
'DOGAN          0.000 77.908  19721',
'DIVELY         0.000 77.909  19722',
'DEWOLFE        0.000 77.909  19723',
'DETTMAN        0.000 77.910  19724',
'DESIDERIO      0.000 77.910  19725',
'DESCH          0.000 77.911  19726',
'DENNEN         0.000 77.911  19727',
'DENK           0.000 77.912  19728',
'DEMARIS        0.000 77.912  19729',
'DELSIGNORE     0.000 77.913  19730',
'DEJARNETTE     0.000 77.913  19731',
'DEERE          0.000 77.914  19732',
'DEDMAN         0.000 77.914  19733',
'DAWS           0.000 77.915  19734',
'DAWN           0.000 77.915  19735',
'DAUPHINAIS     0.000 77.915  19736',
'DANZ           0.000 77.916  19737',
'DANTIN         0.000 77.916  19738',
'DANNENBERG     0.000 77.917  19739',
'DALBY          0.000 77.917  19740',
'CURRENCE       0.000 77.918  19741',
'CULWELL        0.000 77.918  19742',
'CUESTA         0.000 77.919  19743',
'CROSTON        0.000 77.919  19744',
'CROSSNO        0.000 77.920  19745',
'CROMLEY        0.000 77.920  19746',
'CRISCI         0.000 77.921  19747',
'CRAW           0.000 77.921  19748',
'CORYELL        0.000 77.922  19749',
'COOTER         0.000 77.922  19750',
'CONDRA         0.000 77.923  19751',
'COLUMBIA       0.000 77.923  19752',
'COLPITTS       0.000 77.924  19753',
'COLAS          0.000 77.924  19754',
'COACH          0.000 77.925  19755',
'CLINK          0.000 77.925  19756',
'CLEVINGER      0.000 77.925  19757',
'CLERMONT       0.000 77.926  19758',
'CISTRUNK       0.000 77.926  19759',
'CIRILO         0.000 77.927  19760',
'CHIRICO        0.000 77.927  19761',
'CHIARELLO      0.000 77.928  19762',
'CEPHUS         0.000 77.928  19763',
'CECENA         0.000 77.929  19764',
'CAVALIERE      0.000 77.929  19765',
'CAUGHEY        0.000 77.930  19766',
'CASIMIR        0.000 77.930  19767',
'CARWELL        0.000 77.931  19768',
'CARLON         0.000 77.931  19769',
'CARBONARO      0.000 77.932  19770',
'CARAVEO        0.000 77.932  19771',
'CANTLEY        0.000 77.933  19772',
'CALLEJAS       0.000 77.933  19773',
'CAGNEY         0.000 77.934  19774',
'CADIEUX        0.000 77.934  19775',
'CABANISS       0.000 77.935  19776',
'BUSHARD        0.000 77.935  19777',
'BURLEW         0.000 77.936  19778',
'BURAS          0.000 77.936  19779',
'BUDZINSKI      0.000 77.936  19780',
'BUCKLEW        0.000 77.937  19781',
'BRUNEAU        0.000 77.937  19782',
'BRUMMER        0.000 77.938  19783',
'BRUEGGEMANN    0.000 77.938  19784',
'BROTZMAN       0.000 77.939  19785',
'BROSS          0.000 77.939  19786',
'BROAD          0.000 77.940  19787',
'BRITTIAN       0.000 77.940  19788',
'BRIMAGE        0.000 77.941  19789',
'BRILES         0.000 77.941  19790',
'BRICKMAN       0.000 77.942  19791',
'BRENEMAN       0.000 77.942  19792',
'BREITENSTEIN   0.000 77.943  19793',
'BRANDEL        0.000 77.943  19794',
'BRACKINS       0.000 77.944  19795',
'BOYDSTUN       0.000 77.944  19796',
'BOTTA          0.000 77.945  19797',
'BOSKET         0.000 77.945  19798',
'BOROS          0.000 77.946  19799',
'BORGMANN       0.000 77.946  19800',
'BORDEAU        0.000 77.946  19801',
'BONIFACIO      0.000 77.947  19802',
'BOLTEN         0.000 77.947  19803',
'BOEHMAN        0.000 77.948  19804',
'BLUNDELL       0.000 77.948  19805',
'BLOODSAW       0.000 77.949  19806',
'BJERKE         0.000 77.949  19807',
'BIFFLE         0.000 77.950  19808',
'BICKETT        0.000 77.950  19809',
'BICKERS        0.000 77.951  19810',
'BEVILLE        0.000 77.951  19811',
'BERGREN        0.000 77.952  19812',
'BERGEY         0.000 77.952  19813',
'BENZING        0.000 77.953  19814',
'BELFIORE       0.000 77.953  19815',
'BEIRNE         0.000 77.954  19816',
'BECKERT        0.000 77.954  19817',
'BEBOUT         0.000 77.955  19818',
'BAUMERT        0.000 77.955  19819',
'BATTEY         0.000 77.956  19820',
'BARTMAN        0.000 77.956  19821',
'BARRS          0.000 77.956  19822',
'BARRIERE       0.000 77.957  19823',
'BARCELO        0.000 77.957  19824',
'BARBE          0.000 77.958  19825',
'BALLIET        0.000 77.958  19826',
'BAHAM          0.000 77.959  19827',
'BABST          0.000 77.959  19828',
'AUTON          0.000 77.960  19829',
'ASPER          0.000 77.960  19830',
'ASBELL         0.000 77.961  19831',
'ARZATE         0.000 77.961  19832',
'ARGENTO        0.000 77.962  19833',
'AREL           0.000 77.962  19834',
'ARAKI          0.000 77.963  19835',
'ARAI           0.000 77.963  19836',
'APO            0.000 77.964  19837',
'ANTLEY         0.000 77.964  19838',
'AMODEO         0.000 77.965  19839',
'AMMANN         0.000 77.965  19840',
'ALLYN          0.000 77.966  19841',
'ALLENSWORTH    0.000 77.966  19842',
'ALDAPE         0.000 77.967  19843',
'AKEY           0.000 77.967  19844',
'ABEITA         0.000 77.967  19845',
'ZWEIFEL        0.000 77.968  19846',
'ZENG           0.000 77.968  19847',
'ZEILER         0.000 77.969  19848',
'ZAMOR          0.000 77.969  19849',
'ZALENSKI       0.000 77.970  19850',
'YZAGUIRRE      0.000 77.970  19851',
'YOUSEF         0.000 77.971  19852',
'YETMAN         0.000 77.971  19853',
'YAU            0.000 77.972  19854',
'WYER           0.000 77.972  19855',
'WOOLWINE       0.000 77.973  19856',
'WOHLGEMUTH     0.000 77.973  19857',
'WOHLERS        0.000 77.973  19858',
'WITTENBERG     0.000 77.974  19859',
'WINGROVE       0.000 77.974  19860',
'WIND           0.000 77.975  19861',
'WIMSATT        0.000 77.975  19862',
'WILLIMAS       0.000 77.976  19863',
'WILKENSON      0.000 77.976  19864',
'WILDEY         0.000 77.977  19865',
'WILDERMAN      0.000 77.977  19866',
'WILCZYNSKI     0.000 77.978  19867',
'WIGTON         0.000 77.978  19868',
'WHORLEY        0.000 77.979  19869',
'WELLONS        0.000 77.979  19870',
'WELLES         0.000 77.979  19871',
'WELLE          0.000 77.980  19872',
'WEIRICH        0.000 77.980  19873',
'WEIDEMAN       0.000 77.981  19874',
'WEIDE          0.000 77.981  19875',
'WEEKLY         0.000 77.982  19876',
'WEAST          0.000 77.982  19877',
'WASMUND        0.000 77.983  19878',
'WARSHAW        0.000 77.983  19879',
'WALSON         0.000 77.984  19880',
'WALDNER        0.000 77.984  19881',
'WALCH          0.000 77.985  19882',
'WALBERG        0.000 77.985  19883',
'WAGENER        0.000 77.985  19884',
'WAGEMAN        0.000 77.986  19885',
'VRIEZE         0.000 77.986  19886',
'VOSSEN         0.000 77.987  19887',
'VORCE          0.000 77.987  19888',
'VOORHIS        0.000 77.988  19889',
'VONDERHEIDE    0.000 77.988  19890',
'VIRUET         0.000 77.989  19891',
'VICARI         0.000 77.989  19892',
'VERNE          0.000 77.990  19893',
'VELASQUES      0.000 77.990  19894',
'VAUTOUR        0.000 77.991  19895',
'VARTANIAN      0.000 77.991  19896',
'VARONA         0.000 77.991  19897',
'VANKEUREN      0.000 77.992  19898',
'VANDINE        0.000 77.992  19899',
'VANDERMEER     0.000 77.993  19900',
'URSERY         0.000 77.993  19901',
'UNDERDOWN      0.000 77.994  19902',
'UHRICH         0.000 77.994  19903',
'UHLMAN         0.000 77.995  19904',
'TWOREK         0.000 77.995  19905',
'TWINE          0.000 77.996  19906',
'TWELLMAN       0.000 77.996  19907',
'TWEEDIE        0.000 77.997  19908',
'TUTINO         0.000 77.997  19909',
'TURMELLE       0.000 77.997  19910',
'TUBB           0.000 77.998  19911',
'TROOP          0.000 77.998  19912',
'TRIVEDI        0.000 77.999  19913',
'TRIANO         0.000 77.999  19914',
'TREVATHAN      0.000 78.000  19915',
'TREESE         0.000 78.000  19916',
'TREANOR        0.000 78.001  19917',
'TREACY         0.000 78.001  19918',
'TRAINA         0.000 78.002  19919',
'TOPHAM         0.000 78.002  19920',
'TOENJES        0.000 78.002  19921',
'TIPPETTS       0.000 78.003  19922',
'TIEU           0.000 78.003  19923',
'THOMURE        0.000 78.004  19924',
'THATCH         0.000 78.004  19925',
'THAN           0.000 78.005  19926',
'TETZLAFF       0.000 78.005  19927',
'TETTERTON      0.000 78.006  19928',
'TENA           0.000 78.006  19929',
'TELL           0.000 78.007  19930',
'TEAMER         0.000 78.007  19931',
'TAPPAN         0.000 78.008  19932',
'TANK           0.000 78.008  19933',
'TALCOTT        0.000 78.008  19934',
'TAGG           0.000 78.009  19935',
'SZCZEPANSKI    0.000 78.009  19936',
'SYRING         0.000 78.010  19937',
'SURACE         0.000 78.010  19938',
'SULZER         0.000 78.011  19939',
'SUGRUE         0.000 78.011  19940',
'SUGARMAN       0.000 78.012  19941',
'SUESS          0.000 78.012  19942',
'STYONS         0.000 78.013  19943',
'STWART         0.000 78.013  19944',
'STUPKA         0.000 78.014  19945',
'STREY          0.000 78.014  19946',
'STRAUBE        0.000 78.014  19947',
'STRATE         0.000 78.015  19948',
'STODDART       0.000 78.015  19949',
'STOCKBRIDGE    0.000 78.016  19950',
'STJAMES        0.000 78.016  19951',
'STINGER        0.000 78.017  19952',
'STEIMLE        0.000 78.017  19953',
'STEENBERG      0.000 78.018  19954',
'START          0.000 78.018  19955',
'STAMAND        0.000 78.019  19956',
'STALLER        0.000 78.019  19957',
'STAHLY         0.000 78.020  19958',
'STAGER         0.000 78.020  19959',
'SPURGIN        0.000 78.020  19960',
'SPROW          0.000 78.021  19961',
'SPONSLER       0.000 78.021  19962',
'SPEAS          0.000 78.022  19963',
'SPAINHOUR      0.000 78.022  19964',
'SONES          0.000 78.023  19965',
'SMITS          0.000 78.023  19966',
'SMELCER        0.000 78.024  19967',
'SLOVAK         0.000 78.024  19968',
'SLATEN         0.000 78.025  19969',
'SINGLETERRY    0.000 78.025  19970',
'SIMIEN         0.000 78.026  19971',
'SIDEBOTTOM     0.000 78.026  19972',
'SIBRIAN        0.000 78.026  19973',
'SHELLHAMMER    0.000 78.027  19974',
'SHELBURNE      0.000 78.027  19975',
'SHAMBO         0.000 78.028  19976',
'SEPEDA         0.000 78.028  19977',
'SEIGEL         0.000 78.029  19978',
'SCOGIN         0.000 78.029  19979',
'SCIANNA        0.000 78.030  19980',
'SCHMOLL        0.000 78.030  19981',
'SCHMELZER      0.000 78.031  19982',
'SCHEU          0.000 78.031  19983',
'SCHACHTER      0.000 78.032  19984',
'SAVANT         0.000 78.032  19985',
'SAUSEDA        0.000 78.032  19986',
'SATCHER        0.000 78.033  19987',
'SANDOR         0.000 78.033  19988',
'SAMPSELL       0.000 78.034  19989',
'RUGH           0.000 78.034  19990',
'RUFENER        0.000 78.035  19991',
'RUDOLF         0.000 78.035  19992',
'ROTENBERRY     0.000 78.036  19993',
'ROSSOW         0.000 78.036  19994',
'ROSSBACH       0.000 78.037  19995',
'ROOTS          0.000 78.037  19996',
'ROLLMAN        0.000 78.038  19997',
'RODRIQUE       0.000 78.038  19998',
'RODREGUEZ      0.000 78.038  19999',
'RODKEY         0.000 78.039  20000',
'RODA           0.000 78.039  20001',
'RISING         0.000 78.040  20002',
'RINI           0.000 78.040  20003',
'RIGGAN         0.000 78.041  20004',
'RIENTS         0.000 78.041  20005',
'RIEDL          0.000 78.042  20006',
'RHINES         0.000 78.042  20007',
'RESS           0.000 78.043  20008',
'REINBOLD       0.000 78.043  20009',
'RASCHKE        0.000 78.044  20010',
'RARDIN         0.000 78.044  20011',
'RAIN           0.000 78.044  20012',
'RACICOT        0.000 78.045  20013',
'QUILLIN        0.000 78.045  20014',
'PUSHARD        0.000 78.046  20015',
'PRIMROSE       0.000 78.046  20016',
'PRIES          0.000 78.047  20017',
'PRESSEY        0.000 78.047  20018',
'PRECOURT       0.000 78.048  20019',
'PRATTS         0.000 78.048  20020',
'POSTEL         0.000 78.049  20021',
'POPPELL        0.000 78.049  20022',
'PLUMER         0.000 78.050  20023',
'PINGREE        0.000 78.050  20024',
'PIERONI        0.000 78.050  20025',
'PFLUG          0.000 78.051  20026',
'PETRE          0.000 78.051  20027',
'PETRARCA       0.000 78.052  20028',
'PETERKA        0.000 78.052  20029',
'PERU           0.000 78.053  20030',
'PERKIN         0.000 78.053  20031',
'PERGANDE       0.000 78.054  20032',
'PERANIO        0.000 78.054  20033',
'PENNA          0.000 78.055  20034',
'PEKAR          0.000 78.055  20035',
'PEA            0.000 78.056  20036',
'PAULHUS        0.000 78.056  20037',
'PASQUARIELLO   0.000 78.056  20038',
'PARRAS         0.000 78.057  20039',
'PARMENTIER     0.000 78.057  20040',
'PARA           0.000 78.058  20041',
'PANZER         0.000 78.058  20042',
'PAMPLIN        0.000 78.059  20043',
'OVIATT         0.000 78.059  20044',
'OSTERHOUDT     0.000 78.060  20045',
'OSTENDORF      0.000 78.060  20046',
'OSMUN          0.000 78.061  20047',
'ORTMAN         0.000 78.061  20048',
'ORLOFF         0.000 78.062  20049',
'ORBAN          0.000 78.062  20050',
'ONOFRIO        0.000 78.062  20051',
'OLVEDA         0.000 78.063  20052',
'OLTMAN         0.000 78.063  20053',
'OKEEFFE        0.000 78.064  20054',
'OCANA          0.000 78.064  20055',
'NUNEMAKER      0.000 78.065  20056',
'NOVY           0.000 78.065  20057',
'NOFFSINGER     0.000 78.066  20058',
'NISH           0.000 78.066  20059',
'NIDAY          0.000 78.067  20060',
'NETHERY        0.000 78.067  20061',
'NESTLE         0.000 78.068  20062',
'NEMITZ         0.000 78.068  20063',
'NEIDERT        0.000 78.068  20064',
'NADAL          0.000 78.069  20065',
'NACK           0.000 78.069  20066',
'MUSZYNSKI      0.000 78.070  20067',
'MUNSTERMAN     0.000 78.070  20068',
'MULHERIN       0.000 78.071  20069',
'MORTIMORE      0.000 78.071  20070',
'MORTER         0.000 78.072  20071',
'MONTESINO      0.000 78.072  20072',
'MONTALVAN      0.000 78.073  20073',
'MONTALBANO     0.000 78.073  20074',
'MOMON          0.000 78.073  20075',
'MOMAN          0.000 78.074  20076',
'MOM            0.000 78.074  20077',
'MOGAN          0.000 78.075  20078',
'MINNS          0.000 78.075  20079',
'MILLWARD       0.000 78.076  20080',
'MILLING        0.000 78.076  20081',
'MICHELSEN      0.000 78.077  20082',
'MICHEAL        0.000 78.077  20083',
'MEWBORN        0.000 78.078  20084',
'METRO          0.000 78.078  20085',
'METAYER        0.000 78.079  20086',
'MENSCH         0.000 78.079  20087',
'MELOY          0.000 78.079  20088',
'MEGGS          0.000 78.080  20089',
'MEADERS        0.000 78.080  20090',
'MCSORLEY       0.000 78.081  20091',
'MCMENAMIN      0.000 78.081  20092',
'MCLEAD         0.000 78.082  20093',
'MCLAUCHLIN     0.000 78.082  20094',
'MCGUFFEY       0.000 78.083  20095',
'MCGUCKIN       0.000 78.083  20096',
'MCGLAUGHLIN    0.000 78.084  20097',
'MCFERRON       0.000 78.084  20098',
'MCENTYRE       0.000 78.085  20099',
'MCCRUM         0.000 78.085  20100',
'MCCAWLEY       0.000 78.085  20101',
'MCBAIN         0.000 78.086  20102',
'MAYHUE         0.000 78.086  20103',
'MAU            0.000 78.087  20104',
'MATZEN         0.000 78.087  20105',
'MATTON         0.000 78.088  20106',
'MARSEE         0.000 78.088  20107',
'MARRIN         0.000 78.089  20108',
'MARLAND        0.000 78.089  20109',
'MARKUM         0.000 78.090  20110',
'MANTILLA       0.000 78.090  20111',
'MANFRE         0.000 78.091  20112',
'MALTA          0.000 78.091  20113',
'MAKUCH         0.000 78.091  20114',
'MADLOCK        0.000 78.092  20115',
'MACLAREN       0.000 78.092  20116',
'MACAULEY       0.000 78.093  20117',
'LUZIER         0.000 78.093  20118',
'LUTHY          0.000 78.094  20119',
'LUFKIN         0.000 78.094  20120',
'LUCENA         0.000 78.095  20121',
'LOUDIN         0.000 78.095  20122',
'LOTHROP        0.000 78.096  20123',
'LORCH          0.000 78.096  20124',
'LONA           0.000 78.097  20125',
'LOLL           0.000 78.097  20126',
'LOADHOLT       0.000 78.097  20127',
'LISA           0.000 78.098  20128',
'LIPPOLD        0.000 78.098  20129',
'LIKES          0.000 78.099  20130',
'LICHTMAN       0.000 78.099  20131',
'LIBERTO        0.000 78.100  20132',
'LIAKOS         0.000 78.100  20133',
'LEWICKI        0.000 78.101  20134',
'LEVETT         0.000 78.101  20135',
'LEVEL          0.000 78.102  20136',
'LENTINE        0.000 78.102  20137',
'LEJA           0.000 78.103  20138',
'LEGREE         0.000 78.103  20139',
'LAWHEAD        0.000 78.103  20140',
'LAURO          0.000 78.104  20141',
'LAUDER         0.000 78.104  20142',
'LARD           0.000 78.105  20143',
'LANMAN         0.000 78.105  20144',
'LANK           0.000 78.106  20145',
'LANING         0.000 78.106  20146',
'LAMA           0.000 78.107  20147',
'LALOR          0.000 78.107  20148',
'KROB           0.000 78.108  20149',
'KRIGER         0.000 78.108  20150',
'KRIEGEL        0.000 78.109  20151',
'KREJCI         0.000 78.109  20152',
'KREISEL        0.000 78.109  20153',
'KOZEL          0.000 78.110  20154',
'KOS            0.000 78.110  20155',
'KONKEL         0.000 78.111  20156',
'KOLSTAD        0.000 78.111  20157',
'KOENEN         0.000 78.112  20158',
'KOCSIS         0.000 78.112  20159',
'KNOBLOCK       0.000 78.113  20160',
'KNEBEL         0.000 78.113  20161',
'KLOPFER        0.000 78.114  20162',
'KLEE           0.000 78.114  20163',
'KILDAY         0.000 78.115  20164',
'KESTEN         0.000 78.115  20165',
'KERBS          0.000 78.115  20166',
'KEMPKER        0.000 78.116  20167',
'KEATHLEY       0.000 78.116  20168',
'KAZEE          0.000 78.117  20169',
'KAWASAKI       0.000 78.117  20170',
'KAUR           0.000 78.118  20171',
'KAMER          0.000 78.118  20172',
'KAMAKA         0.000 78.119  20173',
'KALLENBACH     0.000 78.119  20174',
'KAFKA          0.000 78.120  20175',
'JERRELL        0.000 78.120  20176',
'JEHLE          0.000 78.121  20177',
'JAYCOX         0.000 78.121  20178',
'JARDIN         0.000 78.121  20179',
'JAHNS          0.000 78.122  20180',
'IVESTER        0.000 78.122  20181',
'HYPPOLITE      0.000 78.123  20182',
'HYCHE          0.000 78.123  20183',
'HUSBANDS       0.000 78.124  20184',
'HUR            0.000 78.124  20185',
'HUPPERT        0.000 78.125  20186',
'HULIN          0.000 78.125  20187',
'HUBLEY         0.000 78.126  20188',
'HORSEY         0.000 78.126  20189',
'HORNAK         0.000 78.127  20190',
'HOLZWARTH      0.000 78.127  20191',
'HOLMON         0.000 78.127  20192',
'HOLLABAUGH     0.000 78.128  20193',
'HOLAWAY        0.000 78.128  20194',
'HODES          0.000 78.129  20195',
'HOAK           0.000 78.129  20196',
'HINESLEY       0.000 78.130  20197',
'HILLWIG        0.000 78.130  20198',
'HILLEBRAND     0.000 78.131  20199',
'HIGHFIELD      0.000 78.131  20200',
'HESLOP         0.000 78.132  20201',
'HERRADA        0.000 78.132  20202',
'HENDRYX        0.000 78.133  20203',
'HELLUMS        0.000 78.133  20204',
'HEIT           0.000 78.133  20205',
'HEISHMAN       0.000 78.134  20206',
'HEINDEL        0.000 78.134  20207',
'HAYSLIP        0.000 78.135  20208',
'HAYFORD        0.000 78.135  20209',
'HASTIE         0.000 78.136  20210',
'HARTGROVE      0.000 78.136  20211',
'HANUS          0.000 78.137  20212',
'HAKIM          0.000 78.137  20213',
'HAINS          0.000 78.138  20214',
'HADNOTT        0.000 78.138  20215',
'GUNDERSEN      0.000 78.139  20216',
'GULINO         0.000 78.139  20217',
'GUIDROZ        0.000 78.139  20218',
'GUEBERT        0.000 78.140  20219',
'GRESSETT       0.000 78.140  20220',
'GREENHOUSE     0.000 78.141  20221',
'GRAYDON        0.000 78.141  20222',
'GRAMLING       0.000 78.142  20223',
'GRAHN          0.000 78.142  20224',
'GOUPIL         0.000 78.143  20225',
'GORY           0.000 78.143  20226',
'GORELICK       0.000 78.144  20227',
'GOODREAU       0.000 78.144  20228',
'GOODNOUGH      0.000 78.144  20229',
'GOLAY          0.000 78.145  20230',
'GOING          0.000 78.145  20231',
'GOERS          0.000 78.146  20232',
'GLATZ          0.000 78.146  20233',
'GILLIKIN       0.000 78.147  20234',
'GIESEKE        0.000 78.147  20235',
'GIAMMARINO     0.000 78.148  20236',
'GETMAN         0.000 78.148  20237',
'GERONIMO       0.000 78.149  20238',
'GERARDO        0.000 78.149  20239',
'GENSLER        0.000 78.150  20240',
'GAZDA          0.000 78.150  20241',
'GARIBALDI      0.000 78.150  20242',
'GAHAN          0.000 78.151  20243',
'FURY           0.000 78.151  20244',
'FUNDERBURKE    0.000 78.152  20245',
'FUKUDA         0.000 78.152  20246',
'FUGITT         0.000 78.153  20247',
'FUERST         0.000 78.153  20248',
'FORTMAN        0.000 78.154  20249',
'FORSGREN       0.000 78.154  20250',
'FORMICA        0.000 78.155  20251',
'FLUKE          0.000 78.155  20252',
'FLINK          0.000 78.156  20253',
'FITTON         0.000 78.156  20254',
'FELTZ          0.000 78.156  20255',
'FEKETE         0.000 78.157  20256',
'FEIT           0.000 78.157  20257',
'FEHRENBACH     0.000 78.158  20258',
'FARONE         0.000 78.158  20259',
'FARINAS        0.000 78.159  20260',
'FARIES         0.000 78.159  20261',
'FAGEN          0.000 78.160  20262',
'EWIN           0.000 78.160  20263',
'ESQUILIN       0.000 78.161  20264',
'ESCH           0.000 78.161  20265',
'ENDERLE        0.000 78.162  20266',
'ELLERY         0.000 78.162  20267',
'ELLERS         0.000 78.162  20268',
'EKBERG         0.000 78.163  20269',
'EGLI           0.000 78.163  20270',
'EFFINGER       0.000 78.164  20271',
'DYMOND         0.000 78.164  20272',
'DULLE          0.000 78.165  20273',
'DULA           0.000 78.165  20274',
'DUHE           0.000 78.166  20275',
'DUDNEY         0.000 78.166  20276',
'DUANE          0.000 78.167  20277',
'DOWLESS        0.000 78.167  20278',
'DOWER          0.000 78.168  20279',
'DORMINEY       0.000 78.168  20280',
'DOPP           0.000 78.168  20281',
'DOOLING        0.000 78.169  20282',
'DOMER          0.000 78.169  20283',
'DISHER         0.000 78.170  20284',
'DILLENBECK     0.000 78.170  20285',
'DIFILIPPO      0.000 78.171  20286',
'DIBERNARDO     0.000 78.171  20287',
'DEYOE          0.000 78.172  20288',
'DEVILLIER      0.000 78.172  20289',
'DENLEY         0.000 78.173  20290',
'DELAND         0.000 78.173  20291',
'DEFIBAUGH      0.000 78.174  20292',
'DEEB           0.000 78.174  20293',
'DEBOW          0.000 78.174  20294',
'DAUER          0.000 78.175  20295',
'DATTA          0.000 78.175  20296',
'DARCANGELO     0.000 78.176  20297',
'DAOUST         0.000 78.176  20298',
'DAMELIO        0.000 78.177  20299',
'DAHM           0.000 78.177  20300',
'DAHLMAN        0.000 78.178  20301',
'CYPHER         0.000 78.178  20302',
'CURLING        0.000 78.179  20303',
'CURLIN         0.000 78.179  20304',
'CUPIT          0.000 78.180  20305',
'CULTON         0.000 78.180  20306',
'CUENCA         0.000 78.180  20307',
'CROPP          0.000 78.181  20308',
'CROKE          0.000 78.181  20309',
'CREMER         0.000 78.182  20310',
'CRACE          0.000 78.182  20311',
'COSIO          0.000 78.183  20312',
'CORZINE        0.000 78.183  20313',
'COOMBE         0.000 78.184  20314',
'COMAN          0.000 78.184  20315',
'COLONE         0.000 78.185  20316',
'COLOMA         0.000 78.185  20317',
'COLLINGWOOD    0.000 78.186  20318',
'COLETTA        0.000 78.186  20319',
'CODERRE        0.000 78.186  20320',
'COCKE          0.000 78.187  20321',
'COBLER         0.000 78.187  20322',
'CLAYBROOK      0.000 78.188  20323',
'CIRCLE         0.000 78.188  20324',
'CINCOTTA       0.000 78.189  20325',
'CIMMINO        0.000 78.189  20326',
'CHRISTOFF      0.000 78.190  20327',
'CHRISTINA      0.000 78.190  20328',
'CHISUM         0.000 78.191  20329',
'CHILLEMI       0.000 78.191  20330',
'CHEVERE        0.000 78.192  20331',
'CHAE           0.000 78.192  20332',
'CHACHERE       0.000 78.192  20333',
'CERVONE        0.000 78.193  20334',
'CERMAK         0.000 78.193  20335',
'CEFALU         0.000 78.194  20336',
'CAUBLE         0.000 78.194  20337',
'CATHER         0.000 78.195  20338',
'CASO           0.000 78.195  20339',
'CARNS          0.000 78.196  20340',
'CARCAMO        0.000 78.196  20341',
'CARBO          0.000 78.197  20342',
'CAPOCCIA       0.000 78.197  20343',
'CAPELLO        0.000 78.198  20344',
'CAPELL         0.000 78.198  20345',
'CANINO         0.000 78.198  20346',
'CAMBARERI      0.000 78.199  20347',
'CALVI          0.000 78.199  20348',
'CABINESS       0.000 78.200  20349',
'BUSHELL        0.000 78.200  20350',
'BURTT          0.000 78.201  20351',
'BURSTEIN       0.000 78.201  20352',
'BURKLE         0.000 78.202  20353',
'BUNNER         0.000 78.202  20354',
'BUNDREN        0.000 78.203  20355',
'BUECHLER       0.000 78.203  20356',
'BRYAND         0.000 78.204  20357',
'BRUSO          0.000 78.204  20358',
'BROWNSTEIN     0.000 78.204  20359',
'BROW           0.000 78.205  20360',
'BROUSE         0.000 78.205  20361',
'BRODT          0.000 78.206  20362',
'BROADEN        0.000 78.206  20363',
'BRISBIN        0.000 78.207  20364',
'BRIGHTMAN      0.000 78.207  20365',
'BRIDGETT       0.000 78.208  20366',
'BRENES         0.000 78.208  20367',
'BREITENBACH    0.000 78.209  20368',
'BRAZZELL       0.000 78.209  20369',
'BRAZEE         0.000 78.210  20370',
'BRAMWELL       0.000 78.210  20371',
'BRAMHALL       0.000 78.210  20372',
'BRADSTREET     0.000 78.211  20373',
'BOYTON         0.000 78.211  20374',
'BOWLAND        0.000 78.212  20375',
'BOULTER        0.000 78.212  20376',
'BOSSERT        0.000 78.213  20377',
'BONURA         0.000 78.213  20378',
'BONEBRAKE      0.000 78.214  20379',
'BONACCI        0.000 78.214  20380',
'BOECK          0.000 78.215  20381',
'BLYSTONE       0.000 78.215  20382',
'BIRCHARD       0.000 78.215  20383',
'BILAL          0.000 78.216  20384',
'BIDDY          0.000 78.216  20385',
'BIBEE          0.000 78.217  20386',
'BEVANS         0.000 78.217  20387',
'BETHKE         0.000 78.218  20388',
'BERTELSEN      0.000 78.218  20389',
'BERNEY         0.000 78.219  20390',
'BERGFELD       0.000 78.219  20391',
'BENWARE        0.000 78.220  20392',
'BELLON         0.000 78.220  20393',
'BELLAH         0.000 78.221  20394',
'BEEN           0.000 78.221  20395',
'BATTERTON      0.000 78.221  20396',
'BARBERIO       0.000 78.222  20397',
'BAMBER         0.000 78.222  20398',
'BAGDON         0.000 78.223  20399',
'BADEAUX        0.000 78.223  20400',
'AVERITT        0.000 78.224  20401',
'AUGSBURGER     0.000 78.224  20402',
'ATES           0.000 78.225  20403',
'ARVIE          0.000 78.225  20404',
'ARONOWITZ      0.000 78.226  20405',
'ARENS          0.000 78.226  20406',
'ARCH           0.000 78.227  20407',
'ARAYA          0.000 78.227  20408',
'ANGELOS        0.000 78.227  20409',
'ANDRADA        0.000 78.228  20410',
'AMELL          0.000 78.228  20411',
'AMANTE         0.000 78.229  20412',
'ALVIN          0.000 78.229  20413',
'ALMY           0.000 78.230  20414',
'ALMQUIST       0.000 78.230  20415',
'ALLS           0.000 78.231  20416',
'AISPURO        0.000 78.231  20417',
'AGUILLON       0.000 78.232  20418',
'AGUDELO        0.000 78.232  20419',
'ADMIRE         0.000 78.233  20420',
'ACY            0.000 78.233  20421',
'ACETO          0.000 78.233  20422',
'ABBOT          0.000 78.234  20423',
'ABALOS         0.000 78.234  20424',
'ZDENEK         0.000 78.235  20425',
'ZAREMBA        0.000 78.235  20426',
'ZACCARIA       0.000 78.236  20427',
'YOUSSEF        0.000 78.236  20428',
'WRONA          0.000 78.237  20429',
'WRINKLE        0.000 78.237  20430',
'WREDE          0.000 78.238  20431',
'WOTTON         0.000 78.238  20432',
'WOOLSTON       0.000 78.238  20433',
'WOLPERT        0.000 78.239  20434',
'WOLLMAN        0.000 78.239  20435',
'WINCE          0.000 78.240  20436',
'WIMBERLEY      0.000 78.240  20437',
'WILLMORE       0.000 78.241  20438',
'WILLETTS       0.000 78.241  20439',
'WIKOFF         0.000 78.242  20440',
'WIEDER         0.000 78.242  20441',
'WICKERT        0.000 78.242  20442',
'WHITENACK      0.000 78.243  20443',
'WERNICK        0.000 78.243  20444',
'WELTE          0.000 78.244  20445',
'WELDEN         0.000 78.244  20446',
'WEISKOPF       0.000 78.245  20447',
'WEISENBERGER   0.000 78.245  20448',
'WEICH          0.000 78.246  20449',
'WALLINGTON     0.000 78.246  20450',
'WALDER         0.000 78.246  20451',
'VOSSLER        0.000 78.247  20452',
'VORE           0.000 78.247  20453',
'VIGO           0.000 78.248  20454',
'VIERLING       0.000 78.248  20455',
'VICTORINE      0.000 78.249  20456',
'VERDUN         0.000 78.249  20457',
'VENCILL        0.000 78.250  20458',
'VENA           0.000 78.250  20459',
'VAZGUEZ        0.000 78.250  20460',
'VASSEL         0.000 78.251  20461',
'VANZILE        0.000 78.251  20462',
'VANVLIET       0.000 78.252  20463',
'VANTREASE      0.000 78.252  20464',
'VANNOSTRAND    0.000 78.253  20465',
'VANDERVEER     0.000 78.253  20466',
'VANDERVEEN     0.000 78.254  20467',
'VANCIL         0.000 78.254  20468',
'UYEDA          0.000 78.254  20469',
'UMPHREY        0.000 78.255  20470',
'UHLER          0.000 78.255  20471',
'UBER           0.000 78.256  20472',
'TUTSON         0.000 78.256  20473',
'TURRENTINE     0.000 78.257  20474',
'TULLIER        0.000 78.257  20475',
'TUGWELL        0.000 78.258  20476',
'TRUNDY         0.000 78.258  20477',
'TRIPODI        0.000 78.258  20478',
'TOMER          0.000 78.259  20479',
'TOMEI          0.000 78.259  20480',
'TOMASI         0.000 78.260  20481',
'TOMASELLI      0.000 78.260  20482',
'TOKARSKI       0.000 78.261  20483',
'TISHER         0.000 78.261  20484',
'TIBBETS        0.000 78.262  20485',
'THWEATT        0.000 78.262  20486',
'THISTLE        0.000 78.262  20487',
'THARRINGTON    0.000 78.263  20488',
'TESAR          0.000 78.263  20489',
'TELESCO        0.000 78.264  20490',
'TEASDALE       0.000 78.264  20491',
'TATEM          0.000 78.265  20492',
'TANIGUCHI      0.000 78.265  20493',
'SURIEL         0.000 78.266  20494',
'SUDLER         0.000 78.266  20495',
'STUTSMAN       0.000 78.266  20496',
'STURMAN        0.000 78.267  20497',
'STRITE         0.000 78.267  20498',
'STRELOW        0.000 78.268  20499',
'STREIGHT       0.000 78.268  20500',
'STRAWDER       0.000 78.269  20501',
'STRANSKY       0.000 78.269  20502',
'STRAHL         0.000 78.270  20503',
'STOURS         0.000 78.270  20504',
'STONG          0.000 78.270  20505',
'STINEBAUGH     0.000 78.271  20506',
'STILTS         0.000 78.271  20507',
'STILLSON       0.000 78.272  20508',
'STEYER         0.000 78.272  20509',
'STELLE         0.000 78.273  20510',
'STEFFY         0.000 78.273  20511',
'STEFFENSMEIER  0.000 78.274  20512',
'STATHAM        0.000 78.274  20513',
'SQUILLANTE     0.000 78.274  20514',
'SPIESS         0.000 78.275  20515',
'SPARGO         0.000 78.275  20516',
'SOUTHWARD      0.000 78.276  20517',
'SOLLER         0.000 78.276  20518',
'SODEN          0.000 78.277  20519',
'SNUGGS         0.000 78.277  20520',
'SNELLGROVE     0.000 78.278  20521',
'SMYERS         0.000 78.278  20522',
'SMIDDY         0.000 78.278  20523',
'SLONAKER       0.000 78.279  20524',
'SKYLES         0.000 78.279  20525',
'SKOWRON        0.000 78.280  20526',
'SIVILS         0.000 78.280  20527',
'SIQUEIROS      0.000 78.281  20528',
'SIERS          0.000 78.281  20529',
'SIDDALL        0.000 78.282  20530',
'SHORTY         0.000 78.282  20531',
'SHONTZ         0.000 78.282  20532',
'SHINGLER       0.000 78.283  20533',
'SHILEY         0.000 78.283  20534',
'SHIBLEY        0.000 78.284  20535',
'SHERARD        0.000 78.284  20536',
'SHELNUTT       0.000 78.285  20537',
'SHEDRICK       0.000 78.285  20538',
'SHASTEEN       0.000 78.286  20539',
'SERENO         0.000 78.286  20540',
'SELKE          0.000 78.286  20541',
'SCOVIL         0.000 78.287  20542',
'SCOLA          0.000 78.287  20543',
'SCHUETT        0.000 78.288  20544',
'SCHUESSLER     0.000 78.288  20545',
'SCHRECKENGOST  0.000 78.289  20546',
'SCHRANZ        0.000 78.289  20547',
'SCHOEPP        0.000 78.290  20548',
'SCHNEIDERMAN   0.000 78.290  20549',
'SCHLANGER      0.000 78.290  20550',
'SCHIELE        0.000 78.291  20551',
'SCHEUERMANN    0.000 78.291  20552',
'SCHERTZ        0.000 78.292  20553',
'SCHEIDLER      0.000 78.292  20554',
'SCHEFF         0.000 78.293  20555',
'SCHANER        0.000 78.293  20556',
'SCHAMBER       0.000 78.294  20557',
'SCARDINA       0.000 78.294  20558',
'SAVEDRA        0.000 78.294  20559',
'SAULNIER       0.000 78.295  20560',
'SATER          0.000 78.295  20561',
'SARRO          0.000 78.296  20562',
'SAMBRANO       0.000 78.296  20563',
'SALOMONE       0.000 78.297  20564',
'SABOURIN       0.000 78.297  20565',
'RUUD           0.000 78.298  20566',
'RUTTEN         0.000 78.298  20567',
'RUFFINO        0.000 78.298  20568',
'RUDDOCK        0.000 78.299  20569',
'ROWSER         0.000 78.299  20570',
'ROUSSELL       0.000 78.300  20571',
'ROSENGARTEN    0.000 78.300  20572',
'ROMINGER       0.000 78.301  20573',
'ROLLINSON      0.000 78.301  20574',
'ROHMAN         0.000 78.302  20575',
'ROESER         0.000 78.302  20576',
'RODENBERG      0.000 78.303  20577',
'ROBERDS        0.000 78.303  20578',
'RIDGELL        0.000 78.303  20579',
'RHODUS         0.000 78.304  20580',
'REYNAGA        0.000 78.304  20581',
'REXRODE        0.000 78.305  20582',
'REVELLE        0.000 78.305  20583',
'REMPEL         0.000 78.306  20584',
'REMIGIO        0.000 78.306  20585',
'REISING        0.000 78.307  20586',
'REILING        0.000 78.307  20587',
'REETZ          0.000 78.307  20588',
'RAYOS          0.000 78.308  20589',
'RAVENSCROFT    0.000 78.308  20590',
'RAVENELL       0.000 78.309  20591',
'RAULERSON      0.000 78.309  20592',
'RASMUSSON      0.000 78.310  20593',
'RASK           0.000 78.310  20594',
'RASE           0.000 78.311  20595',
'RAGON          0.000 78.311  20596',
'QUESNEL        0.000 78.311  20597',
'QUASHIE        0.000 78.312  20598',
'PUZO           0.000 78.312  20599',
'PUTERBAUGH     0.000 78.313  20600',
'PTAK           0.000 78.313  20601',
'PROST          0.000 78.314  20602',
'PRISBREY       0.000 78.314  20603',
'PRINCIPE       0.000 78.315  20604',
'PRICER         0.000 78.315  20605',
'PRATTE         0.000 78.315  20606',
'POUNCEY        0.000 78.316  20607',
'PORTMAN        0.000 78.316  20608',
'PONTIOUS       0.000 78.317  20609',
'POMERANTZ      0.000 78.317  20610',
'PLATTER        0.000 78.318  20611',
'PLANCK         0.000 78.318  20612',
'PILKENTON      0.000 78.319  20613',
'PILARSKI       0.000 78.319  20614',
'PIANO          0.000 78.319  20615',
'PHEGLEY        0.000 78.320  20616',
'PERTUIT        0.000 78.320  20617',
'PERLA          0.000 78.321  20618',
'PENTA          0.000 78.321  20619',
'PELC           0.000 78.322  20620',
'PEFFER         0.000 78.322  20621',
'PECH           0.000 78.323  20622',
'PEAGLER        0.000 78.323  20623',
'PAVELKA        0.000 78.323  20624',
'PAVAO          0.000 78.324  20625',
'PATMAN         0.000 78.324  20626',
'PASKETT        0.000 78.325  20627',
'PARRILLA       0.000 78.325  20628',
'PARDINI        0.000 78.326  20629',
'PAPAZIAN       0.000 78.326  20630',
'PANTER         0.000 78.327  20631',
'PALIN          0.000 78.327  20632',
'PALEY          0.000 78.327  20633',
'PAI            0.000 78.328  20634',
'PAGES          0.000 78.328  20635',
'PAETZOLD       0.000 78.329  20636',
'PACKETT        0.000 78.329  20637',
'PACHEO         0.000 78.330  20638',
'OSTREM         0.000 78.330  20639',
'ORSBORN        0.000 78.331  20640',
'OLMEDO         0.000 78.331  20641',
'OKAMURA        0.000 78.331  20642',
'OILER          0.000 78.332  20643',
'OHM            0.000 78.332  20644',
'OGLESBEE       0.000 78.333  20645',
'OATIS          0.000 78.333  20646',
'OAKLAND        0.000 78.334  20647',
'NUCKLES        0.000 78.334  20648',
'NOTTER         0.000 78.335  20649',
'NORDYKE        0.000 78.335  20650',
'NOGUEIRA       0.000 78.335  20651',
'NISWANDER      0.000 78.336  20652',
'NIBERT         0.000 78.336  20653',
'NESBY          0.000 78.337  20654',
'NELOMS         0.000 78.337  20655',
'NADING         0.000 78.338  20656',
'NAAB           0.000 78.338  20657',
'MUNNS          0.000 78.339  20658',
'MULLARKEY      0.000 78.339  20659',
'MOUDY          0.000 78.339  20660',
'MORET          0.000 78.340  20661',
'MONNIN         0.000 78.340  20662',
'MOLDER         0.000 78.341  20663',
'MODISETTE      0.000 78.341  20664',
'MOCZYGEMBA     0.000 78.342  20665',
'MOCTEZUMA      0.000 78.342  20666',
'MISCHKE        0.000 78.343  20667',
'MIRO           0.000 78.343  20668',
'MINGS          0.000 78.343  20669',
'MILOT          0.000 78.344  20670',
'MILLEDGE       0.000 78.344  20671',
'MILHORN        0.000 78.345  20672',
'MILERA         0.000 78.345  20673',
'MIELES         0.000 78.346  20674',
'MICKLEY        0.000 78.346  20675',
'MICHELLE       0.000 78.347  20676',
'MICEK          0.000 78.347  20677',
'METELLUS       0.000 78.347  20678',
'MERSCH         0.000 78.348  20679',
'MEROLA         0.000 78.348  20680',
'MERCURE        0.000 78.349  20681',
'MENCER         0.000 78.349  20682',
'MELLIN         0.000 78.350  20683',
'MELL           0.000 78.350  20684',
'MEINKE         0.000 78.351  20685',
'MCQUILLAN      0.000 78.351  20686',
'MCMURTRIE      0.000 78.351  20687',
'MCKILLOP       0.000 78.352  20688',
'MCKIERNAN      0.000 78.352  20689',
'MCKENDRICK     0.000 78.353  20690',
'MCKAMIE        0.000 78.353  20691',
'MCILVAINE      0.000 78.354  20692',
'MCGUFFIE       0.000 78.354  20693',
'MCGONIGLE      0.000 78.355  20694',
'MCGARRAH       0.000 78.355  20695',
'MCFETRIDGE     0.000 78.355  20696',
'MCENANEY       0.000 78.356  20697',
'MCDOW          0.000 78.356  20698',
'MCCUTCHAN      0.000 78.357  20699',
'MCCALLIE       0.000 78.357  20700',
'MCADAM         0.000 78.358  20701',
'MAYCOCK        0.000 78.358  20702',
'MAYBEE         0.000 78.359  20703',
'MATTEI         0.000 78.359  20704',
'MASSI          0.000 78.359  20705',
'MASSER         0.000 78.360  20706',
'MASIELLO       0.000 78.360  20707',
'MARTH          0.000 78.361  20708',
'MARSHELL       0.000 78.361  20709',
'MARMO          0.000 78.362  20710',
'MARKSBERRY     0.000 78.362  20711',
'MARKELL        0.000 78.363  20712',
'MARCHAL        0.000 78.363  20713',
'MANROSS        0.000 78.363  20714',
'MANGANARO      0.000 78.364  20715',
'MALLY          0.000 78.364  20716',
'MALLOW         0.000 78.365  20717',
'MAILHOT        0.000 78.365  20718',
'MAGYAR         0.000 78.366  20719',
'MADONNA        0.000 78.366  20720',
'MADERO         0.000 78.367  20721',
'MADDING        0.000 78.367  20722',
'MADDALENA      0.000 78.367  20723',
'MACFARLAND     0.000 78.368  20724',
'LYNES          0.000 78.368  20725',
'LUSH           0.000 78.369  20726',
'LUGAR          0.000 78.369  20727',
'LUCKIE         0.000 78.370  20728',
'LUCCA          0.000 78.370  20729',
'LOVITT         0.000 78.371  20730',
'LOVERIDGE      0.000 78.371  20731',
'LOUX           0.000 78.371  20732',
'LOTH           0.000 78.372  20733',
'LOSO           0.000 78.372  20734',
'LORENZANA      0.000 78.373  20735',
'LORANCE        0.000 78.373  20736',
'LOCKLEY        0.000 78.374  20737',
'LOCKAMY        0.000 78.374  20738',
'LITTLER        0.000 78.375  20739',
'LITMAN         0.000 78.375  20740',
'LITKE          0.000 78.376  20741',
'LIEBEL         0.000 78.376  20742',
'LICHTENBERGER  0.000 78.376  20743',
'LICEA          0.000 78.377  20744',
'LEVERICH       0.000 78.377  20745',
'LETARTE        0.000 78.378  20746',
'LESESNE        0.000 78.378  20747',
'LENO           0.000 78.379  20748',
'LEGLEITER      0.000 78.379  20749',
'LEFFEW         0.000 78.380  20750',
'LAURIN         0.000 78.380  20751',
'LAUNIUS        0.000 78.380  20752',
'LASWELL        0.000 78.381  20753',
'LASSEN         0.000 78.381  20754',
'LASALA         0.000 78.382  20755',
'LARAWAY        0.000 78.382  20756',
'LARAMORE       0.000 78.383  20757',
'LANDRITH       0.000 78.383  20758',
'LANCON         0.000 78.384  20759',
'LANAHAN        0.000 78.384  20760',
'LAICHE         0.000 78.384  20761',
'LAFORD         0.000 78.385  20762',
'LACHERMEIER    0.000 78.385  20763',
'KUNST          0.000 78.386  20764',
'KUGEL          0.000 78.386  20765',
'KUCK           0.000 78.387  20766',
'KUCHTA         0.000 78.387  20767',
'KUBE           0.000 78.388  20768',
'KORUS          0.000 78.388  20769',
'KOPPES         0.000 78.388  20770',
'KOLBE          0.000 78.389  20771',
'KOERBER        0.000 78.389  20772',
'KOCHAN         0.000 78.390  20773',
'KNITTEL        0.000 78.390  20774',
'KLUCK          0.000 78.391  20775',
'KLEVE          0.000 78.391  20776',
'KLEINE         0.000 78.392  20777',
'KITCH          0.000 78.392  20778',
'KIRTON         0.000 78.392  20779',
'KIRKER         0.000 78.393  20780',
'KINTZ          0.000 78.393  20781',
'KINGHORN       0.000 78.394  20782',
'KINDELL        0.000 78.394  20783',
'KIMREY         0.000 78.395  20784',
'KILDUFF        0.000 78.395  20785',
'KILCREASE      0.000 78.396  20786',
'KICKLIGHTER    0.000 78.396  20787',
'KIBBLE         0.000 78.396  20788',
'KERVIN         0.000 78.397  20789',
'KEPLINGER      0.000 78.397  20790',
'KEOGH          0.000 78.398  20791',
'KELLOG         0.000 78.398  20792',
'KEETH          0.000 78.399  20793',
'KEALEY         0.000 78.399  20794',
'KAZMIERCZAK    0.000 78.400  20795',
'KARNER         0.000 78.400  20796',
'KAMEL          0.000 78.400  20797',
'KALINA         0.000 78.401  20798',
'KACZYNSKI      0.000 78.401  20799',
'JUEL           0.000 78.402  20800',
'JOYE           0.000 78.402  20801',
'JERMAN         0.000 78.403  20802',
'JEPPSON        0.000 78.403  20803',
'JAWAD          0.000 78.404  20804',
'JASIK          0.000 78.404  20805',
'JAQUA          0.000 78.404  20806',
'JANUSZ         0.000 78.405  20807',
'JANCO          0.000 78.405  20808',
'ISLAND         0.000 78.406  20809',
'INSKEEP        0.000 78.406  20810',
'INKS           0.000 78.407  20811',
'INGOLD         0.000 78.407  20812',
'ING            0.000 78.408  20813',
'HYNDMAN        0.000 78.408  20814',
'HYMER          0.000 78.408  20815',
'HUNTE          0.000 78.409  20816',
'HUNKINS        0.000 78.409  20817',
'HUMBER         0.000 78.410  20818',
'HUFFSTUTLER    0.000 78.410  20819',
'HUFFINES       0.000 78.411  20820',
'HUDON          0.000 78.411  20821',
'HUDEC          0.000 78.412  20822',
'HOVLAND        0.000 78.412  20823',
'HOUZE          0.000 78.412  20824',
'HOUT           0.000 78.413  20825',
'HOUGLAND       0.000 78.413  20826',
'HOPF           0.000 78.414  20827',
'HON            0.000 78.414  20828',
'HOLSAPPLE      0.000 78.415  20829',
'HOLNESS        0.000 78.415  20830',
'HOLLENBACH     0.000 78.416  20831',
'HOFFMEISTER    0.000 78.416  20832',
'HITCHINGS      0.000 78.416  20833',
'HIRATA         0.000 78.417  20834',
'HIEBER         0.000 78.417  20835',
'HICKEL         0.000 78.418  20836',
'HEWEY          0.000 78.418  20837',
'HERRIMAN       0.000 78.419  20838',
'HERMANSEN      0.000 78.419  20839',
'HERANDEZ       0.000 78.420  20840',
'HENZE          0.000 78.420  20841',
'HEFFELFINGER   0.000 78.420  20842',
'HEDGECOCK      0.000 78.421  20843',
'HAZLITT        0.000 78.421  20844',
'HAZELRIGG      0.000 78.422  20845',
'HAYCOCK        0.000 78.422  20846',
'HARREN         0.000 78.423  20847',
'HARNAGE        0.000 78.423  20848',
'HARLING        0.000 78.424  20849',
'HARCROW        0.000 78.424  20850',
'HANNOLD        0.000 78.424  20851',
'HANLINE        0.000 78.425  20852',
'HANEL          0.000 78.425  20853',
'HANBERRY       0.000 78.426  20854',
'HAMMERSLEY     0.000 78.426  20855',
'HAMERNIK       0.000 78.427  20856',
'HALLIWELL      0.000 78.427  20857',
'HAJDUK         0.000 78.428  20858',
'HAITHCOCK      0.000 78.428  20859',
'HAFF           0.000 78.428  20860',
'HADAWAY        0.000 78.429  20861',
'HAAN           0.000 78.429  20862',
'GULLATT        0.000 78.430  20863',
'GUILBAULT      0.000 78.430  20864',
'GUIDOTTI       0.000 78.431  20865',
'GRUNER         0.000 78.431  20866',
'GRISSON        0.000 78.432  20867',
'GRIEVES        0.000 78.432  20868',
'GRANATO        0.000 78.432  20869',
'GRACIE         0.000 78.433  20870',
'GRABERT        0.000 78.433  20871',
'GOVER          0.000 78.434  20872',
'GORKA          0.000 78.434  20873',
'GLUECK         0.000 78.435  20874',
'GIRARDIN       0.000 78.435  20875',
'GIORGIO        0.000 78.436  20876',
'GIESLER        0.000 78.436  20877',
'GERSTEN        0.000 78.436  20878',
'GERING         0.000 78.437  20879',
'GEERS          0.000 78.437  20880',
'GAUT           0.000 78.438  20881',
'GAULIN         0.000 78.438  20882',
'GASKAMP        0.000 78.439  20883',
'GARBETT        0.000 78.439  20884',
'GALLIVAN       0.000 78.440  20885',
'GALLAND        0.000 78.440  20886',
'GAETH          0.000 78.440  20887',
'FULLENKAMP     0.000 78.441  20888',
'FULLAM         0.000 78.441  20889',
'FRIEDRICHS     0.000 78.442  20890',
'FREIRE         0.000 78.442  20891',
'FREENEY        0.000 78.443  20892',
'FREDENBURG     0.000 78.443  20893',
'FRAPPIER       0.000 78.444  20894',
'FOWKES         0.000 78.444  20895',
'FOREE          0.000 78.445  20896',
'FLEURANT       0.000 78.445  20897',
'FLEIG          0.000 78.445  20898',
'FLEAGLE        0.000 78.446  20899',
'FITZSIMONS     0.000 78.446  20900',
'FISCHETTI      0.000 78.447  20901',
'FIORENZA       0.000 78.447  20902',
'FINNERAN       0.000 78.448  20903',
'FILIPPI        0.000 78.448  20904',
'FIGUERAS       0.000 78.449  20905',
'FESLER         0.000 78.449  20906',
'FERTIG         0.000 78.449  20907',
'FENNEL         0.000 78.450  20908',
'FELTMANN       0.000 78.450  20909',
'FELPS          0.000 78.451  20910',
'FELMLEE        0.000 78.451  20911',
'FAYE           0.000 78.452  20912',
'FANNON         0.000 78.452  20913',
'FAMILIA        0.000 78.453  20914',
'FAIRALL        0.000 78.453  20915',
'FAIL           0.000 78.453  20916',
'FADDEN         0.000 78.454  20917',
'ESSLINGER      0.000 78.454  20918',
'ENFINGER       0.000 78.455  20919',
'ELSASSER       0.000 78.455  20920',
'ELMENDORF      0.000 78.456  20921',
'ELLISOR        0.000 78.456  20922',
'EINHORN        0.000 78.457  20923',
'EHRMAN         0.000 78.457  20924',
'EGNER          0.000 78.457  20925',
'EDMISTEN       0.000 78.458  20926',
'EDLUND         0.000 78.458  20927',
'EBINGER        0.000 78.459  20928',
'DYMENT         0.000 78.459  20929',
'DYKEMAN        0.000 78.460  20930',
'DURLING        0.000 78.460  20931',
'DUNSTAN        0.000 78.461  20932',
'DUNSMORE       0.000 78.461  20933',
'DUGAL          0.000 78.461  20934',
'DUER           0.000 78.462  20935',
'DRESCHER       0.000 78.462  20936',
'DOYEL          0.000 78.463  20937',
'DOWN           0.000 78.463  20938',
'DOSSEY         0.000 78.464  20939',
'DONELAN        0.000 78.464  20940',
'DOCKSTADER     0.000 78.465  20941',
'DOBYNS         0.000 78.465  20942',
'DIVIS          0.000 78.465  20943',
'DILKS          0.000 78.466  20944',
'DIDIER         0.000 78.466  20945',
'DESROSIER      0.000 78.467  20946',
'DESANTO        0.000 78.467  20947',
'DEPPE          0.000 78.468  20948',
'DENG           0.000 78.468  20949',
'DELOSH         0.000 78.469  20950',
'DELANGE        0.000 78.469  20951',
'DEFRANK        0.000 78.469  20952',
'DEBO           0.000 78.470  20953',
'DAUBER         0.000 78.470  20954',
'DARTEZ         0.000 78.471  20955',
'DAQUILA        0.000 78.471  20956',
'DANKERT        0.000 78.472  20957',
'DAHN           0.000 78.472  20958',
'CYGAN          0.000 78.473  20959',
'CUSIC          0.000 78.473  20960',
'CURFMAN        0.000 78.473  20961',
'CROGHAN        0.000 78.474  20962',
'CROFF          0.000 78.474  20963',
'CRIGER         0.000 78.475  20964',
'CREVISTON      0.000 78.475  20965',
'CRAYS          0.000 78.476  20966',
'CRAVEY         0.000 78.476  20967',
'CRANDLE        0.000 78.477  20968',
'CRAIL          0.000 78.477  20969',
'CRAGO          0.000 78.477  20970',
'CRAGHEAD       0.000 78.478  20971',
'COUSINEAU      0.000 78.478  20972',
'COUCHMAN       0.000 78.479  20973',
'COTHRON        0.000 78.479  20974',
'CORELLA        0.000 78.480  20975',
'CONINE         0.000 78.480  20976',
'COLLER         0.000 78.481  20977',
'COLBERG        0.000 78.481  20978',
'COGLEY         0.000 78.481  20979',
'COATNEY        0.000 78.482  20980',
'COALE          0.000 78.482  20981',
'CLENDENIN      0.000 78.483  20982',
'CLAYWELL       0.000 78.483  20983',
'CLAGON         0.000 78.484  20984',
'CIFALDI        0.000 78.484  20985',
'CHOINIERE      0.000 78.485  20986',
'CHICKERING     0.000 78.485  20987',
'CHICA          0.000 78.485  20988',
'CHENNAULT      0.000 78.486  20989',
'CHAVARIN       0.000 78.486  20990',
'CHATTIN        0.000 78.487  20991',
'CHALOUX        0.000 78.487  20992',
'CHALLIS        0.000 78.488  20993',
'CESARIO        0.000 78.488  20994',
'CERTAIN        0.000 78.489  20995',
'CAZAREZ        0.000 78.489  20996',
'CAUGHMAN       0.000 78.489  20997',
'CATLEDGE       0.000 78.490  20998',
'CASEBOLT       0.000 78.490  20999',
'CARREL         0.000 78.491  21000',
'CARRA          0.000 78.491  21001',
'CARLOW         0.000 78.492  21002',
'CAPOTE         0.000 78.492  21003',
'CANEZ          0.000 78.493  21004',
'CAMILLO        0.000 78.493  21005',
'CALIENDO       0.000 78.493  21006',
'CALBERT        0.000 78.494  21007',
'CAIRO          0.000 78.494  21008',
'BYLSMA         0.000 78.495  21009',
'BUSTLE         0.000 78.495  21010',
'BUSKEY         0.000 78.496  21011',
'BUSCHMAN       0.000 78.496  21012',
'BURKHARD       0.000 78.497  21013',
'BURGHARDT      0.000 78.497  21014',
'BURGARD        0.000 78.497  21015',
'BUONOCORE      0.000 78.498  21016',
'BUNKLEY        0.000 78.498  21017',
'BUNGARD        0.000 78.499  21018',
'BUNDRICK       0.000 78.499  21019',
'BUMBREY        0.000 78.500  21020',
'BUICE          0.000 78.500  21021',
'BUFFKIN        0.000 78.501  21022',
'BRUNDIGE       0.000 78.501  21023',
'BROCKWELL      0.000 78.501  21024',
'BRION          0.000 78.502  21025',
'BRIN           0.000 78.502  21026',
'BRIANT         0.000 78.503  21027',
'BREDESON       0.000 78.503  21028',
'BRANSFORD      0.000 78.504  21029',
'BRANNOCK       0.000 78.504  21030',
'BRAKEFIELD     0.000 78.505  21031',
'BRACKENS       0.000 78.505  21032',
'BRABANT        0.000 78.505  21033',
'BOXER          0.000 78.506  21034',
'BOWDOIN        0.000 78.506  21035',
'BOUYER         0.000 78.507  21036',
'BOTHE          0.000 78.507  21037',
'BOOR           0.000 78.508  21038',
'BONAVITA       0.000 78.508  21039',
'BOLLIG         0.000 78.509  21040',
'BLURTON        0.000 78.509  21041',
'BLUNK          0.000 78.509  21042',
'BLANKE         0.000 78.510  21043',
'BLANCK         0.000 78.510  21044',
'BIRDEN         0.000 78.511  21045',
'BIERBAUM       0.000 78.511  21046',
'BEVINGTON      0.000 78.512  21047',
'BEUTLER        0.000 78.512  21048',
'BETTERS        0.000 78.513  21049',
'BETTCHER       0.000 78.513  21050',
'BERA           0.000 78.513  21051',
'BENWAY         0.000 78.514  21052',
'BENGSTON       0.000 78.514  21053',
'BENESH         0.000 78.515  21054',
'BEHAR          0.000 78.515  21055',
'BEDSOLE        0.000 78.516  21056',
'BECENTI        0.000 78.516  21057',
'BEACHY         0.000 78.517  21058',
'BATTERSBY      0.000 78.517  21059',
'BASTA          0.000 78.518  21060',
'BARTMESS       0.000 78.518  21061',
'BARTLE         0.000 78.518  21062',
'BARTKOWIAK     0.000 78.519  21063',
'BARSKY         0.000 78.519  21064',
'BARRIO         0.000 78.520  21065',
'BARLETTA       0.000 78.520  21066',
'BARFOOT        0.000 78.521  21067',
'BANEGAS        0.000 78.521  21068',
'BALLIN         0.000 78.522  21069',
'BALDONADO      0.000 78.522  21070',
'BAL            0.000 78.522  21071',
'AZCONA         0.000 78.523  21072',
'AVANTS         0.000 78.523  21073',
'AUSTELL        0.000 78.524  21074',
'AUNGST         0.000 78.524  21075',
'AUNE           0.000 78.525  21076',
'AUMANN         0.000 78.525  21077',
'AUDIA          0.000 78.526  21078',
'ATTERBURY      0.000 78.526  21079',
'ASSELIN        0.000 78.526  21080',
'ASMUSSEN       0.000 78.527  21081',
'ASHLINE        0.000 78.527  21082',
'ASBILL         0.000 78.528  21083',
'ARVIZO         0.000 78.528  21084',
'ARNOT          0.000 78.529  21085',
'ARIOLA         0.000 78.529  21086',
'ARDREY         0.000 78.530  21087',
'ANGSTADT       0.000 78.530  21088',
'ANASTASIO      0.000 78.530  21089',
'AMSDEN         0.000 78.531  21090',
'AMOR           0.000 78.531  21091',
'AMERMAN        0.000 78.532  21092',
'ALRED          0.000 78.532  21093',
'ALMEDA         0.000 78.533  21094',
'ALLINGTON      0.000 78.533  21095',
'ALEWINE        0.000 78.534  21096',
'ALCINA         0.000 78.534  21097',
'ALBERICO       0.000 78.534  21098',
'ALAS           0.000 78.535  21099',
'AHLGREN        0.000 78.535  21100',
'AGUAS          0.000 78.536  21101',
'AGRAWAL        0.000 78.536  21102',
'AGOSTA         0.000 78.537  21103',
'ADOLPHSEN      0.000 78.537  21104',
'ADDIE          0.000 78.538  21105',
'ACRE           0.000 78.538  21106',
'ACEY           0.000 78.538  21107',
'ABURTO         0.000 78.539  21108',
'ABLER          0.000 78.539  21109',
'ZWIEBEL        0.000 78.540  21110',
'ZUK            0.000 78.540  21111',
'ZEPP           0.000 78.541  21112',
'ZENTZ          0.000 78.541  21113',
'YBARBO         0.000 78.541  21114',
'YARBERRY       0.000 78.542  21115',
'YAMAUCHI       0.000 78.542  21116',
'YAMASHIRO      0.000 78.543  21117',
'WURTZ          0.000 78.543  21118',
'WRONSKI        0.000 78.544  21119',
'WORSTER        0.000 78.544  21120',
'WOOTTEN        0.000 78.544  21121',
'WOOL           0.000 78.545  21122',
'WONGUS         0.000 78.545  21123',
'WOLTZ          0.000 78.546  21124',
'WOLANSKI       0.000 78.546  21125',
'WITZKE         0.000 78.547  21126',
'WITHEY         0.000 78.547  21127',
'WISECARVER     0.000 78.547  21128',
'WINGHAM        0.000 78.548  21129',
'WINEINGER      0.000 78.548  21130',
'WINEGARDEN     0.000 78.549  21131',
'WINDHOLZ       0.000 78.549  21132',
'WILGUS         0.000 78.550  21133',
'WIESEN         0.000 78.550  21134',
'WIECK          0.000 78.550  21135',
'WIDRICK        0.000 78.551  21136',
'WICKLIFFE      0.000 78.551  21137',
'WHITTENBERG    0.000 78.552  21138',
'WESTBY         0.000 78.552  21139',
'WERLEY         0.000 78.553  21140',
'WENGERT        0.000 78.553  21141',
'WENDORF        0.000 78.553  21142',
'WEIMAR         0.000 78.554  21143',
'WEICK          0.000 78.554  21144',
'WECKERLY       0.000 78.555  21145',
'WATROUS        0.000 78.555  21146',
'WASDEN         0.000 78.556  21147',
'WALFORD        0.000 78.556  21148',
'WAINRIGHT      0.000 78.556  21149',
'WAHLSTROM      0.000 78.557  21150',
'WADLOW         0.000 78.557  21151',
'VRBA           0.000 78.558  21152',
'VOISIN         0.000 78.558  21153',
'VIVES          0.000 78.559  21154',
'VIVAS          0.000 78.559  21155',
'VITELLO        0.000 78.559  21156',
'VILLESCAS      0.000 78.560  21157',
'VILLAVICENCIO  0.000 78.560  21158',
'VILLANOVA      0.000 78.561  21159',
'VIALPANDO      0.000 78.561  21160',
'VETRANO        0.000 78.562  21161',
'VERONA         0.000 78.562  21162',
'VENSEL         0.000 78.562  21163',
'VASSELL        0.000 78.563  21164',
'VARANO         0.000 78.563  21165',
'VANRIPER       0.000 78.564  21166',
'VANKLEECK      0.000 78.564  21167',
'VANDUYNE       0.000 78.565  21168',
'VANDERPOL      0.000 78.565  21169',
'VANANTWERP     0.000 78.565  21170',
'VALENZULA      0.000 78.566  21171',
'UDELL          0.000 78.566  21172',
'TURNQUIST      0.000 78.567  21173',
'TUFF           0.000 78.567  21174',
'TRICKETT       0.000 78.568  21175',
'TREMBLE        0.000 78.568  21176',
'TRAMBLE        0.000 78.569  21177',
'TINGEY         0.000 78.569  21178',
'TING           0.000 78.569  21179',
'TIMBERS        0.000 78.570  21180',
'TIETZ          0.000 78.570  21181',
'THON           0.000 78.571  21182',
'THIEM          0.000 78.571  21183',
'THEN           0.000 78.572  21184',
'TERCERO        0.000 78.572  21185',
'TENNER         0.000 78.572  21186',
'TENAGLIA       0.000 78.573  21187',
'TEASTER        0.000 78.573  21188',
'TARLTON        0.000 78.574  21189',
'TAITT          0.000 78.574  21190',
'TAGGERT        0.000 78.575  21191',
'TABON          0.000 78.575  21192',
'SWARD          0.000 78.575  21193',
'SWABY          0.000 78.576  21194',
'SUYDAM         0.000 78.576  21195',
'SURITA         0.000 78.577  21196',
'SUMAN          0.000 78.577  21197',
'SUGAR          0.000 78.578  21198',
'SUDDETH        0.000 78.578  21199',
'STUMBO         0.000 78.578  21200',
'STUDIVANT      0.000 78.579  21201',
'STROBL         0.000 78.579  21202',
'STRETCH        0.000 78.580  21203',
'STREICH        0.000 78.580  21204',
'STOW           0.000 78.581  21205',
'STOODLEY       0.000 78.581  21206',
'STOECKER       0.000 78.581  21207',
'STILLWAGON     0.000 78.582  21208',
'STICKLE        0.000 78.582  21209',
'STELLMACHER    0.000 78.583  21210',
'STEFANIK       0.000 78.583  21211',
'STEEDLEY       0.000 78.584  21212',
'STARBIRD       0.000 78.584  21213',
'STAKE          0.000 78.584  21214',
'STAINBACK      0.000 78.585  21215',
'STACKER        0.000 78.585  21216',
'SPEIR          0.000 78.586  21217',
'SPATH          0.000 78.586  21218',
'SOMMERFELD     0.000 78.587  21219',
'SOLTANI        0.000 78.587  21220',
'SOLIE          0.000 78.587  21221',
'SOJKA          0.000 78.588  21222',
'SOBOTA         0.000 78.588  21223',
'SOBIESKI       0.000 78.589  21224',
'SOBCZAK        0.000 78.589  21225',
'SMULLEN        0.000 78.590  21226',
'SLEETH         0.000 78.590  21227',
'SLAYMAKER      0.000 78.590  21228',
'SKOLNICK       0.000 78.591  21229',
'SKOGLUND       0.000 78.591  21230',
'SIRES          0.000 78.592  21231',
'SINGLER        0.000 78.592  21232',
'SILLIMAN       0.000 78.593  21233',
'SHROCK         0.000 78.593  21234',
'SHOTT          0.000 78.593  21235',
'SHIRAH         0.000 78.594  21236',
'SHIMEK         0.000 78.594  21237',
'SHEPPERD       0.000 78.595  21238',
'SHEFFLER       0.000 78.595  21239',
'SHEELER        0.000 78.596  21240',
'SHARROCK       0.000 78.596  21241',
'SHARMAN        0.000 78.596  21242',
'SHALASH        0.000 78.597  21243',
'SEYFRIED       0.000 78.597  21244',
'SEYBOLD        0.000 78.598  21245',
'SELANDER       0.000 78.598  21246',
'SEIP           0.000 78.599  21247',
'SEIFRIED       0.000 78.599  21248',
'SEDOR          0.000 78.599  21249',
'SEDLOCK        0.000 78.600  21250',
'SEBESTA        0.000 78.600  21251',
'SEAGO          0.000 78.601  21252',
'SCUTT          0.000 78.601  21253',
'SCRIVENS       0.000 78.602  21254',
'SCIACCA        0.000 78.602  21255',
'SCHULTZE       0.000 78.602  21256',
'SCHOEMAKER     0.000 78.603  21257',
'SCHLEIFER      0.000 78.603  21258',
'SCHLAGEL       0.000 78.604  21259',
'SCHLACHTER     0.000 78.604  21260',
'SCHEMPP        0.000 78.605  21261',
'SCHEIDER       0.000 78.605  21262',
'SCARBORO       0.000 78.605  21263',
'SANTI          0.000 78.606  21264',
'SANG           0.000 78.606  21265',
'SANDHU         0.000 78.607  21266',
'SALLY          0.000 78.607  21267',
'SALIM          0.000 78.608  21268',
'SAIA           0.000 78.608  21269',
'RYLANDER       0.000 78.608  21270',
'RYBURN         0.000 78.609  21271',
'RUTIGLIANO     0.000 78.609  21272',
'RUOCCO         0.000 78.610  21273',
'RULAND         0.000 78.610  21274',
'RUDLOFF        0.000 78.611  21275',
'ROTT           0.000 78.611  21276',
'ROSENBURG      0.000 78.611  21277',
'ROSENBECK      0.000 78.612  21278',
'ROMBERGER      0.000 78.612  21279',
'ROMANELLI      0.000 78.613  21280',
'ROHLOFF        0.000 78.613  21281',
'ROHLFING       0.000 78.614  21282',
'RODDA          0.000 78.614  21283',
'RODD           0.000 78.614  21284',
'RITACCO        0.000 78.615  21285',
'RIELLY         0.000 78.615  21286',
'RIECK          0.000 78.616  21287',
'RICKLES        0.000 78.616  21288',
'RICKENBACKER   0.000 78.617  21289',
'RHETT          0.000 78.617  21290',
'RESPASS        0.000 78.617  21291',
'REISNER        0.000 78.618  21292',
'REINECK        0.000 78.618  21293',
'REIGHARD       0.000 78.619  21294',
'REHBEIN        0.000 78.619  21295',
'REGA           0.000 78.620  21296',
'REDWOOD        0.000 78.620  21297',
'REDDIX         0.000 78.620  21298',
'RAZOR          0.000 78.621  21299',
'RAWLES         0.000 78.621  21300',
'RAVER          0.000 78.622  21301',
'RATTLER        0.000 78.622  21302',
'RATLEDGE       0.000 78.623  21303',
'RATHMAN        0.000 78.623  21304',
'RAMSBURG       0.000 78.623  21305',
'RAISOR         0.000 78.624  21306',
'RADOVICH       0.000 78.624  21307',
'RADIGAN        0.000 78.625  21308',
'QUAIL          0.000 78.625  21309',
'PUSKAR         0.000 78.626  21310',
'PURTEE         0.000 78.626  21311',
'PRIESTLY       0.000 78.626  21312',
'PRESTIDGE      0.000 78.627  21313',
'PRESTI         0.000 78.627  21314',
'PRESSLY        0.000 78.628  21315',
'POZO           0.000 78.628  21316',
'POTTINGER      0.000 78.629  21317',
'PORTIER        0.000 78.629  21318',
'PORTA          0.000 78.629  21319',
'PORCELLI       0.000 78.630  21320',
'POPLAWSKI      0.000 78.630  21321',
'POLIN          0.000 78.631  21322',
'POINTS         0.000 78.631  21323',
'POEPPELMAN     0.000 78.632  21324',
'POCOCK         0.000 78.632  21325',
'PLUMP          0.000 78.632  21326',
'PLANTZ         0.000 78.633  21327',
'PLACEK         0.000 78.633  21328',
'PIRO           0.000 78.634  21329',
'PINNELL        0.000 78.634  21330',
'PINKOWSKI      0.000 78.635  21331',
'PIETZ          0.000 78.635  21332',
'PICONE         0.000 78.635  21333',
'PHILBECK       0.000 78.636  21334',
'PFLUM          0.000 78.636  21335',
'PEVETO         0.000 78.637  21336',
'PERRET         0.000 78.637  21337',
'PENTZ          0.000 78.638  21338',
'PAYER          0.000 78.638  21339',
'PAULETTE       0.000 78.638  21340',
'PATLAN         0.000 78.639  21341',
'PATERNO        0.000 78.639  21342',
'PAPAGEORGE     0.000 78.640  21343',
'PAE            0.000 78.640  21344',
'OVERMYER       0.000 78.641  21345',
'OVERLAND       0.000 78.641  21346',
'OSIER          0.000 78.641  21347',
'ORWIG          0.000 78.642  21348',
'ORUM           0.000 78.642  21349',
'OROSZ          0.000 78.643  21350',
'OQUIN          0.000 78.643  21351',
'OPIE           0.000 78.644  21352',
'ODA            0.000 78.644  21353',
'OCHSNER        0.000 78.644  21354',
'OATHOUT        0.000 78.645  21355',
'NYGARD         0.000 78.645  21356',
'NORVILLE       0.000 78.646  21357',
'NORTHWAY       0.000 78.646  21358',
'NIVER          0.000 78.647  21359',
'NICOLSON       0.000 78.647  21360',
'NEWHART        0.000 78.647  21361',
'NERY           0.000 78.648  21362',
'NEITZEL        0.000 78.648  21363',
'NATH           0.000 78.649  21364',
'NANEZ          0.000 78.649  21365',
'MUSTARD        0.000 78.650  21366',
'MURNANE        0.000 78.650  21367',
'MORTELLARO     0.000 78.650  21368',
'MORREALE       0.000 78.651  21369',
'MORINO         0.000 78.651  21370',
'MORIARITY      0.000 78.652  21371',
'MORGADO        0.000 78.652  21372',
'MOOREHOUSE     0.000 78.653  21373',
'MONGIELLO      0.000 78.653  21374',
'MOLTON         0.000 78.653  21375',
'MIRZA          0.000 78.654  21376',
'MINNIX         0.000 78.654  21377',
'MILLSPAUGH     0.000 78.655  21378',
'MILBY          0.000 78.655  21379',
'MILAND         0.000 78.656  21380',
'MIGUEZ         0.000 78.656  21381',
'MICKLES        0.000 78.656  21382',
'MICHAUX        0.000 78.657  21383',
'MENTO          0.000 78.657  21384',
'MELUGIN        0.000 78.658  21385',
'MELROSE        0.000 78.658  21386',
'MELITO         0.000 78.659  21387',
'MEINECKE       0.000 78.659  21388',
'MEHR           0.000 78.660  21389',
'MEARES         0.000 78.660  21390',
'MCNEECE        0.000 78.660  21391',
'MCKANE         0.000 78.661  21392',
'MCGLASSON      0.000 78.661  21393',
'MCGIRT         0.000 78.662  21394',
'MCGILVERY      0.000 78.662  21395',
'MCCULLER       0.000 78.663  21396',
'MCCOWEN        0.000 78.663  21397',
'MCCOOK         0.000 78.663  21398',
'MCCLINTIC      0.000 78.664  21399',
'MCCALLON       0.000 78.664  21400',
'MAZZOTTA       0.000 78.665  21401',
'MAZA           0.000 78.665  21402',
'MAYSE          0.000 78.666  21403',
'MAYEDA         0.000 78.666  21404',
'MATOUSEK       0.000 78.666  21405',
'MATLEY         0.000 78.667  21406',
'MARTYN         0.000 78.667  21407',
'MAROON         0.000 78.668  21408',
'MARNEY         0.000 78.668  21409',
'MARNELL        0.000 78.669  21410',
'MARLING        0.000 78.669  21411',
'MARCELINO      0.000 78.669  21412',
'MANUELITO      0.000 78.670  21413',
'MALTOS         0.000 78.670  21414',
'MALSON         0.000 78.671  21415',
'MAIRE          0.000 78.671  21416',
'MAHI           0.000 78.672  21417',
'MAFFUCCI       0.000 78.672  21418',
'MACKEN         0.000 78.672  21419',
'MAASS          0.000 78.673  21420',
'LYTTLE         0.000 78.673  21421',
'LYND           0.000 78.674  21422',
'LYDEN          0.000 78.674  21423',
'LUKASIEWICZ    0.000 78.675  21424',
'LUEBBERS       0.000 78.675  21425',
'LOVERING       0.000 78.675  21426',
'LOVEALL        0.000 78.676  21427',
'LORDS          0.000 78.676  21428',
'LONGTIN        0.000 78.677  21429',
'LOK            0.000 78.677  21430',
'LOBUE          0.000 78.678  21431',
'LOBERG         0.000 78.678  21432',
'LOAN           0.000 78.678  21433',
'LIPKA          0.000 78.679  21434',
'LION           0.000 78.679  21435',
'LINEN          0.000 78.680  21436',
'LIGHTBODY      0.000 78.680  21437',
'LICHTY         0.000 78.681  21438',
'LEVERT         0.000 78.681  21439',
'LEV            0.000 78.681  21440',
'LETTIERI       0.000 78.682  21441',
'LETSINGER      0.000 78.682  21442',
'LEPAK          0.000 78.683  21443',
'LEMMOND        0.000 78.683  21444',
'LEMBKE         0.000 78.684  21445',
'LEITZ          0.000 78.684  21446',
'LASSO          0.000 78.684  21447',
'LASITER        0.000 78.685  21448',
'LANGO          0.000 78.685  21449',
'LANDSMAN       0.000 78.686  21450',
'LAMIRANDE      0.000 78.686  21451',
'LAMEY          0.000 78.687  21452',
'LABER          0.000 78.687  21453',
'KUTA           0.000 78.687  21454',
'KULESZA        0.000 78.688  21455',
'KUA            0.000 78.688  21456',
'KRENZ          0.000 78.689  21457',
'KREINER        0.000 78.689  21458',
'KREIN          0.000 78.690  21459',
'KREIGER        0.000 78.690  21460',
'KRAUSHAAR      0.000 78.690  21461',
'KOTTKE         0.000 78.691  21462',
'KOSER          0.000 78.691  21463',
'KORNREICH      0.000 78.692  21464',
'KOPCZYNSKI     0.000 78.692  21465',
'KONECNY        0.000 78.693  21466',
'KOK            0.000 78.693  21467',
'KOFF           0.000 78.693  21468',
'KOEHL          0.000 78.694  21469',
'KOCIAN         0.000 78.694  21470',
'KNAUB          0.000 78.695  21471',
'KMETZ          0.000 78.695  21472',
'KLUENDER       0.000 78.696  21473',
'KLENKE         0.000 78.696  21474',
'KLEEMAN        0.000 78.696  21475',
'KITZMILLER     0.000 78.697  21476',
'KIRSH          0.000 78.697  21477',
'KILMAN         0.000 78.698  21478',
'KILDOW         0.000 78.698  21479',
'KIELBASA       0.000 78.699  21480',
'KETELSEN       0.000 78.699  21481',
'KESINGER       0.000 78.699  21482',
'KENDRA         0.000 78.700  21483',
'KEHR           0.000 78.700  21484',
'KEEF           0.000 78.701  21485',
'KAUZLARICH     0.000 78.701  21486',
'KARTER         0.000 78.702  21487',
'KAHRE          0.000 78.702  21488',
'JUNK           0.000 78.702  21489',
'JONG           0.000 78.703  21490',
'JOBIN          0.000 78.703  21491',
'JOAQUIN        0.000 78.704  21492',
'JINKINS        0.000 78.704  21493',
'JINES          0.000 78.705  21494',
'JEFFRESS       0.000 78.705  21495',
'JAQUITH        0.000 78.705  21496',
'JAILLET        0.000 78.706  21497',
'JABLONOWSKI    0.000 78.706  21498',
'ISHIKAWA       0.000 78.707  21499',
'IREY           0.000 78.707  21500',
'INGERSON       0.000 78.708  21501',
'INDELICATO     0.000 78.708  21502',
'IN             0.000 78.708  21503',
'HUNTZINGER     0.000 78.709  21504',
'HUISMAN        0.000 78.709  21505',
'HUETT          0.000 78.710  21506',
'HOWSON         0.000 78.710  21507',
'HOUGE          0.000 78.711  21508',
'HOSACK         0.000 78.711  21509',
'HORA           0.000 78.711  21510',
'HOOBLER        0.000 78.712  21511',
'HOLTZEN        0.000 78.712  21512',
'HOLTSCLAW      0.000 78.713  21513',
'HOLLINGWORTH   0.000 78.713  21514',
'HOLLIN         0.000 78.714  21515',
'HOBERG         0.000 78.714  21516',
'HOBAUGH        0.000 78.714  21517',
'HILKER         0.000 78.715  21518',
'HILGEFORT      0.000 78.715  21519',
'HIGGENBOTHAM   0.000 78.716  21520',
'HEYEN          0.000 78.716  21521',
'HETZLER        0.000 78.717  21522',
'HESSEL         0.000 78.717  21523',
'HENNESSEE      0.000 78.717  21524',
'HENDRIE        0.000 78.718  21525',
'HELLMANN       0.000 78.718  21526',
'HEFT           0.000 78.719  21527',
'HEESCH         0.000 78.719  21528',
'HAYMOND        0.000 78.720  21529',
'HAYMON         0.000 78.720  21530',
'HAYE           0.000 78.720  21531',
'HAVLIK         0.000 78.721  21532',
'HAVIS          0.000 78.721  21533',
'HAVERLAND      0.000 78.722  21534',
'HAUS           0.000 78.722  21535',
'HARSTAD        0.000 78.723  21536',
'HARRISTON      0.000 78.723  21537',
'HARM           0.000 78.723  21538',
'HARJU          0.000 78.724  21539',
'HARDEGREE      0.000 78.724  21540',
'HANKEY         0.000 78.725  21541',
'HANDS          0.000 78.725  21542',
'HAMPSHIRE      0.000 78.726  21543',
'HAMMELL        0.000 78.726  21544',
'HAMAKER        0.000 78.726  21545',
'HALBROOK       0.000 78.727  21546',
'HALBERG        0.000 78.727  21547',
'GUPTILL        0.000 78.728  21548',
'GUNTRUM        0.000 78.728  21549',
'GUNDERMAN      0.000 78.729  21550',
'GUNDER         0.000 78.729  21551',
'GULARTE        0.000 78.729  21552',
'GUARNIERI      0.000 78.730  21553',
'GU             0.000 78.730  21554',
'GROLL          0.000 78.731  21555',
'GRIPPO         0.000 78.731  21556',
'GREELY         0.000 78.732  21557',
'GRAVE          0.000 78.732  21558',
'GRAMLICH       0.000 78.732  21559',
'GOH            0.000 78.733  21560',
'GOEWEY         0.000 78.733  21561',
'GOETZINGER     0.000 78.734  21562',
'GODING         0.000 78.734  21563',
'GIRAUD         0.000 78.735  21564',
'GIEFER         0.000 78.735  21565',
'GIBERSON       0.000 78.735  21566',
'GENNARO        0.000 78.736  21567',
'GEMMELL        0.000 78.736  21568',
'GEARING        0.000 78.737  21569',
'GAYLES         0.000 78.737  21570',
'GAUDIN         0.000 78.738  21571',
'GATZ           0.000 78.738  21572',
'GATTS          0.000 78.738  21573',
'GASCA          0.000 78.739  21574',
'GARN           0.000 78.739  21575',
'GANDEE         0.000 78.740  21576',
'GAMMEL         0.000 78.740  21577',
'GALINDEZ       0.000 78.741  21578',
'GALATI         0.000 78.741  21579',
'GAGLIARDO      0.000 78.741  21580',
'FULOP          0.000 78.742  21581',
'FUKUSHIMA      0.000 78.742  21582',
'FRIEDT         0.000 78.743  21583',
'FRETZ          0.000 78.743  21584',
'FRENZ          0.000 78.744  21585',
'FREEBERG       0.000 78.744  21586',
'FREDERIC       0.000 78.744  21587',
'FRAVEL         0.000 78.745  21588',
'FOUNTAINE      0.000 78.745  21589',
'FORRY          0.000 78.746  21590',
'FORCK          0.000 78.746  21591',
'FONNER         0.000 78.747  21592',
'FLIPPIN        0.000 78.747  21593',
'FLEWELLING     0.000 78.747  21594',
'FLANSBURG      0.000 78.748  21595',
'FILIPPONE      0.000 78.748  21596',
'FETTIG         0.000 78.749  21597',
'FENLON         0.000 78.749  21598',
'FELTER         0.000 78.750  21599',
'FELKINS        0.000 78.750  21600',
'FEIN           0.000 78.750  21601',
'FAZ            0.000 78.751  21602',
'FAVOR          0.000 78.751  21603',
'FAVERO         0.000 78.752  21604',
'FAULCON        0.000 78.752  21605',
'FARVER         0.000 78.753  21606',
'FARLESS        0.000 78.753  21607',
'FAHNESTOCK     0.000 78.754  21608',
'FACEMIRE       0.000 78.754  21609',
'FAAS           0.000 78.754  21610',
'EYER           0.000 78.755  21611',
'EVETT          0.000 78.755  21612',
'EVERY          0.000 78.756  21613',
'ESSES          0.000 78.756  21614',
'ESCARENO       0.000 78.757  21615',
'ENSEY          0.000 78.757  21616',
'ENNALS         0.000 78.757  21617',
'ENGELKING      0.000 78.758  21618',
'EMPEY          0.000 78.758  21619',
'EMILY          0.000 78.759  21620',
'ELVIRA         0.000 78.759  21621',
'ELLITHORPE     0.000 78.760  21622',
'EFFLER         0.000 78.760  21623',
'EDLING         0.000 78.760  21624',
'EDGLEY         0.000 78.761  21625',
'DURRELL        0.000 78.761  21626',
'DUNKERSON      0.000 78.762  21627',
'DRAHEIM        0.000 78.762  21628',
'DOMINA         0.000 78.763  21629',
'DOMBROSKY      0.000 78.763  21630',
'DOESCHER       0.000 78.763  21631',
'DOBBIN         0.000 78.764  21632',
'DIVENS         0.000 78.764  21633',
'DINATALE       0.000 78.765  21634',
'DIMITRI        0.000 78.765  21635',
'DIEGUEZ        0.000 78.766  21636',
'DIEDE          0.000 78.766  21637',
'DEVIVO         0.000 78.766  21638',
'DEVILBISS      0.000 78.767  21639',
'DEVAUL         0.000 78.767  21640',
'DETERMAN       0.000 78.768  21641',
'DESJARDIN      0.000 78.768  21642',
'DESHAIES       0.000 78.769  21643',
'DEMO           0.000 78.769  21644',
'DELPOZO        0.000 78.769  21645',
'DELOREY        0.000 78.770  21646',
'DELMAN         0.000 78.770  21647',
'DELAPP         0.000 78.771  21648',
'DELAMATER      0.000 78.771  21649',
'DEIBERT        0.000 78.772  21650',
'DEGROFF        0.000 78.772  21651',
'DEBELAK        0.000 78.772  21652',
'DAPOLITO       0.000 78.773  21653',
'DANO           0.000 78.773  21654',
'DACRUZ         0.000 78.774  21655',
'DACANAY        0.000 78.774  21656',
'CUSHENBERRY    0.000 78.775  21657',
'CRUZE          0.000 78.775  21658',
'CROSBIE        0.000 78.775  21659',
'CREGAN         0.000 78.776  21660',
'COUSINO        0.000 78.776  21661',
'CORRIE         0.000 78.777  21662',
'CORRAO         0.000 78.777  21663',
'CORNEY         0.000 78.778  21664',
'COOKINGHAM     0.000 78.778  21665',
'CONRY          0.000 78.778  21666',
'COLLINGSWORTH  0.000 78.779  21667',
'COLDREN        0.000 78.779  21668',
'COBIAN         0.000 78.780  21669',
'COATE          0.000 78.780  21670',
'CLAUSS         0.000 78.781  21671',
'CHRYSLER       0.000 78.781  21672',
'CHRISTINE      0.000 78.781  21673',
'CHRISTENBERRY  0.000 78.782  21674',
'CHMIEL         0.000 78.782  21675',
'CHAUEZ         0.000 78.783  21676',
'CHARTERS       0.000 78.783  21677',
'CHAIT          0.000 78.784  21678',
'CESARE         0.000 78.784  21679',
'CELLA          0.000 78.784  21680',
'CAYA           0.000 78.785  21681',
'CASTENADA      0.000 78.785  21682',
'CASHEN         0.000 78.786  21683',
'CAPTAIN        0.000 78.786  21684',
'CANTRELLE      0.000 78.787  21685',
'CANOVA         0.000 78.787  21686',
'CANDY          0.000 78.787  21687',
'CANARY         0.000 78.788  21688',
'CAMPIONE       0.000 78.788  21689',
'CAMEL          0.000 78.789  21690',
'CALIXTE        0.000 78.789  21691',
'CAICEDO        0.000 78.790  21692',
'BYERLEY        0.000 78.790  21693',
'BUTTERY        0.000 78.790  21694',
'BUTTER         0.000 78.791  21695',
'BURDA          0.000 78.791  21696',
'BURCHILL       0.000 78.792  21697',
'BUN            0.000 78.792  21698',
'BULMER         0.000 78.793  21699',
'BULMAN         0.000 78.793  21700',
'BUESING        0.000 78.793  21701',
'BUCZEK         0.000 78.794  21702',
'BUCKHOLZ       0.000 78.794  21703',
'BUCHNER        0.000 78.795  21704',
'BUCHLER        0.000 78.795  21705',
'BUBAN          0.000 78.796  21706',
'BRYNE          0.000 78.796  21707',
'BRUTUS         0.000 78.796  21708',
'BRUNKHORST     0.000 78.797  21709',
'BRUMSEY        0.000 78.797  21710',
'BRUMER         0.000 78.798  21711',
'BROWNSON       0.000 78.798  21712',
'BROKER         0.000 78.799  21713',
'BRODNAX        0.000 78.799  21714',
'BREZINSKI      0.000 78.799  21715',
'BRAZILE        0.000 78.800  21716',
'BRAVERMAN      0.000 78.800  21717',
'BRASIL         0.000 78.801  21718',
'BRANNING       0.000 78.801  21719',
'BRADLY         0.000 78.802  21720',
'BOYE           0.000 78.802  21721',
'BOULDEN        0.000 78.802  21722',
'BOUGH          0.000 78.803  21723',
'BOSSARD        0.000 78.803  21724',
'BOSAK          0.000 78.804  21725',
'BORTH          0.000 78.804  21726',
'BORGMEYER      0.000 78.805  21727',
'BORGE          0.000 78.805  21728',
'BLOWERS        0.000 78.805  21729',
'BLASCHKE       0.000 78.806  21730',
'BLANN          0.000 78.806  21731',
'BLANKENBAKER   0.000 78.807  21732',
'BISCEGLIA      0.000 78.807  21733',
'BILLINGSLEA    0.000 78.808  21734',
'BIALEK         0.000 78.808  21735',
'BEVERLIN       0.000 78.808  21736',
'BESECKER       0.000 78.809  21737',
'BERQUIST       0.000 78.809  21738',
'BENIGNO        0.000 78.810  21739',
'BENAVENTE      0.000 78.810  21740',
'BELIZAIRE      0.000 78.811  21741',
'BEISNER        0.000 78.811  21742',
'BEHRMAN        0.000 78.811  21743',
'BEAUSOLEIL     0.000 78.812  21744',
'BEA            0.000 78.812  21745',
'BAYLON         0.000 78.813  21746',
'BAYLEY         0.000 78.813  21747',
'BASSI          0.000 78.814  21748',
'BASNETT        0.000 78.814  21749',
'BASILIO        0.000 78.814  21750',
'BASDEN         0.000 78.815  21751',
'BASCO          0.000 78.815  21752',
'BANERJEE       0.000 78.816  21753',
'BALLI          0.000 78.816  21754',
'BAKE           0.000 78.817  21755',
'BAGNELL        0.000 78.817  21756',
'BADY           0.000 78.817  21757',
'AVERETTE       0.000 78.818  21758',
'AUGUSTA        0.000 78.818  21759',
'ARZU           0.000 78.819  21760',
'ARN            0.000 78.819  21761',
'ARCHAMBEAULT   0.000 78.820  21762',
'ARBOLEDA       0.000 78.820  21763',
'ARBAUGH        0.000 78.820  21764',
'ARATA          0.000 78.821  21765',
'ANTRIM         0.000 78.821  21766',
'AMRHEIN        0.000 78.822  21767',
'AMERINE        0.000 78.822  21768',
'ALPERS         0.000 78.823  21769',
'ALFREY         0.000 78.823  21770',
'ALCON          0.000 78.823  21771',
'ALBUS          0.000 78.824  21772',
'ALBERTINI      0.000 78.824  21773',
'AGUINIGA       0.000 78.825  21774',
'ADAY           0.000 78.825  21775',
'ACQUAVIVA      0.000 78.826  21776',
'ACCARDI        0.000 78.826  21777',
'ZYGMONT        0.000 78.826  21778',
'ZYCH           0.000 78.827  21779',
'ZOLLNER        0.000 78.827  21780',
'ZOBEL          0.000 78.828  21781',
'ZINCK          0.000 78.828  21782',
'ZERTUCHE       0.000 78.829  21783',
'ZARAGOSA       0.000 78.829  21784',
'ZALE           0.000 78.829  21785',
'ZALDIVAR       0.000 78.830  21786',
'YING           0.000 78.830  21787',
'YEADON         0.000 78.831  21788',
'WYKOFF         0.000 78.831  21789',
'WOULLARD       0.000 78.831  21790',
'WOLFRUM        0.000 78.832  21791',
'WOHLFORD       0.000 78.832  21792',
'WISON          0.000 78.833  21793',
'WISELEY        0.000 78.833  21794',
'WISECUP        0.000 78.833  21795',
'WINCHENBACH    0.000 78.834  21796',
'WILTSIE        0.000 78.834  21797',
'WHITTLESEY     0.000 78.835  21798',
'WHITELOW       0.000 78.835  21799',
'WHITEFORD      0.000 78.836  21800',
'WEVER          0.000 78.836  21801',
'WESTRICH       0.000 78.836  21802',
'WERTMAN        0.000 78.837  21803',
'WENSEL         0.000 78.837  21804',
'WENRICH        0.000 78.838  21805',
'WEISBROD       0.000 78.838  21806',
'WEGLARZ        0.000 78.838  21807',
'WEDDERBURN     0.000 78.839  21808',
'WEATHERHEAD    0.000 78.839  21809',
'WEASE          0.000 78.840  21810',
'WARRING        0.000 78.840  21811',
'WAND           0.000 78.841  21812',
'WADLEIGH       0.000 78.841  21813',
'VOLTZ          0.000 78.841  21814',
'VISE           0.000 78.842  21815',
'VILLANO        0.000 78.842  21816',
'VICARIO        0.000 78.843  21817',
'VERMEULEN      0.000 78.843  21818',
'VAZQUES        0.000 78.843  21819',
'VASKO          0.000 78.844  21820',
'VARUGHESE      0.000 78.844  21821',
'VANGIESON      0.000 78.845  21822',
'VANFOSSEN      0.000 78.845  21823',
'VANEPPS        0.000 78.845  21824',
'VANDERPLOEG    0.000 78.846  21825',
'VANCLEVE       0.000 78.846  21826',
'VALERIUS       0.000 78.847  21827',
'UYEHARA        0.000 78.847  21828',
'UNSWORTH       0.000 78.848  21829',
'TWERSKY        0.000 78.848  21830',
'TURRELL        0.000 78.848  21831',
'TUNER          0.000 78.849  21832',
'TSUI           0.000 78.849  21833',
'TRUNZO         0.000 78.850  21834',
'TROUSDALE      0.000 78.850  21835',
'TRENTHAM       0.000 78.850  21836',
'TRAUGHBER      0.000 78.851  21837',
'TORGRIMSON     0.000 78.851  21838',
'TOPPIN         0.000 78.852  21839',
'TOKAR          0.000 78.852  21840',
'TOBIA          0.000 78.852  21841',
'TIPPENS        0.000 78.853  21842',
'TIGUE          0.000 78.853  21843',
'THONG          0.000 78.854  21844',
'THIRY          0.000 78.854  21845',
'THACKSTON      0.000 78.855  21846',
'TERHAAR        0.000 78.855  21847',
'TENNY          0.000 78.855  21848',
'TASSIN         0.000 78.856  21849',
'TADEO          0.000 78.856  21850',
'SWEIGART       0.000 78.857  21851',
'SUTHERLIN      0.000 78.857  21852',
'SUMRELL        0.000 78.857  21853',
'SUEN           0.000 78.858  21854',
'STUHR          0.000 78.858  21855',
'STRZELECKI     0.000 78.859  21856',
'STROSNIDER     0.000 78.859  21857',
'STREIFF        0.000 78.860  21858',
'STOTTLEMYER    0.000 78.860  21859',
'STORMENT       0.000 78.860  21860',
'STORLIE        0.000 78.861  21861',
'STONESIFER     0.000 78.861  21862',
'STOGSDILL      0.000 78.862  21863',
'STENZEL        0.000 78.862  21864',
'STEMEN         0.000 78.862  21865',
'STELLHORN      0.000 78.863  21866',
'STEIDL         0.000 78.863  21867',
'STECKLEIN      0.000 78.864  21868',
'STATTON        0.000 78.864  21869',
'STAPLE         0.000 78.864  21870',
'STANGLE        0.000 78.865  21871',
'SPRATLING      0.000 78.865  21872',
'SPOOR          0.000 78.866  21873',
'SPIGHT         0.000 78.866  21874',
'SPELMAN        0.000 78.867  21875',
'SPECE          0.000 78.867  21876',
'SPANOS         0.000 78.867  21877',
'SPADONI        0.000 78.868  21878',
'SOUTHERS       0.000 78.868  21879',
'SOLA           0.000 78.869  21880',
'SOBOL          0.000 78.869  21881',
'SMYRE          0.000 78.869  21882',
'SLAYBAUGH      0.000 78.870  21883',
'SIZELOVE       0.000 78.870  21884',
'SIRMONS        0.000 78.871  21885',
'SIMINGTON      0.000 78.871  21886',
'SILVERSMITH    0.000 78.872  21887',
'SIGUENZA       0.000 78.872  21888',
'SIEREN         0.000 78.872  21889',
'SHELMAN        0.000 78.873  21890',
'SHAWN          0.000 78.873  21891',
'SHARPLES       0.000 78.874  21892',
'SHARIF         0.000 78.874  21893',
'SHACK          0.000 78.874  21894',
'SEVILLE        0.000 78.875  21895',
'SESSLER        0.000 78.875  21896',
'SERRATA        0.000 78.876  21897',
'SERINO         0.000 78.876  21898',
'SERAFINI       0.000 78.876  21899',
'SEMIEN         0.000 78.877  21900',
'SELVEY         0.000 78.877  21901',
'SEEDORF        0.000 78.878  21902',
'SECKMAN        0.000 78.878  21903',
'SEAWOOD        0.000 78.879  21904',
'SCREWS         0.000 78.879  21905',
'SCREEN         0.000 78.879  21906',
'SCOBY          0.000 78.880  21907',
'SCICCHITANO    0.000 78.880  21908',
'SCHORN         0.000 78.881  21909',
'SCHOMMER       0.000 78.881  21910',
'SCHNITZER      0.000 78.881  21911',
'SCHLEUSNER     0.000 78.882  21912',
'SCHLABACH      0.000 78.882  21913',
'SCHIEL         0.000 78.883  21914',
'SCHEPERS       0.000 78.883  21915',
'SCHABER        0.000 78.883  21916',
'SCALLY         0.000 78.884  21917',
'SAUTNER        0.000 78.884  21918',
'SARTWELL       0.000 78.885  21919',
'SANTERRE       0.000 78.885  21920',
'SANDAGE        0.000 78.886  21921',
'SALVIA         0.000 78.886  21922',
'SALVETTI       0.000 78.886  21923',
'SALSMAN        0.000 78.887  21924',
'SALLIS         0.000 78.887  21925',
'SALAIS         0.000 78.888  21926',
'SAINT          0.000 78.888  21927',
'SAEGER         0.000 78.888  21928',
'SABLE          0.000 78.889  21929',
'SABAT          0.000 78.889  21930',
'SAAR           0.000 78.890  21931',
'RUTHER         0.000 78.890  21932',
'RUSSOM         0.000 78.891  21933',
'RUOFF          0.000 78.891  21934',
'RUMERY         0.000 78.891  21935',
'RUBOTTOM       0.000 78.892  21936',
'ROZELLE        0.000 78.892  21937',
'ROWTON         0.000 78.893  21938',
'ROUTON         0.000 78.893  21939',
'ROTOLO         0.000 78.893  21940',
'ROSTAD         0.000 78.894  21941',
'ROSEBOROUGH    0.000 78.894  21942',
'RORICK         0.000 78.895  21943',
'RONCO          0.000 78.895  21944',
'ROLLS          0.000 78.895  21945',
'ROHER          0.000 78.896  21946',
'ROBERIE        0.000 78.896  21947',
'ROBARE         0.000 78.897  21948',
'RITTS          0.000 78.897  21949',
'RISON          0.000 78.898  21950',
'RIPPE          0.000 78.898  21951',
'RINKE          0.000 78.898  21952',
'RINGWOOD       0.000 78.899  21953',
'RIGHTER        0.000 78.899  21954',
'RIESER         0.000 78.900  21955',
'RIDEAUX        0.000 78.900  21956',
'RICKERSON      0.000 78.900  21957',
'RENFREW        0.000 78.901  21958',
'RELEFORD       0.000 78.901  21959',
'REINSCH        0.000 78.902  21960',
'REIMAN         0.000 78.902  21961',
'REIFSTECK      0.000 78.903  21962',
'REIDHEAD       0.000 78.903  21963',
'REDFEARN       0.000 78.903  21964',
'REDDOUT        0.000 78.904  21965',
'REAUX          0.000 78.904  21966',
'RANCE          0.000 78.905  21967',
'RAM            0.000 78.905  21968',
'RADO           0.000 78.905  21969',
'RADEBAUGH      0.000 78.906  21970',
'QUINBY         0.000 78.906  21971',
'QUIGG          0.000 78.907  21972',
'PROVO          0.000 78.907  21973',
'PROVENZA       0.000 78.907  21974',
'PROVENCE       0.000 78.908  21975',
'PROPHET        0.000 78.908  21976',
'PRIDGEON       0.000 78.909  21977',
'PRAYLOW        0.000 78.909  21978',
'POWEL          0.000 78.910  21979',
'POULTER        0.000 78.910  21980',
'PORTNER        0.000 78.910  21981',
'PONTBRIAND     0.000 78.911  21982',
'POLICE         0.000 78.911  21983',
'POIRRIER       0.000 78.912  21984',
'POIRER         0.000 78.912  21985',
'PLATERO        0.000 78.912  21986',
'PIXLER         0.000 78.913  21987',
'PINTOR         0.000 78.913  21988',
'PIGMAN         0.000 78.914  21989',
'PIERSALL       0.000 78.914  21990',
'PIEL           0.000 78.914  21991',
'PICHETTE       0.000 78.915  21992',
'PHOU           0.000 78.915  21993',
'PHILLIS        0.000 78.916  21994',
'PHILLIPPE      0.000 78.916  21995',
'PHARIS         0.000 78.917  21996',
'PHALEN         0.000 78.917  21997',
'PETSCHE        0.000 78.917  21998',
'PERRIER        0.000 78.918  21999',
'PENFIELD       0.000 78.918  22000',
'PELOSI         0.000 78.919  22001',
'PEBLEY         0.000 78.919  22002',
'PEAT           0.000 78.919  22003',
'PAWLOSKI       0.000 78.920  22004',
'PAWLIK         0.000 78.920  22005',
'PAVLICK        0.000 78.921  22006',
'PAVEL          0.000 78.921  22007',
'PATZ           0.000 78.922  22008',
'PATOUT         0.000 78.922  22009',
'PASCUCCI       0.000 78.922  22010',
'PASCH          0.000 78.923  22011',
'PARRINELLO     0.000 78.923  22012',
'PAREKH         0.000 78.924  22013',
'PANTALEO       0.000 78.924  22014',
'PANNONE        0.000 78.924  22015',
'PANKOW         0.000 78.925  22016',
'PANGBORN       0.000 78.925  22017',
'PAGANI         0.000 78.926  22018',
'PACELLI        0.000 78.926  22019',
'ORT            0.000 78.926  22020',
'ORSI           0.000 78.927  22021',
'ORILEY         0.000 78.927  22022',
'ORDUNO         0.000 78.928  22023',
'OOMMEN         0.000 78.928  22024',
'OLIVERO        0.000 78.929  22025',
'OKADA          0.000 78.929  22026',
'OCON           0.000 78.929  22027',
'OCHELTREE      0.000 78.930  22028',
'OBERMAN        0.000 78.930  22029',
'NYLAND         0.000 78.931  22030',
'NOSS           0.000 78.931  22031',
'NORLING        0.000 78.931  22032',
'NOLTON         0.000 78.932  22033',
'NOBILE         0.000 78.932  22034',
'NITTI          0.000 78.933  22035',
'NISHIMOTO      0.000 78.933  22036',
'NGHIEM         0.000 78.934  22037',
'NEUNER         0.000 78.934  22038',
'NEUBERGER      0.000 78.934  22039',
'NEIFERT        0.000 78.935  22040',
'NEGUS          0.000 78.935  22041',
'NAVAL          0.000 78.936  22042',
'NAGLER         0.000 78.936  22043',
'MULLALLY       0.000 78.936  22044',
'MOULDEN        0.000 78.937  22045',
'MORRA          0.000 78.937  22046',
'MORQUECHO      0.000 78.938  22047',
'MOROCCO        0.000 78.938  22048',
'MOOTS          0.000 78.938  22049',
'MONICA         0.000 78.939  22050',
'MIZZELL        0.000 78.939  22051',
'MIRSKY         0.000 78.940  22052',
'MIRABITO       0.000 78.940  22053',
'MINARDI        0.000 78.941  22054',
'MILHOLLAND     0.000 78.941  22055',
'MIKUS          0.000 78.941  22056',
'MIJANGOS       0.000 78.942  22057',
'MICHENER       0.000 78.942  22058',
'MICHALEK       0.000 78.943  22059',
'METHVIN        0.000 78.943  22060',
'MERRIT         0.000 78.943  22061',
'MENTER         0.000 78.944  22062',
'MENEELY        0.000 78.944  22063',
'MELODY         0.000 78.945  22064',
'MEIERS         0.000 78.945  22065',
'MEHRING        0.000 78.945  22066',
'MEES           0.000 78.946  22067',
'MEDAL          0.000 78.946  22068',
'MCWHIRT        0.000 78.947  22069',
'MCWAIN         0.000 78.947  22070',
'MCPHATTER      0.000 78.948  22071',
'MCNICHOL       0.000 78.948  22072',
'MCNAUGHT       0.000 78.948  22073',
'MCLARTY        0.000 78.949  22074',
'MCIVOR         0.000 78.949  22075',
'MCGINNESS      0.000 78.950  22076',
'MCGAUGHY       0.000 78.950  22077',
'MCFERRIN       0.000 78.950  22078',
'MCFATE         0.000 78.951  22079',
'MCCLENNY       0.000 78.951  22080',
'MCCLARD        0.000 78.952  22081',
'MCCASKEY       0.000 78.952  22082',
'MCCALLION      0.000 78.953  22083',
'MCAMIS         0.000 78.953  22084',
'MATHISEN       0.000 78.953  22085',
'MARTON         0.000 78.954  22086',
'MARSICO        0.000 78.954  22087',
'MARINER        0.000 78.955  22088',
'MARCHI         0.000 78.955  22089',
'MANI           0.000 78.955  22090',
'MANGIONE       0.000 78.956  22091',
'MAGDA          0.000 78.956  22092',
'MACARAEG       0.000 78.957  22093',
'LUPI           0.000 78.957  22094',
'LUNDAY         0.000 78.957  22095',
'LUKOWSKI       0.000 78.958  22096',
'LUCIOUS        0.000 78.958  22097',
'LOCICERO       0.000 78.959  22098',
'LOACH          0.000 78.959  22099',
'LITTLEWOOD     0.000 78.960  22100',
'LITT           0.000 78.960  22101',
'LITLE          0.000 78.960  22102',
'LIPHAM         0.000 78.961  22103',
'LINLEY         0.000 78.961  22104',
'LINDON         0.000 78.962  22105',
'LIGHTFORD      0.000 78.962  22106',
'LIESER         0.000 78.962  22107',
'LEYENDECKER    0.000 78.963  22108',
'LEWEY          0.000 78.963  22109',
'LESANE         0.000 78.964  22110',
'LENZI          0.000 78.964  22111',
'LENART         0.000 78.965  22112',
'LENA           0.000 78.965  22113',
'LEISINGER      0.000 78.965  22114',
'LEHRMAN        0.000 78.966  22115',
'LEFEBURE       0.000 78.966  22116',
'LEANDRO        0.000 78.967  22117',
'LAZARD         0.000 78.967  22118',
'LAYCOCK        0.000 78.967  22119',
'LAVER          0.000 78.968  22120',
'LAUNER         0.000 78.968  22121',
'LASTRAPES      0.000 78.969  22122',
'LASTINGER      0.000 78.969  22123',
'LASKER         0.000 78.969  22124',
'LARKEY         0.000 78.970  22125',
'LARGER         0.000 78.970  22126',
'LANSER         0.000 78.971  22127',
'LANPHERE       0.000 78.971  22128',
'LANDEY         0.000 78.972  22129',
'LAN            0.000 78.972  22130',
'LAMPTON        0.000 78.972  22131',
'LAMARK         0.000 78.973  22132',
'LAGER          0.000 78.973  22133',
'KUMM           0.000 78.974  22134',
'KULLMAN        0.000 78.974  22135',
'KRZEMINSKI     0.000 78.974  22136',
'KRASNER        0.000 78.975  22137',
'KRAM           0.000 78.975  22138',
'KORAN          0.000 78.976  22139',
'KONING         0.000 78.976  22140',
'KOHLS          0.000 78.976  22141',
'KOHEN          0.000 78.977  22142',
'KOBEL          0.000 78.977  22143',
'KNIFFEN        0.000 78.978  22144',
'KNICK          0.000 78.978  22145',
'KNEIP          0.000 78.979  22146',
'KNAPPENBERGER  0.000 78.979  22147',
'KNACK          0.000 78.979  22148',
'KLUMPP         0.000 78.980  22149',
'KLAUSNER       0.000 78.980  22150',
'KITAMURA       0.000 78.981  22151',
'KISLING        0.000 78.981  22152',
'KIRSHNER       0.000 78.981  22153',
'KINLOCH        0.000 78.982  22154',
'KINGMAN        0.000 78.982  22155',
'KIN            0.000 78.983  22156',
'KIMERY         0.000 78.983  22157',
'KESTLER        0.000 78.984  22158',
'KELLEN         0.000 78.984  22159',
'KELEHER        0.000 78.984  22160',
'KEEHN          0.000 78.985  22161',
'KEARLEY        0.000 78.985  22162',
'KASPRZAK       0.000 78.986  22163',
'KARY           0.000 78.986  22164',
'KAMPF          0.000 78.986  22165',
'KAMERER        0.000 78.987  22166',
'KALIS          0.000 78.987  22167',
'KAHAN          0.000 78.988  22168',
'KAESTNER       0.000 78.988  22169',
'KADEL          0.000 78.988  22170',
'KABEL          0.000 78.989  22171',
'JUNGE          0.000 78.989  22172',
'JUCKETT        0.000 78.990  22173',
'JOYNT          0.000 78.990  22174',
'JORSTAD        0.000 78.991  22175',
'JETTER         0.000 78.991  22176',
'JELLEY         0.000 78.991  22177',
'JEFFERIS       0.000 78.992  22178',
'JEFF           0.000 78.992  22179',
'JEANSONNE      0.000 78.993  22180',
'JANECEK        0.000 78.993  22181',
'JAFFEE         0.000 78.993  22182',
'JACKO          0.000 78.994  22183',
'IZZARD         0.000 78.994  22184',
'ISTRE          0.000 78.995  22185',
'ISHERWOOD      0.000 78.995  22186',
'IPOCK          0.000 78.996  22187',
'IANNUZZI       0.000 78.996  22188',
'HYPOLITE       0.000 78.996  22189',
'HUSSEIN        0.000 78.997  22190',
'HUMFELD        0.000 78.997  22191',
'HUCKLEBERRY    0.000 78.998  22192',
'HOTZ           0.000 78.998  22193',
'HOSEIN         0.000 78.998  22194',
'HONAHNI        0.000 78.999  22195',
'HOLZWORTH      0.000 78.999  22196',
'HOLDRIDGE      0.000 79.000  22197',
'HOLDAWAY       0.000 79.000  22198',
'HOLADAY        0.000 79.000  22199',
'HODAK          0.000 79.001  22200',
'HITCHMAN       0.000 79.001  22201',
'HIPPLER        0.000 79.002  22202',
'HINCHEY        0.000 79.002  22203',
'HILLIN         0.000 79.003  22204',
'HILER          0.000 79.003  22205',
'HIBDON         0.000 79.003  22206',
'HEVEY          0.000 79.004  22207',
'HETH           0.000 79.004  22208',
'HEPFER         0.000 79.005  22209',
'HENNEMAN       0.000 79.005  22210',
'HEMSLEY        0.000 79.005  22211',
'HEMMINGS       0.000 79.006  22212',
'HEMMINGER      0.000 79.006  22213',
'HELBERT        0.000 79.007  22214',
'HELBERG        0.000 79.007  22215',
'HEINZE         0.000 79.007  22216',
'HEEREN         0.000 79.008  22217',
'HEE            0.000 79.008  22218',
'HEBER          0.000 79.009  22219',
'HAVER          0.000 79.009  22220',
'HAUFF          0.000 79.010  22221',
'HASWELL        0.000 79.010  22222',
'HARVISON       0.000 79.010  22223',
'HARTSON        0.000 79.011  22224',
'HARSHBERGER    0.000 79.011  22225',
'HARRYMAN       0.000 79.012  22226',
'HARRIES        0.000 79.012  22227',
'HANNIBAL       0.000 79.012  22228',
'HANE           0.000 79.013  22229',
'HAMSHER        0.000 79.013  22230',
'HAGGETT        0.000 79.014  22231',
'HAGEMEIER      0.000 79.014  22232',
'HAECKER        0.000 79.015  22233',
'HADDON         0.000 79.015  22234',
'HABERKORN      0.000 79.015  22235',
'GUTTMAN        0.000 79.016  22236',
'GUTTIERREZ     0.000 79.016  22237',
'GUTHMILLER     0.000 79.017  22238',
'GUILLET        0.000 79.017  22239',
'GUILBERT       0.000 79.017  22240',
'GUGINO         0.000 79.018  22241',
'GRUMBLES       0.000 79.018  22242',
'GRIFFY         0.000 79.019  22243',
'GREGERSON      0.000 79.019  22244',
'GREG           0.000 79.019  22245',
'GRANADA        0.000 79.020  22246',
'GRANA          0.000 79.020  22247',
'GOYA           0.000 79.021  22248',
'GORANSON       0.000 79.021  22249',
'GONSOULIN      0.000 79.022  22250',
'GOETTL         0.000 79.022  22251',
'GOERTZ         0.000 79.022  22252',
'GOE            0.000 79.023  22253',
'GODLEWSKI      0.000 79.023  22254',
'GLANDON        0.000 79.024  22255',
'GLAD           0.000 79.024  22256',
'GILSDORF       0.000 79.024  22257',
'GILLOGLY       0.000 79.025  22258',
'GILKISON       0.000 79.025  22259',
'GIARD          0.000 79.026  22260',
'GIAMPAOLO      0.000 79.026  22261',
'GHEEN          0.000 79.027  22262',
'GETTINGS       0.000 79.027  22263',
'GESELL         0.000 79.027  22264',
'GERSHON        0.000 79.028  22265',
'GAUMER         0.000 79.028  22266',
'GARTRELL       0.000 79.029  22267',
'GARSIDE        0.000 79.029  22268',
'GARRIGAN       0.000 79.029  22269',
'GARMANY        0.000 79.030  22270',
'GARLITZ        0.000 79.030  22271',
'GARLINGTON     0.000 79.031  22272',
'GAMET          0.000 79.031  22273',
'GAIL           0.000 79.031  22274',
'FUSS           0.000 79.032  22275',
'FURLOUGH       0.000 79.032  22276',
'FUNSTON        0.000 79.033  22277',
'FUNARO         0.000 79.033  22278',
'FRIX           0.000 79.034  22279',
'FRASCA         0.000 79.034  22280',
'FRANCOEUR      0.000 79.034  22281',
'FORSHEY        0.000 79.035  22282',
'FOOSE          0.000 79.035  22283',
'FLATLEY        0.000 79.036  22284',
'FLAGLER        0.000 79.036  22285',
'FILS           0.000 79.036  22286',
'FILLERS        0.000 79.037  22287',
'FICKETT        0.000 79.037  22288',
'FETH           0.000 79.038  22289',
'FENNELLY       0.000 79.038  22290',
'FENCL          0.000 79.038  22291',
'FELCH          0.000 79.039  22292',
'FEDRICK        0.000 79.039  22293',
'FEBRES         0.000 79.040  22294',
'FAZEKAS        0.000 79.040  22295',
'FARNAN         0.000 79.041  22296',
'FAIRLESS       0.000 79.041  22297',
'EWAN           0.000 79.041  22298',
'ETSITTY        0.000 79.042  22299',
'ENTERLINE      0.000 79.042  22300',
'ELVIN          0.000 79.043  22301',
'ELSWORTH       0.000 79.043  22302',
'ELLIFF         0.000 79.043  22303',
'ELL            0.000 79.044  22304',
'ELEBY          0.000 79.044  22305',
'ELDRETH        0.000 79.045  22306',
'EIDEM          0.000 79.045  22307',
'EDGECOMB       0.000 79.046  22308',
'EDDS           0.000 79.046  22309',
'EBARB          0.000 79.046  22310',
'DWORKIN        0.000 79.047  22311',
'DUSENBERRY     0.000 79.047  22312',
'DURRANCE       0.000 79.048  22313',
'DUROPAN        0.000 79.048  22314',
'DURFEY         0.000 79.048  22315',
'DUNGY          0.000 79.049  22316',
'DUNDON         0.000 79.049  22317',
'DUMBLETON      0.000 79.050  22318',
'DUFFEL         0.000 79.050  22319',
'DUBON          0.000 79.050  22320',
'DUBBERLY       0.000 79.051  22321',
'DROZ           0.000 79.051  22322',
'DRINKWATER     0.000 79.052  22323',
'DRESSEL        0.000 79.052  22324',
'DOUGHTIE       0.000 79.053  22325',
'DOSHIER        0.000 79.053  22326',
'DORRELL        0.000 79.053  22327',
'DORA           0.000 79.054  22328',
'DOPLE          0.000 79.054  22329',
'DOONAN         0.000 79.055  22330',
'DONADIO        0.000 79.055  22331',
'DOLLISON       0.000 79.055  22332',
'DOIG           0.000 79.056  22333',
'DITZLER        0.000 79.056  22334',
'DISHNER        0.000 79.057  22335',
'DISCHER        0.000 79.057  22336',
'DIMAIO         0.000 79.058  22337',
'DIGMAN         0.000 79.058  22338',
'DIFALCO        0.000 79.058  22339',
'DIEM           0.000 79.059  22340',
'DEVINO         0.000 79.059  22341',
'DEVENS         0.000 79.060  22342',
'DEROSIA        0.000 79.060  22343',
'DEPPEN         0.000 79.060  22344',
'DEPAOLA        0.000 79.061  22345',
'DENIZ          0.000 79.061  22346',
'DENARDO        0.000 79.062  22347',
'DEMOS          0.000 79.062  22348',
'DEMAY          0.000 79.062  22349',
'DELGIUDICE     0.000 79.063  22350',
'DAVI           0.000 79.063  22351',
'DANIELSEN      0.000 79.064  22352',
'DALLY          0.000 79.064  22353',
'DAIS           0.000 79.065  22354',
'DAHMER         0.000 79.065  22355',
'CUTSFORTH      0.000 79.065  22356',
'CUSIMANO       0.000 79.066  22357',
'CURINGTON      0.000 79.066  22358',
'CUMBEE         0.000 79.067  22359',
'CRYAN          0.000 79.067  22360',
'CRUSOE         0.000 79.067  22361',
'CROWDEN        0.000 79.068  22362',
'CRETE          0.000 79.068  22363',
'CRESSMAN       0.000 79.069  22364',
'CRAPO          0.000 79.069  22365',
'COWENS         0.000 79.069  22366',
'COUPE          0.000 79.070  22367',
'COUNCILL       0.000 79.070  22368',
'COTY           0.000 79.071  22369',
'COTNOIR        0.000 79.071  22370',
'CORREIRA       0.000 79.072  22371',
'COPEN          0.000 79.072  22372',
'CONSIGLIO      0.000 79.072  22373',
'COMBES         0.000 79.073  22374',
'COFFER         0.000 79.073  22375',
'COCKRILL       0.000 79.074  22376',
'COAD           0.000 79.074  22377',
'CLOGSTON       0.000 79.074  22378',
'CLASEN         0.000 79.075  22379',
'CHOCK          0.000 79.075  22380',
'CHESNUTT       0.000 79.076  22381',
'CHARRIER       0.000 79.076  22382',
'CHAIN          0.000 79.077  22383',
'CHADBURN       0.000 79.077  22384',
'CERNIGLIA      0.000 79.077  22385',
'CEBULA         0.000 79.078  22386',
'CASTRUITA      0.000 79.078  22387',
'CASTILLA       0.000 79.079  22388',
'CASTALDI       0.000 79.079  22389',
'CASEBEER       0.000 79.079  22390',
'CASAGRANDE     0.000 79.080  22391',
'CARTA          0.000 79.080  22392',
'CARRALES       0.000 79.081  22393',
'CARNLEY        0.000 79.081  22394',
'CARDON         0.000 79.081  22395',
'CARASCO        0.000 79.082  22396',
'CAPSHAW        0.000 79.082  22397',
'CAPRON         0.000 79.083  22398',
'CAPPIELLO      0.000 79.083  22399',
'CAPITO         0.000 79.084  22400',
'CANNEY         0.000 79.084  22401',
'CANDELA        0.000 79.084  22402',
'CAMINITI       0.000 79.085  22403',
'CALIFANO       0.000 79.085  22404',
'CALICO         0.000 79.086  22405',
'CALABRIA       0.000 79.086  22406',
'CAIAZZO        0.000 79.086  22407',
'CAHALL         0.000 79.087  22408',
'BUSCEMI        0.000 79.087  22409',
'BURTNER        0.000 79.088  22410',
'BURGDORF       0.000 79.088  22411',
'BUREAU         0.000 79.089  22412',
'BURDO          0.000 79.089  22413',
'BUFFALOE       0.000 79.089  22414',
'BUCHWALD       0.000 79.090  22415',
'BRWON          0.000 79.090  22416',
'BRUNKE         0.000 79.091  22417',
'BRUMMOND       0.000 79.091  22418',
'BRUMM          0.000 79.091  22419',
'BROE           0.000 79.092  22420',
'BROCIOUS       0.000 79.092  22421',
'BROCATO        0.000 79.093  22422',
'BRO            0.000 79.093  22423',
'BRITAIN        0.000 79.093  22424',
'BRISKI         0.000 79.094  22425',
'BRISKER        0.000 79.094  22426',
'BRIGHTWELL     0.000 79.095  22427',
'BRESETT        0.000 79.095  22428',
'BREINER        0.000 79.096  22429',
'BRAZEAU        0.000 79.096  22430',
'BRAZ           0.000 79.096  22431',
'BRAYMAN        0.000 79.097  22432',
'BRANDIS        0.000 79.097  22433',
'BRAMER         0.000 79.098  22434',
'BRADEEN        0.000 79.098  22435',
'BOYKO          0.000 79.098  22436',
'BOURBON        0.000 79.099  22437',
'BOSSI          0.000 79.099  22438',
'BOSHART        0.000 79.100  22439',
'BORTLE         0.000 79.100  22440',
'BONIELLO       0.000 79.101  22441',
'BOMGARDNER     0.000 79.101  22442',
'BOLZ           0.000 79.101  22443',
'BOLENBAUGH     0.000 79.102  22444',
'BOHLING        0.000 79.102  22445',
'BOHLAND        0.000 79.103  22446',
'BOCHENEK       0.000 79.103  22447',
'BLUST          0.000 79.103  22448',
'BLOXHAM        0.000 79.104  22449',
'BLOWE          0.000 79.104  22450',
'BLISH          0.000 79.105  22451',
'BLACKWATER     0.000 79.105  22452',
'BJELLAND       0.000 79.105  22453',
'BIROS          0.000 79.106  22454',
'BIRKHEAD       0.000 79.106  22455',
'BIEDERMAN      0.000 79.107  22456',
'BICKLE         0.000 79.107  22457',
'BIALASZEWSKI   0.000 79.108  22458',
'BEVIL          0.000 79.108  22459',
'BEVERLEY       0.000 79.108  22460',
'BEUMER         0.000 79.109  22461',
'BETTINGER      0.000 79.109  22462',
'BESSE          0.000 79.110  22463',
'BERNETT        0.000 79.110  22464',
'BERMEJO        0.000 79.110  22465',
'BEMENT         0.000 79.111  22466',
'BELFIELD       0.000 79.111  22467',
'BECKLER        0.000 79.112  22468',
'BEATRICE       0.000 79.112  22469',
'BAXENDALE      0.000 79.112  22470',
'BATDORF        0.000 79.113  22471',
'BASTIN         0.000 79.113  22472',
'BASHORE        0.000 79.114  22473',
'BASCOMBE       0.000 79.114  22474',
'BARTLEBAUGH    0.000 79.115  22475',
'BARSH          0.000 79.115  22476',
'BALLANTINE     0.000 79.115  22477',
'BAHL           0.000 79.116  22478',
'BADON          0.000 79.116  22479',
'BACHELOR       0.000 79.117  22480',
'AUTIN          0.000 79.117  22481',
'AUDIE          0.000 79.117  22482',
'ASTIN          0.000 79.118  22483',
'ASKEY          0.000 79.118  22484',
'ASCHER         0.000 79.119  22485',
'ARRIGO         0.000 79.119  22486',
'ARBEITER       0.000 79.120  22487',
'ANTES          0.000 79.120  22488',
'ANGERS         0.000 79.120  22489',
'AMBURN         0.000 79.121  22490',
'AMARANTE       0.000 79.121  22491',
'ALVIDREZ       0.000 79.122  22492',
'ALTHAUS        0.000 79.122  22493',
'ALLMOND        0.000 79.122  22494',
'ALFIERI        0.000 79.123  22495',
'ALDINGER       0.000 79.123  22496',
'AKERLEY        0.000 79.124  22497',
'AKANA          0.000 79.124  22498',
'AIKINS         0.000 79.124  22499',
'ADER           0.000 79.125  22500',
'ACEBEDO        0.000 79.125  22501',
'ACCARDO        0.000 79.126  22502',
'ABILA          0.000 79.126  22503',
'ABERLE         0.000 79.127  22504',
'ABELE          0.000 79.127  22505',
'ABBOUD         0.000 79.127  22506',
'ZOLLARS        0.000 79.128  22507',
'ZIMMERER       0.000 79.128  22508',
'ZIEMAN         0.000 79.129  22509',
'ZERBY          0.000 79.129  22510',
'ZELMAN         0.000 79.129  22511',
'ZELLARS        0.000 79.130  22512',
'YULE           0.000 79.130  22513',
'YOSHIMURA      0.000 79.131  22514',
'YONTS          0.000 79.131  22515',
'YEATS          0.000 79.131  22516',
'YANT           0.000 79.132  22517',
'YAMANAKA       0.000 79.132  22518',
'WYLAND         0.000 79.133  22519',
'WUENSCHE       0.000 79.133  22520',
'WORMAN         0.000 79.133  22521',
'WORDLAW        0.000 79.134  22522',
'WOHL           0.000 79.134  22523',
'WINSLETT       0.000 79.135  22524',
'WINBERG        0.000 79.135  22525',
'WILMETH        0.000 79.135  22526',
'WILLCUTT       0.000 79.136  22527',
'WIERS          0.000 79.136  22528',
'WIEMER         0.000 79.137  22529',
'WICKWIRE       0.000 79.137  22530',
'WICHMAN        0.000 79.137  22531',
'WHITTING       0.000 79.138  22532',
'WHIDBEE        0.000 79.138  22533',
'WESTERGARD     0.000 79.138  22534',
'WEMMER         0.000 79.139  22535',
'WELLNER        0.000 79.139  22536',
'WEISHAUPT      0.000 79.140  22537',
'WEINERT        0.000 79.140  22538',
'WEEDON         0.000 79.140  22539',
'WAYNICK        0.000 79.141  22540',
'WASIELEWSKI    0.000 79.141  22541',
'WAREN          0.000 79.142  22542',
'WALWORTH       0.000 79.142  22543',
'WALLINGFORD    0.000 79.142  22544',
'WALKE          0.000 79.143  22545',
'WAECHTER       0.000 79.143  22546',
'VIVIANI        0.000 79.144  22547',
'VITTI          0.000 79.144  22548',
'VILLAGRANA     0.000 79.144  22549',
'VIEN           0.000 79.145  22550',
'VICKS          0.000 79.145  22551',
'VENEMA         0.000 79.146  22552',
'VARNES         0.000 79.146  22553',
'VARNADOE       0.000 79.146  22554',
'VARDEN         0.000 79.147  22555',
'VANPATTEN      0.000 79.147  22556',
'VANORDEN       0.000 79.148  22557',
'VANDERZEE      0.000 79.148  22558',
'VANDENBURG     0.000 79.148  22559',
'VANDEHEY       0.000 79.149  22560',
'VALLS          0.000 79.149  22561',
'VALLARTA       0.000 79.150  22562',
'VALDERRAMA     0.000 79.150  22563',
'VALADE         0.000 79.150  22564',
'URMAN          0.000 79.151  22565',
'ULERY          0.000 79.151  22566',
'TUSA           0.000 79.152  22567',
'TUFT           0.000 79.152  22568',
'TRIPOLI        0.000 79.152  22569',
'TRIMPE         0.000 79.153  22570',
'TRICKEY        0.000 79.153  22571',
'TORTORA        0.000 79.154  22572',
'TORRENS        0.000 79.154  22573',
'TORCHIA        0.000 79.154  22574',
'TOFT           0.000 79.155  22575',
'TJADEN         0.000 79.155  22576',
'TISON          0.000 79.156  22577',
'TINDEL         0.000 79.156  22578',
'THURMON        0.000 79.156  22579',
'THODE          0.000 79.157  22580',
'TARDUGNO       0.000 79.157  22581',
'TANCREDI       0.000 79.158  22582',
'TAKETA         0.000 79.158  22583',
'TAILLON        0.000 79.158  22584',
'TAGLE          0.000 79.159  22585',
'SYTSMA         0.000 79.159  22586',
'SYMES          0.000 79.160  22587',
'SWINDALL       0.000 79.160  22588',
'SWICEGOOD      0.000 79.160  22589',
'SWARTOUT       0.000 79.161  22590',
'SUNDSTROM      0.000 79.161  22591',
'SUMNERS        0.000 79.162  22592',
'SULTON         0.000 79.162  22593',
'STUDSTILL      0.000 79.162  22594',
'STUDENT        0.000 79.163  22595',
'STROOP         0.000 79.163  22596',
'STONEROCK      0.000 79.164  22597',
'STMARIE        0.000 79.164  22598',
'STLAWRENCE     0.000 79.164  22599',
'STEMM          0.000 79.165  22600',
'STEINHAUSER    0.000 79.165  22601',
'STEINERT       0.000 79.166  22602',
'STEFFENSEN     0.000 79.166  22603',
'STEFANO        0.000 79.166  22604',
'STEFANIAK      0.000 79.167  22605',
'STARCK         0.000 79.167  22606',
'STALZER        0.000 79.168  22607',
'SPIDLE         0.000 79.168  22608',
'SPAKE          0.000 79.168  22609',
'SOWINSKI       0.000 79.169  22610',
'SOSNOWSKI      0.000 79.169  22611',
'SORBER         0.000 79.169  22612',
'SOMMA          0.000 79.170  22613',
'SOLIDAY        0.000 79.170  22614',
'SOLDNER        0.000 79.171  22615',
'SOJA           0.000 79.171  22616',
'SODERSTROM     0.000 79.171  22617',
'SODER          0.000 79.172  22618',
'SOCKWELL       0.000 79.172  22619',
'SOBUS          0.000 79.173  22620',
'SNOWBALL       0.000 79.173  22621',
'SLOOP          0.000 79.173  22622',
'SKEETER        0.000 79.174  22623',
'SINNER         0.000 79.174  22624',
'SINKFIELD      0.000 79.175  22625',
'SIMERLY        0.000 79.175  22626',
'SILGUERO       0.000 79.175  22627',
'SIGG           0.000 79.176  22628',
'SIEMERS        0.000 79.176  22629',
'SIEGMUND       0.000 79.177  22630',
'SIDLE          0.000 79.177  22631',
'SHUM           0.000 79.177  22632',
'SHOLTIS        0.000 79.178  22633',
'SHKRELI        0.000 79.178  22634',
'SHEIKH         0.000 79.179  22635',
'SHATTLES       0.000 79.179  22636',
'SHARLOW        0.000 79.179  22637',
'SHAO           0.000 79.180  22638',
'SHAMBAUGH      0.000 79.180  22639',
'SHAIKH         0.000 79.181  22640',
'SERRAO         0.000 79.181  22641',
'SERAFINO       0.000 79.181  22642',
'SELLEY         0.000 79.182  22643',
'SELLE          0.000 79.182  22644',
'SEEL           0.000 79.183  22645',
'SEDBERRY       0.000 79.183  22646',
'SECORD         0.000 79.183  22647',
'SEAT           0.000 79.184  22648',
'SCHUNK         0.000 79.184  22649',
'SCHUCH         0.000 79.185  22650',
'SCHOR          0.000 79.185  22651',
'SCHOLZE        0.000 79.185  22652',
'SCHNEE         0.000 79.186  22653',
'SCHMIEDER      0.000 79.186  22654',
'SCHLEICH       0.000 79.187  22655',
'SCHIMPF        0.000 79.187  22656',
'SCHERF         0.000 79.187  22657',
'SATTERTHWAITE  0.000 79.188  22658',
'SASSON         0.000 79.188  22659',
'SARKISIAN      0.000 79.189  22660',
'SARINANA       0.000 79.189  22661',
'SANZONE        0.000 79.189  22662',
'SALVAS         0.000 79.190  22663',
'SALONE         0.000 79.190  22664',
'SALIDO         0.000 79.191  22665',
'SAIKI          0.000 79.191  22666',
'SAHR           0.000 79.191  22667',
'RUSHER         0.000 79.192  22668',
'RUSEK          0.000 79.192  22669',
'RUSE           0.000 79.193  22670',
'RUPPEL         0.000 79.193  22671',
'RUBI           0.000 79.193  22672',
'RUBEL          0.000 79.194  22673',
'ROUGH          0.000 79.194  22674',
'ROTHFUSS       0.000 79.195  22675',
'ROTHENBERGER   0.000 79.195  22676',
'ROSSELL        0.000 79.195  22677',
'ROSENQUIST     0.000 79.196  22678',
'ROSEBROOK      0.000 79.196  22679',
'ROMITO         0.000 79.197  22680',
'ROMINES        0.000 79.197  22681',
'ROLANDO        0.000 79.197  22682',
'ROLAN          0.000 79.198  22683',
'ROKER          0.000 79.198  22684',
'ROEHRIG        0.000 79.199  22685',
'ROCKHOLD       0.000 79.199  22686',
'ROCCA          0.000 79.199  22687',
'ROBUCK         0.000 79.200  22688',
'RISS           0.000 79.200  22689',
'RINALDO        0.000 79.200  22690',
'RIGHT          0.000 79.201  22691',
'RIGGENBACH     0.000 79.201  22692',
'REZENTES       0.000 79.202  22693',
'REUTHER        0.000 79.202  22694',
'REUBEN         0.000 79.202  22695',
'RENOLDS        0.000 79.203  22696',
'RENCH          0.000 79.203  22697',
'REMUS          0.000 79.204  22698',
'REMSEN         0.000 79.204  22699',
'RELLER         0.000 79.204  22700',
'RELF           0.000 79.205  22701',
'REITZEL        0.000 79.205  22702',
'REIHER         0.000 79.206  22703',
'REHDER         0.000 79.206  22704',
'REDEKER        0.000 79.206  22705',
'RAMERO         0.000 79.207  22706',
'RAHAIM         0.000 79.207  22707',
'RADICE         0.000 79.208  22708',
'QUIJAS         0.000 79.208  22709',
'QUALEY         0.000 79.208  22710',
'PURGASON       0.000 79.209  22711',
'PRUM           0.000 79.209  22712',
'PROUDFOOT      0.000 79.210  22713',
'PROCK          0.000 79.210  22714',
'PROBERT        0.000 79.210  22715',
'PRINTUP        0.000 79.211  22716',
'PRIMER         0.000 79.211  22717',
'PRIMAVERA      0.000 79.212  22718',
'PRENATT        0.000 79.212  22719',
'PRATICO        0.000 79.212  22720',
'POLICH         0.000 79.213  22721',
'PODKOWKA       0.000 79.213  22722',
'PODESTA        0.000 79.214  22723',
'PLATTNER       0.000 79.214  22724',
'PLASSE         0.000 79.214  22725',
'PLAMONDON      0.000 79.215  22726',
'PITTMON        0.000 79.215  22727',
'PIPPENGER      0.000 79.216  22728',
'PINEO          0.000 79.216  22729',
'PIERPONT       0.000 79.216  22730',
'PETZOLD        0.000 79.217  22731',
'PETZ           0.000 79.217  22732',
'PETTIWAY       0.000 79.218  22733',
'PETTERS        0.000 79.218  22734',
'PETROSKI       0.000 79.218  22735',
'PETRIK         0.000 79.219  22736',
'PESOLA         0.000 79.219  22737',
'PERSHALL       0.000 79.220  22738',
'PERLMUTTER     0.000 79.220  22739',
'PENEPENT       0.000 79.220  22740',
'PEEVY          0.000 79.221  22741',
'PECHACEK       0.000 79.221  22742',
'PEARS          0.000 79.222  22743',
'PEADEN         0.000 79.222  22744',
'PAZOS          0.000 79.222  22745',
'PAVIA          0.000 79.223  22746',
'PASCARELLI     0.000 79.223  22747',
'PARM           0.000 79.224  22748',
'PARILLO        0.000 79.224  22749',
'PARFAIT        0.000 79.224  22750',
'PAOLETTI       0.000 79.225  22751',
'PALOMBA        0.000 79.225  22752',
'PALENCIA       0.000 79.226  22753',
'PAGADUAN       0.000 79.226  22754',
'OXNER          0.000 79.226  22755',
'OVERFIELD      0.000 79.227  22756',
'OVERCAST       0.000 79.227  22757',
'OULLETTE       0.000 79.228  22758',
'OUK            0.000 79.228  22759',
'OSTROFF        0.000 79.228  22760',
'OSEI           0.000 79.229  22761',
'OMARAH         0.000 79.229  22762',
'OLENICK        0.000 79.230  22763',
'OLAH           0.000 79.230  22764',
'ODEM           0.000 79.230  22765',
'NYGREN         0.000 79.231  22766',
'NOTARO         0.000 79.231  22767',
'NORTHCOTT      0.000 79.231  22768',
'NODINE         0.000 79.232  22769',
'NILGES         0.000 79.232  22770',
'NEYMAN         0.000 79.233  22771',
'NEVE           0.000 79.233  22772',
'NEUENDORF      0.000 79.233  22773',
'NEPTUNE        0.000 79.234  22774',
'NEISLER        0.000 79.234  22775',
'NEAULT         0.000 79.235  22776',
'NARCISO        0.000 79.235  22777',
'NAFF           0.000 79.235  22778',
'MUSCARELLA     0.000 79.236  22779',
'MUN            0.000 79.236  22780',
'MOST           0.000 79.237  22781',
'MORRISETTE     0.000 79.237  22782',
'MORPHEW        0.000 79.237  22783',
'MOREIN         0.000 79.238  22784',
'MOR            0.000 79.238  22785',
'MONTVILLE      0.000 79.239  22786',
'MONTUFAR       0.000 79.239  22787',
'MONTESINOS     0.000 79.239  22788',
'MONTERROSO     0.000 79.240  22789',
'MONGOLD        0.000 79.240  22790',
'MONA           0.000 79.241  22791',
'MOJARRO        0.000 79.241  22792',
'MOITOSO        0.000 79.241  22793',
'MODE           0.000 79.242  22794',
'MIRARCHI       0.000 79.242  22795',
'MIRANDO        0.000 79.243  22796',
'MINOGUE        0.000 79.243  22797',
'MILICI         0.000 79.243  22798',
'MIGA           0.000 79.244  22799',
'MIDYETT        0.000 79.244  22800',
'MICHNA         0.000 79.245  22801',
'MEY            0.000 79.245  22802',
'MEUSER         0.000 79.245  22803',
'MESSANA        0.000 79.246  22804',
'MENZIE         0.000 79.246  22805',
'MENZ           0.000 79.247  22806',
'MENDICINO      0.000 79.247  22807',
'MELONE         0.000 79.247  22808',
'MELLISH        0.000 79.248  22809',
'MELLER         0.000 79.248  22810',
'MELLE          0.000 79.249  22811',
'MEINTS         0.000 79.249  22812',
'MECHEM         0.000 79.249  22813',
'MEALER         0.000 79.250  22814',
'MCWILLIAM      0.000 79.250  22815',
'MCWHITE        0.000 79.251  22816',
'MCQUIGGAN      0.000 79.251  22817',
'MCPHILLIPS     0.000 79.251  22818',
'MCPARTLAND     0.000 79.252  22819',
'MCNELLIS       0.000 79.252  22820',
'MCMACKIN       0.000 79.253  22821',
'MCLAUGHIN      0.000 79.253  22822',
'MCKINNY        0.000 79.253  22823',
'MCKEITHAN      0.000 79.254  22824',
'MCGUIRK        0.000 79.254  22825',
'MCGILLIVRAY    0.000 79.255  22826',
'MCGARR         0.000 79.255  22827',
'MCGAHEE        0.000 79.255  22828',
'MCFAUL         0.000 79.256  22829',
'MCFADIN        0.000 79.256  22830',
'MCEUEN         0.000 79.257  22831',
'MCCULLAH       0.000 79.257  22832',
'MCCONICO       0.000 79.257  22833',
'MCCLAREN       0.000 79.258  22834',
'MCCAUL         0.000 79.258  22835',
'MCCALLEY       0.000 79.259  22836',
'MCCALISTER     0.000 79.259  22837',
'MAZER          0.000 79.259  22838',
'MAYSON         0.000 79.260  22839',
'MAYHAN         0.000 79.260  22840',
'MAUGERI        0.000 79.261  22841',
'MAUGER         0.000 79.261  22842',
'MATTIX         0.000 79.261  22843',
'MATTEWS        0.000 79.262  22844',
'MASLOWSKI      0.000 79.262  22845',
'MASEK          0.000 79.262  22846',
'MARTIR         0.000 79.263  22847',
'MARSCH         0.000 79.263  22848',
'MARQUESS       0.000 79.264  22849',
'MARON          0.000 79.264  22850',
'MARKWELL       0.000 79.264  22851',
'MARKOW         0.000 79.265  22852',
'MARINARO       0.000 79.265  22853',
'MARIETTA       0.000 79.266  22854',
'MARCINEK       0.000 79.266  22855',
'MANNER         0.000 79.266  22856',
'MANNELLA       0.000 79.267  22857',
'MANGO          0.000 79.267  22858',
'MALLEN         0.000 79.268  22859',
'MAJEED         0.000 79.268  22860',
'MAHNKE         0.000 79.268  22861',
'MAHABIR        0.000 79.269  22862',
'MAGBY          0.000 79.269  22863',
'MAGALLAN       0.000 79.270  22864',
'MADERE         0.000 79.270  22865',
'MACHNIK        0.000 79.270  22866',
'LYBRAND        0.000 79.271  22867',
'LUQUE          0.000 79.271  22868',
'LUNDHOLM       0.000 79.272  22869',
'LUEDERS        0.000 79.272  22870',
'LUCIAN         0.000 79.272  22871',
'LUBINSKI       0.000 79.273  22872',
'LOWY           0.000 79.273  22873',
'LOEW           0.000 79.274  22874',
'LIPPARD        0.000 79.274  22875',
'LINSON         0.000 79.274  22876',
'LINDBLAD       0.000 79.275  22877',
'LIGHTCAP       0.000 79.275  22878',
'LEVITSKY       0.000 79.276  22879',
'LEVENS         0.000 79.276  22880',
'LEONARDI       0.000 79.276  22881',
'LENTON         0.000 79.277  22882',
'LENGYEL        0.000 79.277  22883',
'LENG           0.000 79.278  22884',
'LEITZEL        0.000 79.278  22885',
'LEICHT         0.000 79.278  22886',
'LEAVER         0.000 79.279  22887',
'LAUBSCHER      0.000 79.279  22888',
'LASHUA         0.000 79.280  22889',
'LARUSSO        0.000 79.280  22890',
'LARRIMORE      0.000 79.280  22891',
'LANTERMAN      0.000 79.281  22892',
'LANNI          0.000 79.281  22893',
'LANASA         0.000 79.282  22894',
'LAMOUREAUX     0.000 79.282  22895',
'LAMBROS        0.000 79.282  22896',
'LAMBORN        0.000 79.283  22897',
'LAMBERTI       0.000 79.283  22898',
'LALL           0.000 79.284  22899',
'LAGOS          0.000 79.284  22900',
'LAFUENTE       0.000 79.284  22901',
'LAFERRIERE     0.000 79.285  22902',
'LACONTE        0.000 79.285  22903',
'KYGER          0.000 79.286  22904',
'KUPIEC         0.000 79.286  22905',
'KUNZMAN        0.000 79.286  22906',
'KUEHNE         0.000 79.287  22907',
'KUDER          0.000 79.287  22908',
'KUBAT          0.000 79.288  22909',
'KROGH          0.000 79.288  22910',
'KREIDLER       0.000 79.288  22911',
'KRAWIEC        0.000 79.289  22912',
'KRAUTH         0.000 79.289  22913',
'KRATKY         0.000 79.290  22914',
'KOTTWITZ       0.000 79.290  22915',
'KORB           0.000 79.290  22916',
'KONO           0.000 79.291  22917',
'KOLMAN         0.000 79.291  22918',
'KOLESAR        0.000 79.292  22919',
'KOEPPEL        0.000 79.292  22920',
'KNAPPER        0.000 79.292  22921',
'KLINGENBERG    0.000 79.293  22922',
'KJOS           0.000 79.293  22923',
'KEPPEL         0.000 79.293  22924',
'KENNAN         0.000 79.294  22925',
'KELTZ          0.000 79.294  22926',
'KEALOHA        0.000 79.295  22927',
'KASEL          0.000 79.295  22928',
'KARNEY         0.000 79.295  22929',
'KANNE          0.000 79.296  22930',
'KAMROWSKI      0.000 79.296  22931',
'KAGAWA         0.000 79.297  22932',
'JOO            0.000 79.297  22933',
'JOHNOSN        0.000 79.297  22934',
'JOESPH         0.000 79.298  22935',
'JILEK          0.000 79.298  22936',
'JARVIE         0.000 79.299  22937',
'JARRET         0.000 79.299  22938',
'JANSKY         0.000 79.299  22939',
'JACQUEMIN      0.000 79.300  22940',
'JACOX          0.000 79.300  22941',
'JACOME         0.000 79.301  22942',
'ITALIANO       0.000 79.301  22943',
'IRIARTE        0.000 79.301  22944',
'INGWERSEN      0.000 79.302  22945',
'IMBODEN        0.000 79.302  22946',
'IGLESIA        0.000 79.303  22947',
'HUYSER         0.000 79.303  22948',
'HURSTON        0.000 79.303  22949',
'HURSH          0.000 79.304  22950',
'HUNTOON        0.000 79.304  22951',
'HUDMAN         0.000 79.305  22952',
'HOYING         0.000 79.305  22953',
'HORSMAN        0.000 79.305  22954',
'HORRIGAN       0.000 79.306  22955',
'HORNBAKER      0.000 79.306  22956',
'HORIUCHI       0.000 79.307  22957',
'HOPEWELL       0.000 79.307  22958',
'HOOP           0.000 79.307  22959',
'HOMMEL         0.000 79.308  22960',
'HOMEYER        0.000 79.308  22961',
'HOLZINGER      0.000 79.309  22962',
'HOLMER         0.000 79.309  22963',
'HOLLOW         0.000 79.309  22964',
'HIPSHER        0.000 79.310  22965',
'HINCHMAN       0.000 79.310  22966',
'HILTS          0.000 79.311  22967',
'HIGGINBOTTOM   0.000 79.311  22968',
'HIEB           0.000 79.311  22969',
'HEYNE          0.000 79.312  22970',
'HESSLING       0.000 79.312  22971',
'HESLER         0.000 79.313  22972',
'HERTLEIN       0.000 79.313  22973',
'HERFORD        0.000 79.313  22974',
'HERAS          0.000 79.314  22975',
'HENRICKSEN     0.000 79.314  22976',
'HENNEMANN      0.000 79.315  22977',
'HENERY         0.000 79.315  22978',
'HENDERSHOTT    0.000 79.315  22979',
'HEMSTREET      0.000 79.316  22980',
'HEINEY         0.000 79.316  22981',
'HECKERT        0.000 79.317  22982',
'HEATLEY        0.000 79.317  22983',
'HAZELL         0.000 79.317  22984',
'HAZAN          0.000 79.318  22985',
'HAYASHIDA      0.000 79.318  22986',
'HAUSLER        0.000 79.319  22987',
'HARTSOE        0.000 79.319  22988',
'HARTH          0.000 79.319  22989',
'HARRIOTT       0.000 79.320  22990',
'HARRIGER       0.000 79.320  22991',
'HARPIN         0.000 79.321  22992',
'HARDISTY       0.000 79.321  22993',
'HARDGE         0.000 79.321  22994',
'HAO            0.000 79.322  22995',
'HANNAMAN       0.000 79.322  22996',
'HANNAHS        0.000 79.323  22997',
'HAMP           0.000 79.323  22998',
'HAMMERSMITH    0.000 79.323  22999',
'HAMITON        0.000 79.324  23000',
'HALSELL        0.000 79.324  23001',
'HALDERMAN      0.000 79.324  23002',
'HAGGE          0.000 79.325  23003',
'HABEL          0.000 79.325  23004',
'GUSLER         0.000 79.326  23005',
'GUSHIKEN       0.000 79.326  23006',
'GURR           0.000 79.326  23007',
'GUMMER         0.000 79.327  23008',
'GULLICK        0.000 79.327  23009',
'GRUNDEN        0.000 79.328  23010',
'GROSCH         0.000 79.328  23011',
'GREENBURG      0.000 79.328  23012',
'GREB           0.000 79.329  23013',
'GREAVER        0.000 79.329  23014',
'GRATZ          0.000 79.330  23015',
'GRAJALES       0.000 79.330  23016',
'GOURLAY        0.000 79.330  23017',
'GOTTO          0.000 79.331  23018',
'GORLEY         0.000 79.331  23019',
'GOODPASTURE    0.000 79.332  23020',
'GODARD         0.000 79.332  23021',
'GLORIOSO       0.000 79.332  23022',
'GLOOR          0.000 79.333  23023',
'GLASCOCK       0.000 79.333  23024',
'GIZZI          0.000 79.334  23025',
'GIROIR         0.000 79.334  23026',
'GIBEAULT       0.000 79.334  23027',
'GAULDIN        0.000 79.335  23028',
'GAUER          0.000 79.335  23029',
'GARTIN         0.000 79.336  23030',
'GARRELS        0.000 79.336  23031',
'GAMBER         0.000 79.336  23032',
'GALLOGLY       0.000 79.337  23033',
'GALLEY         0.000 79.337  23034',
'GADE           0.000 79.338  23035',
'FUSARO         0.000 79.338  23036',
'FRIPP          0.000 79.338  23037',
'FREYER         0.000 79.339  23038',
'FREIBERG       0.000 79.339  23039',
'FRANZONI       0.000 79.340  23040',
'FRAGALE        0.000 79.340  23041',
'FOSTON         0.000 79.340  23042',
'FORTI          0.000 79.341  23043',
'FORNESS        0.000 79.341  23044',
'FOLTS          0.000 79.342  23045',
'FOLLOWELL      0.000 79.342  23046',
'FOARD          0.000 79.342  23047',
'FLOM           0.000 79.343  23048',
'FLING          0.000 79.343  23049',
'FLETT          0.000 79.344  23050',
'FLEITAS        0.000 79.344  23051',
'FLAMM          0.000 79.344  23052',
'FINO           0.000 79.345  23053',
'FINNEN         0.000 79.345  23054',
'FINCHUM        0.000 79.346  23055',
'FILIPPELLI     0.000 79.346  23056',
'FICKEL         0.000 79.346  23057',
'FEUCHT         0.000 79.347  23058',
'FEILER         0.000 79.347  23059',
'FEENSTRA       0.000 79.348  23060',
'FEAGINS        0.000 79.348  23061',
'FAVER          0.000 79.348  23062',
'FAUX           0.000 79.349  23063',
'FAULKENBERRY   0.000 79.349  23064',
'FARABAUGH      0.000 79.350  23065',
'FANDEL         0.000 79.350  23066',
'FALLEN         0.000 79.350  23067',
'FALER          0.000 79.351  23068',
'FAIVRE         0.000 79.351  23069',
'FAIREY         0.000 79.352  23070',
'FACEY          0.000 79.352  23071',
'EXNER          0.000 79.352  23072',
'EVENSEN        0.000 79.353  23073',
'ERION          0.000 79.353  23074',
'ERBEN          0.000 79.354  23075',
'EPTING         0.000 79.354  23076',
'EPPING         0.000 79.354  23077',
'EPHRAIM        0.000 79.355  23078',
'ENGBERG        0.000 79.355  23079',
'ELSEN          0.000 79.355  23080',
'ELLINGWOOD     0.000 79.356  23081',
'ELLEN          0.000 79.356  23082',
'EISENMANN      0.000 79.357  23083',
'EICHMAN        0.000 79.357  23084',
'EHLE           0.000 79.357  23085',
'EDSALL         0.000 79.358  23086',
'EAGLES         0.000 79.358  23087',
'DURALL         0.000 79.359  23088',
'DUPLER         0.000 79.359  23089',
'DUNKER         0.000 79.359  23090',
'DUMLAO         0.000 79.360  23091',
'DUFORD         0.000 79.360  23092',
'DUFFIE         0.000 79.361  23093',
'DUDDING        0.000 79.361  23094',
'DRIES          0.000 79.361  23095',
'DOUNG          0.000 79.362  23096',
'DORANTES       0.000 79.362  23097',
'DONAHOO        0.000 79.363  23098',
'DOMENICK       0.000 79.363  23099',
'DOLLINS        0.000 79.363  23100',
'DOBLES         0.000 79.364  23101',
'DIPIAZZA       0.000 79.364  23102',
'DINO           0.000 79.365  23103',
'DIMEO          0.000 79.365  23104',
'DIEHM          0.000 79.365  23105',
'DICICCO        0.000 79.366  23106',
'DEVIN          0.000 79.366  23107',
'DEVENPORT      0.000 79.367  23108',
'DESORMEAUX     0.000 79.367  23109',
'DERROW         0.000 79.367  23110',
'DEPAOLO        0.000 79.368  23111',
'DENVER         0.000 79.368  23112',
'DENISE         0.000 79.369  23113',
'DEMAS          0.000 79.369  23114',
'DELPRIORE      0.000 79.369  23115',
'DELOSANTOS     0.000 79.370  23116',
'DELA           0.000 79.370  23117',
'DEGREENIA      0.000 79.371  23118',
'DEGENHARDT     0.000 79.371  23119',
'DEFRANCESCO    0.000 79.371  23120',
'DEFENBAUGH     0.000 79.372  23121',
'DEETS          0.000 79.372  23122',
'DEBONIS        0.000 79.373  23123',
'DEARY          0.000 79.373  23124',
'DAZEY          0.000 79.373  23125',
'DARGIE         0.000 79.374  23126',
'DAMBROSIA      0.000 79.374  23127',
'DALAL          0.000 79.375  23128',
'DAGEN          0.000 79.375  23129',
'CUN            0.000 79.375  23130',
'CUEN           0.000 79.376  23131',
'CRUPI          0.000 79.376  23132',
'CROSSAN        0.000 79.377  23133',
'CRICHLOW       0.000 79.377  23134',
'CREQUE         0.000 79.377  23135',
'COUTTS         0.000 79.378  23136',
'COUNCE         0.000 79.378  23137',
'CORAM          0.000 79.379  23138',
'CONSTANTE      0.000 79.379  23139',
'CONNON         0.000 79.379  23140',
'COLLELO        0.000 79.380  23141',
'COIT           0.000 79.380  23142',
'COCKLIN        0.000 79.381  23143',
'COBLENTZ       0.000 79.381  23144',
'COBEY          0.000 79.381  23145',
'COARD          0.000 79.382  23146',
'CLUTTS         0.000 79.382  23147',
'CLINGAN        0.000 79.383  23148',
'CLAW           0.000 79.383  23149',
'CLAMPITT       0.000 79.383  23150',
'CLAEYS         0.000 79.384  23151',
'CIULLA         0.000 79.384  23152',
'CIMINI         0.000 79.385  23153',
'CIAMPA         0.000 79.385  23154',
'CHRISTON       0.000 79.385  23155',
'CHOAT          0.000 79.386  23156',
'CHIOU          0.000 79.386  23157',
'CHENAIL        0.000 79.386  23158',
'CHAVOUS        0.000 79.387  23159',
'CATTO          0.000 79.387  23160',
'CATALFAMO      0.000 79.388  23161',
'CASTERLINE     0.000 79.388  23162',
'CASSINELLI     0.000 79.388  23163',
'CASPERS        0.000 79.389  23164',
'CARROWAY       0.000 79.389  23165',
'CARLEN         0.000 79.390  23166',
'CARITHERS      0.000 79.390  23167',
'CAPPEL         0.000 79.390  23168',
'CALO           0.000 79.391  23169',
'CALLOW         0.000 79.391  23170',
'CALANDRA       0.000 79.392  23171',
'CAGLEY         0.000 79.392  23172',
'CAFFERTY       0.000 79.392  23173',
'BYUN           0.000 79.393  23174',
'BYAM           0.000 79.393  23175',
'BUTTNER        0.000 79.394  23176',
'BUTH           0.000 79.394  23177',
'BURTENSHAW     0.000 79.394  23178',
'BURGET         0.000 79.395  23179',
'BURFIELD       0.000 79.395  23180',
'BURESH         0.000 79.396  23181',
'BUNT           0.000 79.396  23182',
'BULTMAN        0.000 79.396  23183',
'BULOW          0.000 79.397  23184',
'BUCHTA         0.000 79.397  23185',
'BUCHMANN       0.000 79.398  23186',
'BRUNETT        0.000 79.398  23187',
'BRUEMMER       0.000 79.398  23188',
'BRUEGGEMAN     0.000 79.399  23189',
'BRITTO         0.000 79.399  23190',
'BRINEY         0.000 79.400  23191',
'BRIMHALL       0.000 79.400  23192',
'BRIBIESCA      0.000 79.400  23193',
'BRESLER        0.000 79.401  23194',
'BRAZAN         0.000 79.401  23195',
'BRASHIER       0.000 79.402  23196',
'BRAR           0.000 79.402  23197',
'BRANDSTETTER   0.000 79.402  23198',
'BRANDI         0.000 79.403  23199',
'BOZE           0.000 79.403  23200',
'BOONSTRA       0.000 79.404  23201',
'BLUITT         0.000 79.404  23202',
'BLOMGREN       0.000 79.404  23203',
'BLATTNER       0.000 79.405  23204',
'BLASI          0.000 79.405  23205',
'BLADEN         0.000 79.406  23206',
'BITTERMAN      0.000 79.406  23207',
'BILBY          0.000 79.406  23208',
'BIERCE         0.000 79.407  23209',
'BIELLO         0.000 79.407  23210',
'BETTES         0.000 79.408  23211',
'BERTONE        0.000 79.408  23212',
'BERREY         0.000 79.408  23213',
'BERNAT         0.000 79.409  23214',
'BERBERICH      0.000 79.409  23215',
'BENSHOOF       0.000 79.410  23216',
'BENDICKSON     0.000 79.410  23217',
'BELOW          0.000 79.410  23218',
'BELLEFEUILLE   0.000 79.411  23219',
'BEDNARSKI      0.000 79.411  23220',
'BEDDINGFIELD   0.000 79.412  23221',
'BECKERMAN      0.000 79.412  23222',
'BEASTON        0.000 79.412  23223',
'BAVARO         0.000 79.413  23224',
'BATALLA        0.000 79.413  23225',
'BASYE          0.000 79.414  23226',
'BASKINS        0.000 79.414  23227',
'BARTOLOTTA     0.000 79.414  23228',
'BARTKOWSKI     0.000 79.415  23229',
'BARRANCO       0.000 79.415  23230',
'BARKETT        0.000 79.416  23231',
'BAND           0.000 79.416  23232',
'BANASZAK       0.000 79.416  23233',
'BAME           0.000 79.417  23234',
'BAMBERGER      0.000 79.417  23235',
'BALSLEY        0.000 79.417  23236',
'BALLAS         0.000 79.418  23237',
'BALICKI        0.000 79.418  23238',
'BALDING        0.000 79.419  23239',
'BALD           0.000 79.419  23240',
'BADURA         0.000 79.419  23241',
'AYMOND         0.000 79.420  23242',
'AYLOR          0.000 79.420  23243',
'AYLESWORTH     0.000 79.421  23244',
'AXLEY          0.000 79.421  23245',
'AXELROD        0.000 79.421  23246',
'AUBERT         0.000 79.422  23247',
'ARMOND         0.000 79.422  23248',
'ARIZA          0.000 79.423  23249',
'APICELLA       0.000 79.423  23250',
'ANSTINE        0.000 79.423  23251',
'ANKROM         0.000 79.424  23252',
'ANGEVINE       0.000 79.424  23253',
'ANGER          0.000 79.425  23254',
'ANDREOTTI      0.000 79.425  23255',
'ANDREA         0.000 79.425  23256',
'ALTO           0.000 79.426  23257',
'ALSPAUGH       0.000 79.426  23258',
'ALPAUGH        0.000 79.427  23259',
'ALMADA         0.000 79.427  23260',
'ALLINDER       0.000 79.427  23261',
'ALEXANDRA      0.000 79.428  23262',
'ALEQUIN        0.000 79.428  23263',
'ALAN           0.000 79.429  23264',
'AGUILLARD      0.000 79.429  23265',
'AGRON          0.000 79.429  23266',
'AGENA          0.000 79.430  23267',
'AFANADOR       0.000 79.430  23268',
'ACKERLEY       0.000 79.431  23269',
'ABREV          0.000 79.431  23270',
'ABDALLA        0.000 79.431  23271',
'AARONSON       0.000 79.432  23272',
'ZYNDA          0.000 79.432  23273',
'ZUCCO          0.000 79.433  23274',
'ZIPP           0.000 79.433  23275',
'ZETINA         0.000 79.433  23276',
'ZENZ           0.000 79.434  23277',
'ZELINSKI       0.000 79.434  23278',
'YOUNGREN       0.000 79.434  23279',
'YOCHUM         0.000 79.435  23280',
'YEARSLEY       0.000 79.435  23281',
'YANKEY         0.000 79.436  23282',
'WOODFORK       0.000 79.436  23283',
'WOHLWEND       0.000 79.436  23284',
'WOELFEL        0.000 79.437  23285',
'WISTE          0.000 79.437  23286',
'WISMER         0.000 79.438  23287',
'WINZER         0.000 79.438  23288',
'WINKER         0.000 79.438  23289',
'WILKISON       0.000 79.439  23290',
'WIGGER         0.000 79.439  23291',
'WIERENGA       0.000 79.439  23292',
'WHIPPS         0.000 79.440  23293',
'WHEELING       0.000 79.440  23294',
'WESTRAY        0.000 79.441  23295',
'WESCH          0.000 79.441  23296',
'WELD           0.000 79.441  23297',
'WEIBLE         0.000 79.442  23298',
'WEDELL         0.000 79.442  23299',
'WEDDELL        0.000 79.442  23300',
'WAWRZYNIAK     0.000 79.443  23301',
'WASKO          0.000 79.443  23302',
'WASHINTON      0.000 79.444  23303',
'WANTZ          0.000 79.444  23304',
'WALTS          0.000 79.444  23305',
'WALLANDER      0.000 79.445  23306',
'WAIN           0.000 79.445  23307',
'WAHLEN         0.000 79.446  23308',
'WACHOWIAK      0.000 79.446  23309',
'VOSHELL        0.000 79.446  23310',
'VITERI         0.000 79.447  23311',
'VIRE           0.000 79.447  23312',
'VILLAFUERTE    0.000 79.447  23313',
'VIEYRA         0.000 79.448  23314',
'VIAU           0.000 79.448  23315',
'VESCIO         0.000 79.449  23316',
'VERRIER        0.000 79.449  23317',
'VERHEY         0.000 79.449  23318',
'VAUSE          0.000 79.450  23319',
'VANDERMOLEN    0.000 79.450  23320',
'VANDERHORST    0.000 79.451  23321',
'VALOIS         0.000 79.451  23322',
'VALLA          0.000 79.451  23323',
'VALCOURT       0.000 79.452  23324',
'VACEK          0.000 79.452  23325',
'UZZLE          0.000 79.452  23326',
'UMLAND         0.000 79.453  23327',
'UM             0.000 79.453  23328',
'ULMAN          0.000 79.454  23329',
'ULLAND         0.000 79.454  23330',
'TURVEY         0.000 79.454  23331',
'TULEY          0.000 79.455  23332',
'TREMBATH       0.000 79.455  23333',
'TREES          0.000 79.455  23334',
'TRABERT        0.000 79.456  23335',
'TOWSEND        0.000 79.456  23336',
'TOTMAN         0.000 79.457  23337',
'TOEWS          0.000 79.457  23338',
'TOBY           0.000 79.457  23339',
'TITO           0.000 79.458  23340',
'TISCH          0.000 79.458  23341',
'TISBY          0.000 79.459  23342',
'TIPPING        0.000 79.459  23343',
'TIERCE         0.000 79.459  23344',
'THIVIERGE      0.000 79.460  23345',
'TENENBAUM      0.000 79.460  23346',
'TEAGLE         0.000 79.460  23347',
'TACY           0.000 79.461  23348',
'TABLER         0.000 79.461  23349',
'SZEWCZYK       0.000 79.462  23350',
'SWEARNGIN      0.000 79.462  23351',
'SUIRE          0.000 79.462  23352',
'STURROCK       0.000 79.463  23353',
'STUBBE         0.000 79.463  23354',
'STRONACH       0.000 79.463  23355',
'STOUTE         0.000 79.464  23356',
'STOUDEMIRE     0.000 79.464  23357',
'STONEBERG      0.000 79.465  23358',
'STERBA         0.000 79.465  23359',
'STEJSKAL       0.000 79.465  23360',
'STEIER         0.000 79.466  23361',
'STEHR          0.000 79.466  23362',
'STECKLER       0.000 79.467  23363',
'STECKEL        0.000 79.467  23364',
'STEARMAN       0.000 79.467  23365',
'STEAKLEY       0.000 79.468  23366',
'STAR           0.000 79.468  23367',
'STANFORTH      0.000 79.468  23368',
'STANCILL       0.000 79.469  23369',
'STALLS         0.000 79.469  23370',
'SROUR          0.000 79.470  23371',
'SPROWL         0.000 79.470  23372',
'SPEVAK         0.000 79.470  23373',
'SOLE           0.000 79.471  23374',
'SOKOLOFF       0.000 79.471  23375',
'SODERMAN       0.000 79.471  23376',
'SNOVER         0.000 79.472  23377',
'SLEEMAN        0.000 79.472  23378',
'SLAUBAUGH      0.000 79.473  23379',
'SITZMAN        0.000 79.473  23380',
'SIMPLER        0.000 79.473  23381',
'SIMMER         0.000 79.474  23382',
'SIMES          0.000 79.474  23383',
'SIEGAL         0.000 79.475  23384',
'SIDOTI         0.000 79.475  23385',
'SIDLER         0.000 79.475  23386',
'SIDER          0.000 79.476  23387',
'SIDENER        0.000 79.476  23388',
'SIDDIQI        0.000 79.476  23389',
'SHIREMAN       0.000 79.477  23390',
'SHIMA          0.000 79.477  23391',
'SHEROAN        0.000 79.478  23392',
'SHADDUCK       0.000 79.478  23393',
'SEYAL          0.000 79.478  23394',
'SENTELL        0.000 79.479  23395',
'SENNETT        0.000 79.479  23396',
'SENKO          0.000 79.479  23397',
'SENECA         0.000 79.480  23398',
'SEN            0.000 79.480  23399',
'SELIGMAN       0.000 79.481  23400',
'SEIPEL         0.000 79.481  23401',
'SEEKINS        0.000 79.481  23402',
'SEABAUGH       0.000 79.482  23403',
'SCOUTEN        0.000 79.482  23404',
'SCHWEINSBERG   0.000 79.483  23405',
'SCHWARTZBERG   0.000 79.483  23406',
'SCHURR         0.000 79.483  23407',
'SCHULT         0.000 79.484  23408',
'SCHRICK        0.000 79.484  23409',
'SCHOENING      0.000 79.484  23410',
'SCHMITMEYER    0.000 79.485  23411',
'SCHLICHER      0.000 79.485  23412',
'SCHLAGER       0.000 79.486  23413',
'SCHACK         0.000 79.486  23414',
'SCHAAR         0.000 79.486  23415',
'SCAVUZZO       0.000 79.487  23416',
'SCARPA         0.000 79.487  23417',
'SASSANO        0.000 79.488  23418',
'SANTIGO        0.000 79.488  23419',
'SANDAVOL       0.000 79.488  23420',
'SAN            0.000 79.489  23421',
'SAMPSEL        0.000 79.489  23422',
'SAMMS          0.000 79.489  23423',
'SAMET          0.000 79.490  23424',
'SALZANO        0.000 79.490  23425',
'SALYARDS       0.000 79.491  23426',
'SALVA          0.000 79.491  23427',
'SAIDI          0.000 79.491  23428',
'SABIR          0.000 79.492  23429',
'SAAM           0.000 79.492  23430',
'SAAB           0.000 79.492  23431',
'RUNIONS        0.000 79.493  23432',
'RUNDQUIST      0.000 79.493  23433',
'ROUSSELLE      0.000 79.494  23434',
'ROUND          0.000 79.494  23435',
'ROTUNNO        0.000 79.494  23436',
'ROSES          0.000 79.495  23437',
'ROSCH          0.000 79.495  23438',
'ROMNEY         0.000 79.496  23439',
'ROHNER         0.000 79.496  23440',
'ROFF           0.000 79.496  23441',
'ROCKHILL       0.000 79.497  23442',
'ROCKEFELLER    0.000 79.497  23443',
'ROCAMORA       0.000 79.497  23444',
'RM             0.000 79.498  23445',
'RINGLE         0.000 79.498  23446',
'RIGGIE         0.000 79.499  23447',
'RICKLEFS       0.000 79.499  23448',
'REXROAT        0.000 79.499  23449',
'REVES          0.000 79.500  23450',
'REVEL          0.000 79.500  23451',
'REUSS          0.000 79.500  23452',
'RETA           0.000 79.501  23453',
'REPKA          0.000 79.501  23454',
'RENTFRO        0.000 79.502  23455',
'REINEKE        0.000 79.502  23456',
'RECORE         0.000 79.502  23457',
'RECALDE        0.000 79.503  23458',
'REASE          0.000 79.503  23459',
'RAWLING        0.000 79.504  23460',
'RAVENCRAFT     0.000 79.504  23461',
'RAVELO         0.000 79.504  23462',
'RAPPA          0.000 79.505  23463',
'RANDOL         0.000 79.505  23464',
'RAMSIER        0.000 79.505  23465',
'RAMEREZ        0.000 79.506  23466',
'RAHIMI         0.000 79.506  23467',
'RAHIM          0.000 79.507  23468',
'RADNEY         0.000 79.507  23469',
'RACEY          0.000 79.507  23470',
'RABORN         0.000 79.508  23471',
'RABALAIS       0.000 79.508  23472',
'QUEBEDEAUX     0.000 79.508  23473',
'PUJOL          0.000 79.509  23474',
'PUCHALSKI      0.000 79.509  23475',
'PROTHRO        0.000 79.510  23476',
'PROFFIT        0.000 79.510  23477',
'PRIGGE         0.000 79.510  23478',
'PRIDEAUX       0.000 79.511  23479',
'PREVO          0.000 79.511  23480',
'PORTALES       0.000 79.512  23481',
'PORCO          0.000 79.512  23482',
'POPOVIC        0.000 79.512  23483',
'POPEK          0.000 79.513  23484',
'POPEJOY        0.000 79.513  23485',
'POMPEI         0.000 79.513  23486',
'PLUMBER        0.000 79.514  23487',
'PLUDE          0.000 79.514  23488',
'PLATNER        0.000 79.515  23489',
'PLATE          0.000 79.515  23490',
'PIZZUTO        0.000 79.515  23491',
'PIZER          0.000 79.516  23492',
'PISTONE        0.000 79.516  23493',
'PILLER         0.000 79.517  23494',
'PIERRI         0.000 79.517  23495',
'PIEHL          0.000 79.517  23496',
'PICKERT        0.000 79.518  23497',
'PIASECKI       0.000 79.518  23498',
'PHONG          0.000 79.518  23499',
'PHILIPP        0.000 79.519  23500',
'PEUGH          0.000 79.519  23501',
'PESQUEIRA      0.000 79.520  23502',
'PERRETT        0.000 79.520  23503',
'PERFETTI       0.000 79.520  23504',
'PERCELL        0.000 79.521  23505',
'PENHOLLOW      0.000 79.521  23506',
'PELTO          0.000 79.521  23507',
'PELLETT        0.000 79.522  23508',
'PAVLAK         0.000 79.522  23509',
'PAULO          0.000 79.523  23510',
'PAULA          0.000 79.523  23511',
'PATRICIA       0.000 79.523  23512',
'PASTORIUS      0.000 79.524  23513',
'PARSELL        0.000 79.524  23514',
'PARRALES       0.000 79.525  23515',
'PAREJA         0.000 79.525  23516',
'PARCELL        0.000 79.525  23517',
'PAPPAN         0.000 79.526  23518',
'PAJAK          0.000 79.526  23519',
'OWUSU          0.000 79.526  23520',
'OVITT          0.000 79.527  23521',
'ORY            0.000 79.527  23522',
'ORRICK         0.000 79.528  23523',
'ONIELL         0.000 79.528  23524',
'OLLIFF         0.000 79.528  23525',
'OLBERDING      0.000 79.529  23526',
'OESTERLING     0.000 79.529  23527',
'ODWYER         0.000 79.529  23528',
'OCEGUEDA       0.000 79.530  23529',
'OBEY           0.000 79.530  23530',
'OBERMILLER     0.000 79.531  23531',
'NYLANDER       0.000 79.531  23532',
'NULPH          0.000 79.531  23533',
'NOTTAGE        0.000 79.532  23534',
'NORTHAM        0.000 79.532  23535',
'NORGARD        0.000 79.533  23536',
'NODAL          0.000 79.533  23537',
'NIEL           0.000 79.533  23538',
'NICOLS         0.000 79.534  23539',
'NEWHARD        0.000 79.534  23540',
'NELLUM         0.000 79.534  23541',
'NEIRA          0.000 79.535  23542',
'NAZZARO        0.000 79.535  23543',
'NASSIF         0.000 79.536  23544',
'NARDUCCI       0.000 79.536  23545',
'NALBANDIAN     0.000 79.536  23546',
'NAILS          0.000 79.537  23547',
'MUSIL          0.000 79.537  23548',
'MURGA          0.000 79.537  23549',
'MURAOKA        0.000 79.538  23550',
'MUMPER         0.000 79.538  23551',
'MULROY         0.000 79.539  23552',
'MOUNTJOY       0.000 79.539  23553',
'MOSSEY         0.000 79.539  23554',
'MORETON        0.000 79.540  23555',
'MOREA          0.000 79.540  23556',
'MONTORO        0.000 79.541  23557',
'MONTESDEOCA    0.000 79.541  23558',
'MONTEALEGRE    0.000 79.541  23559',
'MONTANYE       0.000 79.542  23560',
'MONTANDON      0.000 79.542  23561',
'MOK            0.000 79.542  23562',
'MOISAN         0.000 79.543  23563',
'MOHL           0.000 79.543  23564',
'MODESTO        0.000 79.544  23565',
'MODESTE        0.000 79.544  23566',
'MITRA          0.000 79.544  23567',
'MISTER         0.000 79.545  23568',
'MINSON         0.000 79.545  23569',
'MINJAREZ       0.000 79.546  23570',
'MILBOURNE      0.000 79.546  23571',
'MICHAELSEN     0.000 79.546  23572',
'METHENEY       0.000 79.547  23573',
'MESTRE         0.000 79.547  23574',
'MESCHER        0.000 79.547  23575',
'MERVIS         0.000 79.548  23576',
'MENNENGA       0.000 79.548  23577',
'MELGAREJO      0.000 79.549  23578',
'MEISINGER      0.000 79.549  23579',
'MEININGER      0.000 79.549  23580',
'MCWATERS       0.000 79.550  23581',
'MCKERN         0.000 79.550  23582',
'MCKENDREE      0.000 79.550  23583',
'MCHARGUE       0.000 79.551  23584',
'MCGLOTHLEN     0.000 79.551  23585',
'MCGIBBON       0.000 79.552  23586',
'MCGAVOCK       0.000 79.552  23587',
'MCDUFFEE       0.000 79.552  23588',
'MCCLURKIN      0.000 79.553  23589',
'MCCAUSLAND     0.000 79.553  23590',
'MCCARDELL      0.000 79.554  23591',
'MCCAMBRIDGE    0.000 79.554  23592',
'MAZZONI        0.000 79.554  23593',
'MAYEN          0.000 79.555  23594',
'MAXTON         0.000 79.555  23595',
'MAWSON         0.000 79.555  23596',
'MAUFFRAY       0.000 79.556  23597',
'MATTINSON      0.000 79.556  23598',
'MATTILA        0.000 79.557  23599',
'MATSUNAGA      0.000 79.557  23600',
'MATER          0.000 79.557  23601',
'MASCIA         0.000 79.558  23602',
'MARSE          0.000 79.558  23603',
'MAROTZ         0.000 79.558  23604',
'MAROIS         0.000 79.559  23605',
'MARKIN         0.000 79.559  23606',
'MARKEE         0.000 79.560  23607',
'MARCINKO       0.000 79.560  23608',
'MARCIN         0.000 79.560  23609',
'MANVILLE       0.000 79.561  23610',
'MANTYLA        0.000 79.561  23611',
'MANSER         0.000 79.562  23612',
'MANRY          0.000 79.562  23613',
'MANDERSCHEID   0.000 79.562  23614',
'MALLARI        0.000 79.563  23615',
'MALIA          0.000 79.563  23616',
'MALECHA        0.000 79.563  23617',
'MALCOMB        0.000 79.564  23618',
'MAJERUS        0.000 79.564  23619',
'MAILMAN        0.000 79.565  23620',
'MACINNIS       0.000 79.565  23621',
'MABEY          0.000 79.565  23622',
'LYFORD         0.000 79.566  23623',
'LUTH           0.000 79.566  23624',
'LUPERCIO       0.000 79.566  23625',
'LUHMAN         0.000 79.567  23626',
'LUEDKE         0.000 79.567  23627',
'LOVICK         0.000 79.568  23628',
'LOSSING        0.000 79.568  23629',
'LOSS           0.000 79.568  23630',
'LORRAINE       0.000 79.569  23631',
'LOOKABAUGH     0.000 79.569  23632',
'LONGWAY        0.000 79.570  23633',
'LONE           0.000 79.570  23634',
'LOISEL         0.000 79.570  23635',
'LOGIUDICE      0.000 79.571  23636',
'LOFFREDO       0.000 79.571  23637',
'LOCUST         0.000 79.571  23638',
'LOBE           0.000 79.572  23639',
'LOBAUGH        0.000 79.572  23640',
'LIZAOLA        0.000 79.573  23641',
'LIVERS         0.000 79.573  23642',
'LITTLEPAGE     0.000 79.573  23643',
'LINNEN         0.000 79.574  23644',
'LIMMER         0.000 79.574  23645',
'LIEBSCH        0.000 79.575  23646',
'LIEBMAN        0.000 79.575  23647',
'LEYDEN         0.000 79.575  23648',
'LEVITAN        0.000 79.576  23649',
'LEVISON        0.000 79.576  23650',
'LEVIER         0.000 79.576  23651',
'LEVEN          0.000 79.577  23652',
'LEVALLEY       0.000 79.577  23653',
'LETTINGA       0.000 79.578  23654',
'LESSLEY        0.000 79.578  23655',
'LESSIG         0.000 79.578  23656',
'LEPINE         0.000 79.579  23657',
'LEIGHT         0.000 79.579  23658',
'LEICK          0.000 79.579  23659',
'LEGGIO         0.000 79.580  23660',
'LEFFINGWELL    0.000 79.580  23661',
'LEFFERT        0.000 79.581  23662',
'LEFEVERS       0.000 79.581  23663',
'LEDLOW         0.000 79.581  23664',
'LEATON         0.000 79.582  23665',
'LEANDER        0.000 79.582  23666',
'LEAMING        0.000 79.583  23667',
'LAZOS          0.000 79.583  23668',
'LAVIOLETTE     0.000 79.583  23669',
'LAUFFER        0.000 79.584  23670',
'LATZ           0.000 79.584  23671',
'LASORSA        0.000 79.584  23672',
'LASCH          0.000 79.585  23673',
'LARIN          0.000 79.585  23674',
'LAPORTA        0.000 79.586  23675',
'LANTER         0.000 79.586  23676',
'LANGSTAFF      0.000 79.586  23677',
'LANDI          0.000 79.587  23678',
'LAMICA         0.000 79.587  23679',
'LAMBSON        0.000 79.587  23680',
'LAMBE          0.000 79.588  23681',
'LAMARCA        0.000 79.588  23682',
'LAMAN          0.000 79.589  23683',
'LAMAGNA        0.000 79.589  23684',
'LAJEUNESSE     0.000 79.589  23685',
'LAFONTANT      0.000 79.590  23686',
'LAFLER         0.000 79.590  23687',
'LABRUM         0.000 79.591  23688',
'LAAKSO         0.000 79.591  23689',
'KUSH           0.000 79.591  23690',
'KUETHER        0.000 79.592  23691',
'KUCHAR         0.000 79.592  23692',
'KRUK           0.000 79.592  23693',
'KRONER         0.000 79.593  23694',
'KROH           0.000 79.593  23695',
'KRIDLER        0.000 79.594  23696',
'KREUZER        0.000 79.594  23697',
'KOVATS         0.000 79.594  23698',
'KOPROWSKI      0.000 79.595  23699',
'KOHOUT         0.000 79.595  23700',
'KNICELY        0.000 79.595  23701',
'KNELL          0.000 79.596  23702',
'KLUTTS         0.000 79.596  23703',
'KINDRICK       0.000 79.597  23704',
'KIDDY          0.000 79.597  23705',
'KHANNA         0.000 79.597  23706',
'KETCHER        0.000 79.598  23707',
'KERSCHNER      0.000 79.598  23708',
'KERFIEN        0.000 79.599  23709',
'KENSEY         0.000 79.599  23710',
'KENLEY         0.000 79.599  23711',
'KENAN          0.000 79.600  23712',
'KEMPLIN        0.000 79.600  23713',
'KELLERHOUSE    0.000 79.600  23714',
'KEESLING       0.000 79.601  23715',
'KEEP           0.000 79.601  23716',
'KEENA          0.000 79.602  23717',
'KEAS           0.000 79.602  23718',
'KAPLIN         0.000 79.602  23719',
'KANADY         0.000 79.603  23720',
'KAMPEN         0.000 79.603  23721',
'JUTRAS         0.000 79.604  23722',
'JUNGERS        0.000 79.604  23723',
'JULIO          0.000 79.604  23724',
'JESCHKE        0.000 79.605  23725',
'JEN            0.000 79.605  23726',
'JANOWSKI       0.000 79.605  23727',
'JANAS          0.000 79.606  23728',
'ISKRA          0.000 79.606  23729',
'IMPERATO       0.000 79.607  23730',
'IKERD          0.000 79.607  23731',
'IGOE           0.000 79.607  23732',
'HYNEMAN        0.000 79.608  23733',
'HYNEK          0.000 79.608  23734',
'HUSAIN         0.000 79.608  23735',
'HURRELL        0.000 79.609  23736',
'HULTQUIST      0.000 79.609  23737',
'HULLETT        0.000 79.610  23738',
'HULEN          0.000 79.610  23739',
'HUF            0.000 79.610  23740',
'HUBERTY        0.000 79.611  23741',
'HOYTE          0.000 79.611  23742',
'HOSSAIN        0.000 79.612  23743',
'HORNSTEIN      0.000 79.612  23744',
'HORI           0.000 79.612  23745',
'HOPTON         0.000 79.613  23746',
'HOLMS          0.000 79.613  23747',
'HOLLMANN       0.000 79.613  23748',
'HOLDMAN        0.000 79.614  23749',
'HOLDEMAN       0.000 79.614  23750',
'HOLBEN         0.000 79.615  23751',
'HOFFERT        0.000 79.615  23752',
'HIMEL          0.000 79.615  23753',
'HILLSMAN       0.000 79.616  23754',
'HILLARY        0.000 79.616  23755',
'HERDT          0.000 79.616  23756',
'HELLYER        0.000 79.617  23757',
'HELLEN         0.000 79.617  23758',
'HEISTER        0.000 79.618  23759',
'HEIMER         0.000 79.618  23760',
'HEIDECKER      0.000 79.618  23761',
'HEDGPETH       0.000 79.619  23762',
'HEDGEPATH      0.000 79.619  23763',
'HEBEL          0.000 79.620  23764',
'HEATWOLE       0.000 79.620  23765',
'HAYER          0.000 79.620  23766',
'HAUSNER        0.000 79.621  23767',
'HASKEW         0.000 79.621  23768',
'HASELDEN       0.000 79.621  23769',
'HARTRANFT      0.000 79.622  23770',
'HARSCH         0.000 79.622  23771',
'HARRES         0.000 79.623  23772',
'HARPS          0.000 79.623  23773',
'HARDIMON       0.000 79.623  23774',
'HALM           0.000 79.624  23775',
'HALLEE         0.000 79.624  23776',
'HALLAHAN       0.000 79.624  23777',
'HACKLEY        0.000 79.625  23778',
'HACKENBERG     0.000 79.625  23779',
'HACHEY         0.000 79.626  23780',
'HAAPALA        0.000 79.626  23781',
'GUYNES         0.000 79.626  23782',
'GUNNERSON      0.000 79.627  23783',
'GUNBY          0.000 79.627  23784',
'GULOTTA        0.000 79.628  23785',
'GUDGER         0.000 79.628  23786',
'GROMAN         0.000 79.628  23787',
'GRIGNON        0.000 79.629  23788',
'GRIEBEL        0.000 79.629  23789',
'GREGORI        0.000 79.629  23790',
'GREENAN        0.000 79.630  23791',
'GRAUER         0.000 79.630  23792',
'GOURD          0.000 79.631  23793',
'GORIN          0.000 79.631  23794',
'GORGONE        0.000 79.631  23795',
'GOOSLIN        0.000 79.632  23796',
'GOOLD          0.000 79.632  23797',
'GOLTZ          0.000 79.632  23798',
'GOLDBERGER     0.000 79.633  23799',
'GOBBLE         0.000 79.633  23800',
'GLOTFELTY      0.000 79.634  23801',
'GLASSFORD      0.000 79.634  23802',
'GLANCE         0.000 79.634  23803',
'GLADWIN        0.000 79.635  23804',
'GIUFFRE        0.000 79.635  23805',
'GILPATRICK     0.000 79.636  23806',
'GERMAINE       0.000 79.636  23807',
'GERDTS         0.000 79.636  23808',
'GENNA          0.000 79.637  23809',
'GEISEL         0.000 79.637  23810',
'GAYLER         0.000 79.637  23811',
'GAUNCE         0.000 79.638  23812',
'GAULDING       0.000 79.638  23813',
'GATELEY        0.000 79.639  23814',
'GASSMAN        0.000 79.639  23815',
'GASH           0.000 79.639  23816',
'GARSON         0.000 79.640  23817',
'GARRON         0.000 79.640  23818',
'GARAND         0.000 79.641  23819',
'GANGESTAD      0.000 79.641  23820',
'GALLOW         0.000 79.641  23821',
'GALBO          0.000 79.642  23822',
'GABRIELLI      0.000 79.642  23823',
'FULLINGTON     0.000 79.642  23824',
'FUCCI          0.000 79.643  23825',
'FRUM           0.000 79.643  23826',
'FRIEDEN        0.000 79.644  23827',
'FRIBERG        0.000 79.644  23828',
'FRASCO         0.000 79.644  23829',
'FRANCESE       0.000 79.645  23830',
'FOWLE          0.000 79.645  23831',
'FOUCHER        0.000 79.645  23832',
'FOTHERGILL     0.000 79.646  23833',
'FORAKER        0.000 79.646  23834',
'FONDER         0.000 79.647  23835',
'FOISY          0.000 79.647  23836',
'FOGAL          0.000 79.647  23837',
'FLURRY         0.000 79.648  23838',
'FLENNIKEN      0.000 79.648  23839',
'FITZHENRY      0.000 79.649  23840',
'FISHBEIN       0.000 79.649  23841',
'FINTON         0.000 79.649  23842',
'FILMORE        0.000 79.650  23843',
'FILICE         0.000 79.650  23844',
'FEOLA          0.000 79.650  23845',
'FELBERBAUM     0.000 79.651  23846',
'FAUSNAUGHT     0.000 79.651  23847',
'FASCIANO       0.000 79.652  23848',
'FARRAH         0.000 79.652  23849',
'FARQUHARSON    0.000 79.652  23850',
'FAIRES         0.000 79.653  23851',
'ESTRIDGE       0.000 79.653  23852',
'ESSMAN         0.000 79.653  23853',
'ENZ            0.000 79.654  23854',
'ENRIQUES       0.000 79.654  23855',
'EMMICK         0.000 79.655  23856',
'EKKER          0.000 79.655  23857',
'EKDAHL         0.000 79.655  23858',
'EISMAN         0.000 79.656  23859',
'EGGLETON       0.000 79.656  23860',
'EDDINGER       0.000 79.657  23861',
'EAKLE          0.000 79.657  23862',
'EAGAR          0.000 79.657  23863',
'DURIO          0.000 79.658  23864',
'DUNWOODY       0.000 79.658  23865',
'DUHAIME        0.000 79.658  23866',
'DUENES         0.000 79.659  23867',
'DUDEN          0.000 79.659  23868',
'DUDAS          0.000 79.660  23869',
'DRESHER        0.000 79.660  23870',
'DRESEL         0.000 79.660  23871',
'DOUTT          0.000 79.661  23872',
'DONLAN         0.000 79.661  23873',
'DONATHAN       0.000 79.661  23874',
'DOMKE          0.000 79.662  23875',
'DOBROWOLSKI    0.000 79.662  23876',
'DINGEE         0.000 79.663  23877',
'DIMMITT        0.000 79.663  23878',
'DIMERY         0.000 79.663  23879',
'DILULLO        0.000 79.664  23880',
'DEVEAUX        0.000 79.664  23881',
'DEVALLE        0.000 79.665  23882',
'DESPER         0.000 79.665  23883',
'DESNOYERS      0.000 79.665  23884',
'DESAUTELS      0.000 79.666  23885',
'DEROUIN        0.000 79.666  23886',
'DERBYSHIRE     0.000 79.666  23887',
'DENMON         0.000 79.667  23888',
'DENA           0.000 79.667  23889',
'DEMSKI         0.000 79.668  23890',
'DELUCCA        0.000 79.668  23891',
'DELPINO        0.000 79.668  23892',
'DELMONT        0.000 79.669  23893',
'DELLER         0.000 79.669  23894',
'DEJULIO        0.000 79.670  23895',
'DEIBLER        0.000 79.670  23896',
'DEHNE          0.000 79.670  23897',
'DEHARO         0.000 79.671  23898',
'DEGNER         0.000 79.671  23899',
'DEFORE         0.000 79.671  23900',
'DEERMAN        0.000 79.672  23901',
'DECUIR         0.000 79.672  23902',
'DECKMAN        0.000 79.673  23903',
'DEASY          0.000 79.673  23904',
'DEASE          0.000 79.673  23905',
'DEANER         0.000 79.674  23906',
'DAWDY          0.000 79.674  23907',
'DAUGHDRILL     0.000 79.674  23908',
'DARRIGO        0.000 79.675  23909',
'DARITY         0.000 79.675  23910',
'DANIELE        0.000 79.676  23911',
'DALBEY         0.000 79.676  23912',
'DAGENHART      0.000 79.676  23913',
'DAFFRON        0.000 79.677  23914',
'CURRO          0.000 79.677  23915',
'CURNUTTE       0.000 79.678  23916',
'CURATOLO       0.000 79.678  23917',
'CRUIKSHANK     0.000 79.678  23918',
'CROSSWELL      0.000 79.679  23919',
'CROSLIN        0.000 79.679  23920',
'CRONEY         0.000 79.679  23921',
'CROFTON        0.000 79.680  23922',
'CRIADO         0.000 79.680  23923',
'CRECELIUS      0.000 79.681  23924',
'COSCIA         0.000 79.681  23925',
'CONNIFF        0.000 79.681  23926',
'COMMODORE      0.000 79.682  23927',
'COLTHARP       0.000 79.682  23928',
'COLONNA        0.000 79.682  23929',
'COLLYER        0.000 79.683  23930',
'COLLINGTON     0.000 79.683  23931',
'COBBLEY        0.000 79.684  23932',
'COACHE         0.000 79.684  23933',
'CLONTS         0.000 79.684  23934',
'CLOE           0.000 79.685  23935',
'CLIETT         0.000 79.685  23936',
'CLEMANS        0.000 79.686  23937',
'CLARA          0.000 79.686  23938',
'CID            0.000 79.686  23939',
'CHRISTO        0.000 79.687  23940',
'CHRISP         0.000 79.687  23941',
'CHINA          0.000 79.687  23942',
'CHIARINI       0.000 79.688  23943',
'CHIA           0.000 79.688  23944',
'CHEATAM        0.000 79.689  23945',
'CHEADLE        0.000 79.689  23946',
'CHE            0.000 79.689  23947',
'CHAUNCEY       0.000 79.690  23948',
'CHAND          0.000 79.690  23949',
'CHADD          0.000 79.690  23950',
'CERVERA        0.000 79.691  23951',
'CERULLI        0.000 79.691  23952',
'CEREZO         0.000 79.692  23953',
'CEDANO         0.000 79.692  23954',
'CAYETANO       0.000 79.692  23955',
'CAWTHORNE      0.000 79.693  23956',
'CAVALIERI      0.000 79.693  23957',
'CATTANEO       0.000 79.694  23958',
'CARYL          0.000 79.694  23959',
'CARTLIDGE      0.000 79.694  23960',
'CARRITHERS     0.000 79.695  23961',
'CARREIRA       0.000 79.695  23962',
'CARRANCO       0.000 79.695  23963',
'CARGLE         0.000 79.696  23964',
'CANDANOZA      0.000 79.696  23965',
'CAMILLE        0.000 79.697  23966',
'CAMBURN        0.000 79.697  23967',
'CALENDER       0.000 79.697  23968',
'CALDERIN       0.000 79.698  23969',
'CALCAGNO       0.000 79.698  23970',
'CAHN           0.000 79.699  23971',
'CADDEN         0.000 79.699  23972',
'BYHAM          0.000 79.699  23973',
'BUTTRY         0.000 79.700  23974',
'BURRY          0.000 79.700  23975',
'BURRUEL        0.000 79.700  23976',
'BURKITT        0.000 79.701  23977',
'BURGIO         0.000 79.701  23978',
'BURGENER       0.000 79.702  23979',
'BUESCHER       0.000 79.702  23980',
'BUCKALEW       0.000 79.702  23981',
'BRYMER         0.000 79.703  23982',
'BRUMETT        0.000 79.703  23983',
'BRUGNOLI       0.000 79.703  23984',
'BRUGMAN        0.000 79.704  23985',
'BROSNAHAN      0.000 79.704  23986',
'BRONDER        0.000 79.705  23987',
'BROECKEL       0.000 79.705  23988',
'BRODERSON      0.000 79.705  23989',
'BRISBON        0.000 79.706  23990',
'BRINSFIELD     0.000 79.706  23991',
'BRINKS         0.000 79.707  23992',
'BRESEE         0.000 79.707  23993',
'BREGMAN        0.000 79.707  23994',
'BRANNER        0.000 79.708  23995',
'BRAMBILA       0.000 79.708  23996',
'BRAILSFORD     0.000 79.708  23997',
'BOUSKA         0.000 79.709  23998',
'BOSTER         0.000 79.709  23999',
'BORUCKI        0.000 79.710  24000',
'BORTNER        0.000 79.710  24001',
'BOROUGHS       0.000 79.710  24002',
'BORGESON       0.000 79.711  24003',
'BONIER         0.000 79.711  24004',
'BOMBA          0.000 79.711  24005',
'BOLENDER       0.000 79.712  24006',
'BOESCH         0.000 79.712  24007',
'BOEKE          0.000 79.713  24008',
'BLOYD          0.000 79.713  24009',
'BLEY           0.000 79.713  24010',
'BINGER         0.000 79.714  24011',
'BILLING        0.000 79.714  24012',
'BILBRO         0.000 79.715  24013',
'BIERY          0.000 79.715  24014',
'BICHREST       0.000 79.715  24015',
'BEZIO          0.000 79.716  24016',
'BEVEL          0.000 79.716  24017',
'BERRETT        0.000 79.716  24018',
'BERMEO         0.000 79.717  24019',
'BERGDOLL       0.000 79.717  24020',
'BERCIER        0.000 79.718  24021',
'BENZEL         0.000 79.718  24022',
'BENTLER        0.000 79.718  24023',
'BENNETTS       0.000 79.719  24024',
'BELNAP         0.000 79.719  24025',
'BELLINI        0.000 79.719  24026',
'BEITZ          0.000 79.720  24027',
'BEHREND        0.000 79.720  24028',
'BEDNARCZYK     0.000 79.721  24029',
'BEARSE         0.000 79.721  24030',
'BATMAN         0.000 79.721  24031',
'BARTOLINI      0.000 79.722  24032',
'BARTOL         0.000 79.722  24033',
'BARRETTA       0.000 79.723  24034',
'BARBERO        0.000 79.723  24035',
'BARBARO        0.000 79.723  24036',
'BANVELOS       0.000 79.724  24037',
'BANKES         0.000 79.724  24038',
'BALLENGEE      0.000 79.724  24039',
'BALDON         0.000 79.725  24040',
'AYE            0.000 79.725  24041',
'AUSMUS         0.000 79.726  24042',
'ATILANO        0.000 79.726  24043',
'ATIENZA        0.000 79.726  24044',
'ASCHENBRENNER  0.000 79.727  24045',
'ARORA          0.000 79.727  24046',
'ARMSTONG       0.000 79.728  24047',
'AQUILINO       0.000 79.728  24048',
'APPLEBERRY     0.000 79.728  24049',
'APPLEBEE       0.000 79.729  24050',
'APOLINAR       0.000 79.729  24051',
'ANTOS          0.000 79.729  24052',
'ANGLES         0.000 79.730  24053',
'ANDREPONT      0.000 79.730  24054',
'ANCONA         0.000 79.731  24055',
'AMESQUITA      0.000 79.731  24056',
'ALVINO         0.000 79.731  24057',
'ALTSCHULER     0.000 79.732  24058',
'ALLIN          0.000 79.732  24059',
'ALIRE          0.000 79.732  24060',
'AINSLIE        0.000 79.733  24061',
'AGULAR         0.000 79.733  24062',
'AESCHLIMAN     0.000 79.734  24063',
'ACCETTA        0.000 79.734  24064',
'ABDULLA        0.000 79.734  24065',
'ABBE           0.000 79.735  24066',
'ZWART          0.000 79.735  24067',
'ZUFELT         0.000 79.735  24068',
'ZONA           0.000 79.736  24069',
'ZIRBEL         0.000 79.736  24070',
'ZINGARO        0.000 79.737  24071',
'ZILNICKI       0.000 79.737  24072',
'ZENTENO        0.000 79.737  24073',
'ZENT           0.000 79.738  24074',
'ZEMKE          0.000 79.738  24075',
'ZAYAC          0.000 79.738  24076',
'ZARRELLA       0.000 79.739  24077',
'YOSHIMOTO      0.000 79.739  24078',
'YEAROUT        0.000 79.740  24079',
'WRENCH         0.000 79.740  24080',
'WORLD          0.000 79.740  24081',
'WOMER          0.000 79.741  24082',
'WOLTMAN        0.000 79.741  24083',
'WOLIN          0.000 79.741  24084',
'WOLERY         0.000 79.742  24085',
'WOLDT          0.000 79.742  24086',
'WITTS          0.000 79.742  24087',
'WITTNER        0.000 79.743  24088',
'WITHEROW       0.000 79.743  24089',
'WINWARD        0.000 79.744  24090',
'WINROW         0.000 79.744  24091',
'WIEMANN        0.000 79.744  24092',
'WICHMANN       0.000 79.745  24093',
'WHITWELL       0.000 79.745  24094',
'WHITELAW       0.000 79.745  24095',
'WHEELESS       0.000 79.746  24096',
'WHALLEY        0.000 79.746  24097',
'WEY            0.000 79.746  24098',
'WESSNER        0.000 79.747  24099',
'WENZL          0.000 79.747  24100',
'WENE           0.000 79.748  24101',
'WEATHERBEE     0.000 79.748  24102',
'WAYE           0.000 79.748  24103',
'WATTLES        0.000 79.749  24104',
'WANKE          0.000 79.749  24105',
'WALKES         0.000 79.749  24106',
'WALDECK        0.000 79.750  24107',
'VONRUDEN       0.000 79.750  24108',
'VOISINE        0.000 79.750  24109',
'VOGUS          0.000 79.751  24110',
'VITTETOE       0.000 79.751  24111',
'VILLALVA       0.000 79.752  24112',
'VILLACIS       0.000 79.752  24113',
'VICTORIAN      0.000 79.752  24114',
'VERGE          0.000 79.753  24115',
'VENTURINI      0.000 79.753  24116',
'VENTURI        0.000 79.753  24117',
'VENSON         0.000 79.754  24118',
'VANLOAN        0.000 79.754  24119',
'VANHOOSER      0.000 79.754  24120',
'VANDUZER       0.000 79.755  24121',
'VANDEVER       0.000 79.755  24122',
'VANDERWAL      0.000 79.756  24123',
'VANDERHEYDEN   0.000 79.756  24124',
'VANBEEK        0.000 79.756  24125',
'VANBEBBER      0.000 79.757  24126',
'VALLANCE       0.000 79.757  24127',
'VALES          0.000 79.757  24128',
'VAHLE          0.000 79.758  24129',
'URBAIN         0.000 79.758  24130',
'UPSHUR         0.000 79.759  24131',
'UMFLEET        0.000 79.759  24132',
'TWIST          0.000 79.759  24133',
'TSUJI          0.000 79.760  24134',
'TRYBUS         0.000 79.760  24135',
'TRIOLO         0.000 79.760  24136',
'TRIMARCHI      0.000 79.761  24137',
'TREZZA         0.000 79.761  24138',
'TRENHOLM       0.000 79.761  24139',
'TOVEY          0.000 79.762  24140',
'TOURIGNY       0.000 79.762  24141',
'TORRY          0.000 79.763  24142',
'TORRAIN        0.000 79.763  24143',
'TORGESON       0.000 79.763  24144',
'TONGUE         0.000 79.764  24145',
'TOMEY          0.000 79.764  24146',
'TISCHLER       0.000 79.764  24147',
'TINKLER        0.000 79.765  24148',
'TINDER         0.000 79.765  24149',
'TICKNOR        0.000 79.765  24150',
'TIBBLES        0.000 79.766  24151',
'TIBBALS        0.000 79.766  24152',
'THRONEBERRY    0.000 79.767  24153',
'THORMAHLEN     0.000 79.767  24154',
'THIBERT        0.000 79.767  24155',
'THIBEAUX       0.000 79.768  24156',
'THEURER        0.000 79.768  24157',
'TEMPLET        0.000 79.768  24158',
'TEGELER        0.000 79.769  24159',
'TAVERNIER      0.000 79.769  24160',
'TAUBMAN        0.000 79.769  24161',
'TAMASHIRO      0.000 79.770  24162',
'TALLON         0.000 79.770  24163',
'TALLARICO      0.000 79.771  24164',
'TABOADA        0.000 79.771  24165',
'SYPHER         0.000 79.771  24166',
'SYBERT         0.000 79.772  24167',
'SWYERS         0.000 79.772  24168',
'SWITALSKI      0.000 79.772  24169',
'SWINGER        0.000 79.773  24170',
'SWEDBERG       0.000 79.773  24171',
'SUTHER         0.000 79.774  24172',
'SURPRENANT     0.000 79.774  24173',
'SULLEN         0.000 79.774  24174',
'SULIK          0.000 79.775  24175',
'SUGDEN         0.000 79.775  24176',
'SUDER          0.000 79.775  24177',
'SUCHAN         0.000 79.776  24178',
'SUCH           0.000 79.776  24179',
'STRUBE         0.000 79.776  24180',
'STROOPE        0.000 79.777  24181',
'STRITTMATTER   0.000 79.777  24182',
'STREETT        0.000 79.778  24183',
'STRAUGHN       0.000 79.778  24184',
'STRASBURG      0.000 79.778  24185',
'STJACQUES      0.000 79.779  24186',
'STIMAGE        0.000 79.779  24187',
'STIMAC         0.000 79.779  24188',
'STIFTER        0.000 79.780  24189',
'STGELAIS       0.000 79.780  24190',
'STEINHART      0.000 79.780  24191',
'STEHLIK        0.000 79.781  24192',
'STEFFENSON     0.000 79.781  24193',
'STEENBERGEN    0.000 79.782  24194',
'STANBERY       0.000 79.782  24195',
'STALLONE       0.000 79.782  24196',
'SPRUNG         0.000 79.783  24197',
'SPRAGGS        0.000 79.783  24198',
'SPOTO          0.000 79.783  24199',
'SPILMAN        0.000 79.784  24200',
'SPENO          0.000 79.784  24201',
'SPANBAUER      0.000 79.784  24202',
'SPALLA         0.000 79.785  24203',
'SPAGNOLO       0.000 79.785  24204',
'SOLIMAN        0.000 79.786  24205',
'SOLAN          0.000 79.786  24206',
'SOBOLIK        0.000 79.786  24207',
'SNELGROVE      0.000 79.787  24208',
'SNEDDEN        0.000 79.787  24209',
'SMALE          0.000 79.787  24210',
'SLITER         0.000 79.788  24211',
'SLANKARD       0.000 79.788  24212',
'SIRCY          0.000 79.789  24213',
'SIGNOR         0.000 79.789  24214',
'SHUTTER        0.000 79.789  24215',
'SHURTLIFF      0.000 79.790  24216',
'SHUR           0.000 79.790  24217',
'SHOW           0.000 79.790  24218',
'SHIRKEY        0.000 79.791  24219',
'SHI            0.000 79.791  24220',
'SHEWMAKE       0.000 79.791  24221',
'SHAMS          0.000 79.792  24222',
'SHADLEY        0.000 79.792  24223',
'SHADDOX        0.000 79.793  24224',
'SGRO           0.000 79.793  24225',
'SERFASS        0.000 79.793  24226',
'SEPPALA        0.000 79.794  24227',
'SEGAWA         0.000 79.794  24228',
'SEGALLA        0.000 79.794  24229',
'SEABERRY       0.000 79.795  24230',
'SCRUTON        0.000 79.795  24231',
'SCISM          0.000 79.795  24232',
'SCHWEIN        0.000 79.796  24233',
'SCHWARTZMAN    0.000 79.796  24234',
'SCHWANTES      0.000 79.797  24235',
'SCHOMER        0.000 79.797  24236',
'SCHOENBORN     0.000 79.797  24237',
'SCHLOTTMANN    0.000 79.798  24238',
'SCHISSLER      0.000 79.798  24239',
'SCHEURER       0.000 79.798  24240',
'SCHEPIS        0.000 79.799  24241',
'SCHEIDEGGER    0.000 79.799  24242',
'SAUNIER        0.000 79.799  24243',
'SAUDERS        0.000 79.800  24244',
'SASSMAN        0.000 79.800  24245',
'SANNICOLAS     0.000 79.801  24246',
'SANDERFUR      0.000 79.801  24247',
'SALSER         0.000 79.801  24248',
'SAGAR          0.000 79.802  24249',
'SAFFER         0.000 79.802  24250',
'SAEED          0.000 79.802  24251',
'SADBERRY       0.000 79.803  24252',
'SABAN          0.000 79.803  24253',
'RYCE           0.000 79.803  24254',
'RYBAK          0.000 79.804  24255',
'RUX            0.000 79.804  24256',
'RUMORE         0.000 79.805  24257',
'RUMMELL        0.000 79.805  24258',
'RUMMAGE        0.000 79.805  24259',
'RUDASILL       0.000 79.806  24260',
'ROZMAN         0.000 79.806  24261',
'ROTA           0.000 79.806  24262',
'ROSSIN         0.000 79.807  24263',
'ROSELL         0.000 79.807  24264',
'ROSEL          0.000 79.808  24265',
'ROMBERG        0.000 79.808  24266',
'ROJERO         0.000 79.808  24267',
'ROCHIN         0.000 79.809  24268',
'ROCHELL        0.000 79.809  24269',
'ROBIDEAU       0.000 79.809  24270',
'ROBARGE        0.000 79.810  24271',
'ROATH          0.000 79.810  24272',
'RISKO          0.000 79.810  24273',
'RINGEL         0.000 79.811  24274',
'RINGDAHL       0.000 79.811  24275',
'RIERA          0.000 79.812  24276',
'RIEMANN        0.000 79.812  24277',
'RIBAS          0.000 79.812  24278',
'REVARD         0.000 79.813  24279',
'RENNA          0.000 79.813  24280',
'RENEGAR        0.000 79.813  24281',
'REINWALD       0.000 79.814  24282',
'REHMAN         0.000 79.814  24283',
'REGAL          0.000 79.814  24284',
'REELS          0.000 79.815  24285',
'REE            0.000 79.815  24286',
'REDEL          0.000 79.816  24287',
'REASONS        0.000 79.816  24288',
'RAYSOR         0.000 79.816  24289',
'RATHKE         0.000 79.817  24290',
'RAPOZO         0.000 79.817  24291',
'RAMPTON        0.000 79.817  24292',
'RAMAKER        0.000 79.818  24293',
'RAKOW          0.000 79.818  24294',
'RAIA           0.000 79.818  24295',
'RADIN          0.000 79.819  24296',
'RACO           0.000 79.819  24297',
'RACKHAM        0.000 79.820  24298',
'RACCA          0.000 79.820  24299',
'RACANELLI      0.000 79.820  24300',
'RABUN          0.000 79.821  24301',
'QUARANTA       0.000 79.821  24302',
'PURVES         0.000 79.821  24303',
'PUNDT          0.000 79.822  24304',
'PROTSMAN       0.000 79.822  24305',
'PROSPER        0.000 79.823  24306',
'PREZIOSO       0.000 79.823  24307',
'PRESUTTI       0.000 79.823  24308',
'PRESIDENT      0.000 79.824  24309',
'PRESGRAVES     0.000 79.824  24310',
'POYDRAS        0.000 79.824  24311',
'PORTNOY        0.000 79.825  24312',
'PORTALATIN     0.000 79.825  24313',
'POP            0.000 79.825  24314',
'PONTES         0.000 79.826  24315',
'POEHLER        0.000 79.826  24316',
'POBLETE        0.000 79.827  24317',
'POAT           0.000 79.827  24318',
'PLUMADORE      0.000 79.827  24319',
'PLEIMAN        0.000 79.828  24320',
'PIZANA         0.000 79.828  24321',
'PISCOPO        0.000 79.828  24322',
'PIRAINO        0.000 79.829  24323',
'PINELLI        0.000 79.829  24324',
'PILLAI         0.000 79.829  24325',
'PICKEN         0.000 79.830  24326',
'PICHA          0.000 79.830  24327',
'PICCOLI        0.000 79.831  24328',
'PHILEN         0.000 79.831  24329',
'PETTEWAY       0.000 79.831  24330',
'PETROS         0.000 79.832  24331',
'PESKIN         0.000 79.832  24332',
'PERUGINI       0.000 79.832  24333',
'PERRELLA       0.000 79.833  24334',
'PERNICE        0.000 79.833  24335',
'PEPER          0.000 79.833  24336',
'PENSINGER      0.000 79.834  24337',
'PEMBLETON      0.000 79.834  24338',
'PATRON         0.000 79.835  24339',
'PASSMAN        0.000 79.835  24340',
'PARRENT        0.000 79.835  24341',
'PANETTA        0.000 79.836  24342',
'PANCAKE        0.000 79.836  24343',
'PALLAS         0.000 79.836  24344',
'PALKA          0.000 79.837  24345',
'PAIS           0.000 79.837  24346',
'PAGLIA         0.000 79.837  24347',
'PADMORE        0.000 79.838  24348',
'OUM            0.000 79.838  24349',
'OTTESEN        0.000 79.839  24350',
'OST            0.000 79.839  24351',
'OSER           0.000 79.839  24352',
'ORTMANN        0.000 79.840  24353',
'ORMAND         0.000 79.840  24354',
'ORIOL          0.000 79.840  24355',
'ORICK          0.000 79.841  24356',
'OLER           0.000 79.841  24357',
'OKAFOR         0.000 79.842  24358',
'OHAIR          0.000 79.842  24359',
'OBERT          0.000 79.842  24360',
'OBERHOLTZER    0.000 79.843  24361',
'NUMBER         0.000 79.843  24362',
'NOWLAND        0.000 79.843  24363',
'NOSEK          0.000 79.844  24364',
'NORDEEN        0.000 79.844  24365',
'NOLF           0.000 79.844  24366',
'NOGLE          0.000 79.845  24367',
'NOBRIGA        0.000 79.845  24368',
'NICLEY         0.000 79.846  24369',
'NICCUM         0.000 79.846  24370',
'NEWINGHAM      0.000 79.846  24371',
'NEUMEISTER     0.000 79.847  24372',
'NEUGEBAUER     0.000 79.847  24373',
'NETHERLAND     0.000 79.847  24374',
'NERNEY         0.000 79.848  24375',
'NEISS          0.000 79.848  24376',
'NEIS           0.000 79.848  24377',
'NEIDER         0.000 79.849  24378',
'NEELD          0.000 79.849  24379',
'NAILOR         0.000 79.850  24380',
'MUSTAIN        0.000 79.850  24381',
'MUSSMAN        0.000 79.850  24382',
'MUSANTE        0.000 79.851  24383',
'MURTON         0.000 79.851  24384',
'MURDEN         0.000 79.851  24385',
'MUNYON         0.000 79.852  24386',
'MULDREW        0.000 79.852  24387',
'MOTTON         0.000 79.852  24388',
'MOSCOSO        0.000 79.853  24389',
'MOSCHELLA      0.000 79.853  24390',
'MOROZ          0.000 79.854  24391',
'MORMON         0.000 79.854  24392',
'MORELOS        0.000 79.854  24393',
'MORACE         0.000 79.855  24394',
'MOONE          0.000 79.855  24395',
'MONTESANO      0.000 79.855  24396',
'MONTEMURRO     0.000 79.856  24397',
'MONTAS         0.000 79.856  24398',
'MONTALBO       0.000 79.857  24399',
'MOLANDER       0.000 79.857  24400',
'MLECZKO        0.000 79.857  24401',
'MIYAKE         0.000 79.858  24402',
'MITSCHKE       0.000 79.858  24403',
'MINGER         0.000 79.858  24404',
'MINELLI        0.000 79.859  24405',
'MINEAR         0.000 79.859  24406',
'MILLENER       0.000 79.859  24407',
'MIHELICH       0.000 79.860  24408',
'MIEDEMA        0.000 79.860  24409',
'MIAH           0.000 79.861  24410',
'METZER         0.000 79.861  24411',
'MERY           0.000 79.861  24412',
'MERRIGAN       0.000 79.862  24413',
'MERCK          0.000 79.862  24414',
'MENNELLA       0.000 79.862  24415',
'MEMBRENO       0.000 79.863  24416',
'MELECIO        0.000 79.863  24417',
'MELDER         0.000 79.863  24418',
'MEHLING        0.000 79.864  24419',
'MEHLER         0.000 79.864  24420',
'MEDCALF        0.000 79.865  24421',
'MECHE          0.000 79.865  24422',
'MEALING        0.000 79.865  24423',
'MCQUEENEY      0.000 79.866  24424',
'MCPHAUL        0.000 79.866  24425',
'MCMICKLE       0.000 79.866  24426',
'MCMEEN         0.000 79.867  24427',
'MCMAINS        0.000 79.867  24428',
'MCLEES         0.000 79.867  24429',
'MCGOWIN        0.000 79.868  24430',
'MCFARLAIN      0.000 79.868  24431',
'MCDIVITT       0.000 79.869  24432',
'MCCOTTER       0.00'
];

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/util/romanNumeral.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


// Handles all planets, objects, etc.
class StarSystem extends GameObject{
    constructor(game) {
        super(game);
        this.stellarObjects = [];
        this.neighbors = [];
        this.planets = [];
        
        this.settings = {
            minDistanceFromAnotherStar : 60,
            nebulaChance : 1,
            minRoids : 0,
            maxRoids : 2,
            minRoidOffset : {
                x : -5000,
                y : -5000,
            },
            maxRoidOffset : {
                x : 5000,
                y : 5000,
            },

            minPlanets : 0,
            maxPlanets : 6,
            minPlanetOffset : {
                x : -2000,
                y : -2000,
            },
            maxPlanetOffset : {
                x : 2000,
                y : 2000,
            }
        }
        
        // Details
        this.generatePosition();
        
        this.name = Names.star();
        if(this.isOuterRimSystem) this.name = Names.outerRimStar();

        this.type = this.determineItemFromArray(STELLAR_TYPES);
        this.size = rng.next(2,5);

        // Planets
        this.planetCount = this.game.rng.nextInt(this.settings.minPlanets, this.settings.maxPlanets);    
        var x = this.game.world.centerX;
        var y = this.game.world.centerX;
        for (var i = 0; i < this.planetCount; i++) {             
            this.planets.push(new BasicPlanet(this.game,{
                x : x,
                y : y,
                index : i,
                system : this,
            }));
            
            x += this.game.rng.next(this.settings.minPlanetOffset.x, this.settings.maxPlanetOffset.x);
            y += this.game.rng.next(this.settings.minPlanetOffset.y, this.settings.maxPlanetOffset.y);
        }
    }
    
    generatePosition(){
        var size = Math.min(this.game.galaxy.settings.mapWidth,this.game.galaxy.settings.mapHeight)/2;
        var densityFactor = (this.game.galaxy.starSystems.length+1)/this.game.galaxy.settings.starsAmount;
        var maximumDistance = ((size*densityFactor)*2)+200;

        var x = rng.nextInt(-maximumDistance/2, maximumDistance/2)+this.game.galaxy.settings.mapWidth/2;
        var y = rng.nextInt(-maximumDistance/2, maximumDistance/2)+this.game.galaxy.settings.mapHeight/2;

        this.position = {
            x : x.clamp(0,this.game.galaxy.settings.mapWidth),
            y : y.clamp(0,this.game.galaxy.settings.mapHeight)
        }        
        
        // Validate Postion
        for(let system of this.game.galaxy.starSystems){
            var distance = this.distanceToStarSystem(system);
            
            // Minium Distance (Prevent too close)
            if(distance<this.settings.minDistanceFromAnotherStar) this.generatePosition();
        };


        
    }
    
    arrive(){        
        this.cleanup();
        this.game.system = this;
        this.game.time.events.add(1000, function(){
            this.game.hud.showSystemInfo();
        }, this)

        // Asteroids
        var x = 0;
        var y = 0;
        this.asteroidFieldCount = this.game.rng.nextInt(this.settings.minRoids, this.settings.maxRoids);
        for (var i = 0; i < this.asteroidFieldCount; i++) {
            x = this.game.rng.nextInt(this.settings.minRoidOffset.x, this.settings.maxRoidOffset.x) + x;
            y = this.game.rng.nextInt(this.settings.minRoidOffset.y, this.settings.maxRoidOffset.y) + y;
            this.stellarObjects.push(new AsteroidField(this.game,{
                size : ASTEROID_FIELD_SIZE.large,
                x : x + this.game.world.centerX,
                y : y + this.game.world.centerY,
                system : this,
            }));            
        }

        // Nebula
        var x = 0;
        var y = 0;
        if(this.game.rng.next()<this.settings.nebulaChance){
            x = this.game.rng.nextInt(this.settings.minRoidOffset.x*2, this.settings.maxRoidOffset.x*2) + x;
            y = this.game.rng.nextInt(this.settings.minRoidOffset.y*2, this.settings.maxRoidOffset.y*2) + y;
            
            this.stellarObjects.push(new Nebula(this.game,{
                size : ASTEROID_FIELD_SIZE.large,
                x : x + this.game.world.centerX,
                y : y + this.game.world.centerY,
                system : this,
            }));
        }
        
        // Activate Everything
        for(let planet of this.planets){
            planet.wrapper.children.forEach(function(element) {
                element.exists = true;
            }, this);
        }
        
        for(let object of this.stellarObjects){
            if(object.sprite!=undefined) object.sprite.exists = true;
        }
    }

    cleanup(){
        this.game.asteroids.removeAll(true);
        for(let planet of this.game.planets.children){
            planet.children.forEach(function(element) {
                element.exists = false
            }, this);
        }

        for(let object of this.stellarObjects) object.destroy();
        this.stellarObjects.length = 0;
    }
    
    get closestStarSystem(){
    	var star, x1, x2, y1, y2;
    	var smallest = 1000000;
    	var closest = null; //use instead of 0 as we're looking for null or an object (not a number)
    	x1 = this.position.x;
    	y1 = this.position.y;
    	for (var i=0; i<this.game.galaxy.starSystems.length; i++) {
    		star = this.game.galaxy.starSystems[i];
    		if (star === this) continue;
    		x2 = star.position.x;
    		y2 = star.position.y;
    		var adjacent = Math.abs(x1-x2); //abs always returns positive number
    		var opposite = Math.abs(y1-y2); 
    		var hypotenuse = Math.sqrt((adjacent**2) + (opposite**2));
    		if (hypotenuse < smallest) {
    			closest = star;
    			smallest = hypotenuse;
    		}
    	}

    	return closest;
    }

    systemWithinRangeTowardsSystem(maxJumpDistance,destinationSystem){
        var angleToDestination = this.angleToStarSystem(destinationSystem); 
        
        // look for systems in range, that are close to that angle.
        var jumpCandidates = [];
        
        // Systems in range
        for (let system of this.game.galaxy.starSystems){
            if(this.distanceToStarSystem(system)<=maxJumpDistance && system!=this){
                jumpCandidates.push(system);
            }            
        }
        
        var bestMatch = null;
        // Of the in range candidates, return the one closest to the angle of the destination system.
        if(jumpCandidates.length>0){
                bestMatch = jumpCandidates.reduce(function(prev, curr) {
                var prevAngle = this.candidate.angleToStarSystem(prev);
                var currAngle = this.candidate.angleToStarSystem(curr);
                var destAngle = this.destAngle;            
                return (Math.abs(currAngle - destAngle) < Math.abs(prevAngle - destAngle) ? curr : prev);
            }.bind({
                destAngle : angleToDestination,
                candidate : this,
            }));
        }

        return bestMatch;
    }
    
    distanceToStarSystem(system){
        var a = this.position.x - system.position.x
        var b = this.position.y - system.position.y
        return Math.sqrt( a*a + b*b );
    }

    angleToStarSystem(system){
        return Math.atan2(
            this.position.y - system.position.y,
            this.position.x - system.position.x
        ) * 180 / Math.PI;
    }

    get distanceFromGalacticCenter(){
        var a = this.position.x - this.game.galaxy.settings.mapWidth/2
        var b = this.position.y - this.game.galaxy.settings.mapHeight/2
        return Math.sqrt( a*a + b*b );
    }

    get isOuterRimSystem(){
        var size = Math.min(this.game.galaxy.settings.mapWidth,this.game.galaxy.settings.mapHeight)/2;
        var rimPercent = 0.1;
        
        if(this.distanceFromGalacticCenter>size*Math.abs(rimPercent-1)){
            return true;
        } else {
            return false;
        }
    }
    
    get isCurrentSystem(){
        return this==this.game.system;
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/_equipment.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


Number.prototype.toRoman= function () {
    var num = Math.floor(this), 
        val, s= '', i= 0, 
        v = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1], 
        r = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I']; 

    function toBigRoman(n) {
        var ret = '', n1 = '', rem = n;
        while (rem > 1000) {
            var prefix = '', suffix = '', n = rem, s = '' + rem, magnitude = 1;
            while (n > 1000) {
                n /= 1000;
                magnitude *= 1000;
                prefix += '(';
                suffix += ')';
            }
            n1 = Math.floor(n);
            rem = s - (n1 * magnitude);
            ret += prefix + n1.toRoman() + suffix;
        }
        return ret + rem.toRoman();
    }

    if (this - num || num < 1) num = 0;
    if (num > 3999) return toBigRoman(num);

    while (num) {
        val = v[i];
        while (num >= val) {
            num -= val;
            s += r[i];
        }
        ++i;
    }
    return s;
};

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/lodash.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Equipment extends InventoryObject {
    constructor(game,options) {
        super(game,options);

        this.parentObject = options.parentObject;

        this.isEquippable = true;
        this._equipped = false;
        
        this.energyConsumption = 0;
        this.storageClass = CARGO_STORAGE_CLASS.equipment;

        this.equipSound = game.add.audio('equip');
        this.unequipSound = game.add.audio('unequip');
    }
    
    set equipped(equipped){
        this._equipped = equipped;                
    }
    
    get equipped(){
        return this._equipped;
    }
    
    equipTo(parentObject){
        if(parentObject){
            this.equipSound.play();
            this.parentObject = parentObject;
            this.equipped = true;
    
            if(this.isWeapon) {
                this.parentObject.equipWeaponInSlot(this,0);
            } else if(this.isEngine) {
                this.parentObject.equipEngineInSlot(this,0);
            } else {
                this.parentObject.equipEquipmentInSlot(this,0);
            }

        }

        this.game.register(this);
    }
    
    unequip(){        
        if(this.parentObject){
            this.unequipSound.play();

            if(this.isWeapon) {
                this.parentObject.unequipWeapon(this);
            } else if(this.isEngine) {
                this.parentObject.unequipEngine(this);
            } else {
                this.parentObject.unequipEquipment(this);
            }
        }
        
        this.game.unregister(this);
    }
    
    update(){
        
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/_consumable.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright JS Foundation and other contributors <https://js.foundation/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.5';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    return key == '__proto__'
      ? undefined
      : object[key];
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });

        return result;
      }

      if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });

        return result;
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        if (isObject(srcValue)) {
          stack || (stack = new Stack);
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || (srcIndex && isFunction(objValue))) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      var sourceURL = '//# sourceURL=' +
        ('sourceURL' in options
          ? options.sourceURL
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      var variable = options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = (lodashFunc.name + ''),
            names = realNames[key] || (realNames[key] = []);

        names.push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    define(function() {
      return _;
    });
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else if (freeModule) {
    // Export for Node.js.
    (freeModule.exports = _)._ = _;
    // Export for CommonJS support.
    freeExports._ = _;
  }
  else {
    // Export to the global object.
    root._ = _;
  }
}.call(this));

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/webfont-loader.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Consumable extends InventoryObject {
    constructor(game,options) {
        super(game,options);

        this.parentObject = this.game.player.ship;
        this.isConsumable = true;
    }

    consume(){
        this.parentObject.removeItemFromInventory(this);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/reactor.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*
 * Copyright 2016 Small Batch, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
/* Web Font Loader v1.6.26 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.m=b||a;this.c=this.m.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&("style"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}
function w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function y(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}
function z(a){if("string"===typeof a.f)return a.f;var b=a.m.location.protocol;"about:"==b&&(b=a.a.location.protocol);return"https:"==b?"https:":"http:"}function ea(a){return a.m.location.hostname||a.a.location.hostname}
function A(a,b,c){function d(){k&&e&&f&&(k(g),k=null)}b=t(a,"link",{rel:"stylesheet",href:b,media:"all"});var e=!1,f=!0,g=null,k=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error("Stylesheet failed to load");d()}):setTimeout(function(){e=!0;d()},0);u(a,"head",b)}
function B(a,b,c,d){var e=a.c.getElementsByTagName("head")[0];if(e){var f=t(a,"script",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,"HEAD"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error("Script load timeout")))},d||5E3);return f}return null};function C(){this.a=0;this.c=null}function D(a){a.a++;return function(){a.a--;E(a)}}function F(a,b){a.c=b;E(a)}function E(a){0==a.a&&a.c&&(a.c(),a.c=null)};function G(a){this.a=a||"-"}G.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.a)};function H(a,b){this.c=a;this.f=4;this.a="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return I(a)+" "+(a.f+"00")+" 300px "+J(a.c)}function J(a){var b=[];a=a.split(/,\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['"]/g,"");-1!=d.indexOf(" ")||/^\d/.test(d)?b.push("'"+d+"'"):b.push(d)}return b.join(",")}function K(a){return a.a+a.f}function I(a){var b="normal";"o"===a.a?b="oblique":"i"===a.a&&(b="italic");return b}
function ga(a){var b=4,c="n",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.m.document.documentElement;this.h=b;this.a=new G("-");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c("wf","loading")]);L(a,"loading")}function M(a){if(a.g){var b=y(a.f,a.a.c("wf","active")),c=[],d=[a.a.c("wf","loading")];b||c.push(a.a.c("wf","inactive"));w(a.f,c,d)}L(a,"inactive")}function L(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,K(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function N(a,b){this.c=a;this.f=b;this.a=t(this.c,"span",{"aria-hidden":"true"},this.f)}function O(a){u(a.c,"body",a.a)}function P(a){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+J(a.c)+";"+("font-style:"+I(a)+";font-weight:"+(a.f+"00")+";")};function Q(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}Q.prototype.start=function(){var a=this.c.m.document,b=this,c=q(),d=new Promise(function(d,e){function k(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(k,25)},function(){e()})}k()}),e=new Promise(function(a,d){setTimeout(d,b.f)});Promise.race([e,d]).then(function(){b.g(b.a)},function(){b.j(b.a)})};function R(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||"BESbswy";this.f={};this.w=e||3E3;this.u=f||null;this.o=this.j=this.h=this.g=null;this.g=new N(this.c,this.s);this.h=new N(this.c,this.s);this.j=new N(this.c,this.s);this.o=new N(this.c,this.s);a=new H(this.a.c+",serif",K(this.a));a=P(a);this.g.a.style.cssText=a;a=new H(this.a.c+",sans-serif",K(this.a));a=P(a);this.h.a.style.cssText=a;a=new H("serif",K(this.a));a=P(a);this.j.a.style.cssText=a;a=new H("sans-serif",K(this.a));a=
P(a);this.o.a.style.cssText=a;O(this.g);O(this.h);O(this.j);O(this.o)}var S={D:"serif",C:"sans-serif"},T=null;function U(){if(null===T){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);T=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return T}R.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f["sans-serif"]=this.o.a.offsetWidth;this.A=q();la(this)};
function ma(a,b,c){for(var d in S)if(S.hasOwnProperty(d)&&b===a.f[S[d]]&&c===a.f[S[d]])return!0;return!1}function la(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f["sans-serif"])||(d=U()&&ma(a,b,c));d?q()-a.A>=a.w?U()&&ma(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):na(a):V(a,a.v)}function na(a){setTimeout(p(function(){la(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.o.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.o=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c("wf",a.c,K(a).toString(),"active")],[b.a.c("wf",a.c,K(a).toString(),"loading"),b.a.c("wf",a.c,K(a).toString(),"inactive")]);L(b,"fontactive",a);this.o=!0;oa(this)};
W.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c("wf",a.c,K(a).toString(),"active")),d=[],e=[b.a.c("wf",a.c,K(a).toString(),"loading")];c||d.push(b.a.c("wf",a.c,K(a).toString(),"inactive"));w(b.f,d,e)}L(b,"fontinactive",a);oa(this)};function oa(a){0==--a.f&&a.j&&(a.o?(a=a.a,a.g&&w(a.f,[a.a.c("wf","active")],[a.a.c("wf","loading"),a.a.c("wf","inactive")]),L(a,"active")):M(a.a))};function pa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}pa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;qa(this,new ha(this.c,a),a)};
function ra(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,k=d||null||{};if(0===c.length&&f)M(b.a);else{b.f+=c.length;f&&(b.j=f);var h,m=[];for(h=0;h<c.length;h++){var l=c[h],n=k[l.c],r=b.a,x=l;r.g&&w(r.f,[r.a.c("wf",x.c,K(x).toString(),"loading")]);L(r,"fontloading",x);r=null;null===X&&(X=window.FontFace?(x=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent))?42<parseInt(x[1],10):!0:!1);X?r=new Q(p(b.g,b),p(b.h,b),b.c,l,b.s,n):r=new R(p(b.g,b),p(b.h,b),b.c,l,b.s,a,
n);m.push(r)}for(h=0;h<m.length;h++)m[h].start()}},0)}function qa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){ra(a,f,b,d,c)})};function sa(a,b){this.c=a;this.a=b}function ta(a,b,c){var d=z(a.c);a=(a.a.api||"fast.fonts.net/jsapi").replace(/^.*http(s?):(\/\/)?/,"");return d+"//"+a+"/"+b+".js"+(c?"?v="+c:"")}
sa.prototype.load=function(a){function b(){if(f["__mti_fntLst"+d]){var c=f["__mti_fntLst"+d](),e=[],h;if(c)for(var m=0;m<c.length;m++){var l=c[m].fontfamily;void 0!=c[m].fontStyle&&void 0!=c[m].fontWeight?(h=c[m].fontStyle+c[m].fontWeight,e.push(new H(l,h))):e.push(new H(l))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.m;B(this.c,ta(c,d,e),function(e){e?a([]):(f["__MonotypeConfiguration__"+d]=function(){return c.a},b())}).id="__MonotypeAPIScript__"+
d}else a([])};function ua(a,b){this.c=a;this.a=b}ua.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new C;b=0;for(c=d.length;b<c;b++)A(this.c,d[b],D(g));var k=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(":"),d[1])for(var h=d[1].split(","),m=0;m<h.length;m+=1)k.push(new H(d[0],h[m]));else k.push(new H(d[0]));F(g,function(){a(k,f)})};function va(a,b,c){a?this.c=a:this.c=b+wa;this.a=[];this.f=[];this.g=c||""}var wa="//fonts.googleapis.com/css";function xa(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(":");3==e.length&&a.f.push(e.pop());var f="";2==e.length&&""!=e[1]&&(f=":");a.a.push(e.join(f))}}
function ya(a){if(0==a.a.length)throw Error("No fonts to load!");if(-1!=a.c.indexOf("kit="))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,"+"));b=a.c+"?family="+c.join("%7C");0<a.f.length&&(b+="&subset="+a.f.join(","));0<a.g.length&&(b+="&text="+encodeURIComponent(a.g));return b};function za(a){this.f=a;this.a=[];this.c={}}
var Aa={latin:"BESbswy","latin-ext":"\u00e7\u00f6\u00fc\u011f\u015f",cyrillic:"\u0439\u044f\u0416",greek:"\u03b1\u03b2\u03a3",khmer:"\u1780\u1781\u1782",Hanuman:"\u1780\u1781\u1782"},Ba={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},Ca={i:"i",italic:"i",n:"n",normal:"n"},
Da=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
function Ea(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(":"),e=d[0].replace(/\+/g," "),f=["n4"];if(2<=d.length){var g;var k=d[1];g=[];if(k)for(var k=k.split(","),h=k.length,m=0;m<h;m++){var l;l=k[m];if(l.match(/^[\w-]+$/)){var n=Da.exec(l.toLowerCase());if(null==n)l="";else{l=n[2];l=null==l||""==l?"n":Ca[l];n=n[1];if(null==n||""==n)n="4";else var r=Ba[n],n=r?r:isNaN(n)?"4":n.substr(0,1);l=[l,n].join("")}}else l="";l&&g.push(l)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(","):
g,0<d.length&&(d=Aa[d[0]])&&(a.c[e]=d))}a.c[e]||(d=Aa[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new H(e,f[d]))}};function Fa(a,b){this.c=a;this.a=b}var Ga={Arimo:!0,Cousine:!0,Tinos:!0};Fa.prototype.load=function(a){var b=new C,c=this.c,d=new va(this.a.api,z(c),this.a.text),e=this.a.families;xa(d,e);var f=new za(e);Ea(f);A(c,ya(d),D(b));F(b,function(){a(f.a,f.c,Ga)})};function Ha(a,b){this.c=a;this.a=b}Ha.prototype.load=function(a){var b=this.a.id,c=this.c.m;b?B(this.c,(this.a.api||"https://use.typekit.net")+"/"+b+".js",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],k=b[f+1],h=0;h<k.length;h++)e.push(new H(g,k[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(m){}a(e)}},2E3):a([])};function Ia(a,b){this.c=a;this.f=b;this.a=[]}Ia.prototype.load=function(a){var b=this.f.id,c=this.c.m,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,k=c.fonts.length;g<k;++g){var h=c.fonts[g];d.a.push(new H(h.name,ga("font-weight:"+h.weight+";font-style:"+h.style)))}a(d.a)},B(this.c,z(this.c)+(this.f.api||"//f.fontdeck.com/s/css/js/")+ea(this.c)+"/"+b+".js",function(b){b&&a([])})):a([])};var Y=new pa(window);Y.a.c.custom=function(a,b){return new ua(b,a)};Y.a.c.fontdeck=function(a,b){return new Ia(b,a)};Y.a.c.monotype=function(a,b){return new sa(b,a)};Y.a.c.typekit=function(a,b){return new Ha(b,a)};Y.a.c.google=function(a,b){return new Fa(b,a)};var Z={load:p(Y.load,Y)};"function"===typeof define&&define.amd?define(function(){return Z}):"undefined"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/tiny-color.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Reactor extends Equipment {
    constructor(game,options) {
        super(game,options);
        this.chargeRate = options.data.chargeRate;
        this.capacity = options.data.capacity;

        this.isReactor = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','type','capacity','readableChargeRate'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Reactor Type','Capacity','Recharge Rate'];

        this.powerUpSound = game.add.audio('power-up')
        this.powerDownSound = game.add.audio('power-down')
    }

    set equipped(equipped){
        this._equipped = equipped;
        
        if(this.parentObject){
             if(equipped) this.parentObject.maxEnergy += this.capacity;
             if(!equipped) this.parentObject.maxEnergy -= this.capacity;
        }
        
        if(equipped){
            this.powerUpSound.play();
        } else {
            this.powerDownSound.play();            
        }
    }

    get equipped(){
        return this._equipped;
    }

    update(){
        super.update();
        if(this.parentObject) this.parentObject.charge(this.chargeRate);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/batteries.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


// TinyColor v1.4.1
// https://github.com/bgrins/TinyColor
// 2016-07-07, Brian Grinstead, MIT License
!function(a){function b(a,d){if(a=a?a:"",d=d||{},a instanceof b)return a;if(!(this instanceof b))return new b(a,d);var e=c(a);this._originalInput=a,this._r=e.r,this._g=e.g,this._b=e.b,this._a=e.a,this._roundA=P(100*this._a)/100,this._format=d.format||e.format,this._gradientType=d.gradientType,this._r<1&&(this._r=P(this._r)),this._g<1&&(this._g=P(this._g)),this._b<1&&(this._b=P(this._b)),this._ok=e.ok,this._tc_id=O++}function c(a){var b={r:0,g:0,b:0},c=1,e=null,g=null,i=null,j=!1,k=!1;return"string"==typeof a&&(a=K(a)),"object"==typeof a&&(J(a.r)&&J(a.g)&&J(a.b)?(b=d(a.r,a.g,a.b),j=!0,k="%"===String(a.r).substr(-1)?"prgb":"rgb"):J(a.h)&&J(a.s)&&J(a.v)?(e=G(a.s),g=G(a.v),b=h(a.h,e,g),j=!0,k="hsv"):J(a.h)&&J(a.s)&&J(a.l)&&(e=G(a.s),i=G(a.l),b=f(a.h,e,i),j=!0,k="hsl"),a.hasOwnProperty("a")&&(c=a.a)),c=z(c),{ok:j,format:a.format||k,r:Q(255,R(b.r,0)),g:Q(255,R(b.g,0)),b:Q(255,R(b.b,0)),a:c}}function d(a,b,c){return{r:255*A(a,255),g:255*A(b,255),b:255*A(c,255)}}function e(a,b,c){a=A(a,255),b=A(b,255),c=A(c,255);var d,e,f=R(a,b,c),g=Q(a,b,c),h=(f+g)/2;if(f==g)d=e=0;else{var i=f-g;switch(e=h>.5?i/(2-f-g):i/(f+g),f){case a:d=(b-c)/i+(c>b?6:0);break;case b:d=(c-a)/i+2;break;case c:d=(a-b)/i+4}d/=6}return{h:d,s:e,l:h}}function f(a,b,c){function d(a,b,c){return 0>c&&(c+=1),c>1&&(c-=1),1/6>c?a+6*(b-a)*c:.5>c?b:2/3>c?a+6*(b-a)*(2/3-c):a}var e,f,g;if(a=A(a,360),b=A(b,100),c=A(c,100),0===b)e=f=g=c;else{var h=.5>c?c*(1+b):c+b-c*b,i=2*c-h;e=d(i,h,a+1/3),f=d(i,h,a),g=d(i,h,a-1/3)}return{r:255*e,g:255*f,b:255*g}}function g(a,b,c){a=A(a,255),b=A(b,255),c=A(c,255);var d,e,f=R(a,b,c),g=Q(a,b,c),h=f,i=f-g;if(e=0===f?0:i/f,f==g)d=0;else{switch(f){case a:d=(b-c)/i+(c>b?6:0);break;case b:d=(c-a)/i+2;break;case c:d=(a-b)/i+4}d/=6}return{h:d,s:e,v:h}}function h(b,c,d){b=6*A(b,360),c=A(c,100),d=A(d,100);var e=a.floor(b),f=b-e,g=d*(1-c),h=d*(1-f*c),i=d*(1-(1-f)*c),j=e%6,k=[d,h,g,g,i,d][j],l=[i,d,d,h,g,g][j],m=[g,g,i,d,d,h][j];return{r:255*k,g:255*l,b:255*m}}function i(a,b,c,d){var e=[F(P(a).toString(16)),F(P(b).toString(16)),F(P(c).toString(16))];return d&&e[0].charAt(0)==e[0].charAt(1)&&e[1].charAt(0)==e[1].charAt(1)&&e[2].charAt(0)==e[2].charAt(1)?e[0].charAt(0)+e[1].charAt(0)+e[2].charAt(0):e.join("")}function j(a,b,c,d,e){var f=[F(P(a).toString(16)),F(P(b).toString(16)),F(P(c).toString(16)),F(H(d))];return e&&f[0].charAt(0)==f[0].charAt(1)&&f[1].charAt(0)==f[1].charAt(1)&&f[2].charAt(0)==f[2].charAt(1)&&f[3].charAt(0)==f[3].charAt(1)?f[0].charAt(0)+f[1].charAt(0)+f[2].charAt(0)+f[3].charAt(0):f.join("")}function k(a,b,c,d){var e=[F(H(d)),F(P(a).toString(16)),F(P(b).toString(16)),F(P(c).toString(16))];return e.join("")}function l(a,c){c=0===c?0:c||10;var d=b(a).toHsl();return d.s-=c/100,d.s=B(d.s),b(d)}function m(a,c){c=0===c?0:c||10;var d=b(a).toHsl();return d.s+=c/100,d.s=B(d.s),b(d)}function n(a){return b(a).desaturate(100)}function o(a,c){c=0===c?0:c||10;var d=b(a).toHsl();return d.l+=c/100,d.l=B(d.l),b(d)}function p(a,c){c=0===c?0:c||10;var d=b(a).toRgb();return d.r=R(0,Q(255,d.r-P(255*-(c/100)))),d.g=R(0,Q(255,d.g-P(255*-(c/100)))),d.b=R(0,Q(255,d.b-P(255*-(c/100)))),b(d)}function q(a,c){c=0===c?0:c||10;var d=b(a).toHsl();return d.l-=c/100,d.l=B(d.l),b(d)}function r(a,c){var d=b(a).toHsl(),e=(d.h+c)%360;return d.h=0>e?360+e:e,b(d)}function s(a){var c=b(a).toHsl();return c.h=(c.h+180)%360,b(c)}function t(a){var c=b(a).toHsl(),d=c.h;return[b(a),b({h:(d+120)%360,s:c.s,l:c.l}),b({h:(d+240)%360,s:c.s,l:c.l})]}function u(a){var c=b(a).toHsl(),d=c.h;return[b(a),b({h:(d+90)%360,s:c.s,l:c.l}),b({h:(d+180)%360,s:c.s,l:c.l}),b({h:(d+270)%360,s:c.s,l:c.l})]}function v(a){var c=b(a).toHsl(),d=c.h;return[b(a),b({h:(d+72)%360,s:c.s,l:c.l}),b({h:(d+216)%360,s:c.s,l:c.l})]}function w(a,c,d){c=c||6,d=d||30;var e=b(a).toHsl(),f=360/d,g=[b(a)];for(e.h=(e.h-(f*c>>1)+720)%360;--c;)e.h=(e.h+f)%360,g.push(b(e));return g}function x(a,c){c=c||6;for(var d=b(a).toHsv(),e=d.h,f=d.s,g=d.v,h=[],i=1/c;c--;)h.push(b({h:e,s:f,v:g})),g=(g+i)%1;return h}function y(a){var b={};for(var c in a)a.hasOwnProperty(c)&&(b[a[c]]=c);return b}function z(a){return a=parseFloat(a),(isNaN(a)||0>a||a>1)&&(a=1),a}function A(b,c){D(b)&&(b="100%");var d=E(b);return b=Q(c,R(0,parseFloat(b))),d&&(b=parseInt(b*c,10)/100),a.abs(b-c)<1e-6?1:b%c/parseFloat(c)}function B(a){return Q(1,R(0,a))}function C(a){return parseInt(a,16)}function D(a){return"string"==typeof a&&-1!=a.indexOf(".")&&1===parseFloat(a)}function E(a){return"string"==typeof a&&-1!=a.indexOf("%")}function F(a){return 1==a.length?"0"+a:""+a}function G(a){return 1>=a&&(a=100*a+"%"),a}function H(b){return a.round(255*parseFloat(b)).toString(16)}function I(a){return C(a)/255}function J(a){return!!V.CSS_UNIT.exec(a)}function K(a){a=a.replace(M,"").replace(N,"").toLowerCase();var b=!1;if(T[a])a=T[a],b=!0;else if("transparent"==a)return{r:0,g:0,b:0,a:0,format:"name"};var c;return(c=V.rgb.exec(a))?{r:c[1],g:c[2],b:c[3]}:(c=V.rgba.exec(a))?{r:c[1],g:c[2],b:c[3],a:c[4]}:(c=V.hsl.exec(a))?{h:c[1],s:c[2],l:c[3]}:(c=V.hsla.exec(a))?{h:c[1],s:c[2],l:c[3],a:c[4]}:(c=V.hsv.exec(a))?{h:c[1],s:c[2],v:c[3]}:(c=V.hsva.exec(a))?{h:c[1],s:c[2],v:c[3],a:c[4]}:(c=V.hex8.exec(a))?{r:C(c[1]),g:C(c[2]),b:C(c[3]),a:I(c[4]),format:b?"name":"hex8"}:(c=V.hex6.exec(a))?{r:C(c[1]),g:C(c[2]),b:C(c[3]),format:b?"name":"hex"}:(c=V.hex4.exec(a))?{r:C(c[1]+""+c[1]),g:C(c[2]+""+c[2]),b:C(c[3]+""+c[3]),a:I(c[4]+""+c[4]),format:b?"name":"hex8"}:(c=V.hex3.exec(a))?{r:C(c[1]+""+c[1]),g:C(c[2]+""+c[2]),b:C(c[3]+""+c[3]),format:b?"name":"hex"}:!1}function L(a){var b,c;return a=a||{level:"AA",size:"small"},b=(a.level||"AA").toUpperCase(),c=(a.size||"small").toLowerCase(),"AA"!==b&&"AAA"!==b&&(b="AA"),"small"!==c&&"large"!==c&&(c="small"),{level:b,size:c}}var M=/^\s+/,N=/\s+$/,O=0,P=a.round,Q=a.min,R=a.max,S=a.random;b.prototype={isDark:function(){return this.getBrightness()<128},isLight:function(){return!this.isDark()},isValid:function(){return this._ok},getOriginalInput:function(){return this._originalInput},getFormat:function(){return this._format},getAlpha:function(){return this._a},getBrightness:function(){var a=this.toRgb();return(299*a.r+587*a.g+114*a.b)/1e3},getLuminance:function(){var b,c,d,e,f,g,h=this.toRgb();return b=h.r/255,c=h.g/255,d=h.b/255,e=.03928>=b?b/12.92:a.pow((b+.055)/1.055,2.4),f=.03928>=c?c/12.92:a.pow((c+.055)/1.055,2.4),g=.03928>=d?d/12.92:a.pow((d+.055)/1.055,2.4),.2126*e+.7152*f+.0722*g},setAlpha:function(a){return this._a=z(a),this._roundA=P(100*this._a)/100,this},toHsv:function(){var a=g(this._r,this._g,this._b);return{h:360*a.h,s:a.s,v:a.v,a:this._a}},toHsvString:function(){var a=g(this._r,this._g,this._b),b=P(360*a.h),c=P(100*a.s),d=P(100*a.v);return 1==this._a?"hsv("+b+", "+c+"%, "+d+"%)":"hsva("+b+", "+c+"%, "+d+"%, "+this._roundA+")"},toHsl:function(){var a=e(this._r,this._g,this._b);return{h:360*a.h,s:a.s,l:a.l,a:this._a}},toHslString:function(){var a=e(this._r,this._g,this._b),b=P(360*a.h),c=P(100*a.s),d=P(100*a.l);return 1==this._a?"hsl("+b+", "+c+"%, "+d+"%)":"hsla("+b+", "+c+"%, "+d+"%, "+this._roundA+")"},toHex:function(a){return i(this._r,this._g,this._b,a)},toHexString:function(a){return"#"+this.toHex(a)},toHex8:function(a){return j(this._r,this._g,this._b,this._a,a)},toHex8String:function(a){return"#"+this.toHex8(a)},toRgb:function(){return{r:P(this._r),g:P(this._g),b:P(this._b),a:this._a}},toRgbString:function(){return 1==this._a?"rgb("+P(this._r)+", "+P(this._g)+", "+P(this._b)+")":"rgba("+P(this._r)+", "+P(this._g)+", "+P(this._b)+", "+this._roundA+")"},toPercentageRgb:function(){return{r:P(100*A(this._r,255))+"%",g:P(100*A(this._g,255))+"%",b:P(100*A(this._b,255))+"%",a:this._a}},toPercentageRgbString:function(){return 1==this._a?"rgb("+P(100*A(this._r,255))+"%, "+P(100*A(this._g,255))+"%, "+P(100*A(this._b,255))+"%)":"rgba("+P(100*A(this._r,255))+"%, "+P(100*A(this._g,255))+"%, "+P(100*A(this._b,255))+"%, "+this._roundA+")"},toName:function(){return 0===this._a?"transparent":this._a<1?!1:U[i(this._r,this._g,this._b,!0)]||!1},toFilter:function(a){var c="#"+k(this._r,this._g,this._b,this._a),d=c,e=this._gradientType?"GradientType = 1, ":"";if(a){var f=b(a);d="#"+k(f._r,f._g,f._b,f._a)}return"progid:DXImageTransform.Microsoft.gradient("+e+"startColorstr="+c+",endColorstr="+d+")"},toString:function(a){var b=!!a;a=a||this._format;var c=!1,d=this._a<1&&this._a>=0,e=!b&&d&&("hex"===a||"hex6"===a||"hex3"===a||"hex4"===a||"hex8"===a||"name"===a);return e?"name"===a&&0===this._a?this.toName():this.toRgbString():("rgb"===a&&(c=this.toRgbString()),"prgb"===a&&(c=this.toPercentageRgbString()),("hex"===a||"hex6"===a)&&(c=this.toHexString()),"hex3"===a&&(c=this.toHexString(!0)),"hex4"===a&&(c=this.toHex8String(!0)),"hex8"===a&&(c=this.toHex8String()),"name"===a&&(c=this.toName()),"hsl"===a&&(c=this.toHslString()),"hsv"===a&&(c=this.toHsvString()),c||this.toHexString())},clone:function(){return b(this.toString())},_applyModification:function(a,b){var c=a.apply(null,[this].concat([].slice.call(b)));return this._r=c._r,this._g=c._g,this._b=c._b,this.setAlpha(c._a),this},lighten:function(){return this._applyModification(o,arguments)},brighten:function(){return this._applyModification(p,arguments)},darken:function(){return this._applyModification(q,arguments)},desaturate:function(){return this._applyModification(l,arguments)},saturate:function(){return this._applyModification(m,arguments)},greyscale:function(){return this._applyModification(n,arguments)},spin:function(){return this._applyModification(r,arguments)},_applyCombination:function(a,b){return a.apply(null,[this].concat([].slice.call(b)))},analogous:function(){return this._applyCombination(w,arguments)},complement:function(){return this._applyCombination(s,arguments)},monochromatic:function(){return this._applyCombination(x,arguments)},splitcomplement:function(){return this._applyCombination(v,arguments)},triad:function(){return this._applyCombination(t,arguments)},tetrad:function(){return this._applyCombination(u,arguments)}},b.fromRatio=function(a,c){if("object"==typeof a){var d={};for(var e in a)a.hasOwnProperty(e)&&(d[e]="a"===e?a[e]:G(a[e]));a=d}return b(a,c)},b.equals=function(a,c){return a&&c?b(a).toRgbString()==b(c).toRgbString():!1},b.random=function(){return b.fromRatio({r:S(),g:S(),b:S()})},b.mix=function(a,c,d){d=0===d?0:d||50;var e=b(a).toRgb(),f=b(c).toRgb(),g=d/100,h={r:(f.r-e.r)*g+e.r,g:(f.g-e.g)*g+e.g,b:(f.b-e.b)*g+e.b,a:(f.a-e.a)*g+e.a};return b(h)},b.readability=function(c,d){var e=b(c),f=b(d);return(a.max(e.getLuminance(),f.getLuminance())+.05)/(a.min(e.getLuminance(),f.getLuminance())+.05)},b.isReadable=function(a,c,d){var e,f,g=b.readability(a,c);switch(f=!1,e=L(d),e.level+e.size){case"AAsmall":case"AAAlarge":f=g>=4.5;break;case"AAlarge":f=g>=3;break;case"AAAsmall":f=g>=7}return f},b.mostReadable=function(a,c,d){var e,f,g,h,i=null,j=0;d=d||{},f=d.includeFallbackColors,g=d.level,h=d.size;for(var k=0;k<c.length;k++)e=b.readability(a,c[k]),e>j&&(j=e,i=b(c[k]));return b.isReadable(a,i,{level:g,size:h})||!f?i:(d.includeFallbackColors=!1,b.mostReadable(a,["#fff","#000"],d))};var T=b.names={aliceblue:"f0f8ff",antiquewhite:"faebd7",aqua:"0ff",aquamarine:"7fffd4",azure:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"000",blanchedalmond:"ffebcd",blue:"00f",blueviolet:"8a2be2",brown:"a52a2a",burlywood:"deb887",burntsienna:"ea7e5d",cadetblue:"5f9ea0",chartreuse:"7fff00",chocolate:"d2691e",coral:"ff7f50",cornflowerblue:"6495ed",cornsilk:"fff8dc",crimson:"dc143c",cyan:"0ff",darkblue:"00008b",darkcyan:"008b8b",darkgoldenrod:"b8860b",darkgray:"a9a9a9",darkgreen:"006400",darkgrey:"a9a9a9",darkkhaki:"bdb76b",darkmagenta:"8b008b",darkolivegreen:"556b2f",darkorange:"ff8c00",darkorchid:"9932cc",darkred:"8b0000",darksalmon:"e9967a",darkseagreen:"8fbc8f",darkslateblue:"483d8b",darkslategray:"2f4f4f",darkslategrey:"2f4f4f",darkturquoise:"00ced1",darkviolet:"9400d3",deeppink:"ff1493",deepskyblue:"00bfff",dimgray:"696969",dimgrey:"696969",dodgerblue:"1e90ff",firebrick:"b22222",floralwhite:"fffaf0",forestgreen:"228b22",fuchsia:"f0f",gainsboro:"dcdcdc",ghostwhite:"f8f8ff",gold:"ffd700",goldenrod:"daa520",gray:"808080",green:"008000",greenyellow:"adff2f",grey:"808080",honeydew:"f0fff0",hotpink:"ff69b4",indianred:"cd5c5c",indigo:"4b0082",ivory:"fffff0",khaki:"f0e68c",lavender:"e6e6fa",lavenderblush:"fff0f5",lawngreen:"7cfc00",lemonchiffon:"fffacd",lightblue:"add8e6",lightcoral:"f08080",lightcyan:"e0ffff",lightgoldenrodyellow:"fafad2",lightgray:"d3d3d3",lightgreen:"90ee90",lightgrey:"d3d3d3",lightpink:"ffb6c1",lightsalmon:"ffa07a",lightseagreen:"20b2aa",lightskyblue:"87cefa",lightslategray:"789",lightslategrey:"789",lightsteelblue:"b0c4de",lightyellow:"ffffe0",lime:"0f0",limegreen:"32cd32",linen:"faf0e6",magenta:"f0f",maroon:"800000",mediumaquamarine:"66cdaa",mediumblue:"0000cd",mediumorchid:"ba55d3",mediumpurple:"9370db",mediumseagreen:"3cb371",mediumslateblue:"7b68ee",mediumspringgreen:"00fa9a",mediumturquoise:"48d1cc",mediumvioletred:"c71585",midnightblue:"191970",mintcream:"f5fffa",mistyrose:"ffe4e1",moccasin:"ffe4b5",navajowhite:"ffdead",navy:"000080",oldlace:"fdf5e6",olive:"808000",olivedrab:"6b8e23",orange:"ffa500",orangered:"ff4500",orchid:"da70d6",palegoldenrod:"eee8aa",palegreen:"98fb98",paleturquoise:"afeeee",palevioletred:"db7093",papayawhip:"ffefd5",peachpuff:"ffdab9",peru:"cd853f",pink:"ffc0cb",plum:"dda0dd",powderblue:"b0e0e6",purple:"800080",rebeccapurple:"663399",red:"f00",rosybrown:"bc8f8f",royalblue:"4169e1",saddlebrown:"8b4513",salmon:"fa8072",sandybrown:"f4a460",seagreen:"2e8b57",seashell:"fff5ee",sienna:"a0522d",silver:"c0c0c0",skyblue:"87ceeb",slateblue:"6a5acd",slategray:"708090",slategrey:"708090",snow:"fffafa",springgreen:"00ff7f",steelblue:"4682b4",tan:"d2b48c",teal:"008080",thistle:"d8bfd8",tomato:"ff6347",turquoise:"40e0d0",violet:"ee82ee",wheat:"f5deb3",white:"fff",whitesmoke:"f5f5f5",yellow:"ff0",yellowgreen:"9acd32"},U=b.hexNames=y(T),V=function(){var a="[-\\+]?\\d+%?",b="[-\\+]?\\d*\\.\\d+%?",c="(?:"+b+")|(?:"+a+")",d="[\\s|\\(]+("+c+")[,|\\s]+("+c+")[,|\\s]+("+c+")\\s*\\)?",e="[\\s|\\(]+("+c+")[,|\\s]+("+c+")[,|\\s]+("+c+")[,|\\s]+("+c+")\\s*\\)?";return{CSS_UNIT:new RegExp(c),rgb:new RegExp("rgb"+d),rgba:new RegExp("rgba"+e),hsl:new RegExp("hsl"+d),hsla:new RegExp("hsla"+e),hsv:new RegExp("hsv"+d),hsva:new RegExp("hsva"+e),hex3:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex6:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,hex4:/^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,hex8:/^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/}}();"undefined"!=typeof module&&module.exports?module.exports=b:"function"==typeof define&&define.amd?define(function(){return b}):window.tinycolor=b}(Math);

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/numeral.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Batteries extends Equipment {
    constructor(game,parentObject) {
        super(game,parentObject);
        
        this.name = "Batteries"
        this.status = "OK"
        this.chargeRate = .03;
    }

    update(){
        super.update();
        this.parentObject.charge(this.chargeRate);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/BasicFuelTank.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*! @preserve
 * numeral.js
 * version : 2.0.6
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */
!function(a,b){"function"==typeof define&&define.amd?define(b):"object"==typeof module&&module.exports?module.exports=b():a.numeral=b()}(this,function(){function a(a,b){this._input=a,this._value=b}var b,c,d="2.0.6",e={},f={},g={currentLocale:"en",zeroFormat:null,nullFormat:null,defaultFormat:"0,0",scalePercentBy100:!0},h={currentLocale:g.currentLocale,zeroFormat:g.zeroFormat,nullFormat:g.nullFormat,defaultFormat:g.defaultFormat,scalePercentBy100:g.scalePercentBy100};return b=function(d){var f,g,i,j;if(b.isNumeral(d))f=d.value();else if(0===d||"undefined"==typeof d)f=0;else if(null===d||c.isNaN(d))f=null;else if("string"==typeof d)if(h.zeroFormat&&d===h.zeroFormat)f=0;else if(h.nullFormat&&d===h.nullFormat||!d.replace(/[^0-9]+/g,"").length)f=null;else{for(g in e)if(j="function"==typeof e[g].regexps.unformat?e[g].regexps.unformat():e[g].regexps.unformat,j&&d.match(j)){i=e[g].unformat;break}i=i||b._.stringToNumber,f=i(d)}else f=Number(d)||null;return new a(d,f)},b.version=d,b.isNumeral=function(b){return b instanceof a},b._=c={numberToFormat:function(a,c,d){var e,g,h,i,j,k,l,m=f[b.options.currentLocale],n=!1,o=!1,p=0,q="",r=1e12,s=1e9,t=1e6,u=1e3,v="",w=!1;if(a=a||0,g=Math.abs(a),b._.includes(c,"(")?(n=!0,c=c.replace(/[\(|\)]/g,"")):(b._.includes(c,"+")||b._.includes(c,"-"))&&(j=b._.includes(c,"+")?c.indexOf("+"):0>a?c.indexOf("-"):-1,c=c.replace(/[\+|\-]/g,"")),b._.includes(c,"a")&&(e=c.match(/a(k|m|b|t)?/),e=e?e[1]:!1,b._.includes(c," a")&&(q=" "),c=c.replace(new RegExp(q+"a[kmbt]?"),""),g>=r&&!e||"t"===e?(q+=m.abbreviations.trillion,a/=r):r>g&&g>=s&&!e||"b"===e?(q+=m.abbreviations.billion,a/=s):s>g&&g>=t&&!e||"m"===e?(q+=m.abbreviations.million,a/=t):(t>g&&g>=u&&!e||"k"===e)&&(q+=m.abbreviations.thousand,a/=u)),b._.includes(c,"[.]")&&(o=!0,c=c.replace("[.]",".")),h=a.toString().split(".")[0],i=c.split(".")[1],k=c.indexOf(","),p=(c.split(".")[0].split(",")[0].match(/0/g)||[]).length,i?(b._.includes(i,"[")?(i=i.replace("]",""),i=i.split("["),v=b._.toFixed(a,i[0].length+i[1].length,d,i[1].length)):v=b._.toFixed(a,i.length,d),h=v.split(".")[0],v=b._.includes(v,".")?m.delimiters.decimal+v.split(".")[1]:"",o&&0===Number(v.slice(1))&&(v="")):h=b._.toFixed(a,0,d),q&&!e&&Number(h)>=1e3&&q!==m.abbreviations.trillion)switch(h=String(Number(h)/1e3),q){case m.abbreviations.thousand:q=m.abbreviations.million;break;case m.abbreviations.million:q=m.abbreviations.billion;break;case m.abbreviations.billion:q=m.abbreviations.trillion}if(b._.includes(h,"-")&&(h=h.slice(1),w=!0),h.length<p)for(var x=p-h.length;x>0;x--)h="0"+h;return k>-1&&(h=h.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1"+m.delimiters.thousands)),0===c.indexOf(".")&&(h=""),l=h+v+(q?q:""),n?l=(n&&w?"(":"")+l+(n&&w?")":""):j>=0?l=0===j?(w?"-":"+")+l:l+(w?"-":"+"):w&&(l="-"+l),l},stringToNumber:function(a){var b,c,d,e=f[h.currentLocale],g=a,i={thousand:3,million:6,billion:9,trillion:12};if(h.zeroFormat&&a===h.zeroFormat)c=0;else if(h.nullFormat&&a===h.nullFormat||!a.replace(/[^0-9]+/g,"").length)c=null;else{c=1,"."!==e.delimiters.decimal&&(a=a.replace(/\./g,"").replace(e.delimiters.decimal,"."));for(b in i)if(d=new RegExp("[^a-zA-Z]"+e.abbreviations[b]+"(?:\\)|(\\"+e.currency.symbol+")?(?:\\))?)?$"),g.match(d)){c*=Math.pow(10,i[b]);break}c*=(a.split("-").length+Math.min(a.split("(").length-1,a.split(")").length-1))%2?1:-1,a=a.replace(/[^0-9\.]+/g,""),c*=Number(a)}return c},isNaN:function(a){return"number"==typeof a&&isNaN(a)},includes:function(a,b){return-1!==a.indexOf(b)},insert:function(a,b,c){return a.slice(0,c)+b+a.slice(c)},reduce:function(a,b){if(null===this)throw new TypeError("Array.prototype.reduce called on null or undefined");if("function"!=typeof b)throw new TypeError(b+" is not a function");var c,d=Object(a),e=d.length>>>0,f=0;if(3===arguments.length)c=arguments[2];else{for(;e>f&&!(f in d);)f++;if(f>=e)throw new TypeError("Reduce of empty array with no initial value");c=d[f++]}for(;e>f;f++)f in d&&(c=b(c,d[f],f,d));return c},multiplier:function(a){var b=a.toString().split(".");return b.length<2?1:Math.pow(10,b[1].length)},correctionFactor:function(){var a=Array.prototype.slice.call(arguments);return a.reduce(function(a,b){var d=c.multiplier(b);return a>d?a:d},1)},toFixed:function(a,b,c,d){var e,f,g,h,i=a.toString().split("."),j=b-(d||0);return e=2===i.length?Math.min(Math.max(i[1].length,j),b):j,g=Math.pow(10,e),h=(c(a+"e+"+e)/g).toFixed(e),d>b-e&&(f=new RegExp("\\.?0{1,"+(d-(b-e))+"}$"),h=h.replace(f,"")),h}},b.options=h,b.formats=e,b.locales=f,b.locale=function(a){return a&&(h.currentLocale=a.toLowerCase()),h.currentLocale},b.localeData=function(a){if(!a)return f[h.currentLocale];if(a=a.toLowerCase(),!f[a])throw new Error("Unknown locale : "+a);return f[a]},b.reset=function(){for(var a in g)h[a]=g[a]},b.zeroFormat=function(a){h.zeroFormat="string"==typeof a?a:null},b.nullFormat=function(a){h.nullFormat="string"==typeof a?a:null},b.defaultFormat=function(a){h.defaultFormat="string"==typeof a?a:"0.0"},b.register=function(a,b,c){if(b=b.toLowerCase(),this[a+"s"][b])throw new TypeError(b+" "+a+" already registered.");return this[a+"s"][b]=c,c},b.validate=function(a,c){var d,e,f,g,h,i,j,k;if("string"!=typeof a&&(a+="",console.warn&&console.warn("Numeral.js: Value is not string. It has been co-erced to: ",a)),a=a.trim(),a.match(/^\d+$/))return!0;if(""===a)return!1;try{j=b.localeData(c)}catch(l){j=b.localeData(b.locale())}return f=j.currency.symbol,h=j.abbreviations,d=j.delimiters.decimal,e="."===j.delimiters.thousands?"\\.":j.delimiters.thousands,k=a.match(/^[^\d]+/),null!==k&&(a=a.substr(1),k[0]!==f)?!1:(k=a.match(/[^\d]+$/),null!==k&&(a=a.slice(0,-1),k[0]!==h.thousand&&k[0]!==h.million&&k[0]!==h.billion&&k[0]!==h.trillion)?!1:(i=new RegExp(e+"{2}"),a.match(/[^\d.,]/g)?!1:(g=a.split(d),g.length>2?!1:g.length<2?!!g[0].match(/^\d+.*\d$/)&&!g[0].match(i):1===g[0].length?!!g[0].match(/^\d+$/)&&!g[0].match(i)&&!!g[1].match(/^\d+$/):!!g[0].match(/^\d+.*\d$/)&&!g[0].match(i)&&!!g[1].match(/^\d+$/))))},b.fn=a.prototype={clone:function(){return b(this)},format:function(a,c){var d,f,g,i=this._value,j=a||h.defaultFormat;if(c=c||Math.round,0===i&&null!==h.zeroFormat)f=h.zeroFormat;else if(null===i&&null!==h.nullFormat)f=h.nullFormat;else{for(d in e)if(j.match(e[d].regexps.format)){g=e[d].format;break}g=g||b._.numberToFormat,f=g(i,j,c)}return f},value:function(){return this._value},input:function(){return this._input},set:function(a){return this._value=Number(a),this},add:function(a){function b(a,b,c,e){return a+Math.round(d*b)}var d=c.correctionFactor.call(null,this._value,a);return this._value=c.reduce([this._value,a],b,0)/d,this},subtract:function(a){function b(a,b,c,e){return a-Math.round(d*b)}var d=c.correctionFactor.call(null,this._value,a);return this._value=c.reduce([a],b,Math.round(this._value*d))/d,this},multiply:function(a){function b(a,b,d,e){var f=c.correctionFactor(a,b);return Math.round(a*f)*Math.round(b*f)/Math.round(f*f)}return this._value=c.reduce([this._value,a],b,1),this},divide:function(a){function b(a,b,d,e){var f=c.correctionFactor(a,b);return Math.round(a*f)/Math.round(b*f)}return this._value=c.reduce([this._value,a],b),this},difference:function(a){return Math.abs(b(this._value).subtract(a).value())}},b.register("locale","en",{delimiters:{thousands:",",decimal:"."},abbreviations:{thousand:"k",million:"m",billion:"b",trillion:"t"},ordinal:function(a){var b=a%10;return 1===~~(a%100/10)?"th":1===b?"st":2===b?"nd":3===b?"rd":"th"},currency:{symbol:"$"}}),function(){b.register("format","bps",{regexps:{format:/(BPS)/,unformat:/(BPS)/},format:function(a,c,d){var e,f=b._.includes(c," BPS")?" ":"";return a=1e4*a,c=c.replace(/\s?BPS/,""),e=b._.numberToFormat(a,c,d),b._.includes(e,")")?(e=e.split(""),e.splice(-1,0,f+"BPS"),e=e.join("")):e=e+f+"BPS",e},unformat:function(a){return+(1e-4*b._.stringToNumber(a)).toFixed(15)}})}(),function(){var a={base:1e3,suffixes:["B","KB","MB","GB","TB","PB","EB","ZB","YB"]},c={base:1024,suffixes:["B","KiB","MiB","GiB","TiB","PiB","EiB","ZiB","YiB"]},d=a.suffixes.concat(c.suffixes.filter(function(b){return a.suffixes.indexOf(b)<0})),e=d.join("|");e="("+e.replace("B","B(?!PS)")+")",b.register("format","bytes",{regexps:{format:/([0\s]i?b)/,unformat:new RegExp(e)},format:function(d,e,f){var g,h,i,j,k=b._.includes(e,"ib")?c:a,l=b._.includes(e," b")||b._.includes(e," ib")?" ":"";for(e=e.replace(/\s?i?b/,""),h=0;h<=k.suffixes.length;h++)if(i=Math.pow(k.base,h),j=Math.pow(k.base,h+1),null===d||0===d||d>=i&&j>d){l+=k.suffixes[h],i>0&&(d/=i);break}return g=b._.numberToFormat(d,e,f),g+l},unformat:function(d){var e,f,g=b._.stringToNumber(d);if(g){for(e=a.suffixes.length-1;e>=0;e--){if(b._.includes(d,a.suffixes[e])){f=Math.pow(a.base,e);break}if(b._.includes(d,c.suffixes[e])){f=Math.pow(c.base,e);break}}g*=f||1}return g}})}(),function(){b.register("format","currency",{regexps:{format:/(\$)/},format:function(a,c,d){var e,f,g,h=b.locales[b.options.currentLocale],i={before:c.match(/^([\+|\-|\(|\s|\$]*)/)[0],after:c.match(/([\+|\-|\)|\s|\$]*)$/)[0]};for(c=c.replace(/\s?\$\s?/,""),e=b._.numberToFormat(a,c,d),a>=0?(i.before=i.before.replace(/[\-\(]/,""),i.after=i.after.replace(/[\-\)]/,"")):0>a&&!b._.includes(i.before,"-")&&!b._.includes(i.before,"(")&&(i.before="-"+i.before),g=0;g<i.before.length;g++)switch(f=i.before[g]){case"$":e=b._.insert(e,h.currency.symbol,g);break;case" ":e=b._.insert(e," ",g+h.currency.symbol.length-1)}for(g=i.after.length-1;g>=0;g--)switch(f=i.after[g]){case"$":e=g===i.after.length-1?e+h.currency.symbol:b._.insert(e,h.currency.symbol,-(i.after.length-(1+g)));break;case" ":e=g===i.after.length-1?e+" ":b._.insert(e," ",-(i.after.length-(1+g)+h.currency.symbol.length-1))}return e}})}(),function(){b.register("format","exponential",{regexps:{format:/(e\+|e-)/,unformat:/(e\+|e-)/},format:function(a,c,d){var e,f="number"!=typeof a||b._.isNaN(a)?"0e+0":a.toExponential(),g=f.split("e");return c=c.replace(/e[\+|\-]{1}0/,""),e=b._.numberToFormat(Number(g[0]),c,d),e+"e"+g[1]},unformat:function(a){function c(a,c,d,e){var f=b._.correctionFactor(a,c),g=a*f*(c*f)/(f*f);return g}var d=b._.includes(a,"e+")?a.split("e+"):a.split("e-"),e=Number(d[0]),f=Number(d[1]);return f=b._.includes(a,"e-")?f*=-1:f,b._.reduce([e,Math.pow(10,f)],c,1)}})}(),function(){b.register("format","ordinal",{regexps:{format:/(o)/},format:function(a,c,d){var e,f=b.locales[b.options.currentLocale],g=b._.includes(c," o")?" ":"";return c=c.replace(/\s?o/,""),g+=f.ordinal(a),e=b._.numberToFormat(a,c,d),e+g}})}(),function(){b.register("format","percentage",{regexps:{format:/(%)/,unformat:/(%)/},format:function(a,c,d){var e,f=b._.includes(c," %")?" ":"";return b.options.scalePercentBy100&&(a=100*a),c=c.replace(/\s?\%/,""),e=b._.numberToFormat(a,c,d),b._.includes(e,")")?(e=e.split(""),e.splice(-1,0,f+"%"),e=e.join("")):e=e+f+"%",e},unformat:function(a){var c=b._.stringToNumber(a);return b.options.scalePercentBy100?.01*c:c}})}(),function(){b.register("format","time",{regexps:{format:/(:)/,unformat:/(:)/},format:function(a,b,c){var d=Math.floor(a/60/60),e=Math.floor((a-60*d*60)/60),f=Math.round(a-60*d*60-60*e);return d+":"+(10>e?"0"+e:e)+":"+(10>f?"0"+f:f)},unformat:function(a){var b=a.split(":"),c=0;return 3===b.length?(c+=60*Number(b[0])*60,c+=60*Number(b[1]),c+=Number(b[2])):2===b.length&&(c+=60*Number(b[0]),c+=Number(b[1])),Number(c)}})}(),b});

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/moment.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class BasicFuelTank extends Equipment {
    constructor(game,options) {
        super(game,options);
        this.fuelCapacity = options.data.fuelCapacity;

        this.isFuelTank = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','fuelCapacity'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Capacity'];
    }

    set equipped(equipped){
        this._equipped = equipped;
        
        
        if(this.parentObject){
            console.log(this.parentObject.maxFuel);
            
            if(equipped) this.parentObject.maxFuel += this.fuelCapacity;
            if(!equipped) this.parentObject.maxFuel -= this.fuelCapacity;
                          
            console.log(this.parentObject.maxFuel);
        }
        

/*
        TODO:
        if(equipped){
            this.powerUpSound.play();
        } else {
            this.powerDownSound.play();            
        }
*/
    }

    get equipped(){
        return this._equipped;
    }

    update(){
        super.update();
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/RepairKit.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):e.moment=t()}(this,function(){"use strict";function e(){return Qe.apply(null,arguments)}function t(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function n(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function s(e){return void 0===e}function i(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function r(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function a(e,t){var n,s=[];for(n=0;n<e.length;++n)s.push(t(e[n],n));return s}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function u(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function l(e,t,n,s){return ge(e,t,n,s,!0).utc()}function d(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function h(e){if(null==e._isValid){var t=d(e),n=Xe.call(t.parsedDateParts,function(e){return null!=e}),s=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(s=s&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return s;e._isValid=s}return e._isValid}function c(e){var t=l(NaN);return null!=e?u(d(t),e):d(t).userInvalidated=!0,t}function f(e,t){var n,i,r;if(s(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),s(t._i)||(e._i=t._i),s(t._f)||(e._f=t._f),s(t._l)||(e._l=t._l),s(t._strict)||(e._strict=t._strict),s(t._tzm)||(e._tzm=t._tzm),s(t._isUTC)||(e._isUTC=t._isUTC),s(t._offset)||(e._offset=t._offset),s(t._pf)||(e._pf=d(t)),s(t._locale)||(e._locale=t._locale),Ke.length>0)for(n=0;n<Ke.length;n++)s(r=t[i=Ke[n]])||(e[i]=r);return e}function m(t){f(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===et&&(et=!0,e.updateOffset(this),et=!1)}function _(e){return e instanceof m||null!=e&&null!=e._isAMomentObject}function y(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function g(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=y(t)),n}function p(e,t,n){var s,i=Math.min(e.length,t.length),r=Math.abs(e.length-t.length),a=0;for(s=0;s<i;s++)(n&&e[s]!==t[s]||!n&&g(e[s])!==g(t[s]))&&a++;return a+r}function w(t){!1===e.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function v(t,n){var s=!0;return u(function(){if(null!=e.deprecationHandler&&e.deprecationHandler(null,t),s){for(var i,r=[],a=0;a<arguments.length;a++){if(i="","object"==typeof arguments[a]){i+="\n["+a+"] ";for(var o in arguments[0])i+=o+": "+arguments[0][o]+", ";i=i.slice(0,-2)}else i=arguments[a];r.push(i)}w(t+"\nArguments: "+Array.prototype.slice.call(r).join("")+"\n"+(new Error).stack),s=!1}return n.apply(this,arguments)},n)}function M(t,n){null!=e.deprecationHandler&&e.deprecationHandler(t,n),tt[t]||(w(n),tt[t]=!0)}function S(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function D(e,t){var s,i=u({},e);for(s in t)o(t,s)&&(n(e[s])&&n(t[s])?(i[s]={},u(i[s],e[s]),u(i[s],t[s])):null!=t[s]?i[s]=t[s]:delete i[s]);for(s in e)o(e,s)&&!o(t,s)&&n(e[s])&&(i[s]=u({},i[s]));return i}function k(e){null!=e&&this.set(e)}function Y(e,t){var n=e.toLowerCase();st[n]=st[n+"s"]=st[t]=e}function O(e){return"string"==typeof e?st[e]||st[e.toLowerCase()]:void 0}function T(e){var t,n,s={};for(n in e)o(e,n)&&(t=O(n))&&(s[t]=e[n]);return s}function x(e,t){it[e]=t}function b(e,t,n){var s=""+Math.abs(e),i=t-s.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+s}function P(e,t,n,s){var i=s;"string"==typeof s&&(i=function(){return this[s]()}),e&&(ut[e]=i),t&&(ut[t[0]]=function(){return b(i.apply(this,arguments),t[1],t[2])}),n&&(ut[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function W(e){return e.match(/\[[\s\S]/)?e.replace(/^\[|\]$/g,""):e.replace(/\\/g,"")}function H(e,t){return e.isValid()?(t=R(t,e.localeData()),ot[t]=ot[t]||function(e){var t,n,s=e.match(rt);for(t=0,n=s.length;t<n;t++)ut[s[t]]?s[t]=ut[s[t]]:s[t]=W(s[t]);return function(t){var i,r="";for(i=0;i<n;i++)r+=S(s[i])?s[i].call(t,e):s[i];return r}}(t),ot[t](e)):e.localeData().invalidDate()}function R(e,t){function n(e){return t.longDateFormat(e)||e}var s=5;for(at.lastIndex=0;s>=0&&at.test(e);)e=e.replace(at,n),at.lastIndex=0,s-=1;return e}function C(e,t,n){Yt[e]=S(t)?t:function(e,s){return e&&n?n:t}}function F(e,t){return o(Yt,e)?Yt[e](t._strict,t._locale):new RegExp(function(e){return U(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,s,i){return t||n||s||i}))}(e))}function U(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}function L(e,t){var n,s=t;for("string"==typeof e&&(e=[e]),i(t)&&(s=function(e,n){n[t]=g(e)}),n=0;n<e.length;n++)Ot[e[n]]=s}function N(e,t){L(e,function(e,n,s,i){s._w=s._w||{},t(e,s._w,s,i)})}function G(e,t,n){null!=t&&o(Ot,e)&&Ot[e](t,n._a,n,e)}function V(e){return E(e)?366:365}function E(e){return e%4==0&&e%100!=0||e%400==0}function I(t,n){return function(s){return null!=s?(j(this,t,s),e.updateOffset(this,n),this):A(this,t)}}function A(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function j(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&E(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Z(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Z(e,t){if(isNaN(e)||isNaN(t))return NaN;var n=function(e,t){return(e%t+t)%t}(t,12);return e+=(t-n)/12,1===n?E(e)?29:28:31-n%7%2}function z(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=g(t);else if(t=e.localeData().monthsParse(t),!i(t))return e;return n=Math.min(e.date(),Z(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function $(t){return null!=t?(z(this,t),e.updateOffset(this,!0),this):A(this,"Month")}function q(){function e(e,t){return t.length-e.length}var t,n,s=[],i=[],r=[];for(t=0;t<12;t++)n=l([2e3,t]),s.push(this.monthsShort(n,"")),i.push(this.months(n,"")),r.push(this.months(n,"")),r.push(this.monthsShort(n,""));for(s.sort(e),i.sort(e),r.sort(e),t=0;t<12;t++)s[t]=U(s[t]),i[t]=U(i[t]);for(t=0;t<24;t++)r[t]=U(r[t]);this._monthsRegex=new RegExp("^("+r.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+s.join("|")+")","i")}function J(e){var t=new Date(Date.UTC.apply(null,arguments));return e<100&&e>=0&&isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e),t}function B(e,t,n){var s=7+t-n;return-((7+J(e,0,s).getUTCDay()-t)%7)+s-1}function Q(e,t,n,s,i){var r,a,o=1+7*(t-1)+(7+n-s)%7+B(e,s,i);return o<=0?a=V(r=e-1)+o:o>V(e)?(r=e+1,a=o-V(e)):(r=e,a=o),{year:r,dayOfYear:a}}function X(e,t,n){var s,i,r=B(e.year(),t,n),a=Math.floor((e.dayOfYear()-r-1)/7)+1;return a<1?s=a+K(i=e.year()-1,t,n):a>K(e.year(),t,n)?(s=a-K(e.year(),t,n),i=e.year()+1):(i=e.year(),s=a),{week:s,year:i}}function K(e,t,n){var s=B(e,t,n),i=B(e+1,t,n);return(V(e)-s+i)/7}function ee(){function e(e,t){return t.length-e.length}var t,n,s,i,r,a=[],o=[],u=[],d=[];for(t=0;t<7;t++)n=l([2e3,1]).day(t),s=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),r=this.weekdays(n,""),a.push(s),o.push(i),u.push(r),d.push(s),d.push(i),d.push(r);for(a.sort(e),o.sort(e),u.sort(e),d.sort(e),t=0;t<7;t++)o[t]=U(o[t]),u[t]=U(u[t]),d[t]=U(d[t]);this._weekdaysRegex=new RegExp("^("+d.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function te(){return this.hours()%12||12}function ne(e,t){P(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function se(e,t){return t._meridiemParse}function ie(e){return e?e.toLowerCase().replace("_","-"):e}function re(e){var t=null;if(!Xt[e]&&"undefined"!=typeof module&&module&&module.exports)try{t=Jt._abbr;require("./locale/"+e),ae(t)}catch(e){}return Xt[e]}function ae(e,t){var n;return e&&(n=s(t)?ue(e):oe(e,t))&&(Jt=n),Jt._abbr}function oe(e,t){if(null!==t){var n=Qt;if(t.abbr=e,null!=Xt[e])M("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=Xt[e]._config;else if(null!=t.parentLocale){if(null==Xt[t.parentLocale])return Kt[t.parentLocale]||(Kt[t.parentLocale]=[]),Kt[t.parentLocale].push({name:e,config:t}),null;n=Xt[t.parentLocale]._config}return Xt[e]=new k(D(n,t)),Kt[e]&&Kt[e].forEach(function(e){oe(e.name,e.config)}),ae(e),Xt[e]}return delete Xt[e],null}function ue(e){var n;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return Jt;if(!t(e)){if(n=re(e))return n;e=[e]}return function(e){for(var t,n,s,i,r=0;r<e.length;){for(t=(i=ie(e[r]).split("-")).length,n=(n=ie(e[r+1]))?n.split("-"):null;t>0;){if(s=re(i.slice(0,t).join("-")))return s;if(n&&n.length>=t&&p(i,n,!0)>=t-1)break;t--}r++}return null}(e)}function le(e){var t,n=e._a;return n&&-2===d(e).overflow&&(t=n[xt]<0||n[xt]>11?xt:n[bt]<1||n[bt]>Z(n[Tt],n[xt])?bt:n[Pt]<0||n[Pt]>24||24===n[Pt]&&(0!==n[Wt]||0!==n[Ht]||0!==n[Rt])?Pt:n[Wt]<0||n[Wt]>59?Wt:n[Ht]<0||n[Ht]>59?Ht:n[Rt]<0||n[Rt]>999?Rt:-1,d(e)._overflowDayOfYear&&(t<Tt||t>bt)&&(t=bt),d(e)._overflowWeeks&&-1===t&&(t=Ct),d(e)._overflowWeekday&&-1===t&&(t=Ft),d(e).overflow=t),e}function de(e,t,n){return null!=e?e:null!=t?t:n}function he(t){var n,s,i,r,a,o=[];if(!t._d){for(i=function(t){var n=new Date(e.now());return t._useUTC?[n.getUTCFullYear(),n.getUTCMonth(),n.getUTCDate()]:[n.getFullYear(),n.getMonth(),n.getDate()]}(t),t._w&&null==t._a[bt]&&null==t._a[xt]&&function(e){var t,n,s,i,r,a,o,u;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)r=1,a=4,n=de(t.GG,e._a[Tt],X(pe(),1,4).year),s=de(t.W,1),((i=de(t.E,1))<1||i>7)&&(u=!0);else{r=e._locale._week.dow,a=e._locale._week.doy;var l=X(pe(),r,a);n=de(t.gg,e._a[Tt],l.year),s=de(t.w,l.week),null!=t.d?((i=t.d)<0||i>6)&&(u=!0):null!=t.e?(i=t.e+r,(t.e<0||t.e>6)&&(u=!0)):i=r}s<1||s>K(n,r,a)?d(e)._overflowWeeks=!0:null!=u?d(e)._overflowWeekday=!0:(o=Q(n,s,i,r,a),e._a[Tt]=o.year,e._dayOfYear=o.dayOfYear)}(t),null!=t._dayOfYear&&(a=de(t._a[Tt],i[Tt]),(t._dayOfYear>V(a)||0===t._dayOfYear)&&(d(t)._overflowDayOfYear=!0),s=J(a,0,t._dayOfYear),t._a[xt]=s.getUTCMonth(),t._a[bt]=s.getUTCDate()),n=0;n<3&&null==t._a[n];++n)t._a[n]=o[n]=i[n];for(;n<7;n++)t._a[n]=o[n]=null==t._a[n]?2===n?1:0:t._a[n];24===t._a[Pt]&&0===t._a[Wt]&&0===t._a[Ht]&&0===t._a[Rt]&&(t._nextDay=!0,t._a[Pt]=0),t._d=(t._useUTC?J:function(e,t,n,s,i,r,a){var o=new Date(e,t,n,s,i,r,a);return e<100&&e>=0&&isFinite(o.getFullYear())&&o.setFullYear(e),o}).apply(null,o),r=t._useUTC?t._d.getUTCDay():t._d.getDay(),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[Pt]=24),t._w&&void 0!==t._w.d&&t._w.d!==r&&(d(t).weekdayMismatch=!0)}}function ce(e){var t,n,s,i,r,a,o=e._i,u=en.exec(o)||tn.exec(o);if(u){for(d(e).iso=!0,t=0,n=sn.length;t<n;t++)if(sn[t][1].exec(u[1])){i=sn[t][0],s=!1!==sn[t][2];break}if(null==i)return void(e._isValid=!1);if(u[3]){for(t=0,n=rn.length;t<n;t++)if(rn[t][1].exec(u[3])){r=(u[2]||" ")+rn[t][0];break}if(null==r)return void(e._isValid=!1)}if(!s&&null!=r)return void(e._isValid=!1);if(u[4]){if(!nn.exec(u[4]))return void(e._isValid=!1);a="Z"}e._f=i+(r||"")+(a||""),_e(e)}else e._isValid=!1}function fe(e,t,n,s,i,r){var a=[function(e){var t=parseInt(e,10);{if(t<=49)return 2e3+t;if(t<=999)return 1900+t}return t}(e),Vt.indexOf(t),parseInt(n,10),parseInt(s,10),parseInt(i,10)];return r&&a.push(parseInt(r,10)),a}function me(e){var t=on.exec(function(e){return e.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").trim()}(e._i));if(t){var n=fe(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,n){if(e&&jt.indexOf(e)!==new Date(t[0],t[1],t[2]).getDay())return d(n).weekdayMismatch=!0,n._isValid=!1,!1;return!0}(t[1],n,e))return;e._a=n,e._tzm=function(e,t,n){if(e)return un[e];if(t)return 0;var s=parseInt(n,10),i=s%100;return(s-i)/100*60+i}(t[8],t[9],t[10]),e._d=J.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),d(e).rfc2822=!0}else e._isValid=!1}function _e(t){if(t._f!==e.ISO_8601)if(t._f!==e.RFC_2822){t._a=[],d(t).empty=!0;var n,s,i,r,a,o=""+t._i,u=o.length,l=0;for(i=R(t._f,t._locale).match(rt)||[],n=0;n<i.length;n++)r=i[n],(s=(o.match(F(r,t))||[])[0])&&((a=o.substr(0,o.indexOf(s))).length>0&&d(t).unusedInput.push(a),o=o.slice(o.indexOf(s)+s.length),l+=s.length),ut[r]?(s?d(t).empty=!1:d(t).unusedTokens.push(r),G(r,s,t)):t._strict&&!s&&d(t).unusedTokens.push(r);d(t).charsLeftOver=u-l,o.length>0&&d(t).unusedInput.push(o),t._a[Pt]<=12&&!0===d(t).bigHour&&t._a[Pt]>0&&(d(t).bigHour=void 0),d(t).parsedDateParts=t._a.slice(0),d(t).meridiem=t._meridiem,t._a[Pt]=function(e,t,n){var s;if(null==n)return t;return null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((s=e.isPM(n))&&t<12&&(t+=12),s||12!==t||(t=0),t):t}(t._locale,t._a[Pt],t._meridiem),he(t),le(t)}else me(t);else ce(t)}function ye(o){var l=o._i,y=o._f;return o._locale=o._locale||ue(o._l),null===l||void 0===y&&""===l?c({nullInput:!0}):("string"==typeof l&&(o._i=l=o._locale.preparse(l)),_(l)?new m(le(l)):(r(l)?o._d=l:t(y)?function(e){var t,n,s,i,r;if(0===e._f.length)return d(e).invalidFormat=!0,void(e._d=new Date(NaN));for(i=0;i<e._f.length;i++)r=0,t=f({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],_e(t),h(t)&&(r+=d(t).charsLeftOver,r+=10*d(t).unusedTokens.length,d(t).score=r,(null==s||r<s)&&(s=r,n=t));u(e,n||t)}(o):y?_e(o):function(o){var u=o._i;s(u)?o._d=new Date(e.now()):r(u)?o._d=new Date(u.valueOf()):"string"==typeof u?function(t){var n=an.exec(t._i);null===n?(ce(t),!1===t._isValid&&(delete t._isValid,me(t),!1===t._isValid&&(delete t._isValid,e.createFromInputFallback(t)))):t._d=new Date(+n[1])}(o):t(u)?(o._a=a(u.slice(0),function(e){return parseInt(e,10)}),he(o)):n(u)?function(e){if(!e._d){var t=T(e._i);e._a=a([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),he(e)}}(o):i(u)?o._d=new Date(u):e.createFromInputFallback(o)}(o),h(o)||(o._d=null),o))}function ge(e,s,i,r,a){var o={};return!0!==i&&!1!==i||(r=i,i=void 0),(n(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||t(e)&&0===e.length)&&(e=void 0),o._isAMomentObject=!0,o._useUTC=o._isUTC=a,o._l=i,o._i=e,o._f=s,o._strict=r,function(e){var t=new m(le(ye(e)));return t._nextDay&&(t.add(1,"d"),t._nextDay=void 0),t}(o)}function pe(e,t,n,s){return ge(e,t,n,s,!1)}function we(e,n){var s,i;if(1===n.length&&t(n[0])&&(n=n[0]),!n.length)return pe();for(s=n[0],i=1;i<n.length;++i)n[i].isValid()&&!n[i][e](s)||(s=n[i]);return s}function ve(e){var t=T(e),n=t.year||0,s=t.quarter||0,i=t.month||0,r=t.week||0,a=t.day||0,o=t.hour||0,u=t.minute||0,l=t.second||0,d=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Ut.call(hn,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,s=0;s<hn.length;++s)if(e[hn[s]]){if(n)return!1;parseFloat(e[hn[s]])!==g(e[hn[s]])&&(n=!0)}return!0}(t),this._milliseconds=+d+1e3*l+6e4*u+1e3*o*60*60,this._days=+a+7*r,this._months=+i+3*s+12*n,this._data={},this._locale=ue(),this._bubble()}function Me(e){return e instanceof ve}function Se(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function De(e,t){P(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+b(~~(e/60),2)+t+b(~~e%60,2)})}function ke(e,t){var n=(t||"").match(e);if(null===n)return null;var s=((n[n.length-1]||[])+"").match(cn)||["-",0,0],i=60*s[1]+g(s[2]);return 0===i?0:"+"===s[0]?i:-i}function Ye(t,n){var s,i;return n._isUTC?(s=n.clone(),i=(_(t)||r(t)?t.valueOf():pe(t).valueOf())-s.valueOf(),s._d.setTime(s._d.valueOf()+i),e.updateOffset(s,!1),s):pe(t).local()}function Oe(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Te(){return!!this.isValid()&&(this._isUTC&&0===this._offset)}function xe(e,t){var n,s,r,a=e,u=null;return Me(e)?a={ms:e._milliseconds,d:e._days,M:e._months}:i(e)?(a={},t?a[t]=e:a.milliseconds=e):(u=fn.exec(e))?(n="-"===u[1]?-1:1,a={y:0,d:g(u[bt])*n,h:g(u[Pt])*n,m:g(u[Wt])*n,s:g(u[Ht])*n,ms:g(Se(1e3*u[Rt]))*n}):(u=mn.exec(e))?(n="-"===u[1]?-1:(u[1],1),a={y:be(u[2],n),M:be(u[3],n),w:be(u[4],n),d:be(u[5],n),h:be(u[6],n),m:be(u[7],n),s:be(u[8],n)}):null==a?a={}:"object"==typeof a&&("from"in a||"to"in a)&&(r=function(e,t){var n;if(!e.isValid()||!t.isValid())return{milliseconds:0,months:0};t=Ye(t,e),e.isBefore(t)?n=Pe(e,t):((n=Pe(t,e)).milliseconds=-n.milliseconds,n.months=-n.months);return n}(pe(a.from),pe(a.to)),(a={}).ms=r.milliseconds,a.M=r.months),s=new ve(a),Me(e)&&o(e,"_locale")&&(s._locale=e._locale),s}function be(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Pe(e,t){var n={milliseconds:0,months:0};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function We(e,t){return function(n,s){var i,r;return null===s||isNaN(+s)||(M(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),r=n,n=s,s=r),n="string"==typeof n?+n:n,i=xe(n,s),He(this,i,e),this}}function He(t,n,s,i){var r=n._milliseconds,a=Se(n._days),o=Se(n._months);t.isValid()&&(i=null==i||i,o&&z(t,A(t,"Month")+o*s),a&&j(t,"Date",A(t,"Date")+a*s),r&&t._d.setTime(t._d.valueOf()+r*s),i&&e.updateOffset(t,a||o))}function Re(e,t){var n,s=12*(t.year()-e.year())+(t.month()-e.month()),i=e.clone().add(s,"months");return n=t-i<0?(t-i)/(i-e.clone().add(s-1,"months")):(t-i)/(e.clone().add(s+1,"months")-i),-(s+n)||0}function Ce(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ue(e))&&(this._locale=t),this)}function Fe(){return this._locale}function Ue(e,t){P(0,[e,e.length],0,t)}function Le(e,t,n,s,i){var r;return null==e?X(this,s,i).year:(r=K(e,s,i),t>r&&(t=r),function(e,t,n,s,i){var r=Q(e,t,n,s,i),a=J(r.year,0,r.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}.call(this,e,t,n,s,i))}function Ne(e,t){t[Rt]=g(1e3*("0."+e))}function Ge(e){return e}function Ve(e,t,n,s){var i=ue(),r=l().set(s,t);return i[n](r,e)}function Ee(e,t,n){if(i(e)&&(t=e,e=void 0),e=e||"",null!=t)return Ve(e,t,n,"month");var s,r=[];for(s=0;s<12;s++)r[s]=Ve(e,s,n,"month");return r}function Ie(e,t,n,s){"boolean"==typeof e?(i(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,i(t)&&(n=t,t=void 0),t=t||"");var r=ue(),a=e?r._week.dow:0;if(null!=n)return Ve(t,(n+a)%7,s,"day");var o,u=[];for(o=0;o<7;o++)u[o]=Ve(t,(o+a)%7,s,"day");return u}function Ae(e,t,n,s){var i=xe(t,n);return e._milliseconds+=s*i._milliseconds,e._days+=s*i._days,e._months+=s*i._months,e._bubble()}function je(e){return e<0?Math.floor(e):Math.ceil(e)}function Ze(e){return 4800*e/146097}function ze(e){return 146097*e/4800}function $e(e){return function(){return this.as(e)}}function qe(e){return function(){return this.isValid()?this._data[e]:NaN}}function Je(e){return(e>0)-(e<0)||+e}function Be(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=An(this._milliseconds)/1e3,s=An(this._days),i=An(this._months);t=y((e=y(n/60))/60),n%=60,e%=60;var r=y(i/12),a=i%=12,o=s,u=t,l=e,d=n?n.toFixed(3).replace(/\.?0+$/,""):"",h=this.asSeconds();if(!h)return"P0D";var c=h<0?"-":"",f=Je(this._months)!==Je(h)?"-":"",m=Je(this._days)!==Je(h)?"-":"",_=Je(this._milliseconds)!==Je(h)?"-":"";return c+"P"+(r?f+r+"Y":"")+(a?f+a+"M":"")+(o?m+o+"D":"")+(u||l||d?"T":"")+(u?_+u+"H":"")+(l?_+l+"M":"")+(d?_+d+"S":"")}var Qe,Xe;Xe=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,s=0;s<n;s++)if(s in t&&e.call(this,t[s],s,t))return!0;return!1};var Ke=e.momentProperties=[],et=!1,tt={};e.suppressDeprecationWarnings=!1,e.deprecationHandler=null;var nt;nt=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};var st={},it={},rt=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,at=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,ot={},ut={},lt=/\d/,dt=/\d\d/,ht=/\d{3}/,ct=/\d{4}/,ft=/[+-]?\d{6}/,mt=/\d\d?/,_t=/\d\d\d\d?/,yt=/\d\d\d\d\d\d?/,gt=/\d{1,3}/,pt=/\d{1,4}/,wt=/[+-]?\d{1,6}/,vt=/\d+/,Mt=/[+-]?\d+/,St=/Z|[+-]\d\d:?\d\d/gi,Dt=/Z|[+-]\d\d(?::?\d\d)?/gi,kt=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,Yt={},Ot={},Tt=0,xt=1,bt=2,Pt=3,Wt=4,Ht=5,Rt=6,Ct=7,Ft=8;P("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),P(0,["YY",2],0,function(){return this.year()%100}),P(0,["YYYY",4],0,"year"),P(0,["YYYYY",5],0,"year"),P(0,["YYYYYY",6,!0],0,"year"),Y("year","y"),x("year",1),C("Y",Mt),C("YY",mt,dt),C("YYYY",pt,ct),C("YYYYY",wt,ft),C("YYYYYY",wt,ft),L(["YYYYY","YYYYYY"],Tt),L("YYYY",function(t,n){n[Tt]=2===t.length?e.parseTwoDigitYear(t):g(t)}),L("YY",function(t,n){n[Tt]=e.parseTwoDigitYear(t)}),L("Y",function(e,t){t[Tt]=parseInt(e,10)}),e.parseTwoDigitYear=function(e){return g(e)+(g(e)>68?1900:2e3)};var Ut,Lt=I("FullYear",!0);Ut=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},P("M",["MM",2],"Mo",function(){return this.month()+1}),P("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),P("MMMM",0,0,function(e){return this.localeData().months(this,e)}),Y("month","M"),x("month",8),C("M",mt),C("MM",mt,dt),C("MMM",function(e,t){return t.monthsShortRegex(e)}),C("MMMM",function(e,t){return t.monthsRegex(e)}),L(["M","MM"],function(e,t){t[xt]=g(e)-1}),L(["MMM","MMMM"],function(e,t,n,s){var i=n._locale.monthsParse(e,s,n._strict);null!=i?t[xt]=i:d(n).invalidMonth=e});var Nt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Gt="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Vt="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),Et=kt,It=kt;P("w",["ww",2],"wo","week"),P("W",["WW",2],"Wo","isoWeek"),Y("week","w"),Y("isoWeek","W"),x("week",5),x("isoWeek",5),C("w",mt),C("ww",mt,dt),C("W",mt),C("WW",mt,dt),N(["w","ww","W","WW"],function(e,t,n,s){t[s.substr(0,1)]=g(e)});P("d",0,"do","day"),P("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),P("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),P("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),P("e",0,0,"weekday"),P("E",0,0,"isoWeekday"),Y("day","d"),Y("weekday","e"),Y("isoWeekday","E"),x("day",11),x("weekday",11),x("isoWeekday",11),C("d",mt),C("e",mt),C("E",mt),C("dd",function(e,t){return t.weekdaysMinRegex(e)}),C("ddd",function(e,t){return t.weekdaysShortRegex(e)}),C("dddd",function(e,t){return t.weekdaysRegex(e)}),N(["dd","ddd","dddd"],function(e,t,n,s){var i=n._locale.weekdaysParse(e,s,n._strict);null!=i?t.d=i:d(n).invalidWeekday=e}),N(["d","e","E"],function(e,t,n,s){t[s]=g(e)});var At="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),jt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Zt="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),zt=kt,$t=kt,qt=kt;P("H",["HH",2],0,"hour"),P("h",["hh",2],0,te),P("k",["kk",2],0,function(){return this.hours()||24}),P("hmm",0,0,function(){return""+te.apply(this)+b(this.minutes(),2)}),P("hmmss",0,0,function(){return""+te.apply(this)+b(this.minutes(),2)+b(this.seconds(),2)}),P("Hmm",0,0,function(){return""+this.hours()+b(this.minutes(),2)}),P("Hmmss",0,0,function(){return""+this.hours()+b(this.minutes(),2)+b(this.seconds(),2)}),ne("a",!0),ne("A",!1),Y("hour","h"),x("hour",13),C("a",se),C("A",se),C("H",mt),C("h",mt),C("k",mt),C("HH",mt,dt),C("hh",mt,dt),C("kk",mt,dt),C("hmm",_t),C("hmmss",yt),C("Hmm",_t),C("Hmmss",yt),L(["H","HH"],Pt),L(["k","kk"],function(e,t,n){var s=g(e);t[Pt]=24===s?0:s}),L(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),L(["h","hh"],function(e,t,n){t[Pt]=g(e),d(n).bigHour=!0}),L("hmm",function(e,t,n){var s=e.length-2;t[Pt]=g(e.substr(0,s)),t[Wt]=g(e.substr(s)),d(n).bigHour=!0}),L("hmmss",function(e,t,n){var s=e.length-4,i=e.length-2;t[Pt]=g(e.substr(0,s)),t[Wt]=g(e.substr(s,2)),t[Ht]=g(e.substr(i)),d(n).bigHour=!0}),L("Hmm",function(e,t,n){var s=e.length-2;t[Pt]=g(e.substr(0,s)),t[Wt]=g(e.substr(s))}),L("Hmmss",function(e,t,n){var s=e.length-4,i=e.length-2;t[Pt]=g(e.substr(0,s)),t[Wt]=g(e.substr(s,2)),t[Ht]=g(e.substr(i))});var Jt,Bt=I("Hours",!0),Qt={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Gt,monthsShort:Vt,week:{dow:0,doy:6},weekdays:At,weekdaysMin:Zt,weekdaysShort:jt,meridiemParse:/[ap]\.?m?\.?/i},Xt={},Kt={},en=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,tn=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,nn=/Z|[+-]\d\d(?::?\d\d)?/,sn=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],rn=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],an=/^\/?Date\((\-?\d+)/i,on=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,un={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};e.createFromInputFallback=v("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),e.ISO_8601=function(){},e.RFC_2822=function(){};var ln=v("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=pe.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:c()}),dn=v("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=pe.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:c()}),hn=["year","quarter","month","week","day","hour","minute","second","millisecond"];De("Z",":"),De("ZZ",""),C("Z",Dt),C("ZZ",Dt),L(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=ke(Dt,e)});var cn=/([\+\-]|\d\d)/gi;e.updateOffset=function(){};var fn=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,mn=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;xe.fn=ve.prototype,xe.invalid=function(){return xe(NaN)};var _n=We(1,"add"),yn=We(-1,"subtract");e.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",e.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var gn=v("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});P(0,["gg",2],0,function(){return this.weekYear()%100}),P(0,["GG",2],0,function(){return this.isoWeekYear()%100}),Ue("gggg","weekYear"),Ue("ggggg","weekYear"),Ue("GGGG","isoWeekYear"),Ue("GGGGG","isoWeekYear"),Y("weekYear","gg"),Y("isoWeekYear","GG"),x("weekYear",1),x("isoWeekYear",1),C("G",Mt),C("g",Mt),C("GG",mt,dt),C("gg",mt,dt),C("GGGG",pt,ct),C("gggg",pt,ct),C("GGGGG",wt,ft),C("ggggg",wt,ft),N(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,s){t[s.substr(0,2)]=g(e)}),N(["gg","GG"],function(t,n,s,i){n[i]=e.parseTwoDigitYear(t)}),P("Q",0,"Qo","quarter"),Y("quarter","Q"),x("quarter",7),C("Q",lt),L("Q",function(e,t){t[xt]=3*(g(e)-1)}),P("D",["DD",2],"Do","date"),Y("date","D"),x("date",9),C("D",mt),C("DD",mt,dt),C("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),L(["D","DD"],bt),L("Do",function(e,t){t[bt]=g(e.match(mt)[0])});var pn=I("Date",!0);P("DDD",["DDDD",3],"DDDo","dayOfYear"),Y("dayOfYear","DDD"),x("dayOfYear",4),C("DDD",gt),C("DDDD",ht),L(["DDD","DDDD"],function(e,t,n){n._dayOfYear=g(e)}),P("m",["mm",2],0,"minute"),Y("minute","m"),x("minute",14),C("m",mt),C("mm",mt,dt),L(["m","mm"],Wt);var wn=I("Minutes",!1);P("s",["ss",2],0,"second"),Y("second","s"),x("second",15),C("s",mt),C("ss",mt,dt),L(["s","ss"],Ht);var vn=I("Seconds",!1);P("S",0,0,function(){return~~(this.millisecond()/100)}),P(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),P(0,["SSS",3],0,"millisecond"),P(0,["SSSS",4],0,function(){return 10*this.millisecond()}),P(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),P(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),P(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),P(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),P(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),Y("millisecond","ms"),x("millisecond",16),C("S",gt,lt),C("SS",gt,dt),C("SSS",gt,ht);var Mn;for(Mn="SSSS";Mn.length<=9;Mn+="S")C(Mn,vt);for(Mn="S";Mn.length<=9;Mn+="S")L(Mn,Ne);var Sn=I("Milliseconds",!1);P("z",0,0,"zoneAbbr"),P("zz",0,0,"zoneName");var Dn=m.prototype;Dn.add=_n,Dn.calendar=function(t,n){var s=t||pe(),i=Ye(s,this).startOf("day"),r=e.calendarFormat(this,i)||"sameElse",a=n&&(S(n[r])?n[r].call(this,s):n[r]);return this.format(a||this.localeData().calendar(r,this,pe(s)))},Dn.clone=function(){return new m(this)},Dn.diff=function(e,t,n){var s,i,r;if(!this.isValid())return NaN;if(!(s=Ye(e,this)).isValid())return NaN;switch(i=6e4*(s.utcOffset()-this.utcOffset()),t=O(t)){case"year":r=Re(this,s)/12;break;case"month":r=Re(this,s);break;case"quarter":r=Re(this,s)/3;break;case"second":r=(this-s)/1e3;break;case"minute":r=(this-s)/6e4;break;case"hour":r=(this-s)/36e5;break;case"day":r=(this-s-i)/864e5;break;case"week":r=(this-s-i)/6048e5;break;default:r=this-s}return n?r:y(r)},Dn.endOf=function(e){return void 0===(e=O(e))||"millisecond"===e?this:("date"===e&&(e="day"),this.startOf(e).add(1,"isoWeek"===e?"week":e).subtract(1,"ms"))},Dn.format=function(t){t||(t=this.isUtc()?e.defaultFormatUtc:e.defaultFormat);var n=H(this,t);return this.localeData().postformat(n)},Dn.from=function(e,t){return this.isValid()&&(_(e)&&e.isValid()||pe(e).isValid())?xe({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Dn.fromNow=function(e){return this.from(pe(),e)},Dn.to=function(e,t){return this.isValid()&&(_(e)&&e.isValid()||pe(e).isValid())?xe({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},Dn.toNow=function(e){return this.to(pe(),e)},Dn.get=function(e){return e=O(e),S(this[e])?this[e]():this},Dn.invalidAt=function(){return d(this).overflow},Dn.isAfter=function(e,t){var n=_(e)?e:pe(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=O(s(t)?"millisecond":t))?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},Dn.isBefore=function(e,t){var n=_(e)?e:pe(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=O(s(t)?"millisecond":t))?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},Dn.isBetween=function(e,t,n,s){return("("===(s=s||"()")[0]?this.isAfter(e,n):!this.isBefore(e,n))&&(")"===s[1]?this.isBefore(t,n):!this.isAfter(t,n))},Dn.isSame=function(e,t){var n,s=_(e)?e:pe(e);return!(!this.isValid()||!s.isValid())&&("millisecond"===(t=O(t||"millisecond"))?this.valueOf()===s.valueOf():(n=s.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},Dn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},Dn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},Dn.isValid=function(){return h(this)},Dn.lang=gn,Dn.locale=Ce,Dn.localeData=Fe,Dn.max=dn,Dn.min=ln,Dn.parsingFlags=function(){return u({},d(this))},Dn.set=function(e,t){if("object"==typeof e)for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:it[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=T(e)),s=0;s<n.length;s++)this[n[s].unit](e[n[s].unit]);else if(e=O(e),S(this[e]))return this[e](t);return this},Dn.startOf=function(e){switch(e=O(e)){case"year":this.month(0);case"quarter":case"month":this.date(1);case"week":case"isoWeek":case"day":case"date":this.hours(0);case"hour":this.minutes(0);case"minute":this.seconds(0);case"second":this.milliseconds(0)}return"week"===e&&this.weekday(0),"isoWeek"===e&&this.isoWeekday(1),"quarter"===e&&this.month(3*Math.floor(this.month()/3)),this},Dn.subtract=yn,Dn.toArray=function(){return[this.year(),this.month(),this.date(),this.hour(),this.minute(),this.second(),this.millisecond()]},Dn.toObject=function(){return{years:this.year(),months:this.month(),date:this.date(),hours:this.hours(),minutes:this.minutes(),seconds:this.seconds(),milliseconds:this.milliseconds()}},Dn.toDate=function(){return new Date(this.valueOf())},Dn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?H(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):S(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this._d.valueOf()).toISOString().replace("Z",H(n,"Z")):H(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},Dn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',s=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=t+'[")]';return this.format(n+s+"-MM-DD[T]HH:mm:ss.SSS"+i)},Dn.toJSON=function(){return this.isValid()?this.toISOString():null},Dn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},Dn.unix=function(){return Math.floor(this.valueOf()/1e3)},Dn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},Dn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},Dn.year=Lt,Dn.isLeapYear=function(){return E(this.year())},Dn.weekYear=function(e){return Le.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},Dn.isoWeekYear=function(e){return Le.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},Dn.quarter=Dn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},Dn.month=$,Dn.daysInMonth=function(){return Z(this.year(),this.month())},Dn.week=Dn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},Dn.isoWeek=Dn.isoWeeks=function(e){var t=X(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},Dn.weeksInYear=function(){var e=this.localeData()._week;return K(this.year(),e.dow,e.doy)},Dn.isoWeeksInYear=function(){return K(this.year(),1,4)},Dn.date=pn,Dn.day=Dn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},Dn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},Dn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},Dn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},Dn.hour=Dn.hours=Bt,Dn.minute=Dn.minutes=wn,Dn.second=Dn.seconds=vn,Dn.millisecond=Dn.milliseconds=Sn,Dn.utcOffset=function(t,n,s){var i,r=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(null===(t=ke(Dt,t)))return this}else Math.abs(t)<16&&!s&&(t*=60);return!this._isUTC&&n&&(i=Oe(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),r!==t&&(!n||this._changeInProgress?He(this,xe(t-r,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,e.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?r:Oe(this)},Dn.utc=function(e){return this.utcOffset(0,e)},Dn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Oe(this),"m")),this},Dn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=ke(St,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},Dn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?pe(e).utcOffset():0,(this.utcOffset()-e)%60==0)},Dn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},Dn.isLocal=function(){return!!this.isValid()&&!this._isUTC},Dn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},Dn.isUtc=Te,Dn.isUTC=Te,Dn.zoneAbbr=function(){return this._isUTC?"UTC":""},Dn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},Dn.dates=v("dates accessor is deprecated. Use date instead.",pn),Dn.months=v("months accessor is deprecated. Use month instead",$),Dn.years=v("years accessor is deprecated. Use year instead",Lt),Dn.zone=v("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),Dn.isDSTShifted=v("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var e={};if(f(e,this),(e=ye(e))._a){var t=e._isUTC?l(e._a):pe(e._a);this._isDSTShifted=this.isValid()&&p(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var kn=k.prototype;kn.calendar=function(e,t,n){var s=this._calendar[e]||this._calendar.sameElse;return S(s)?s.call(t,n):s},kn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},kn.invalidDate=function(){return this._invalidDate},kn.ordinal=function(e){return this._ordinal.replace("%d",e)},kn.preparse=Ge,kn.postformat=Ge,kn.relativeTime=function(e,t,n,s){var i=this._relativeTime[n];return S(i)?i(e,t,n,s):i.replace(/%d/i,e)},kn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)},kn.set=function(e){var t,n;for(n in e)S(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},kn.months=function(e,n){return e?t(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Nt).test(n)?"format":"standalone"][e.month()]:t(this._months)?this._months:this._months.standalone},kn.monthsShort=function(e,n){return e?t(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Nt.test(n)?"format":"standalone"][e.month()]:t(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},kn.monthsParse=function(e,t,n){var s,i,r;if(this._monthsParseExact)return function(e,t,n){var s,i,r,a=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],s=0;s<12;++s)r=l([2e3,s]),this._shortMonthsParse[s]=this.monthsShort(r,"").toLocaleLowerCase(),this._longMonthsParse[s]=this.months(r,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(i=Ut.call(this._shortMonthsParse,a))?i:null:-1!==(i=Ut.call(this._longMonthsParse,a))?i:null:"MMM"===t?-1!==(i=Ut.call(this._shortMonthsParse,a))?i:-1!==(i=Ut.call(this._longMonthsParse,a))?i:null:-1!==(i=Ut.call(this._longMonthsParse,a))?i:-1!==(i=Ut.call(this._shortMonthsParse,a))?i:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),s=0;s<12;s++){if(i=l([2e3,s]),n&&!this._longMonthsParse[s]&&(this._longMonthsParse[s]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[s]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[s]||(r="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[s]=new RegExp(r.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[s].test(e))return s;if(n&&"MMM"===t&&this._shortMonthsParse[s].test(e))return s;if(!n&&this._monthsParse[s].test(e))return s}},kn.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||q.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=It),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},kn.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||q.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=Et),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},kn.week=function(e){return X(e,this._week.dow,this._week.doy).week},kn.firstDayOfYear=function(){return this._week.doy},kn.firstDayOfWeek=function(){return this._week.dow},kn.weekdays=function(e,n){return e?t(this._weekdays)?this._weekdays[e.day()]:this._weekdays[this._weekdays.isFormat.test(n)?"format":"standalone"][e.day()]:t(this._weekdays)?this._weekdays:this._weekdays.standalone},kn.weekdaysMin=function(e){return e?this._weekdaysMin[e.day()]:this._weekdaysMin},kn.weekdaysShort=function(e){return e?this._weekdaysShort[e.day()]:this._weekdaysShort},kn.weekdaysParse=function(e,t,n){var s,i,r;if(this._weekdaysParseExact)return function(e,t,n){var s,i,r,a=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],s=0;s<7;++s)r=l([2e3,1]).day(s),this._minWeekdaysParse[s]=this.weekdaysMin(r,"").toLocaleLowerCase(),this._shortWeekdaysParse[s]=this.weekdaysShort(r,"").toLocaleLowerCase(),this._weekdaysParse[s]=this.weekdays(r,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(i=Ut.call(this._weekdaysParse,a))?i:null:"ddd"===t?-1!==(i=Ut.call(this._shortWeekdaysParse,a))?i:null:-1!==(i=Ut.call(this._minWeekdaysParse,a))?i:null:"dddd"===t?-1!==(i=Ut.call(this._weekdaysParse,a))?i:-1!==(i=Ut.call(this._shortWeekdaysParse,a))?i:-1!==(i=Ut.call(this._minWeekdaysParse,a))?i:null:"ddd"===t?-1!==(i=Ut.call(this._shortWeekdaysParse,a))?i:-1!==(i=Ut.call(this._weekdaysParse,a))?i:-1!==(i=Ut.call(this._minWeekdaysParse,a))?i:null:-1!==(i=Ut.call(this._minWeekdaysParse,a))?i:-1!==(i=Ut.call(this._weekdaysParse,a))?i:-1!==(i=Ut.call(this._shortWeekdaysParse,a))?i:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),s=0;s<7;s++){if(i=l([2e3,1]).day(s),n&&!this._fullWeekdaysParse[s]&&(this._fullWeekdaysParse[s]=new RegExp("^"+this.weekdays(i,"").replace(".",".?")+"$","i"),this._shortWeekdaysParse[s]=new RegExp("^"+this.weekdaysShort(i,"").replace(".",".?")+"$","i"),this._minWeekdaysParse[s]=new RegExp("^"+this.weekdaysMin(i,"").replace(".",".?")+"$","i")),this._weekdaysParse[s]||(r="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[s]=new RegExp(r.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[s].test(e))return s;if(n&&"ddd"===t&&this._shortWeekdaysParse[s].test(e))return s;if(n&&"dd"===t&&this._minWeekdaysParse[s].test(e))return s;if(!n&&this._weekdaysParse[s].test(e))return s}},kn.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||ee.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=zt),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},kn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||ee.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=$t),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},kn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||ee.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=qt),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},kn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},kn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ae("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===g(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),e.lang=v("moment.lang is deprecated. Use moment.locale instead.",ae),e.langData=v("moment.langData is deprecated. Use moment.localeData instead.",ue);var Yn=Math.abs,On=$e("ms"),Tn=$e("s"),xn=$e("m"),bn=$e("h"),Pn=$e("d"),Wn=$e("w"),Hn=$e("M"),Rn=$e("y"),Cn=qe("milliseconds"),Fn=qe("seconds"),Un=qe("minutes"),Ln=qe("hours"),Nn=qe("days"),Gn=qe("months"),Vn=qe("years"),En=Math.round,In={ss:44,s:45,m:45,h:22,d:26,M:11},An=Math.abs,jn=ve.prototype;return jn.isValid=function(){return this._isValid},jn.abs=function(){var e=this._data;return this._milliseconds=Yn(this._milliseconds),this._days=Yn(this._days),this._months=Yn(this._months),e.milliseconds=Yn(e.milliseconds),e.seconds=Yn(e.seconds),e.minutes=Yn(e.minutes),e.hours=Yn(e.hours),e.months=Yn(e.months),e.years=Yn(e.years),this},jn.add=function(e,t){return Ae(this,e,t,1)},jn.subtract=function(e,t){return Ae(this,e,t,-1)},jn.as=function(e){if(!this.isValid())return NaN;var t,n,s=this._milliseconds;if("month"===(e=O(e))||"year"===e)return t=this._days+s/864e5,n=this._months+Ze(t),"month"===e?n:n/12;switch(t=this._days+Math.round(ze(this._months)),e){case"week":return t/7+s/6048e5;case"day":return t+s/864e5;case"hour":return 24*t+s/36e5;case"minute":return 1440*t+s/6e4;case"second":return 86400*t+s/1e3;case"millisecond":return Math.floor(864e5*t)+s;default:throw new Error("Unknown unit "+e)}},jn.asMilliseconds=On,jn.asSeconds=Tn,jn.asMinutes=xn,jn.asHours=bn,jn.asDays=Pn,jn.asWeeks=Wn,jn.asMonths=Hn,jn.asYears=Rn,jn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*g(this._months/12):NaN},jn._bubble=function(){var e,t,n,s,i,r=this._milliseconds,a=this._days,o=this._months,u=this._data;return r>=0&&a>=0&&o>=0||r<=0&&a<=0&&o<=0||(r+=864e5*je(ze(o)+a),a=0,o=0),u.milliseconds=r%1e3,e=y(r/1e3),u.seconds=e%60,t=y(e/60),u.minutes=t%60,n=y(t/60),u.hours=n%24,a+=y(n/24),i=y(Ze(a)),o+=i,a-=je(ze(i)),s=y(o/12),o%=12,u.days=a,u.months=o,u.years=s,this},jn.clone=function(){return xe(this)},jn.get=function(e){return e=O(e),this.isValid()?this[e+"s"]():NaN},jn.milliseconds=Cn,jn.seconds=Fn,jn.minutes=Un,jn.hours=Ln,jn.days=Nn,jn.weeks=function(){return y(this.days()/7)},jn.months=Gn,jn.years=Vn,jn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var s=xe(e).abs(),i=En(s.as("s")),r=En(s.as("m")),a=En(s.as("h")),o=En(s.as("d")),u=En(s.as("M")),l=En(s.as("y")),d=i<=In.ss&&["s",i]||i<In.s&&["ss",i]||r<=1&&["m"]||r<In.m&&["mm",r]||a<=1&&["h"]||a<In.h&&["hh",a]||o<=1&&["d"]||o<In.d&&["dd",o]||u<=1&&["M"]||u<In.M&&["MM",u]||l<=1&&["y"]||["yy",l];return d[2]=t,d[3]=+e>0,d[4]=n,function(e,t,n,s,i){return i.relativeTime(t||1,!!n,e,s)}.apply(null,d)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},jn.toISOString=Be,jn.toString=Be,jn.toJSON=Be,jn.locale=Ce,jn.localeData=Fe,jn.toIsoString=v("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Be),jn.lang=gn,P("X",0,0,"unix"),P("x",0,0,"valueOf"),C("x",Mt),C("X",/[+-]?\d+(\.\d{1,3})?/),L("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),L("x",function(e,t,n){n._d=new Date(g(e))}),e.version="2.20.1",function(e){Qe=e}(pe),e.fn=Dn,e.min=function(){return we("isBefore",[].slice.call(arguments,0))},e.max=function(){return we("isAfter",[].slice.call(arguments,0))},e.now=function(){return Date.now?Date.now():+new Date},e.utc=l,e.unix=function(e){return pe(1e3*e)},e.months=function(e,t){return Ee(e,t,"months")},e.isDate=r,e.locale=ae,e.invalid=c,e.duration=xe,e.isMoment=_,e.weekdays=function(e,t,n){return Ie(e,t,n,"weekdays")},e.parseZone=function(){return pe.apply(null,arguments).parseZone()},e.localeData=ue,e.isDuration=Me,e.monthsShort=function(e,t){return Ee(e,t,"monthsShort")},e.weekdaysMin=function(e,t,n){return Ie(e,t,n,"weekdaysMin")},e.defineLocale=oe,e.updateLocale=function(e,t){if(null!=t){var n,s,i=Qt;null!=(s=re(e))&&(i=s._config),(n=new k(t=D(i,t))).parentLocale=Xt[e],Xt[e]=n,ae(e)}else null!=Xt[e]&&(null!=Xt[e].parentLocale?Xt[e]=Xt[e].parentLocale:null!=Xt[e]&&delete Xt[e]);return Xt[e]},e.locales=function(){return nt(Xt)},e.weekdaysShort=function(e,t,n){return Ie(e,t,n,"weekdaysShort")},e.normalizeUnits=O,e.relativeTimeRounding=function(e){return void 0===e?En:"function"==typeof e&&(En=e,!0)},e.relativeTimeThreshold=function(e,t){return void 0!==In[e]&&(void 0===t?In[e]:(In[e]=t,"s"===e&&(In.ss=t-1),!0))},e.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},e.prototype=Dn,e.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"YYYY-[W]WW",MONTH:"YYYY-MM"},e});

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/filter_blurX.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class RepairKit extends Consumable {
    constructor(game,options) {
        super(game,options);
        
        this.repairAmount = options.data.repairAmount;

        this.infoFields = ['baseValue','mass','rarity','__space__','repairAmount'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Recovery'];
    
        this.consumeSound = game.add.audio('repair-light')
    }
    
    consume(){
        super.consume();
        this.consumeSound.play();
        
        this.parentObject.health += this.repairAmount;

        if(this.parentObject.health>=this.parentObject.maxHealth) {
            this.parentObject.health = this.parentObject.maxHealth // Don't allow exceeding max health
        }
    }

}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/FuelKit.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
* A horizontal blur filter by Mat Groves http://matgroves.com/ @Doormat23
*/
Phaser.Filter.BlurX = function (game) {

    Phaser.Filter.call(this, game);

    this.uniforms.blur = { type: '1f', value: 1 / 512 };

    this.fragmentSrc = [

      "precision mediump float;",
      "varying vec2 vTextureCoord;",
      "varying vec4 vColor;",
      "uniform float blur;",
      "uniform sampler2D uSampler;",

        "void main(void) {",

          "vec4 sum = vec4(0.0);",

          "sum += texture2D(uSampler, vec2(vTextureCoord.x - 4.0*blur, vTextureCoord.y)) * 0.05;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x - 3.0*blur, vTextureCoord.y)) * 0.09;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x - 2.0*blur, vTextureCoord.y)) * 0.12;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x - blur, vTextureCoord.y)) * 0.15;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x + blur, vTextureCoord.y)) * 0.15;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x + 2.0*blur, vTextureCoord.y)) * 0.12;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x + 3.0*blur, vTextureCoord.y)) * 0.09;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x + 4.0*blur, vTextureCoord.y)) * 0.05;",

          "gl_FragColor = sum;",

        "}"
    ];

};

Phaser.Filter.BlurX.prototype = Object.create(Phaser.Filter.prototype);
Phaser.Filter.BlurX.prototype.constructor = Phaser.Filter.BlurX;

Object.defineProperty(Phaser.Filter.BlurX.prototype, 'blur', {

    get: function() {
        return this.uniforms.blur.value / (1/7000);
    },

    set: function(value) {
        this.dirty = true;
        this.uniforms.blur.value = (1/7000) * value;
    }

});

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/filter_blurY.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class FuelKit extends Consumable {
    constructor(game,options) {
        super(game,options);
        
        this.fuelAmount = options.data.fuelAmount;

        this.infoFields = ['baseValue','mass','rarity','__space__','fuelAmount'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Fuel Provided'];
    
        this.consumeSound = game.add.audio('glug')
    }
    
    consume(){
        super.consume();
        this.consumeSound.play();
        
        this.parentObject.fuelQuantity += this.fuelAmount;

        if(this.parentObject.fuelQuantity>=this.parentObject.maxFuel) {
            this.parentObject.fuelQuantity = this.parentObject.maxFuel // Don't allow exceeding max fuel
        }
    }

}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/FTLFuel.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/**
* A vertical blur filter by Mat Groves http://matgroves.com/ @Doormat23
*/
Phaser.Filter.BlurY = function (game) {

    Phaser.Filter.call(this, game);

    this.uniforms.blur = { type: '1f', value: 1 / 512 };

    this.fragmentSrc = [

      "precision mediump float;",
      "varying vec2 vTextureCoord;",
      "varying vec4 vColor;",
      "uniform float blur;",
      "uniform sampler2D uSampler;",

        "void main(void) {",

          "vec4 sum = vec4(0.0);",

          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 4.0*blur)) * 0.05;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 3.0*blur)) * 0.09;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 2.0*blur)) * 0.12;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - blur)) * 0.15;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + blur)) * 0.15;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 2.0*blur)) * 0.12;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 3.0*blur)) * 0.09;",
          "sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 4.0*blur)) * 0.05;",

          "gl_FragColor = sum;",

        "}"

    ];

};

Phaser.Filter.BlurY.prototype = Object.create(Phaser.Filter.prototype);
Phaser.Filter.BlurY.prototype.constructor = Phaser.Filter.BlurY;

Object.defineProperty(Phaser.Filter.BlurY.prototype, 'blur', {

    get: function() {
        return this.uniforms.blur.value / (1/7000);
    },

    set: function(value) {
        this.dirty = true;
        this.uniforms.blur.value = (1/7000) * value;
    }

});

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/hmac-md5.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class FTLFuel extends Consumable {
    constructor(game,options) {
        super(game,options);
        
        this.jumpsAmount = 1;
        this.isHyperdriveFuel = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','jumpsAmount'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Jumps'];
    }
    
    consume(){
        super.consume();
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/weapons/_weapon.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*
CryptoJS v3.1.2
code.google.com/p/crypto-js
(c) 2009-2013 by Jeff Mott. All rights reserved.
code.google.com/p/crypto-js/wiki/License
*/
var CryptoJS=CryptoJS||function(q,r){var k={},g=k.lib={},p=function(){},t=g.Base={extend:function(b){p.prototype=this;var j=new p;b&&j.mixIn(b);j.hasOwnProperty("init")||(j.init=function(){j.$super.init.apply(this,arguments)});j.init.prototype=j;j.$super=this;return j},create:function(){var b=this.extend();b.init.apply(b,arguments);return b},init:function(){},mixIn:function(b){for(var j in b)b.hasOwnProperty(j)&&(this[j]=b[j]);b.hasOwnProperty("toString")&&(this.toString=b.toString)},clone:function(){return this.init.prototype.extend(this)}},
n=g.WordArray=t.extend({init:function(b,j){b=this.words=b||[];this.sigBytes=j!=r?j:4*b.length},toString:function(b){return(b||u).stringify(this)},concat:function(b){var j=this.words,a=b.words,l=this.sigBytes;b=b.sigBytes;this.clamp();if(l%4)for(var h=0;h<b;h++)j[l+h>>>2]|=(a[h>>>2]>>>24-8*(h%4)&255)<<24-8*((l+h)%4);else if(65535<a.length)for(h=0;h<b;h+=4)j[l+h>>>2]=a[h>>>2];else j.push.apply(j,a);this.sigBytes+=b;return this},clamp:function(){var b=this.words,j=this.sigBytes;b[j>>>2]&=4294967295<<
32-8*(j%4);b.length=q.ceil(j/4)},clone:function(){var b=t.clone.call(this);b.words=this.words.slice(0);return b},random:function(b){for(var j=[],a=0;a<b;a+=4)j.push(4294967296*q.random()|0);return new n.init(j,b)}}),v=k.enc={},u=v.Hex={stringify:function(b){var a=b.words;b=b.sigBytes;for(var h=[],l=0;l<b;l++){var m=a[l>>>2]>>>24-8*(l%4)&255;h.push((m>>>4).toString(16));h.push((m&15).toString(16))}return h.join("")},parse:function(b){for(var a=b.length,h=[],l=0;l<a;l+=2)h[l>>>3]|=parseInt(b.substr(l,
2),16)<<24-4*(l%8);return new n.init(h,a/2)}},a=v.Latin1={stringify:function(b){var a=b.words;b=b.sigBytes;for(var h=[],l=0;l<b;l++)h.push(String.fromCharCode(a[l>>>2]>>>24-8*(l%4)&255));return h.join("")},parse:function(b){for(var a=b.length,h=[],l=0;l<a;l++)h[l>>>2]|=(b.charCodeAt(l)&255)<<24-8*(l%4);return new n.init(h,a)}},s=v.Utf8={stringify:function(b){try{return decodeURIComponent(escape(a.stringify(b)))}catch(h){throw Error("Malformed UTF-8 data");}},parse:function(b){return a.parse(unescape(encodeURIComponent(b)))}},
h=g.BufferedBlockAlgorithm=t.extend({reset:function(){this._data=new n.init;this._nDataBytes=0},_append:function(b){"string"==typeof b&&(b=s.parse(b));this._data.concat(b);this._nDataBytes+=b.sigBytes},_process:function(b){var a=this._data,h=a.words,l=a.sigBytes,m=this.blockSize,k=l/(4*m),k=b?q.ceil(k):q.max((k|0)-this._minBufferSize,0);b=k*m;l=q.min(4*b,l);if(b){for(var g=0;g<b;g+=m)this._doProcessBlock(h,g);g=h.splice(0,b);a.sigBytes-=l}return new n.init(g,l)},clone:function(){var b=t.clone.call(this);
b._data=this._data.clone();return b},_minBufferSize:0});g.Hasher=h.extend({cfg:t.extend(),init:function(b){this.cfg=this.cfg.extend(b);this.reset()},reset:function(){h.reset.call(this);this._doReset()},update:function(b){this._append(b);this._process();return this},finalize:function(b){b&&this._append(b);return this._doFinalize()},blockSize:16,_createHelper:function(b){return function(a,h){return(new b.init(h)).finalize(a)}},_createHmacHelper:function(b){return function(a,h){return(new m.HMAC.init(b,
h)).finalize(a)}}});var m=k.algo={};return k}(Math);
(function(q){function r(a,m,b,j,g,l,k){a=a+(m&b|~m&j)+g+k;return(a<<l|a>>>32-l)+m}function k(a,m,b,j,g,l,k){a=a+(m&j|b&~j)+g+k;return(a<<l|a>>>32-l)+m}function g(a,m,b,j,g,l,k){a=a+(m^b^j)+g+k;return(a<<l|a>>>32-l)+m}function p(a,g,b,j,k,l,p){a=a+(b^(g|~j))+k+p;return(a<<l|a>>>32-l)+g}for(var t=CryptoJS,n=t.lib,v=n.WordArray,u=n.Hasher,n=t.algo,a=[],s=0;64>s;s++)a[s]=4294967296*q.abs(q.sin(s+1))|0;n=n.MD5=u.extend({_doReset:function(){this._hash=new v.init([1732584193,4023233417,2562383102,271733878])},
_doProcessBlock:function(h,m){for(var b=0;16>b;b++){var j=m+b,n=h[j];h[j]=(n<<8|n>>>24)&16711935|(n<<24|n>>>8)&4278255360}var b=this._hash.words,j=h[m+0],n=h[m+1],l=h[m+2],q=h[m+3],t=h[m+4],s=h[m+5],u=h[m+6],v=h[m+7],w=h[m+8],x=h[m+9],y=h[m+10],z=h[m+11],A=h[m+12],B=h[m+13],C=h[m+14],D=h[m+15],c=b[0],d=b[1],e=b[2],f=b[3],c=r(c,d,e,f,j,7,a[0]),f=r(f,c,d,e,n,12,a[1]),e=r(e,f,c,d,l,17,a[2]),d=r(d,e,f,c,q,22,a[3]),c=r(c,d,e,f,t,7,a[4]),f=r(f,c,d,e,s,12,a[5]),e=r(e,f,c,d,u,17,a[6]),d=r(d,e,f,c,v,22,a[7]),
c=r(c,d,e,f,w,7,a[8]),f=r(f,c,d,e,x,12,a[9]),e=r(e,f,c,d,y,17,a[10]),d=r(d,e,f,c,z,22,a[11]),c=r(c,d,e,f,A,7,a[12]),f=r(f,c,d,e,B,12,a[13]),e=r(e,f,c,d,C,17,a[14]),d=r(d,e,f,c,D,22,a[15]),c=k(c,d,e,f,n,5,a[16]),f=k(f,c,d,e,u,9,a[17]),e=k(e,f,c,d,z,14,a[18]),d=k(d,e,f,c,j,20,a[19]),c=k(c,d,e,f,s,5,a[20]),f=k(f,c,d,e,y,9,a[21]),e=k(e,f,c,d,D,14,a[22]),d=k(d,e,f,c,t,20,a[23]),c=k(c,d,e,f,x,5,a[24]),f=k(f,c,d,e,C,9,a[25]),e=k(e,f,c,d,q,14,a[26]),d=k(d,e,f,c,w,20,a[27]),c=k(c,d,e,f,B,5,a[28]),f=k(f,c,
d,e,l,9,a[29]),e=k(e,f,c,d,v,14,a[30]),d=k(d,e,f,c,A,20,a[31]),c=g(c,d,e,f,s,4,a[32]),f=g(f,c,d,e,w,11,a[33]),e=g(e,f,c,d,z,16,a[34]),d=g(d,e,f,c,C,23,a[35]),c=g(c,d,e,f,n,4,a[36]),f=g(f,c,d,e,t,11,a[37]),e=g(e,f,c,d,v,16,a[38]),d=g(d,e,f,c,y,23,a[39]),c=g(c,d,e,f,B,4,a[40]),f=g(f,c,d,e,j,11,a[41]),e=g(e,f,c,d,q,16,a[42]),d=g(d,e,f,c,u,23,a[43]),c=g(c,d,e,f,x,4,a[44]),f=g(f,c,d,e,A,11,a[45]),e=g(e,f,c,d,D,16,a[46]),d=g(d,e,f,c,l,23,a[47]),c=p(c,d,e,f,j,6,a[48]),f=p(f,c,d,e,v,10,a[49]),e=p(e,f,c,d,
C,15,a[50]),d=p(d,e,f,c,s,21,a[51]),c=p(c,d,e,f,A,6,a[52]),f=p(f,c,d,e,q,10,a[53]),e=p(e,f,c,d,y,15,a[54]),d=p(d,e,f,c,n,21,a[55]),c=p(c,d,e,f,w,6,a[56]),f=p(f,c,d,e,D,10,a[57]),e=p(e,f,c,d,u,15,a[58]),d=p(d,e,f,c,B,21,a[59]),c=p(c,d,e,f,t,6,a[60]),f=p(f,c,d,e,z,10,a[61]),e=p(e,f,c,d,l,15,a[62]),d=p(d,e,f,c,x,21,a[63]);b[0]=b[0]+c|0;b[1]=b[1]+d|0;b[2]=b[2]+e|0;b[3]=b[3]+f|0},_doFinalize:function(){var a=this._data,g=a.words,b=8*this._nDataBytes,j=8*a.sigBytes;g[j>>>5]|=128<<24-j%32;var k=q.floor(b/
4294967296);g[(j+64>>>9<<4)+15]=(k<<8|k>>>24)&16711935|(k<<24|k>>>8)&4278255360;g[(j+64>>>9<<4)+14]=(b<<8|b>>>24)&16711935|(b<<24|b>>>8)&4278255360;a.sigBytes=4*(g.length+1);this._process();a=this._hash;g=a.words;for(b=0;4>b;b++)j=g[b],g[b]=(j<<8|j>>>24)&16711935|(j<<24|j>>>8)&4278255360;return a},clone:function(){var a=u.clone.call(this);a._hash=this._hash.clone();return a}});t.MD5=u._createHelper(n);t.HmacMD5=u._createHmacHelper(n)})(Math);
(function(){var q=CryptoJS,r=q.enc.Utf8;q.algo.HMAC=q.lib.Base.extend({init:function(k,g){k=this._hasher=new k.init;"string"==typeof g&&(g=r.parse(g));var p=k.blockSize,q=4*p;g.sigBytes>q&&(g=k.finalize(g));g.clamp();for(var n=this._oKey=g.clone(),v=this._iKey=g.clone(),u=n.words,a=v.words,s=0;s<p;s++)u[s]^=1549556828,a[s]^=909522486;n.sigBytes=v.sigBytes=q;this.reset()},reset:function(){var k=this._hasher;k.reset();k.update(this._iKey)},update:function(k){this._hasher.update(k);return this},finalize:function(k){var g=
this._hasher;k=g.finalize(k);g.reset();return g.finalize(this._oKey.clone().concat(k))}})})();


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/prando.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Weapon extends Equipment {
    constructor(game,options) {
        super(game,options);

        this.isWeapon = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','type','damage','energyConsumption','range'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Weapon Type','Damage','Energy Consumption','Range'];
    }

    fire(){
        // Fallback
    }

    update(){
        super.update();
    }

    postUpdate(){
        // Bullet updates
        if(this.weapon!=undefined && this.alive){        
            var hits = this.game.physics.p2.hitTest(this.position);
            if(hits.length) this.weapon.hit(this,hits)
        }

        if (this.customRender) this.key.render();
        if (this.components.PhysicsBody) Phaser.Component.PhysicsBody.postUpdate.call(this);
        if (this.components.FixedToCamera) Phaser.Component.FixedToCamera.postUpdate.call(this);
        for (var i = 0; i < this.children.length; i++) {
            this.children[i].postUpdate();
        }
    }

    hit(bullet,hits){
        for (let hit of hits) {
            var target = hit.parent.sprite.parentObject;

            if(this.game.player.ship == target){
                return; // Can't hit yourself.
            }
            
            target.hit(bullet);
            
            target.inflictDamage(bullet.damage);
            bullet.kill();
        }
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/ships/_ship.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


"use strict";
var Prando = /** @class */ (function () {
    function Prando(seed) {
        if (seed === void 0) { seed = undefined; }
        if (typeof (seed) === "string") {
            // String seed
            this._seed = this.hashCode(seed);
        }
        else if (typeof (seed) === "number") {
            // Numeric seed
            this._seed = seed;
        }
        else {
            // Pseudo-random seed
            this._seed = Date.now() + Math.random();
        }
        this.reset();
    }
    // ================================================================================================================
    // PUBLIC INTERFACE -----------------------------------------------------------------------------------------------
    /**
     * Generates a pseudo-random number between a lower (inclusive) and a higher (exclusive) bounds.
     *
     * @param min - The minimum number that can be randomly generated.
     * @param pseudoMax - The maximum number that can be randomly generated (exclusive).
     * @return The generated pseudo-random number.
     */
    Prando.prototype.next = function (min, pseudoMax) {
        if (min === void 0) { min = 0; }
        if (pseudoMax === void 0) { pseudoMax = 1; }
        this.recalculate();
        return this.map(this._value, Prando.MIN, Prando.MAX, min, pseudoMax);
    };
    /**
     * Generates a pseudo-random integer number in a range (inclusive).
     *
     * @param min - The minimum number that can be randomly generated.
     * @param max - The maximum number that can be randomly generated.
     * @return The generated pseudo-random number.
     */
    Prando.prototype.nextInt = function (min, max) {
        if (min === void 0) { min = 10; }
        if (max === void 0) { max = 100; }
        this.recalculate();
        return Math.floor(this.map(this._value, Prando.MIN, Prando.MAX, min, max + 1));
    };
    /**
     * Generates a pseudo-random string sequence of a particular length from a specific character range.
     *
     * Note: keep in mind that creating a random string sequence does not guarantee uniqueness; there is always a
     * 1 in (char_length^string_length) chance of collision. For real unique string ids, always check for
     * pre-existing ids, or employ a robust GUID/UUID generator.
     *
     * @param length - Length of the strting to be generated.
     * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).
     * @return The generated string sequence.
     */
    Prando.prototype.nextString = function (length, chars) {
        if (length === void 0) { length = 16; }
        if (chars === void 0) { chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; }
        var str = "";
        while (str.length < length) {
            str += this.nextChar(chars);
        }
        return str;
    };
    /**
     * Generates a pseudo-random string of 1 character specific character range.
     *
     * @param chars - Characters that are used when creating the random string. Defaults to all alphanumeric chars (A-Z, a-z, 0-9).
     * @return The generated character.
     */
    Prando.prototype.nextChar = function (chars) {
        if (chars === void 0) { chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"; }
        this.recalculate();
        return chars.substr(this.nextInt(0, chars.length - 1), 1);
    };
    /**
     * Picks a pseudo-random item from an array. The array is left unmodified.
     *
     * Note: keep in mind that while the returned item will be random enough, picking one item from the array at a time
     * does not guarantee nor imply that a sequence of random non-repeating items will be picked. If you want to
     * *pick items in a random order* from an array, instead of *pick one random item from an array*, it's best to
     * apply a *shuffle* transformation to the array instead, then read it linearly.
     *
     * @param array - Array of any type containing one or more candidates for random picking.
     * @return An item from the array.
     */
    Prando.prototype.nextArrayItem = function (array) {
        this.recalculate();
        return array[this.nextInt(0, array.length - 1)];
    };
    /**
     * Generates a pseudo-random boolean.
     *
     * @return A value of true or false.
     */
    Prando.prototype.nextBoolean = function () {
        this.recalculate();
        return this._value > 0.5;
    };
    /**
     * Skips ahead in the sequence of numbers that are being generated. This is equivalent to
     * calling next() a specified number of times, but faster since it doesn't need to map the
     * new random numbers to a range and return it.
     *
     * @param iterations - The number of items to skip ahead.
     */
    Prando.prototype.skip = function (iterations) {
        if (iterations === void 0) { iterations = 1; }
        while (iterations-- > 0) {
            this.recalculate();
        }
    };
    /**
     * Reset the pseudo-random number sequence back to its starting seed. Further calls to next()
     * will then produce the same sequence of numbers it had produced before. This is equivalent to
     * creating a new Prando instance with the same seed as another Prando instance.
     *
     * Example:
     * let rng = new Prando(12345678);
     * console.log(rng.next()); // 0.6177754114889017
     * console.log(rng.next()); // 0.5784605181725837
     * rng.reset();
     * console.log(rng.next()); // 0.6177754114889017 again
     * console.log(rng.next()); // 0.5784605181725837 again
     */
    Prando.prototype.reset = function () {
        this._value = this._seed;
    };
    // ================================================================================================================
    // PRIVATE INTERFACE ----------------------------------------------------------------------------------------------
    Prando.prototype.recalculate = function () {
        // Xorshift*32
        // Based on George Marsaglia's work: http://www.jstatsoft.org/v08/i14/paper
        this._value ^= this._value << 13;
        this._value ^= this._value >> 17;
        this._value ^= this._value << 5;
    };
    Prando.prototype.map = function (val, minFrom, maxFrom, minTo, maxTo) {
        return ((val - minFrom) / (maxFrom - minFrom)) * (maxTo - minTo) + minTo;
    };
    Prando.prototype.hashCode = function (str) {
        var hash = 0;
        if (str) {
            var l = str.length;
            for (var i = 0; i < l; i++) {
                hash = ((hash << 5) - hash) + str.charCodeAt(i);
                hash |= 0;
            }
        }
        return hash;
    };
    Prando.MIN = -2147483648; // Int32 min
    Prando.MAX = 2147483647; // Int32 max
    return Prando;
}());

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/markov.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Ship extends GameObject {
    constructor(game,x,y) {
        super(game);
        
        // Basic Ship
        this.specs = {
            name : 'Unknown Ship',
            description : 'Unknown Class',
            storage : {
                bulk : 100,
/*
                passengers : 100,
                gas : 100,
                liquid : 100,
*/
            }
        }
        
        this.isShip = true;
        
        this.xStart = x;
        this.yStart = y;

        this.dockingDistance = 250;
        this.dockedShips = [];
        this.isDocked = false;

        this.fuelQuantity = 0;
        this.energyQuantity = 0;
        this.maxEnergy = 0;
        this.oxygenQuantity = 3000;
        this.oxygenMax = 3000;
        this.hullBreachAtHealthPercentage = .40;
        this.hullBreached = false;
        this.O2Critical = false;

        this.weapons = [];
        this.engines = [];    
        this.equipment = [];
        
        this.canPickThingsUp = true;
        this.canNavigateTo = true;
        
        this.navigation = {
            currentWaypoint: 0,
        }
        this.navigationMode = NAVIGATION_MODE.free;
        this.navigationIndex = -1;

        // Lights
        var lightWidth = 820;
        var lightHeight = 680;
        this.maskPoly = new Phaser.Polygon(
            0,0,
            lightWidth,0,
            lightWidth/2,lightHeight
        );
        
        this.lightMask = game.add.graphics(0, 0);
        this.lightMask.beginFill(0xFFFFFF);
        this.lightMask.drawPolygon(this.maskPoly);
        this.lightMask.endFill();
        this.lightMask.position.x = (-lightWidth/2)-1;
        this.lightMask.position.y = -lightHeight-18;
        this.lightMask.visible = false;

        // Hyperdrive
        this.hyperDriveDelay = 3600;
        this.jumpWasAborted = false;

        // Sounds
        this.infoSound = game.add.audio('beep-beep');
        this.gasLeakSound = game.add.audio('gas-leak');
        this.dockConnectSound = game.add.audio('dock-connect');
        this.dockReleaseSound = game.add.audio('dock-release');
        this.navTargetChangedSound = game.add.audio('blorp');

        this.ftlChargeSound = game.add.audio('ftl-charge');
        this.ftlJumpSound = game.add.audio('ftl-jump');
        this.jumpCompleteSound = game.add.audio('jump-complete');

        this.crashSounds = [
            game.add.audio('crash-1'),
            game.add.audio('crash-2'),
            game.add.audio('crash-3'),
            game.add.audio('crash-4'),
            game.add.audio('crash-5'),
        ]

        this.crashLightSounds = [
            game.add.audio('crash-light-1'),
            game.add.audio('crash-light-2'),
        ]        

        this.crashThudSounds = [
            game.add.audio('crash-thud-1'),
            game.add.audio('crash-thud-2'),
        ]        
    }
    
    setupSprite(sprite){
        super.setupSprite(sprite);

        // Physics
        this.game.physics.p2.enable(sprite,P2BODY_DEBUG);
        this.sprite.body.clearShapes();
        this.sprite.body.loadPolygon(null,this.specs.polygon);       
        this.sprite.body.damping = 0;
        this.sprite.body.mass = this.specs.mass;
        this.sprite.parentObject = this;
        
        // Lights
        this.sprite.addChild(this.lightMask);

        if(this.specs.dockingConnector!=undefined){
            this.dockingConnector = this.sprite.addChild(this.game.make.sprite(0, 0, 'null'));
            this.dockingConnector.x = this.specs.dockingConnector.position.x;
            this.dockingConnector.y = this.specs.dockingConnector.position.y;
        }

        // Docking
        if(this.specs.canBeDockedTo){
            this.dockingPort = this.sprite.addChild(this.game.make.sprite(0, 0, 'dock-arrow'));
            this.dockingPort.x = this.specs.dockingPorts[0].position.x;
            this.dockingPort.y = this.specs.dockingPorts[0].position.y;
            this.dockingPort.anchor.set(.5,2.5);
            this.dockingPort.visible = false;

            this.dockingPortBlink = this.game.add.tween(this.dockingPort).to({
                alpha: 1,
                y: '5'
            }, 600, "Quart.easeOut", true, 0, 0, true).loop(true);
        }
        
        this.setupRCSThrusters();
        this.game.ships.add(this.sprite);        
        
        // Health
        this.health = this.specs.health;
        this.maxHealth = this.specs.health;
        
        // Fuel
        this.maxFuel = this.specs.maxFuel
        
        // Info
        this.name = this.specs.name;
        this.description = this.specs.description;
        
        this.nameText = this.game.add.text(
            0,0,
            this.name, 
            { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'left' },
            this.game.ships, 
        );
        this.nameText.alpha = 0;

        this.subText = this.game.add.text(
            0,0, 
            this.description, 
            { font: `11px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
            this.game.ships, 
        );
        this.subText.alpha = 0;

        this.landingMessage = this.game.add.text(
            0,0,
            'Cleared to Dock', 
            { font: `10px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
            this.game.ships, 
        );
        this.landingMessage.alpha = 0;

        // Emiiters
        var flamesData = {
            lifespan: 1000,
            image: 'white',
            bringToTop: true,
            blendMode: 'ADD',
            hsv: { initial: 0, value: 70, control: 'linear' },
            alpha: { initial: 0, value: 1, control: [ { x: 0, y: 1 }, { x: 0.5, y: 0.8 }, { x: 1, y: 0 } ] },
            scale: { min: 0.05, max: .5 },
            vx: { min: -0.5, max: 0.5 },
            vy: { min: -.1, max: .1 }
        };
        this.game.ps.addData('flames', flamesData);
        this.flamesEmitter = this.game.ps.createEmitter(Phaser.ParticleStorm.SPRITE, new Phaser.Point(0, 0));
        this.flamesEmitter.addToWorld();

        // Atmosphere
        this.ventData = {
            lifespan: 8000,
            image: 'white-smooth',
            vx: { min: -.4, max: .4 },
            vy: { min: -.4, max: .4 },
            alpha: { min: 0, max: .3 },
            scale: { initial: 0.1, value: .4, control: 'linear' },
        };
        this.game.ps.addData('atmosphere', this.ventData);
        this.atmosphereEmitter = this.game.ps.createEmitter(Phaser.ParticleStorm.SPRITE, new Phaser.Point(0, 0));
        this.atmosphereEmitter.addToWorld();
        this.atmosphereWell = this.atmosphereEmitter.createGravityWell(0,0, .01);

        // Hyperdrive
        this.hyperData = {
            lifespan: 300,
            image: 'white-smooth',
            bringToTop: true,
            blendMode: 'ADD',
            hsv: { value: 250,},
            alpha: { value: .5 , control:  [{ x: 0, y: 1 }, { x: 1, y: 0 } ]},
            scale: { value: .5 },
            emit: {
                name: { at: [ { time: 0, value: 'spark' } ] }, 
                value: 0, at: [ { time: 0, value: 5 } ]
            }
        };
        
        this.game.ps.addData('hyperDrive', this.hyperData);
        this.hyperDriveEmitter = this.game.ps.createEmitter(Phaser.ParticleStorm.SPRITE, new Phaser.Point(0, 0));
        this.hyperDriveEmitter.addToWorld();

        // Cargo Jettison
        this.cargoJettisonEmitter = game.add.emitter(0, 0, 3);    
        this.cargoJettisonEmitter.makeParticles('crate-tiny');
        this.cargoJettisonEmitter.gravity = 0;
        this.cargoJettisonEmitter.setAlpha(1,0,1000);
    }
    
    positionInfo(){
        var x = 20+this.sprite.x + this.sprite.width/2;
        var y = this.sprite.y;
        
        this.nameText.x = x; 
        this.nameText.y = y-40; 

        this.subText.x = x; 
        this.subText.y = y-20; 

        this.landingMessage.x = x; 
        this.landingMessage.y = y+20;             
    }
    
    // Weapons
    firePrimaryWeapon(){
        for (let weapon of this.weapons) {
            if(this.hasEnergy){
                this.consumeEnergy(weapon.energyConsumption)
                if(this.energyPercentage>1) weapon.weapon.fire();
            }
        }
    }

    equipWeaponInSlot(weapon,slot){
        this.weapons.push(weapon);
        
        weapon.weapon.trackSprite(
            this.sprite,
            this.specs.weaponSlots[slot].position.x,
            this.specs.weaponSlots[slot].position.y,
            true,
            270,
        );
    }

    unequipWeapon(weapon){
        weapon.equipped = false;

        var index = this.weapons.indexOf(weapon);
        if (index > -1) {
            this.weapons.splice(index, 1);
        }
    }

    // Engines
    equipEngineInSlot(engine,slot){
        // Equip
        this.engines.push(engine);

        engine.parentObject = this;
        engine.slot = slot;
        
        this.calculateMaxSpeed(); 
    }
    
    unequipEngine(engine){
        engine.equipped = false;
        
        var index = this.engines.indexOf(engine);
        if (index > -1) {
            this.engines.splice(index, 1);
        }
        
        this.calculateMaxSpeed();
    }

    calculateMaxSpeed(){
        // Calculate new max speed (average of engine max speeds)
        var maxSpeed = 0;
        for (let engine of this.engines) {
            maxSpeed += engine.maxSpeed;
        }
        this.maxSpeed = maxSpeed/10 // No idea.
    }
    
    
    setupRCSThrusters(){
        if(this.specs.RCS != undefined){
            this.thrusters = {};
            for (var thruster in this.specs.RCS) {
                this.addThruster(thruster,this.specs.RCS[thruster])
            }
        }
    }    
    
    addThruster(thruster,layout){
        this.thrusters[thruster] = new Thruster(this.game,{
            parentObject : this,
            layout : layout,
        })
        
        // Hande retro thrusters
        if(layout.retro !=undefined){
            this.thrusters[thruster].retro = layout.retro
        }
    }
    
    fireThruster(thrusterKey){
        if(this.thrusters[thrusterKey]!=undefined && this.hasFuel){
            var thruster = this.thrusters[thrusterKey];
            this.consumeFuel(thruster.fuelConsumption)
            thruster.fire();
        }
    }

    shutdownThruster(thruster){        
        var thruster = this.thrusters[thruster]
        thruster.shutdown();
    }
    
    shutdownAttitudeThrusters(){
        for (var thrusterKey in this.specs.RCS) {
            var thruster = this.thrusters[thrusterKey];
            if(!thruster.retro) thruster.shutdown();
        }        
    }
    shutdownRetroThrusters(){
        for (var thrusterKey in this.specs.RCS) {
            var thruster = this.thrusters[thrusterKey];
            if(thruster.retro) thruster.shutdown();
        }        
    }
    
    // Equipment
    equipEquipmentInSlot(equipment,slot){
        this.equipment.push(equipment);
    }

    unequipEquipment(equipment){
        equipment.equipped = false;
        
        var index = this.equipment.indexOf(equipment);
        if (index > -1) {
            this.equipment.splice(index, 1);
        }
    }

    
    // Movement    
    get heading(){
        return this.sprite.angle;
    }
    
    accelerate() {
        if(!this.isDocked){
            // Not Docked
            var totalThurst = 0;
            for (let engine of this.engines) {
                if(this.hasFuel){
                    this.consumeFuel(engine.fuelConsumption)
                    totalThurst += engine.thrust;
                    engine.accelerate();
                } else {
                    engine.deaccelerate();                
                }
            }
            this.sprite.body.thrust(totalThurst)
        } else {
            // Docked
            for (let engine of this.engines) {
                engine.deaccelerate();
            }
        }
    }
    
    get totalThurst(){
        var totalThurst = 0;
        for (let engine of this.engines) {
            totalThurst += engine.thrust;
        }
        return totalThurst;
    }
    
    limitSpeed() {
        var maxVelocity = this.maxSpeed;
        if(this.hyperDriveEngaged) maxVelocity = 50;
        var sprite = this.sprite;

        var body = sprite.body
        var angle, currVelocitySqr, vx, vy;
        vx = body.data.velocity[0];
        vy = body.data.velocity[1];
        currVelocitySqr = vx * vx + vy * vy;
        if (currVelocitySqr > maxVelocity * maxVelocity) {
            angle = Math.atan2(vy, vx);
            vx = Math.cos(angle) * maxVelocity;
            vy = Math.sin(angle) * maxVelocity;
            body.data.velocity[0] = vx;
            body.data.velocity[1] = vy;
        }
    };
        
    deaccelerate() {
        if(this.sprite){
            this.sprite.body.acceleration = 0;
    
            for (let engine of this.engines) {
                engine.deaccelerate();
            }

            this.shutdownRetroThrusters();
        }
    }

    goInReverse() {
        if(!this.isDocked && this.hasFuel && !this.hyperDriveEngaged) {
            if(this.speed<this.specs.maxReverse){
                this.sprite.body.reverse(this.specs.reverseThrust)
            }

            this.fireThruster('retro_a');
            this.fireThruster('retro_b');
        }
    }
    
    turnLeft(){
        if(!this.isDocked && this.sprite.body.angularVelocity>-this.specs.maxTurning && this.hasFuel && !this.hyperDriveEngaged) {
            this.sprite.body.angularVelocity -= this.specs.turnAccel;
        
            this.fireThruster('forward_right');
            this.fireThruster('aft_left');
        }
    }

    turnRight(){
        if(!this.isDocked && this.sprite.body.angularVelocity<this.specs.maxTurning && this.hasFuel && !this.hyperDriveEngaged) {
            this.sprite.body.angularVelocity += this.specs.turnAccel;

            this.fireThruster('forward_left');
            this.fireThruster('aft_right');
        }
    }

    moveLeft(){
        if(!this.isDocked && this.hasFuel && !this.hyperDriveEngaged) {
            this.sprite.body.thrustLeft(this.specs.leftRightThrust)

            this.fireThruster('forward_right');
            this.fireThruster('aft_right');
        }
    }

    moveRight(){
        if(!this.isDocked && this.hasFuel && !this.hyperDriveEngaged) {
            this.sprite.body.thrustRight(this.specs.leftRightThrust)

            this.fireThruster('forward_left');
            this.fireThruster('aft_left');
        }
    }

    deaccelerateTurning(){
        if(this.sprite){
            if(this.sprite.body.angularVelocity>0){
                this.sprite.body.angularVelocity = Math.max(this.sprite.body.angularVelocity-this.specs.turnDecay,0);
            }
            if(this.sprite.body.angularVelocity<0){
                this.sprite.body.angularVelocity = Math.min(this.sprite.body.angularVelocity+this.specs.turnDecay,0);
            }
        }
        
        this.shutdownAttitudeThrusters();
    }
    
    
    // Navigation
    navigate(){
        if(this.navigationMode == NAVIGATION_MODE.free) return;

        if(this.navigationMode == NAVIGATION_MODE.stationKeeping) this.keepStation();

        if(this.navigationMode == NAVIGATION_MODE.target) this.trackTargetCurrentNavigationTarget();
        
        if(this.navigationMode == NAVIGATION_MODE.followWaypoints) {
            this.goToWayPoint(this.navigation.waypoints[this.navigation.currentWaypoint]);
        }
    }

    goToWayPoint(waypoint){
        var shipAngle = this.sprite.rotation;
        
        // Heading
        var angleToWaypoint = this.game.physics.arcade.angleToXY(this.sprite, waypoint.x, waypoint.y) + 1.5708;
        var vx = this.sprite.body.velocity.x;
        var vy = this.sprite.body.velocity.y;
        var eta = this.distanceToWaypoint/Math.sqrt(Math.pow(vx,2) + Math.pow(vy,2)); // Seconds until impact.
        
        var difference = Phaser.Math.wrapAngle(Math.degrees(angleToWaypoint - this.sprite.body.rotation));

        var distanceTolerance = 30;
        if(this.distanceToWaypoint<distanceTolerance){
            this.deaccelerate();
            this.sprite.body.setZeroVelocity();
            this.sprite.body.setZeroRotation();
            this.reachedWaypoint();
        } else {
            var turnSpeed = Math.abs(difference)*.02;
            if(difference<-3 && difference>-180){
                if(Math.abs(this.sprite.body.angularVelocity)< turnSpeed){
                    this.turnLeft();
                } else {
                    this.deaccelerateTurning();                
                }
                this.deaccelerate();
            } else if(difference>3 && difference<180) {
                if(Math.abs(this.sprite.body.angularVelocity)< turnSpeed){
                    this.turnRight();
                } else {
                    this.deaccelerateTurning();                
                }
                this.deaccelerate();
            } else {
                if(eta < 8){
                    if(this.distanceToWaypoint>distanceTolerance){
                        this.goInReverse();                    
                    }
                    this.deaccelerate();
                } else {
                    this.accelerate();
                }
            }
        }
    }

    reachedWaypoint(){
        if(this.navigationMode == NAVIGATION_MODE.followWaypoints) {
            var w = this.navigation.currentWaypoint + 1;
            if(w>this.navigation.waypoints.length-1){
                w = 0;
            }
            
            this.navigation.currentWaypoint = w;
        }
    }
            
    get distanceToWaypoint(){
        var waypoint = this.navigation.waypoints[this.navigation.currentWaypoint];
        return this.game.physics.arcade.distanceToXY(this.sprite, waypoint.x,waypoint.y);
    }
    
    navigateWaypoints(){
        this.navigationMode = NAVIGATION_MODE.followWaypoints;
    }
    
    keepStation(){
        // Holds steady speed and heading
    }
    
    trackTargetCurrentNavigationTarget(){
        // Doesnt do much.
    }
    
    nextNavigationTarget(){
        this.navigationMode = NAVIGATION_MODE.target;
        this.navigationIndex++;
        
        if(this.navigationIndex>this.navigatableObjects.length-1){
            this.navigationIndex = -1;   
        }

        this.navTargetChangedSound.play();
        
        this.setNavigationTargetToCurrentNavigationTargetIndex();
    }
    
    get navigatableObjects() {
        var objects = [];
        this.game.system.stellarObjects.forEach(function(gameObject) {
            if(gameObject.canNavigateTo && gameObject != this){
                objects.push(gameObject);
            }
        },this);
        this.game.system.planets.forEach(function(gameObject) {
            if(gameObject.canNavigateTo && gameObject != this){
                objects.push(gameObject);
            }
        },this);

        return objects;
    }
    
    setNavigationTargetToCurrentNavigationTargetIndex(){
        var index = 0;
        var target = null;
        this.navigatableObjects.forEach(function(navigatableObject) {
            if(index==this.navigationIndex){
                target = navigatableObject;
            }
            index ++;
        },this);
        this.navigationTarget = target;
    }
    
    get distanceToCurrentNavigationTarget(){
        return this.game.physics.arcade.distanceToXY(
            this.sprite,
            this.navigationTarget.sprite.x,
            this.navigationTarget.sprite.y
        );
    }

    get formattedDistanceToCurrentNavigationTarget(){
        //console.log(this.navigationTarget);
        var distance;
        if(this.navigationTarget.isPlanet){
            distance = this.distanceToCurrentNavigationTarget*DISTANCE_FACTOR_PLANETS;
            if(distance<75000){
                return 'Arrived';
            } else {
                return numeral(distance).format('0,0.0 a').toUpperCase()+'m';
            }
        } else {
            distance = this.distanceToCurrentNavigationTarget*DISTANCE_FACTOR_SHIPS;
            if(distance<10){
                return 'Arrived';
            } else {            
                return numeral(distance).format('0,0.0 a').toUpperCase()+'m';
            }
        }
    }

    get formattedTimeToCurrentNavigationTarget(){
        var vx = this.sprite.body.velocity.x;
        var vy = this.sprite.body.velocity.y;
        var distanceToNavigationTarget = this.distanceToCurrentNavigationTarget
        if(this.navigationTarget.isPlanet){
            distanceToNavigationTarget = distanceToNavigationTarget*2; // Planets have difference scale
        }
        
        var eta = distanceToNavigationTarget/Math.sqrt(Math.pow(vx,2) + Math.pow(vy,2));
        if(eta<1 || eta.isNaN){
            return '--';
        } else {
            return TIME_FORMAT(eta);       
        }
    }
    
    get angleToCurrentNavigationTarget(){
        var angleToWaypoint = this.game.physics.arcade.angleToXY(
            this.sprite,
            this.navigationTarget.sprite.x,
            this.navigationTarget.sprite.y
        );
        var difference = Phaser.Math.wrapAngle(Math.degrees(angleToWaypoint));
        return difference;
    }
    
    
    // Fuel Mgmt
    refuel(){
        this.fuelQuantity = this.maxFuel;
        this.lowFuelLightShown = false;
        
        this.game.hud.hasFuel();
    }
    
    lowFuelLight(){
        if(!this.lowFuelLightShown) {
            this.lowFuelLightShown = true;
            this.game.hud.lowFuel();
        }
    }
    
    consumeFuel(amount){
        this.fuelQuantity -= amount;

        if(this.fuelPercentage<25){
            this.lowFuelLight();
        }

        if(!this.hasFuel){
            this.game.hud.blinkingWarning("Out of Fuel");
        }
    }

    addFuel(amount){
        this.fuelQuantity += amount;

        if(this.fuelPercentage>25){
            this.game.hud.hasFuel();
        }
    }
    
    get fuelPercentage(){
        return Math.round((this.fuelQuantity/this.maxFuel)*100)        
    }

    get hasFuel(){
        if(this.fuelQuantity>=0){
            return true;
        } else {
            return false;
        }
    }
    
    // Energy Management
    recharge(){
        this.energyQuantity = this.maxEnergy;
    }
    
    charge(amount){
        if(this.energyQuantity <= this.maxEnergy){
            this.energyQuantity += amount;
        }
        
        if(this.energyQuantity>=this.maxEnergy){
            this.energyQuantity = this.maxEnergy;
        }
    }
            
    consumeEnergy(amount){
        this.energyQuantity -= amount;

        if(!this.hasEnergy){
            //this.game.hud.blinkingWarning("Not Enough Energy");
        }
    }
    
    get energyPercentage(){
        var value = Math.round((this.energyQuantity/this.maxEnergy)*100);
        return Math.max(value,0);
    }
        
    get hasEnergy(){
        if(this.energyQuantity>=0){
            return true;
        } else {
            return false;
        }
    }

    // Landing
    attemptToLand(){                
        // Dock initiator calls this (ie. Dockee connects to Docker)
        var closestLandingSite = false;
        var landingSitesInRange = [];
        for (let landingSite of this.game.gameObjects) {
            if(landingSite.canLand && landingSite.system == this.game.system){
                var distance = this.game.physics.arcade.distanceBetween(landingSite.sprite, this.sprite);
                if(distance<=landingSite.showInfoDistance)
                    landingSitesInRange.push({
                        distance: distance,
                        landingSite: landingSite,
                    })
            }
        }
        if(landingSitesInRange.length>0){
            landingSitesInRange.sort(function(a, b) {
                return a.distance - b.distance;
            });

            var landingSite = landingSitesInRange[0].landingSite; // Closest
            var maxSpeedWhenLanding = 10;

            if((this.speed)>maxSpeedWhenLanding){
                this.game.hud.message("Moving maxSpeedWhenLandingt to land");
                return;
            }

            this.landAt(landingSite);

        } else {
            this.game.hud.message("No Landing Site Available");
        }
    }

    landAt(landingSite){
        if(this == this.game.player.ship){
            this.game.add.tween(this.sprite).to( { alpha: 0 }, 600, "Quart.easeOut", true);
            this.game.add.tween(this.sprite.scale).to( { x: .5, y: .5 }, 600, "Quart.easeOut", true);

            // Refuel if needed (Only if autorefuel is on)
            if(this.game.player.settings.autoRefuel && landingSite.hasService(PLANET_SERVICES.fuelDepot)){
                this.game.player.autoRefuel();
            }

            this.game.arrivalScreen.destination = landingSite;
            this.game.arrivalScreen.show();
        } else {
            // Handle AI Ship landing
        }
    }

    takeOff(){
        this.game.skipTime(1,'day');
        this.game.skipTime(game.rnd.integerInRange(1, 12),'hour');

        this.game.add.tween(this.sprite).to( { alpha: 1 }, 600, "Quart.easeOut", true, 500);
        this.game.add.tween(this.sprite.scale).to( { x: 1, y: 1 }, 600, "Quart.easeOut", true, 500);    
    }

    // Docking
    attemptToDock(){        
        if(this.isDocked){
            if(this.dockingInProgress){
                this.abortDocking();
            } else {
                this.releaseDock();
            }
            return;
        }
        
        // Dock initiator calls this (ie. Dockee connects to Docker)
        var closestShip = false;
        var shipsInRange = [];
        for (let ship of this.game.gameObjects) {
            if(ship.specs!=undefined && ship!=this){
                var distance = this.game.physics.arcade.distanceBetween(ship.sprite, this.sprite);
                    shipsInRange.push({
                        distance: distance,
                        ship: ship,
                    })
            }
        }
        if(shipsInRange.length>0){
            shipsInRange.sort(function(a, b) {
                return a.distance - b.distance;
            });

            var shipToDockTo = shipsInRange[0].ship;
            var maxSpeedWhenDocking = 10;
            
            

            if((this.sprite.body.speed-shipToDockTo.sprite.body.speed)>maxSpeedWhenDocking){
                this.game.hud.message("Moving too fast to dock");
                return;
            }
            
            if(!this.okToDock){
                this.game.hud.message("Not aligned for docking");
            } else {
                this.dockWith(shipToDockTo);
            }
        } else {
            this.game.hud.message("No Dock Available");
        }
    }
    
    dockWith(ship){
        var dockingSpeed = 3000;
        
        var dockingPortNumber = 0;

        this.sprite.body.clearShapes();
        ship.sprite.body.clearShapes();
        ship.sprite.body.static = true;        
        
        var dockingPosition = ship.specs.dockingPorts[dockingPortNumber].position

        var dockingAngle = 180 * Math.PI / 180;        
        this.dockingConstraint = game.physics.p2.createLockConstraint(this.sprite, ship.sprite, [0, 72], dockingAngle, 500);
        this.dockedToShip = ship;

        this.isDocked = true;
        this.dockingTarget = ship;
        ship.landingMessage.setText('Docking...');

        game.time.events.add(Phaser.Timer.SECOND * 0, this.dockingComplete, {
            target: ship,
            dockedShip: this,
            portNumber: dockingPortNumber,
            game: this.game,
        });
    }
    
    dockingComplete(){
        
        var target = this.target;
        var dockedShip = this.dockedShip;
        var portNumber = this.portNumber; // What docking port am i at?

        this.target.dockConnectSound.play();
        
        target.sprite.body.loadPolygon(null,target.specs.polygon);       
        target.sprite.body.dynamic = true
        target.sprite.body.mass = true

        dockedShip.sprite.body.loadPolygon(null,dockedShip.specs.polygon)
        dockedShip.dockedToShip.sprite.body.dynamic = true;        
        dockedShip.dockedToShip.sprite.body.mass = dockedShip.specs.mass;        

        dockedShip.isDocked = true;
        dockedShip.dockedAtPortNumber = portNumber;
        dockedShip.hardDocked = true;
        dockedShip.dockingInProgress = false;

        target.dockedShips.push(dockedShip);

        this.game.hud.message("Docking Successful");
        target.landingMessage.setText('Press D to Release');
    }    

    releaseDock(){
        if(this.hardDocked && this.isDocked){
            this.dockReleaseSound.play();
            game.physics.p2.removeConstraint(this.dockingConstraint);
            
    	    var emitter = this.game.add.emitter(0,0,100);
            this.dockingConnector.addChild(emitter);
                
            emitter.makeParticles('cloud');
            emitter.gravity = 0;
            emitter.maxRotation = 100;
            emitter.minRotation = 30;
            emitter.minParticleScale = .01;
            emitter.maxParticleScale = .1;
            emitter.explode(200, game.rnd.integerInRange(7, 10));
            this.game.time.events.add(500, this.destroyEmitter, emitter);  
        }

        // Reset Docking
        this.abortDocking();
    }

    abortDocking(){
        //this.dockedToShip.landingMessage.setText('Press D to Dock');


        this.isDocked = false;
        this.dockedToShip = null;
        this.dockedAtPortNumber = null;
        this.hardDocked = false;
        this.dockingInProgress = false;
        this.dockingTarget = null;
    }
    
    // Info
    showInfoIfNeeded(){
        if(this.shouldShowInfo && !this.infoShowing){
            this.infoSound.play();

            this.game.add.tween(this.nameText).to( { alpha: 1 }, 300, "Quart.easeOut", true);
            //this.game.add.tween(this.nameText).to( { y: '-30' }, 300, "Quart.easeOut", true);    
            
            this.game.add.tween(this.subText).to( { alpha: 1 }, 300, "Quart.easeOut", true);
            //this.game.add.tween(this.subText).to( { y: '-30' }, 300, "Quart.easeOut", true);                

            this.game.add.tween(this.landingMessage).to( { alpha: .5 }, 300, "Quart.easeOut", true,400);
            //this.game.add.tween(this.landingMessage).to( { y: '-30' }, 300, "Quart.easeOut", true,400);                
        
            this.infoShowing = true;
            this.dockingPort.visible = true;
        }
        
        if(!this.shouldShowInfo && this.infoShowing){
            this.hideInfo();
            this.infoShowing = false;
            this.dockingPort.visible = false;
        }
    }
    
    hideInfo(){
        this.game.add.tween(this.nameText).to( { alpha: 0 }, 300, "Quart.easeOut", true);        
        this.game.add.tween(this.subText).to( { alpha: 0 }, 300, "Quart.easeOut", true);        
        this.game.add.tween(this.landingMessage).to( { alpha: 0 }, 300, "Quart.easeOut", true);

        this.game.add.tween(this.subText).to( { y: '+30' }, 0, "Quart.easeOut", true);                
        this.game.add.tween(this.nameText).to( { y: '+30' }, 0, "Quart.easeOut", true);    
        this.game.add.tween(this.landingMessage).to( { y: '+30' }, 0, "Quart.easeOut", true);                

        this.infoShowing = false;
    }
    
    get shouldShowInfo(){
        if(this.distanceToPlayer<=this.showInfoDistance) {
            return true;
        } else {
            return false;
        }
    }
    // Weapons + Damage Collisions
    processBulletCollision(ship, bullet){
	    var emitter = this.game.add.emitter(bullet.x, bullet.y, 100);
        emitter.makeParticles('asteroid-flake-3');
        emitter.minParticleScale = .5;
        emitter.maxParticleScale = 1;
        emitter.gravity = 0;
        emitter.explode(200, 1);
        this.game.time.events.add(500, this.destroyEmitter, emitter);
        
        bullet.kill();
        return false; // Never collides, just dies.
    }
    
    playJettisonCargoAnimation(){
        this.cargoJettisonEmitter.setAngle(this.sprite.angle+90-30,this.sprite.angle+90+30);
        this.cargoJettisonEmitter.x = this.sprite.x;
        this.cargoJettisonEmitter.y = this.sprite.y;
        this.cargoJettisonEmitter.start(true, 5000, null, 1);
    }
    

    // HyperDrive™
    toggleHyperDrive(){        
        if(!this.hyperDriveEngaged){
            if(this.jumpsRemaining<1){
                this.game.hud.message("No FTL fuel in inventory");
                return;
            }

            if((this.speed)>15){
                this.game.hud.message("Moving too fast to engage FTL Drive");
                return;
            }

            this.hyperDriveTimer = game.time.events.add(this.hyperDriveDelay, this.jump, this);
            this.ftlChargeSound.play();
            this.hyperDriveEngaged = true;
            this.jumpWasAborted = false;
            
            this.consumeHyperdriveFuel();
        }
    }
    
    hyperDriveUpdate(){
        this.sprite.body.thrust(500);
        this.hyperDriveEmitter.emit(
            'hyperDrive',
            this.sprite.worldPosition.x + this.game.camera.x,
            this.sprite.worldPosition.y + this.game.camera.y
        );        
    }
    
    abortJump(){
        this.ftlChargeSound.stop();
        
        if(this.hyperDriveEngaged){
            this.jumpCompleteSound.play();
        }
        
        this.jumpWasAborted = true;
        
        this.disengageHyperDrive();    
    }
    
    get jumpsRemaining(){
        // Calculate remaing hyperdrive fuel.
        var jumpsRemaining = 0;
        for (let item of this.inventory){
            if(item.isHyperdriveFuel) jumpsRemaining++;
        }
        return jumpsRemaining;
    }

    consumeHyperdriveFuel(){
        for (let item of this.inventory){
            if(item.isHyperdriveFuel) {
                item.consume();
                break;
            }
        }
    }
    
    jump(){
        if(this.jumpWasAborted) return;

        this.ftlJumpSound.play();
        game.camera.flash(0xFFFFFF, 500);
        
        // Systems
        var previousSystem = this.game.mapScreen.map.currentPath.shift();
        var currentSystem = this.game.mapScreen.map.currentPath.firstItem();
        if(currentSystem) currentSystem.arrive();
        
        // Time
        this.game.skipTime(rng.nextInt(6,36),'hours');             
        
        // We're there.
        if(this.game.mapScreen.map.currentPath.length==1){
            if(this.game.mapScreen.map.currentPath.firstItem() == currentSystem){
                this.game.mapScreen.map.currentPath = false;
                this.game.mapScreen.map.navigationDestination = null;
                
                game.time.events.add(1000, function(){
                    this.game.hud.hideFTLPanel();
                }, this);
            }
        }
        
        // Figure out where we should land
        var angleToSystemCenter = Phaser.Math.reverseAngle(Math.atan2(
            this.sprite.y - this.game.world.centerY,
            this.sprite.x - this.game.world.centerX
        ));
         // Radians
        var r = 5000;
        var landingX = this.sprite.x + r * Math.cos(angleToSystemCenter);
        var landingY = this.sprite.y + r * Math.sin(angleToSystemCenter);
                
        this.sprite.body.x = landingX;
        this.sprite.body.y = landingY;
        
        // Slow down
        var slowDownTween = this.game.add.tween(this.sprite.body).to({
            damping: .95,
        }, 2000, "Quart.easeOut", true)
        slowDownTween.onComplete.add(function(){
            var slowDownTween = this.game.add.tween(this.sprite.body).to({
                damping: 0,
            }, 1000, "Quart.easeOut", true)
        }, this);
        game.time.events.add(2000, function(){
            this.disengageHyperDrive();
        }, this);

        // Power down sound
        game.time.events.add(800, function(){
            this.jumpCompleteSound.play();
        }, this);

        // Cleanup
        this.game.player.exitDarkness();
        this.game.hud.updateFTLPanel();
        this.navigationMode = NAVIGATION_MODE.free;
        this.navigationIndex = -1;
        this.setNavigationTargetToCurrentNavigationTargetIndex();
   }
    
    disengageHyperDrive(){
        this.hyperDriveEngaged = false;
        this.hyperDriveTimer = game.time.events.remove(this.hyperDriveDelay);
    }

    // Venting
    ventAtmosphere(){
        var o2Density = (this.oxygenQuantity/this.oxygenMax)*.05;
        var o2Spread = (this.oxygenQuantity/this.oxygenMax)/2;
        this.ventData.alpha = { min: 0, max: .05 };
        this.ventData.vx = { min: -o2Spread, max: o2Spread };
        this.ventData.vy = { min: -o2Spread, max: o2Spread };
        
        var x = this.sprite.worldPosition.x + this.game.camera.x;
        var y = this.sprite.worldPosition.y + this.game.camera.y;
        
        this.atmosphereWell.position.x = x;
        this.atmosphereWell.position.y = y;        
        
        if(this.oxygenQuantity>0){
            this.atmosphereEmitter.emit(
                'atmosphere',
                x,
                y
            );
            this.oxygenQuantity--;
            
            if(this.oxygenQuantity<1000){
                if(this == this.game.player.ship && !this.O2Critical) {
                    this.game.hud.blinkingWarning("Oxygen Levels Critical");
                }
                this.O2Critical = true;
            }
            
        } else {
            this.asphyxiate();
        }
    }
    
    get o2Percent(){
        return this.oxygenQuantity/this.oxygenMax;
    }
    
    asphyxiate(){
        this.kill();
    }
    
    burn(){
        this.flamesEmitter.emit(
            'flames',
            this.sprite.worldPosition.x + this.game.camera.x,
            this.sprite.worldPosition.y + this.game.camera.y
        );        
    }

    // Damage
    inflictDamage(amount){
        super.inflictDamage(amount);

        if(this.healthPercentage<this.hullBreachAtHealthPercentage && !this.hullBreached){
            this.hullBreached = true;
            if(this == this.game.player.ship) {
                this.gasLeakSound.play();
                this.game.hud.showO2Panel();
                this.game.hud.blinkingWarning("Hull Breach - Venting Atmosphere");
            }
        }

    }

    // Sounds
    crash_sound(){
        var isPlayingAnySound = false;
        for (let sound of this.crashSounds)
            if(sound.isPlaying){
                isPlayingAnySound = true;
                break;
            }
        
        if(!isPlayingAnySound){
            this.crashSounds[this.game.rnd.integerInRange(0,this.crashSounds.length-1)].play();
        }               
    }
    crashSoft_sound(){
        var isPlayingAnySound = false;
        for (let sound of this.crashLightSounds)
            if(sound.isPlaying){
                isPlayingAnySound = true;
                break;
            }
        
        if(!isPlayingAnySound){
            this.crashLightSounds[this.game.rnd.integerInRange(0,this.crashLightSounds.length-1)].play();
        }       
    }
    crashThud_sound(){
        var isPlayingAnySound = false;
        for (let sound of this.crashThudSounds)
            if(sound.isPlaying){
                isPlayingAnySound = true;
                break;
            }
        
        if(!isPlayingAnySound){
            this.crashThudSounds[this.game.rnd.integerInRange(0,this.crashThudSounds.length-1)].play();
        }       
    }

    
    // Rendering
    update() {
        super.update(); 
        this.positionInfo();        
        this.navigate();        

        // Damage
        if(this.hullBreached){
            this.ventAtmosphere();
            if(this.healthPercentage>this.hullBreachAtHealthPercentage){
                this.hullBreached = false;
                if(this == this.game.player.ship) {
                    this.game.hud.hideO2Panel();
                }
            }
        }



        // Cargo

        // Hyperdrive
        if(this.hyperDriveEngaged) this.hyperDriveUpdate();
        
        // Docking
        if(this.specs.canBeDockedTo && this.sprite != this.game.player.ship.sprite){
            var a = this.dockingPort.worldPosition.x - this.game.player.ship.dockingConnector.worldPosition.x;
            var b = this.dockingPort.worldPosition.y - this.game.player.ship.dockingConnector.worldPosition.y;
            var d = Math.sqrt(a*a + b*b);
           
            // Rotation
            var r = Math.abs(Math.abs(this.sprite.angle - this.game.player.ship.sprite.angle) - 180); 

            if(d<15 && r<20){
                this.game.player.ship.okToDock = true;
                this.landingMessage.setText("Press D to Dock");
            } else {
                this.game.player.ship.okToDock = false;
                this.landingMessage.setText("Cleared to Dock");
            }
            
            // Update distance for info
            this.distanceToPlayer = this.game.physics.arcade.distanceBetween(
                this.sprite,
                this.game.player.sprite
            );

            this.showInfoIfNeeded();
        }

        if(this.isDocked || this.dockingInProgress){
            this.sprite.x += this.dockingTarget.sprite.deltaX;
            this.sprite.y += this.dockingTarget.sprite.deltaY;
        }

        // Finally, limit speed.
        this.limitSpeed();
    }   
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/engines/_engine.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*
Markov.coffee - Markov chains in CoffeeScript.
github.com/SyntaxColoring/Markov-Word-Generator

Released under the MIT license.

Copyright (c) 2013 Max Marrone

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
the Software, and to permit persons to whom the Software is furnished to do so,
subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
var Markov;

Markov = (function() {
  function Markov(sequences, n1, maxLength) {
    this.sequences = sequences != null ? sequences : [];
    this.n = n1 != null ? n1 : 2;
    this.maxLength = maxLength != null ? maxLength : 20;
  }

  Markov.prototype.generate = function() {
    var continuation, currentState, nextElement, result;
    result = [];
    currentState = (function(_this) {
      return function() {
        return result.slice(Math.max(0, result.length - _this.n), result.length);
      };
    })(this);
    continuation = (function(_this) {
      return function() {
        return _this["continue"](currentState());
      };
    })(this);
    while (result.length < this.maxLength && ((nextElement = continuation()) != null)) {
      result.push(nextElement);
    }
    return result;
  };

  Markov.prototype.ngrams = function() {
    var ngramsFromSequence;
    ngramsFromSequence = function(sequence, n) {
      var i, j, ref, results;
      if (n < 1 || n > sequence.length) {
        return [];
      } else {
        results = [];
        for (i = j = 0, ref = sequence.length - n; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
          results.push(sequence.slice(i, i + n));
        }
        return results;
      }
    };
    return this.sequences.reduce(((function(_this) {
      return function(a, b) {
        return a.concat(ngramsFromSequence(b, _this.n + 1));
      };
    })(this)), []);
  };

  Markov.prototype.tree = function(sequence) {
    var element, j, k, len, len1, ngram, ngrams, node, normalize, reduce, root;
    if (sequence == null) {
      sequence = [];
    }
    ngrams = this.ngrams();
    root = {
      continuations: {},
      count: ngrams.length,
      frequency: 1.0
    };
    for (j = 0, len = ngrams.length; j < len; j++) {
      ngram = ngrams[j];
      node = root;
      for (k = 0, len1 = ngram.length; k < len1; k++) {
        element = ngram[k];
        if (node.continuations[element] == null) {
          node.continuations[element] = {
            continuations: {},
            count: 0
          };
        }
        node = node.continuations[element];
        node.count++;
      }
    }
    normalize = function(node) {
      var child, childName, ref, results;
      ref = node.continuations;
      results = [];
      for (childName in ref) {
        child = ref[childName];
        child.frequency = child.count / node.count;
        results.push(normalize(child));
      }
      return results;
    };
    normalize(root);
    if (typeof sequence === "string") {
      sequence = sequence.split("");
    }
    reduce = function(node, element) {
      var ref;
      if (node != null) {
        return (ref = node.continuations[element]) != null ? ref : null;
      } else {
        return null;
      }
    };
    return sequence.reduce(reduce, root);
  };

  Markov.prototype["continue"] = function(sequence) {
    var continuationName, continuationNode, node, ref, sum, target;
    node = this.tree(sequence);
    if (node != null) {
      target = this.rng.next();
      sum = 0;
      ref = node.continuations;
      for (continuationName in ref) {
        continuationNode = ref[continuationName];
        sum += continuationNode.frequency;
        if (sum >= target) {
          return continuationName;
        }
      }
    }
    return null;
  };

  return Markov;

})();

if (typeof module !== "undefined" && module !== null) {
  module.exports = Markov;
} else {
  this.Markov = Markov;
}

// ---
// generated by coffee-script 1.9.2

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: lib/tombola.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Engine extends Equipment {
    constructor(game,options) {
        super(game,options);

        this.fuelConsumption = 1;
        this.thrust = 100;
        this.spoolUpSpeed = 1;
        this.spoolDownSpeed = .04;

        this.currentSpool = 0;
        this.isEngine = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','type','thrust','fuelConsumption'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Engine Type','Thrust','Fuel Consumption'];
    }

    set slot(slot){
        var slotAnchor = this.parentObject.specs.engineSlots[slot].anchor;
        
        // Setup Flames
        this.flames = this.parentObject.sprite.addChild(this.game.make.sprite(0, 0, 'blue_flame'));
        //this.flames.blendMode = PIXI.blendModes.ADD; // Some bug that makes the sidebar blink.
        this.flames.angle = this.parentObject.specs.engineSlots[slot].angle;
        this.flames.anchor.set(slotAnchor.x,slotAnchor.y);
    }

    accelerate(){
        if(this.currentSpool<=1){
            this.currentSpool = Math.min(this.currentSpool+this.spoolUpSpeed,1);
        }
        if(this.retro) {
            this.currentSpool = 1
        }        
    }

    deaccelerate(){
        if(!this.retro) {
            this.currentSpool = Math.max(this.currentSpool-this.spoolDownSpeed,0)
        } else {
            this.currentSpool = Math.max(this.currentSpool-.1,0)            
        }
    }

    fire(){
        this.accelerate();
    }
    
    shutdown(){
        this.deaccelerate();    
    }

    update(){
        this.flames.alpha = this.currentSpool;    
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/engines/basicEngine.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




//-------------------------------------------------------------------------------------------
//  TOMBOLA SETUP
//-------------------------------------------------------------------------------------------

function Tombola() {
}
var tombola = new Tombola();


//-------------------------------------------------------------------------------------------
//  RANGE ROLL
//-------------------------------------------------------------------------------------------

// Returns a random whole number between 'min' and 'max' //

Tombola.prototype.range = function(min,max) {
    return Math.round(min + (Math.random() * (max - min))); // int
};

// Returns a random float number between 'min' and 'max' //

Tombola.prototype.rangeFloat = function(min,max) {
    return min + (Math.random() * (max - min)); // float
};

// Returns an array populated with random whole numbers between 'min' and 'max' //

Tombola.prototype.rangeArray = function(min,max,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.range(min,max));
    }
    return a; // int array
};

// Returns an array populated with random float numbers between 'min' and 'max' //

Tombola.prototype.rangeFloatArray = function(min,max,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.range(min,max));
    }
    return a; // float array
};


//-------------------------------------------------------------------------------------------
//  DICE ROLL
//-------------------------------------------------------------------------------------------

// Returns a random whole number from simulated dice rolls //

Tombola.prototype.dice = function(die,sides) {
    die = Math.round(die);
    sides = Math.round(sides);
    var t = 0;
    for (var i=0; i<die; i++) {
        t += (1 + Math.floor(Math.random() * sides));
    }
    return t; // int
};

// Returns an array populated with random whole numbers from simulated dice rolls //

Tombola.prototype.diceArray = function(die,sides,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.dice(die,sides));
    }
    return a; // int array
};


//-------------------------------------------------------------------------------------------
//  FUDGE ROLL
//-------------------------------------------------------------------------------------------

// Returns a random whole positive or negative number from simulated fudge dice rolls //
// 'strength' of 1 and 'die' of 3 gives a possible range of -3 to 3 //

Tombola.prototype.fudge = function(die,strength) {
    die = Math.round(die);
    strength = Math.round(strength) || 1;
    var t = 0;
    for (var i=0; i<die; i++) {
        t += (-strength + Math.floor(Math.random() * ((strength * 2) + 1)));
    }
    return t; // int
};

// Returns a random float positive or negative number from simulated fudge dice rolls //
// 'strength' of 0.1 and 'die' of 3 gives a possible range of -0.3 to 0.3 //

Tombola.prototype.fudgeFloat = function(die,strength) {
    die = Math.round(die);
    strength = strength || 1;
    var t = 0;
    for (var i=0; i<die; i++) {
        t += (-strength + (Math.random() * (strength * 2)));
    }
    return t; // float
};

// Returns an array populated with random whole positive or negative numbers from simulated fudge dice rolls //

Tombola.prototype.fudgeArray = function(die,strength,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.fudge(die,strength));
    }
    return a; // int array
};

// Returns an array populated with random float positive or negative numbers from simulated fudge dice rolls //

Tombola.prototype.fudgeFloatArray = function(die,strength,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.fudgeFloat(die,strength));
    }
    return a; // float array
};

//-------------------------------------------------------------------------------------------
//  CHANCE ROLL
//-------------------------------------------------------------------------------------------

// Returns true or false the results of a chance roll //
// a 'chance' of 1 and 'possibility' of 5 means there's a 1 in 5 chance of returning true //

Tombola.prototype.chance = function(chance,possibility) {
    var n = Math.random() * possibility;
    return (n < chance); // bool
};

// Returns an array populated with true or false results from chance rolls //

Tombola.prototype.chanceArray = function(chance,possibility,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.chance(chance,possibility));
    }
    return a; // bool array
};


//-------------------------------------------------------------------------------------------
//  PERCENT ROLL
//-------------------------------------------------------------------------------------------

// Returns true or false the results of a percent roll //
// a 'percent' of 25 means there's a 25% chance of returning true //

Tombola.prototype.percent = function(percent) {
    var n = Math.random() * 100;
    return (n < percent); // bool
};

// Returns an array populated with true or false results from percent rolls //

Tombola.prototype.percentArray = function(percent,length) {
    var a = [];
    for (var i=0; i<length; i++) {
        a.push(this.percent(percent));
    }
    return a; // bool array
};


//-------------------------------------------------------------------------------------------
//  ITEM
//-------------------------------------------------------------------------------------------

// Returns a randomly selected item with equal probability //
// 'items' is an array of items to be chosen from //

Tombola.prototype.item = function(items) {
    var l = items.length;
    var n = Math.floor(Math.random() * l);
    return items[n]; // item
};


//-------------------------------------------------------------------------------------------
//  WEIGHTED NUMBER
//-------------------------------------------------------------------------------------------

// Returns a random whole number with a weighted probability //
// 'weights' is an array of probability weights, four weights would mean a number between 1 - 4 is generated //
// 'weights' of [20,10,10] will return a number between 1 and 3, with 1 being twice as likely an outcome as either 2 or 3 //

Tombola.prototype.weightedNumber = function(weights) {
    var l = weights.length;
    var totalWeight = 0;
    for (var i=0; i<l; i++) {
        totalWeight += weights[i];
    }
    var n = Math.random() * totalWeight;
    var w = 0;
    for (i=0; i<l; i++) {
        w += weights[i];
        if (n <= w) {
            return i+1; // int
        }
    }
};


//-------------------------------------------------------------------------------------------
//  WEIGHTED ITEM
//-------------------------------------------------------------------------------------------

// Returns a randomly selected item with a weighted probability //
// 'items' is an array of items to be chosen from //
// 'weights' is an array of probability weights, setting the probability of each item being selected e.g [5,20,1,0.1] //

Tombola.prototype.weightedItem = function(items,weights) {
    var l = items.length;
    var totalWeight = 0;
    for (var i=0; i<l; i++) {
        totalWeight += weights[i] || 0;
    }
    var n = Math.random() * totalWeight;
    var w = 0;
    for (i=0; i<l; i++) {
        w += weights[i] || 0;
        if (n <= w) {
            return items[i]; // item
        }
    }
};


//-------------------------------------------------------------------------------------------
//  WEIGHTED FUNCTION
//-------------------------------------------------------------------------------------------

// Calls a randomly selected function with a weighted probability //
// 'functions' is an array of functions to be chosen from //
// 'weights' is an array of probability weights, setting the probability of each function being selected e.g [5,20,1,0.1] //

Tombola.prototype.weightedFunction = function(functions,weights) {
    var l = functions.length;
    var totalWeight = 0;
    for (var i=0; i<l; i++) {
        totalWeight += weights[i] || 0;
    }
    var n = Math.random() * totalWeight;
    var w = 0;
    for (i=0; i<l; i++) {
        w += weights[i] || 0;
        if (n <= w) {
            functions[i](); // function call
            break;
        }
    }
};


//-------------------------------------------------------------------------------------------
//  CLUSTER
//-------------------------------------------------------------------------------------------

// Returns an array of whole numbers which are randomly clustered within a min/max range //
// an evenly distributed cluster width is set with 'spread' //

Tombola.prototype.cluster = function(quantity,min,max,spread) {
    var c = this.range(min,max);
    var a = [];
    for (var i=0; i<quantity; i++) {
        a.push(c + this.range(-spread,spread));
    }
    return a; // int array
};

// Returns an array of whole numbers which are randomly clustered within a min/max range //
// uneven cluster width is set with 'die' and 'strength' (die x strength = max possible width) //
// the distribution is more weighted around the center using fudge rolls, more die = greater center weight //

Tombola.prototype.clusterFudge = function(quantity,min,max,die,strength) {
    strength = strength || 1;
    var c = this.range(min,max);
    var a = [];
    for (var i=0; i<quantity; i++) {
        a.push(c + this.fudge(die,strength));
    }
    return a; // int array
};


//-------------------------------------------------------------------------------------------
//  PERSISTENT DECK
//-------------------------------------------------------------------------------------------

// Creates a deck (hat/tombola) which can be drawn from, added to or shuffled //
// 'contents' is an array of items to populate the deck with //


Tombola.prototype.deck = function(contents) {
    return new RandomDeck(contents);
};


function RandomDeck(contents) {
    this.contents = contents || [];
}

// Returns an item from the deck, randomly or at a given index, and removes that item from the deck //
RandomDeck.prototype.draw = function(index) {
    if (this.contents.length>0) {
        index = index || Math.floor(Math.random() * this.contents.length);
        var item = this.contents[index];
        this.contents.splice(index,1);
        return item;
    } else {
        return null;
    }
};

// Returns an item from the deck, randomly or at a given index, the item stays in the deck //
RandomDeck.prototype.look = function(index) {
    if (this.contents.length>0) {
        index = index || Math.floor(Math.random() * this.contents.length);
        return this.contents[index];
    } else {
        return null;
    }
};

// Adds an item to the deck, randomly or at a given index //
RandomDeck.prototype.insert = function(item, index) {
    index = index || Math.round(Math.random() * this.contents.length);
    this.contents.splice(index,0,item);
};

// Shuffles the deck order //
RandomDeck.prototype.shuffle = function() {
    var a = [];
    var l = this.contents.length;
    for (var i=0; i<l; i++) {
        a.push(this.draw());
    }
    this.contents = a;
};

// Returns an array of all contents of the deck //
RandomDeck.prototype.show = function() {
    return this.contents;
};


//-------------------------------------------------------------------------------------------
//  WEIGHTED DECK
//-------------------------------------------------------------------------------------------

// Creates a deck (hat/tombola) which can be drawn from, added to or shuffled //
// 'contents' is an array of items to populate the deck with, 'weights' add weighting to
// the chance, and 'instances' allows for multiple instances of each object. //


Tombola.prototype.weightedDeck = function(contents, options) {
    return new WeightedDeck(contents, options);
};

function WeightedDeck(contents, options) {
    options = options || {};
    this.contents = contents || [];
    this.weights = options.weights || [];
    this.instances = options.instances || [];

    var i;
    if (this.weights.length===0) {
        for (i=0; i<contents.length; i++) {
            this.weights.push(1);
        }
    }
    if (this.instances.length===0) {
        for (i=0; i<contents.length; i++) {
            this.instances.push(1);
        }
    }
}

// Returns an item from the deck, randomly or at a given index, and removes that item from the deck //
WeightedDeck.prototype.draw = function(index) {
    if (this.contents.length>0) {

        // no given index, do random weighting //
        var l = this.contents.length;
        if (!(index >=0 && index<l)) {
            var totalWeight = 0;
            for (var i=0; i<l; i++) {
                totalWeight += this.weights[i] || 0;
            }
            var n = Math.random() * totalWeight;
            var w = 0;
            for (i=0; i<l; i++) {
                w += this.weights[i] || 0;
                if (n <= w) {
                    index = i;
                    break;
                }
            }
        }
        var item = this.contents[index];

        // remove an instance //
        this.instances[index] -= 1;
        if (this.instances[index]<1) {
            this.contents.splice(index,1);
            this.weights.splice(index,1);
            this.instances.splice(index,1);
        }

        return item;
    } else {
        return null;
    }
};

// Returns an item from the deck, randomly or at a given index, the item stays in the deck //
WeightedDeck.prototype.look = function(index) {
    if (this.contents.length>0) {

        // no given index, do random weighting //
        var l = this.contents.length;
        if (!(index >=0 && index<l)) {
            var totalWeight = 0;
            for (var i=0; i<l; i++) {
                totalWeight += this.weights[i] || 0;
            }
            var n = Math.random() * totalWeight;
            var w = 0;
            for (i=0; i<l; i++) {
                w += this.weights[i] || 0;
                if (n <= w) {
                    index = i;
                    break;
                }
            }
        }
        return this.contents[index];
    } else {
        return null;
    }
};

// Adds an item to the deck, randomly or at a given index //
WeightedDeck.prototype.insert = function(item, options) {
    options = options || {};
    var index = options.index || Math.round(Math.random() * this.contents.length);
    var weight = options.weight || 1;
    var instances = options.instances || 1;
    this.contents.splice(index,0,item);
    this.weights.splice(index,0,weight);
    this.instances.splice(index,0,instances);
};

// Shuffles the deck order //
WeightedDeck.prototype.shuffle = function() {
    var a = [];
    var b = [];
    var c = [];
    var l = this.contents.length;
    for (var i=0; i<l; i++) {
        var index = Math.floor(Math.random() * this.contents.length);
        a.push(this.contents[index]);
        b.push(this.weights[index]);
        c.push(this.instances[index]);
        this.contents.splice(index,1);
        this.weights.splice(index,1);
        this.instances.splice(index,1);
    }
    this.contents = a;
    this.weights = b;
    this.instances = c;
};

// Returns an array of all contents of the deck //
WeightedDeck.prototype.show = function() {
    return this.contents;
};


// npm export //
if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {
    module.exports = Tombola;
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/_names.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class BasicEngine extends Engine {
    constructor(game,options) {
        super(game,options);

        this.thrust = options.data.thrust;
        this.maxSpeed = options.data.maxSpeed;
        this.spoolUpSpeed = options.data.spoolUpSpeed;
        this.spoolDownSpeed = options.data.spoolDownSpeed;
        this.fuelConsumption = options.data.fuelConsumption;

        this.sound = game.add.audio('basic-engine');
    }
    accelerate(){
        super.accelerate();
        if(!this.sound.isPlaying) this.sound.play();
        
        this.sound.volume = this.flames.alpha;
    }
    deaccelerate(){
        super.deaccelerate();
        this.sound.volume = this.flames.alpha;
        
        if(this.sound.volume==0 && this.sound.isPlaying) this.sound.stop();
    }

}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/engines/smallEngine.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Names {
    constructor(rng) {
        this.rng = rng;
    }
    
    wordGenerator(){

    }
    static parseName(rawName) {
        return Names.capitalize(rawName.split(' ')[0].toLowerCase())
    }
    
    static parseWords(rawInput) {
        return rawInput.toLowerCase().replace(/[^a-z\s]/g, "").split(/\s/g);
    }

    static capitalize(string){
        return string[0].toUpperCase() + string.slice(1);
    }
    
    static star(){
        var name;

        var markovChain = new Markov;
        markovChain.n = rng.nextInt(5,5);
        markovChain.sequences = Names.parseWords(NAMES_STAR.join('\n'));
        markovChain.rng = rng;        
        
        if(rng.next()>.9){
            markovChain.maxLength = rng.nextInt(3,6);
            var word1 = Names.capitalize(markovChain.generate().join(""))
            markovChain.maxLength = rng.nextInt(4,14);
            var word2 = Names.capitalize(markovChain.generate().join(""))
            name = `${word1} ${word2}`;            
        } else {
            markovChain.maxLength = rng.nextInt(3,14);
            name = Names.capitalize(markovChain.generate().join(""));
        }

        if(rng.next()>.4){
            var greekPrefix = GREEK_ALPHABET[rng.nextInt(0, GREEK_ALPHABET.length-1)]
            name = `${greekPrefix} ${name}`;
        }
        
        return name;
    }

    static outerRimStar(){
        var designation = OUTER_RIM_DESIGNATIONS[rng.nextInt(0, OUTER_RIM_DESIGNATIONS.length-1)]
        var number = rng.nextInt(100,999);
        return `${designation}-${number}`
    }

    static proper(){
        return Names.parseName(NAMES_PROPER[rng.nextInt(0, NAMES_PROPER.length-1)]);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/_constants.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class SmallEngine extends Engine {
    constructor(game,options) {
        super(game,options);

        this.name = 'Small Engine';
        this.key = 'small_engine';

        this.thrust = 130;
        this.maxSpeed = 150;
        this.spoolUpSpeed =.08;
        this.spoolDownSpeed = .04;
        this.fuelConsumption = .8;

        this.flames = this.parentObject.sprite.addChild(this.game.make.sprite(0, 0, 'blue_flame'));
        this.flames.scale.set(.6);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/engines/_thruster.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


//alert("5678".toHHMMSS());
function TIME_FORMAT(time) {
    var sec_num = parseInt(time, 10); // don't forget the second param
    var hours   = Math.floor(sec_num / 3600);
    var minutes = Math.floor((sec_num - (hours * 3600)) / 60);
    var seconds = sec_num - (hours * 3600) - (minutes * 60);

    if (hours   < 10) {hours   = "0"+hours;}
    if (minutes < 10) {minutes = "0"+minutes;}
    if (seconds < 10) {seconds = "0"+seconds;}
    
    if(time==Infinity || isNaN(time)){
        return '--';
    } else {
        return minutes+':'+seconds;
    }
}

FONT = 'Fira Code';

DISTANCE_FACTOR_PLANETS = 1000;
DISTANCE_FACTOR_SHIPS = .2;
PIXEL_TO_LIGHTYEAR = .1;

AMBIENT_VOLUME = .95;

// Convert from degrees to radians.
Math.radians = function(degrees) {
	return degrees * Math.PI / 180;
}

// Convert from radians to degrees.
Math.degrees = function(radians) {
	return radians * 180 / Math.PI;
}

Array.prototype.lastItem = function() {
    return this[this.length-1];
};

Array.prototype.firstItem = function() {
    return this[0];
};

Array.prototype.clean = function(deleteValue) {
  for (var i = 0; i < this.length; i++) {
    if (this[i] == deleteValue) {         
      this.splice(i, 1);
      i--;
    }
  }
  return this;
};

Number.prototype.between = function(a, b, inclusive) {
  var min = Math.min.apply(Math, [a, b]),
    max = Math.max.apply(Math, [a, b]);
  return inclusive ? this >= min && this <= max : this > min && this < max;
};

Number.prototype.clamp = function(min, max) {
  return Math.min(Math.max(this, min), max);
};

function isEven(n) {
   return n % 2 == 0;
}

function isOdd(n) {
   return Math.abs(n % 2) == 1;
}

function decimalToHexString(number) {
    if (number < 0)
    {
        number = 0xFFFFFFFF + number + 1;
    }

    return number.toString(16).toUpperCase();
}

function extend(a, b){
    for(var key in b)
        if(b.hasOwnProperty(key))
            a[key] = b[key];
    return a;
}


const P2BODY_DEBUG = false;

const DEG_IN_RAD_90 = 1.5708;

const CONTROL_MODE = {
    gui : 'gui',
    play: 'play',
    landed: 'landed',
    exchange: 'exchange',
}

const SCREEN_TRANSITION_STYLE = {
    none : 'none',
    fromBottom : 'fromBottom',
    fromRight : 'fromRight',
}

const CREDIT_PREFIX = {
    short : '$',
    long: 'Credits ',
}

const BUTTON_STYLE = {
    simple : 'simple',
    twoLine : 'twoLine',
}

const NAVIGATION_MODE = {
    free : 'free',
    target : 'target',
    stationKeeping : 'stationKeeping',
    followWaypoints : 'followWaypoints',
}

const CARGO_STORAGE_CLASS = {
    bulk : 'bulk',
    passengers : 'passengers',
    gas : 'gas',
    liquid : 'liquid',
    equipment : 'equipment',
}

const CARGO_STORAGE_CLASS_NAMES = {
    bulk : 'Bulk',
    passengers : 'Passenger',
    gas : 'Gas',
    liquid : 'Liquid',
    equipment : 'Equipment',
}


const ASTEROID_FIELD_SIZE = {
    small : 1400,
    medium : 1800,
    large: 2200,
    huge: 4000
}

const PLANET_SERVICES = {
    refinery : 'refinery',
    fuelDepot : 'fuelDepot',
    shipyard : 'shipyard',
    market : 'market',
    tavern : 'tavern',
    casino : 'casino',
    passengerTerminal : 'passengerTerminal',
}

const PLANET_SERVICES_TITLE = {
    refinery : 'Refinery',
    fuelDepot : 'Fuel Depot',
    shipyard : 'Shipyard',
    market : 'Marketplace',
    tavern : 'Tavern',
    casino : 'Clubhouse',
    passengerTerminal : 'Starport',
}

const PLANET_SERVICES_DESC = {
    refinery : 'Process raw materials',
    fuelDepot : 'Refuel and recharge',
    shipyard : 'Trade and repair ships',
    market : 'Buy, sell & trade goods',
    tavern : 'Drink with the locals',
    casino : 'Members only gambling',
    passengerTerminal : 'Find transport jobs',
}

const PLANET_SERVICES_REQUIREMENTS = [
    {
        service : 'refinery',
        requirement : 'industry',
        level : 6,
    },
    {
        service : 'fuelDepot',
        requirement : 'industry',
        level : 3,
    },
    {
        service : 'shipyard',
        requirement : 'science',
        level : 7,
    },
    {
        service : 'market',
        requirement : 'trade',
        level : 5,
    },
    {
        service : 'tavern',
        requirement : 'culture',
        level : 5,
    },
    {
        service : 'casino',
        requirement : 'culture',
        level : 8,
    },
    {
        service : 'passengerTerminal',
        requirement : 'trade',
        level : 7,
    }
];

PLANET_SPECIALIZATIONS = {
    culture : ['peaceful','tourism','military'],
    industry : ['manufacturing','agriculture'],
    science : ['mining','technology'],
    trade : ['luxury','government'],
}

const WEAPON_TYPES = {
    miningLaser :    'miningLaser',
    kinetic :  'kinetic',
    blaster :  'blaster',
    missleLauncher :  'missleLauncher',
}

const ENGINE_TYPES = {
    rocket :    'rocket',
    reactionControlThruster :  'reactionControlThruster',
}

const RARITY = {
    common :    'common',
    uncommon :  'uncommon',
    rare :      'rare',
    exquisite :      'exquisite',
    exotic : 'exotic',
}

const RARITY_NAMES = {
    common :    'Common',
    uncommon :  'Uncommon',
    rare :      'Rare',
    exquisite : 'Exquisite',
    exotic : 'Exotic',
}

const RARITY_COLOR = {
    common :    0xFFFFFF,
    uncommon :  0x3DD20B,
    rare :      0x2F78FF,
    exquisite : 0x9132C8,
    exotic : 0xCF4747,
}

const RARITY_INDEX = {
    common :    1,
    uncommon :  2,
    rare :      3,
    exquisite : 4,
    exotic : 5,
}

const RARITY_MINING_CHANCE = {
    common :    1,
    uncommon :  .1,
    rare :      .01,
    exquisite :      .001,
    exotic : .0001,
}

const INVENTORY_LIST_CURSOR_STYLE = {
    none : 'none',
    left : 'left',
    right : 'right',
}

const STELLAR_TYPES = [
{
    class : 'O5',
    color : '#9db4ff',
},
{
    class : 'B1',
    color : '#a2b9ff',
},
{
    class : 'B3',
    color : '#a7bcff',
},
{
    class : 'B5',
    color : '#aabfff',
},
{
    class : 'B8',
    color : '#afc3ff',
},
{
    class : 'A1',
    color : '#baccff',
},
{
    class : 'A3',
    color : '#c0d1ff',
},
{
    class : 'A5',
    color : '#cad8ff',
},
{
    class : 'F0',
    color : '#e4e8ff',
},
{
    class : 'F2',
    color : '#edeeff',
},
{
    class : 'F5',
    color : '#fbf8ff',
},
{
    class : 'F8',
    color : '#fff9f9',
},
{
    class : 'G2',
    color : '#fff5ec',
},
{
    class : 'G5',
    color : '#fff4e8',
},
{
    class : 'G8',
    color : '#fff1df',
},
{
    class : 'K0',
    color : '#ffebd1',
},
{
    class : 'K4',
    color : '#ffd7ae',
},
{
    class : 'K7',
    color : '#ffc690',
},
{
    class : 'M2',
    color : '#ffbe7f',
},
{
    class : 'M4',
    color : '#ffbb7b',
},
{
    class : 'M6',
    color : '#ffbb7b',
}    
]

const GREEK_ALPHABET = [
    'Alpha',
    'Beta',
    'Gamma',
    'Delta',
    'Epsilon',
    'Zeta',
    'Eta',
    'Theta',
    'Omicron',
    'Pi',
    'Sigma',
    'Tau',
    'Upsilon',
    'Omega',
]

const OUTER_RIM_DESIGNATIONS = [
    'NCG',
    'HD',
    'NCC',
    'GH',
    'F',
]

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/_inventoryObject.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Thruster extends Engine {
    constructor(game,options) {
        super(game,options);
        this.game.register(this);

        this.engineType = ENGINE_TYPES.reactionControlThruster;
        this.thrust = 0;
        this.fuelConsumption = .1;

        this.spoolUpSpeed = .3;
        this.spoolDownSpeed = .6;

        this.layout = options.layout;

        this.flames = this.parentObject.sprite.addChild(this.game.make.sprite(0, 0, 'rcs_flame'));
        this.flames.x = this.layout.x-this.parentObject.sprite.width/2;
        this.flames.y = this.layout.y-this.parentObject.sprite.height/2;
        this.flames.angle = this.layout.angle;
        this.flames.scale.set(.9);
        this.flames.anchor.set(0,0);

        var smoke = {
            image: 'smoke-trail',
            lifespan: { min: 150, max: 400 },
            scale: { value: { min: .03, max: .1 } },
            vx: { value: { min: 0, max: 0 } },
            vy: { value: { min: 0, max: 0 }, delta: .2, control: [ { x: 0, y: 1 }, { x: 0, y: 0 } ] },
            alpha: { value: .3, control :[ { x: 0, y: 0 }, { x: 0.3, y: 1 }, { x: 1, y: 0 }] },
            rotation: { value: 0, delta: { min: -2.0, max: 2.0 } }
        };

        this.emitter = this.game.ps.createEmitter(); 
        this.emitter.addToWorld();

        this.game.ps.addData('smoke', smoke);
        this.soundCountdown = 10;
    }
    accelerate(){
        super.accelerate();
        this.puff();
    }
    deaccelerate(){
        super.deaccelerate();
    }    
    puff(){
        var px = this.flames.worldPosition.x + game.camera.x;
        var py = this.flames.worldPosition.y + game.camera.y;

        this.emitter.emit('smoke', px, py, { total: 1 });
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/pickup.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


// Things you can pickup and sell.
class InventoryObject {
    constructor(game,options) {
        this.game = game;
        
        this.name = 'Unknown Object';
        this.baseValue = 0;
        this.type = 'Unknown'
        this.mass = 0;
        this.rarity = RARITY.common;

        this.infoFields = ['baseValue','mass','rarity','storageClass'];
        this.infoFieldLabels = ['Value','Weight','Rarity','Container'];

        if(options.data) this.initWithData(options.data);
    }
    
    initWithData(data){
        for(var prop in data) this[prop] = data[prop]
    }

    static make(key,game){
        var data = ITEMS.filter(function(e) {
            return e.key == key;
        })[0];
                
        if(!data) return false; // No Key found
        
        if(data._class){
            // Specific Subclass
            return eval("new " + data._class + "(game,{data : data})");
        } else {
            // Generic
            return new InventoryObject(game,{data:data});
        }        
    }

    get buyValue(){
        if(this.containedIn!=undefined){
            return Math.round(this.baseValue * this.containedIn.itemMarkup);
        } else {
            return this.baseValue;
        }
    }

    get readableType(){
        if(this.rarity == RARITY.common){
            return this.type;
        } else {
            return `${RARITY_NAMES[this.rarity]} ${this.type}`
        }
    }

    get readableMass(){
        return `${numeral(this.mass).format('0,0')} kg`
    }
    
    remove(){
        this.parentObject.removeItemFromInventory(this);
    }    
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/_gameObject.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Pickup extends GameObject {
    constructor(game,group,x,y) {
        super(game);
     
        this.group = group        
        this.magneticDistance = 150;    
    }

    pickedUpBy(object){
        this.destroy();
        return object.collectNumberOfItems(1,this.contents);
    }

    processCollision(pickup,object){
        this.pickedUpBy(this.game.player.ship)
    }
            
    kill(){
        var fadeOut = this.game.add.tween(this.sprite).to( { alpha: 0 }, 2000, "Quart.easeIn", true);
        fadeOut.onComplete.add(function(){
            this.destroy();            
        }, this);
    }
           
    // Rendering
    update() {
        super.update();

        if(this.alive){
            var hits = this.game.physics.p2.hitTest(this.sprite.position);
            for (let hit of hits) {
                var target = hit.parent.sprite.parentObject;                
                if(target.canPickThingsUp) this.pickedUpBy(target);                
            }
        }
    }
    
    
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/flake.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class GameObject {
    constructor(game) {
        this._name = 'Unknown Object';
        this.description = '';

        this.game = game;
        this.game.register(this);
    
        this.showInfoDistance = 200;
        this.canNavigateTo = false;
        this.navigationIndex = this.game.gameObjects.length;
        
        // Basics
        this.health = 0;
        this.alive = true;
        this.isInvinsible = false;
        this._targeted = false;

        // Damage Managment        
        this.damageAccumulating = false;
        this.damageAccumulationAmount = 0;        
    
        // Item Managment
        this.itemMarkup = 1;
        this.freeSpace = {};
        this.inventory = [];
        this.itemsAccumulating = false;
        this.itemsAccumulator = [];     

        this.dingSound = game.add.audio('pickup-common-1');

        this.rng = this.game.rng;
    }
    
    setupSprite(sprite){
        this.maxHealth = this.health;
    }
    
    // Targeting
    set targeted(targeted){
        this._targeted = targeted;
        
        if(targeted){
            this.showReticle();
        } else {
            this.hideReticle();
        }

    }

    get targeted(){
        return this._targeted;
    }

    showReticle(){
        
    }
    
    hideReticle(){
        
    }

    
    // Damage
    inflictDamage(amount){
        if(!this.isInvinsible){            
            if(!this.damageAccumulating){
                this.damageAccumulating = true;
                this.damageAccumulationAmount +=amount;
                setTimeout(function(){
                    this.damageAccumulating = false;
                    this.showDamage(this.damageAccumulationAmount);
                    this.damageAccumulationAmount = 0;
                }.bind(this), 250)
            } else {
                this.damageAccumulationAmount +=amount;                
            }
            
            if(this.health>0){
                this.health -= amount;
            } else if(this.health<=0 && this.alive){
                this.kill();
            }        
        }
    }
    
    get healthPercentage(){
        return this.health/this.maxHealth;
    }
        
    showDamage(amount){
        var x = this.sprite.x + game.rnd.integerInRange(-this.sprite.width/5, this.sprite.width/5);

        var damageText = this.game.add.text(
            x,
            this.sprite.y, 
            Math.round(amount), 
            { font: `18px ${FONT}`, fill: "#eeed00", align: 'center' }, 
        );
        damageText.anchor.x = 0.5;
        damageText.alpha = 0;
                
        var fadeIn = this.game.add.tween(damageText).to( { alpha: 1 }, 200, "Quart.easeOut", false);
    	var moveUp = this.game.add.tween(damageText).to( { y: '-30' }, 800, "Quart.easeOut", true);
        var fadeOut = this.game.add.tween(damageText).to( { alpha: 0 }, 300, "Quart.easeOut", false, 150);        
    
        fadeIn.chain(fadeOut);
        fadeIn.start();

        game.time.events.add(Phaser.Timer.SECOND * 2, this.destroyObject, damageText);
    }
    
    hit(bullet){
        // Usually specific per object.
    }
    
    // Items
    collectNumberOfItems(amount,item){
        if(this.addItemsToInventory(amount,item)){
            if(!this.itemsAccumulating){
                this.itemsAccumulating = true;
                this.itemsAccumulator[item.name] = { item: item, amount: amount };
                
                setTimeout(function(){
                    this.itemsAccumulating = false;
                    this.showItemsCollected(this.itemsAccumulator);
                    this.itemsAccumulator = [];
                }.bind(this), 500)
            } else {
                if(this.itemsAccumulator[item.name]==undefined){
                    this.itemsAccumulator[item.name] = { item: item, amount: amount };
                } else {
                    this.itemsAccumulator[item.name]['amount'] +=amount;                
                }
            }
            return true;
        } else {
            return false;
        }
    }
        
    showItemsCollected(items){
        var context = this;
        Object.keys(items).forEach(function(key,index) {
            var verticalSpacing = 18;
            var itemGroup = items[key];
            var itemMessage = `+${itemGroup.amount} ${itemGroup.item.name}`;

            var itemText = this.game.add.text(
                this.sprite.x,
                this.sprite.y-(verticalSpacing*index), 
                itemMessage, 
                { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'center' }, 
            );
            itemText.stroke = '#000000';
            itemText.strokeThickness = 3;
            itemText.tint = RARITY_COLOR[itemGroup.item.rarity];
        
            var fadeIn = this.game.add.tween(itemText).to( { alpha: 1 }, 300, "Quart.easeOut", false);
        	var moveUp = this.game.add.tween(itemText).to( { y: '-30' }, 300, "Quart.easeOut", true);
            var fadeOut = this.game.add.tween(itemText).to( { alpha: 0 }, 300, "Quart.easeOut", false, 1000);        
    
            fadeIn.chain(fadeOut);
            fadeIn.start();

            game.time.events.add(Phaser.Timer.SECOND * 2, this.destroyObject, itemText);
        }.bind(this));
        
        this.dingSound.play();
    }

    // Inventory
    usedSpaceForStorageClass(storageClass){
        return numeral(this.specs.storage[storageClass]-this.freeSpace[storageClass]).format('0a')
    }

    freeSpaceForStorageClass(storageClass){
        return numeral(this.freeSpace[storageClass]).format('0a')
    }

    maxSpaceForStorageClass(storageClass){
        return numeral(this.specs.storage[storageClass]).format('0a')        
    }

    calculateFreeSpaceForStorageClass(storageClass){
        return this.freeSpace[storageClass];
    }
    
    hasEnoughSpaceForItemOfStorageClassWithMass(storageClass,mass){
        if(this.calculateFreeSpaceForStorageClass(storageClass) >= mass){
            return true;
        } else {
            return false;
        }
    }
    
    addItemsToInventory(amount,item){        
        for (var i = 0; i < amount; i++) { 
            if(this.hasEnoughSpaceForItemOfStorageClassWithMass(item.storageClass,item.mass)){
                item.containedIn = this;
                
                this.inventory.push(item);
                this.freeSpace[item.storageClass] -= item.mass;
                return true;
            } else {
                this.game.hud.message('Not Enough Cargo Space');
                return false;
            }
        }
    }

    removeItemsFromInventory(items){
        var removedItems = [];
        for (let item of items) {
            removedItems.push(item);
            this.removeItemFromInventory(item);
        }
        return removedItems;
    }

    removeItemFromInventory(item){
        var index = this.inventory.indexOf(item);
        if (index > -1) {
            this.inventory.splice(index, 1);
        }
        return true;
    }

    // Cargo
    emptyCargoHold(){
        this.inventory = [];

        this.freeSpace[CARGO_STORAGE_CLASS.bulk] = this.specs.storage.bulk;
        this.freeSpace[CARGO_STORAGE_CLASS.passengers] = this.specs.storage.passengers;
        this.freeSpace[CARGO_STORAGE_CLASS.gas] = this.specs.storage.gas;
        this.freeSpace[CARGO_STORAGE_CLASS.liquid] = this.specs.storage.liquid;
        this.freeSpace[CARGO_STORAGE_CLASS.equipment] = this.specs.storage.equipment;
    }
    
    // Lifecycle
    kill(){
        this.alive = false;
        this.game.unregister(this);        

        if(this.sprite!=undefined){
            //this.sprite.body.kill();
            this.sprite.kill();
        }
    }

    destroy(){
        this.game.unregister(this);        
        if(this.sprite!=undefined){
            this.sprite.destroy();
        }
        delete this;
    }

    destroyEmitter(){
        debugger;
        this.destroy();        
    } 

    destroyObject(){
        this.destroy();        
    } 

    // Misc
    get name(){ return this._name; }
    set name(name){
        this._name = name;
    }
    
    get speed(){
        var body = this.sprite.body
        var vx, vy;
        
        vx = body.data.velocity[0];
        vy = body.data.velocity[1];
        
        return vx * vx + vy * vy;
    }
    
    
    // Hashing and whatnot
    get hash(){
        var fullHash = Math.abs(CryptoJS.MD5(this._seed + this.name).words[0]);
        var hashString = fullHash.toString().slice(0,5);
        return hashString;
    }

    determineItemFromArray(array){
        return array[this.rng.nextInt(0, array.length-1)];
    }

    determineFloatBetween(min,max){
        return this.rng.next(min, max);
    }

    determineIntegerBetween(min,max){
        return this.rng.nextInt(min, max);
    }

    determinePercent(){
        return this.rng.next();
    }
    
    cleanup(){
        
    }

    update(){
        this.game.counter++;
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/systems/_galaxy.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class FlakePickup extends Pickup {
    constructor(game,group,x,y) {
        super(game);
     
        this.group = group

        // Basic Physics
        this.sprite = this.group.create(x,y,'asteroid-flake-'+game.rnd.integerInRange(1,3))
        this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
        this.sprite.body.bounce.setTo(1, 1);
        this.sprite.body.collideWorldBounds = true;

        // Flake
        this.lifespan = game.rnd.realInRange(30,60);
        this.game.time.events.add(Phaser.Timer.SECOND * this.lifespan, this.kill, this);
        this.sprite.body.velocity.setTo(game.rnd.integerInRange(-20, 20),game.rnd.integerInRange(-20, 20));
        this.sprite.body.mass = 3;
        this.sprite.body.setSize(30, 30, 6, 6);
        this.sprite.body.checkCollision.up = false;
        this.sprite.body.checkCollision.down = false;
        this.sprite.body.checkCollision.left = false;
        this.sprite.body.checkCollision.right = false;
        this.roationSpeed = game.rnd.integerInRange(-50,50);
        this.sprite.anchor.set(0.5);

        var scale = game.rnd.realInRange(.5,1.25)
        this.sprite.scale.setTo(scale, scale);
        
        // Item
        var chance = game.rnd.realInRange(0,1);
        if(chance<RARITY_MINING_CHANCE.rare){
            this.contents = InventoryObject.make('raw_paladium',this.game);            
        } else if(chance<RARITY_MINING_CHANCE.uncommon){
            this.contents = InventoryObject.make('meteoric_iron',this.game);            
        } else {
            this.contents = InventoryObject.make('asteroid_flake',this.game);            
        }
    }

    processCollision(pickup,player){
        super.processCollision(pickup,player);
    }
        
    update() {
        super.update();
        // Spin
        if(this.sprite.alive){
            this.sprite.body.angularVelocity = this.roationSpeed;
    
            var distance = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite);
            if(distance<this.magneticDistance){
                this.game.physics.arcade.moveToObject(this.sprite, this.game.player.sprite, 100)
            }            
        }
    }
    
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/iceFlake.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Galaxy extends GameObject{
    constructor(game) {
        super(game);

        this.name = Names.star();

        this.settings = {
            starsAmount : 50,
            mapWidth : 3000,
            mapHeight : 3000,
        }    
    }
    
    build(){
        this.starSystems = [];
        for (var i = 0; i < this.settings.starsAmount; i++) { 
            var system = new StarSystem(this.game);
            this.starSystems.push(system);
        }
    }
    
    get closestSystemToCenter() {
        return _.sortBy(this.starSystems,'distanceFromGalacticCenter').firstItem();
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/systems/_system.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class IceFlakePickup extends Pickup {
    constructor(game,group,x,y) {
        super(game);
     
        this.group = group

        // Basic Physics
        this.sprite = this.group.create(x,y,'ice-small-'+game.rnd.integerInRange(1,5))
        this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
        this.sprite.body.bounce.setTo(1, 1);
        this.sprite.body.collideWorldBounds = true;

        // Flake
        this.lifespan = game.rnd.realInRange(30,60);
        this.game.time.events.add(Phaser.Timer.SECOND * this.lifespan, this.kill, this);
        this.sprite.body.velocity.setTo(game.rnd.integerInRange(-20, 20),game.rnd.integerInRange(-20, 20));
        this.sprite.body.mass = 2;
        this.sprite.body.setSize(16, 16, 6, 6);
        this.sprite.body.checkCollision.up = false;
        this.sprite.body.checkCollision.down = false;
        this.sprite.body.checkCollision.left = false;
        this.sprite.body.checkCollision.right = false;
        this.roationSpeed = game.rnd.integerInRange(-50,50);
        this.sprite.anchor.set(0.5);

        var scale = game.rnd.realInRange(.3,.6)
        this.sprite.scale.setTo(scale, scale);
        
        // Item
        var chance = game.rnd.realInRange(0,1);
        if(chance<RARITY_MINING_CHANCE.rare){
            this.contents = InventoryObject.make('volatile_compounds',this.game);            
        } else if(chance<RARITY_MINING_CHANCE.uncommon){
            this.contents = InventoryObject.make('ionized_gas',this.game);            
        } else {
            this.contents = InventoryObject.make('space_ice',this.game);            
        }
    }

    processCollision(pickup,player){
        super.processCollision(pickup,player);
    }
        
    update() {
        super.update();
        // Spin
        if(this.sprite.alive){
            this.sprite.body.angularVelocity = this.roationSpeed;
    
            var distance = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite);
            if(distance<this.magneticDistance){
                this.game.physics.arcade.moveToObject(this.sprite, this.game.player.sprite, 100)
            }            
        }
    }
    
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/asteroid.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


// Handles all planets, objects, etc.
class StarSystem extends GameObject{
    constructor(game) {
        super(game);
        this.stellarObjects = [];
        this.neighbors = [];
        this.planets = [];
        
        this.settings = {
            minDistanceFromAnotherStar : 60,
            nebulaChance : 1,
            minRoids : 0,
            maxRoids : 2,
            minRoidOffset : {
                x : -5000,
                y : -5000,
            },
            maxRoidOffset : {
                x : 5000,
                y : 5000,
            },

            minPlanets : 0,
            maxPlanets : 6,
            minPlanetOffset : {
                x : -2000,
                y : -2000,
            },
            maxPlanetOffset : {
                x : 2000,
                y : 2000,
            }
        }
        
        // Details
        this.generatePosition();
        
        this.name = Names.star();
        if(this.isOuterRimSystem) this.name = Names.outerRimStar();

        this.type = this.determineItemFromArray(STELLAR_TYPES);
        this.size = rng.next(2,5);

        // Planets
        this.planetCount = this.game.rng.nextInt(this.settings.minPlanets, this.settings.maxPlanets);    
        var x = this.game.world.centerX;
        var y = this.game.world.centerX;
        for (var i = 0; i < this.planetCount; i++) {             
            this.planets.push(new BasicPlanet(this.game,{
                x : x,
                y : y,
                index : i,
                system : this,
            }));
            
            x += this.game.rng.next(this.settings.minPlanetOffset.x, this.settings.maxPlanetOffset.x);
            y += this.game.rng.next(this.settings.minPlanetOffset.y, this.settings.maxPlanetOffset.y);
        }
    }
    
    generatePosition(){
        var size = Math.min(this.game.galaxy.settings.mapWidth,this.game.galaxy.settings.mapHeight)/2;
        var densityFactor = (this.game.galaxy.starSystems.length+1)/this.game.galaxy.settings.starsAmount;
        var maximumDistance = ((size*densityFactor)*2)+200;

        var x = rng.nextInt(-maximumDistance/2, maximumDistance/2)+this.game.galaxy.settings.mapWidth/2;
        var y = rng.nextInt(-maximumDistance/2, maximumDistance/2)+this.game.galaxy.settings.mapHeight/2;

        this.position = {
            x : x.clamp(0,this.game.galaxy.settings.mapWidth),
            y : y.clamp(0,this.game.galaxy.settings.mapHeight)
        }        
        
        // Validate Postion
        for(let system of this.game.galaxy.starSystems){
            var distance = this.distanceToStarSystem(system);
            
            // Minium Distance (Prevent too close)
            if(distance<this.settings.minDistanceFromAnotherStar) this.generatePosition();
        };


        
    }
    
    arrive(){        
        this.cleanup();
        this.game.system = this;
        this.game.time.events.add(1000, function(){
            this.game.hud.showSystemInfo();
        }, this)

        // Asteroids
        var x = 0;
        var y = 0;
        this.asteroidFieldCount = this.game.rng.nextInt(this.settings.minRoids, this.settings.maxRoids);
        for (var i = 0; i < this.asteroidFieldCount; i++) {
            x = this.game.rng.nextInt(this.settings.minRoidOffset.x, this.settings.maxRoidOffset.x) + x;
            y = this.game.rng.nextInt(this.settings.minRoidOffset.y, this.settings.maxRoidOffset.y) + y;
            this.stellarObjects.push(new AsteroidField(this.game,{
                size : ASTEROID_FIELD_SIZE.large,
                x : x + this.game.world.centerX,
                y : y + this.game.world.centerY,
                system : this,
            }));            
        }

        // Nebula
        var x = 0;
        var y = 0;
        if(this.game.rng.next()<this.settings.nebulaChance){
            x = this.game.rng.nextInt(this.settings.minRoidOffset.x*2, this.settings.maxRoidOffset.x*2) + x;
            y = this.game.rng.nextInt(this.settings.minRoidOffset.y*2, this.settings.maxRoidOffset.y*2) + y;
            
            this.stellarObjects.push(new Nebula(this.game,{
                size : ASTEROID_FIELD_SIZE.large,
                x : x + this.game.world.centerX,
                y : y + this.game.world.centerY,
                system : this,
            }));
        }
        
        // Activate Everything
        for(let planet of this.planets){
            planet.wrapper.children.forEach(function(element) {
                element.exists = true;
            }, this);
        }
        
        for(let object of this.stellarObjects){
            if(object.sprite!=undefined) object.sprite.exists = true;
        }
    }

    cleanup(){
        this.game.asteroids.removeAll(true);
        for(let planet of this.game.planets.children){
            planet.children.forEach(function(element) {
                element.exists = false
            }, this);
        }

        for(let object of this.stellarObjects) object.destroy();
        this.stellarObjects.length = 0;
    }
    
    get closestStarSystem(){
    	var star, x1, x2, y1, y2;
    	var smallest = 1000000;
    	var closest = null; //use instead of 0 as we're looking for null or an object (not a number)
    	x1 = this.position.x;
    	y1 = this.position.y;
    	for (var i=0; i<this.game.galaxy.starSystems.length; i++) {
    		star = this.game.galaxy.starSystems[i];
    		if (star === this) continue;
    		x2 = star.position.x;
    		y2 = star.position.y;
    		var adjacent = Math.abs(x1-x2); //abs always returns positive number
    		var opposite = Math.abs(y1-y2); 
    		var hypotenuse = Math.sqrt((adjacent**2) + (opposite**2));
    		if (hypotenuse < smallest) {
    			closest = star;
    			smallest = hypotenuse;
    		}
    	}

    	return closest;
    }

    systemWithinRangeTowardsSystem(maxJumpDistance,destinationSystem){
        var angleToDestination = this.angleToStarSystem(destinationSystem); 
        
        // look for systems in range, that are close to that angle.
        var jumpCandidates = [];
        
        // Systems in range
        for (let system of this.game.galaxy.starSystems){
            if(this.distanceToStarSystem(system)<=maxJumpDistance && system!=this){
                jumpCandidates.push(system);
            }            
        }
        
        var bestMatch = null;
        // Of the in range candidates, return the one closest to the angle of the destination system.
        if(jumpCandidates.length>0){
                bestMatch = jumpCandidates.reduce(function(prev, curr) {
                var prevAngle = this.candidate.angleToStarSystem(prev);
                var currAngle = this.candidate.angleToStarSystem(curr);
                var destAngle = this.destAngle;            
                return (Math.abs(currAngle - destAngle) < Math.abs(prevAngle - destAngle) ? curr : prev);
            }.bind({
                destAngle : angleToDestination,
                candidate : this,
            }));
        }

        return bestMatch;
    }
    
    distanceToStarSystem(system){
        var a = this.position.x - system.position.x
        var b = this.position.y - system.position.y
        return Math.sqrt( a*a + b*b );
    }

    angleToStarSystem(system){
        return Math.atan2(
            this.position.y - system.position.y,
            this.position.x - system.position.x
        ) * 180 / Math.PI;
    }

    get distanceFromGalacticCenter(){
        var a = this.position.x - this.game.galaxy.settings.mapWidth/2
        var b = this.position.y - this.game.galaxy.settings.mapHeight/2
        return Math.sqrt( a*a + b*b );
    }

    get isOuterRimSystem(){
        var size = Math.min(this.game.galaxy.settings.mapWidth,this.game.galaxy.settings.mapHeight)/2;
        var rimPercent = 0.1;
        
        if(this.distanceFromGalacticCenter>size*Math.abs(rimPercent-1)){
            return true;
        } else {
            return false;
        }
    }
    
    get isCurrentSystem(){
        return this==this.game.system;
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/_equipment.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Asteroid extends GameObject {
    constructor(game,group,size,x,y) {
        super(game);
     
        this.group = group
        this.emitFlakes = false;
        
        if(x==undefined) x = this.game.world.centerX+game.rnd.integerInRange(-1000, 1000);
        if(y==undefined) y = this.game.world.centerY+game.rnd.integerInRange(-1000, 1000);
        if(size==undefined) size = 'large';
        this.size = size;

        if(size=='tiny'){
            var rnd = game.rnd.integerInRange(1, 3);
            this.sprite = this.game.asteroids.create(x,y,'asteroid-flake-'+rnd);
        } else {
            this.sprite = this.game.asteroids.create(x,y,'asteroid-'+size);
        }

        this.sprite.parentObject = this;
        this.game.physics.p2.enable(this.sprite,P2BODY_DEBUG);

        this.sprite.body.clearShapes();
        this.sprite.body.damping = 0;

        if(size=='large'){
            this.health = game.rnd.integerInRange(150, 200);
            this.sprite.body.mass = 100;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(32);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-50, 50),game.rnd.integerInRange(-50, 50)],0,0)

            this.minimapSize = 1.2;
        } else if(size=='medium'){
            this.health = game.rnd.integerInRange(70, 100);

            this.sprite.body.mass = 50;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(20);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-10, 10),game.rnd.integerInRange(-10, 10)],0,0)

            this.minimapSize = .8;
        } else if(size=='small'){
            // Small
            this.health = game.rnd.integerInRange(20, 30);

            this.sprite.body.mass = 10;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(14);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-10, 10),game.rnd.integerInRange(-10, 10)],0,0)

            this.minimapSize = .5;
        } else if(size=='tiny'){
            // Tiny
            this.health = game.rnd.integerInRange(3, 10);

            this.sprite.body.mass = .1;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(5);
        this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-.05, .05),game.rnd.integerInRange(-.05, .05)],0,0)

            this.minimapSize = 0;
        }

        this.sprite.body.rotation = game.rnd.integerInRange(0, 360)
        this.sprite.anchor.set(0.5);

        this.hitEmitter = this.game.add.emitter(0, 0, 100);
        this.hitEmitter.makeParticles('asteroid-flake-3');
        this.hitEmitter.minParticleScale = .5;
        this.hitEmitter.maxParticleScale = 1;
        this.hitEmitter.gravity = 0;
        this.hitEmitter.particleBringToTop = true;
        
        this.explodeSounds = [
            game.add.audio('rock-crash-1'),
            game.add.audio('rock-crash-2'),
            game.add.audio('rock-crash-3'),
            game.add.audio('rock-crash-4'),
            game.add.audio('rock-crash-5'),
            game.add.audio('rock-crash-6'),
        ]
        this.damageSound = game.add.audio('crunch-1');
        this.soundCountdown = 10;
    }

    hit(bullet){
	    this.hitEmitter.x = bullet.x;
	    this.hitEmitter.y = bullet.y;	
	    this.emitFlakes = true;
	    this.soundCountdown = 10;
	    if(!this.damageSound.isPlaying) this.damageSound.loopFull(.5);
    }
        
    kill(){
        if(this.size=='large'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.explode();
            this.destroy();
            var a1 = new Asteroid(this.game,this.group,'medium',x-20,y-game.rnd.integerInRange(0,10));            
            var a2 = new Asteroid(this.game,this.group,'medium',x+20,y+game.rnd.integerInRange(0,10));
        } else if(this.size=='medium'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.destroy();
            var a1 = new Asteroid(this.game,this.group,'small',x-15,y-game.rnd.integerInRange(0,10));            
            var a2 = new Asteroid(this.game,this.group,'small',x+15,y+game.rnd.integerInRange(0,10));
        } else if(this.size=='small'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.destroy();
            var flakeCount = game.rnd.integerInRange(3,6);

            for (var i = 0; i < flakeCount; i++) { 
                new FlakePickup(this.game,this.group,this.sprite.x,this.sprite.y)
            }
        } else if(this.size=='tiny'){
            this.destroy();
        }
        this.damageSound.stop();
    } 
       
    explode(){
	    this.explodeEmitter = this.game.add.emitter(this.sprite.x,this.sprite.y, 100);
	    this.game.asteroids.add(this.explodeEmitter);
        this.explodeEmitter.makeParticles('asteroid-flake-1',0,7);
        this.explodeEmitter.gravity = 0;
        this.explodeEmitter.maxRotation = 100;
        this.explodeEmitter.minRotation = 30;
        this.explodeEmitter.minParticleScale = .5;
        this.explodeEmitter.maxParticleScale = 1;
        this.explodeEmitter.explode(6000, game.rnd.integerInRange(3, 7));
        this.explodeSounds[this.game.rnd.integerInRange(0,this.explodeSounds.length-1)].play();
    }
    
    // Rendering
    update() {        
        super.update();
        this.distanceToPlayer = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite);

        if(this.distanceToPlayer<Math.max(screenWidth,screenHeight)){
            this.sprite.exists = true;
        } else {
            this.sprite.exists = false;
        }

        if(this.soundCountdown==0){
            this.damageSound.stop();
        } else {
            this.soundCountdown--;
        }
        
        // Spin
        if(this.sprite.body!=undefined) this.sprite.body.angularVelocity = this.roationSpeed;                
    }
    
    destroy(){
        if(this.explodeEmitter) this.explodeEmitter.destroy();
        this.hitEmitter.destroy();   
             
        super.destroy();
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/asteroidField.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Equipment extends InventoryObject {
    constructor(game,options) {
        super(game,options);

        this.parentObject = options.parentObject;

        this.isEquippable = true;
        this._equipped = false;
        
        this.energyConsumption = 0;
        this.storageClass = CARGO_STORAGE_CLASS.equipment;

        this.equipSound = game.add.audio('equip');
        this.unequipSound = game.add.audio('unequip');
    }
    
    set equipped(equipped){
        this._equipped = equipped;                
    }
    
    get equipped(){
        return this._equipped;
    }
    
    equipTo(parentObject){
        if(parentObject){
            this.equipSound.play();
            this.parentObject = parentObject;
            this.equipped = true;
    
            if(this.isWeapon) {
                this.parentObject.equipWeaponInSlot(this,0);
            } else if(this.isEngine) {
                this.parentObject.equipEngineInSlot(this,0);
            } else {
                this.parentObject.equipEquipmentInSlot(this,0);
            }

        }

        this.game.register(this);
    }
    
    unequip(){        
        if(this.parentObject){
            this.unequipSound.play();

            if(this.isWeapon) {
                this.parentObject.unequipWeapon(this);
            } else if(this.isEngine) {
                this.parentObject.unequipEngine(this);
            } else {
                this.parentObject.unequipEquipment(this);
            }
        }
        
        this.game.unregister(this);
    }
    
    update(){
        
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/_consumable.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class AsteroidField extends GameObject {
    constructor(game,options) {
        super(game);
        
        this.system = options.system;
        var size = options.size;
        if(size==undefined) size = 2000;
        var densityLowerBound = 50;
        var densityUpperBound = 60;
        
        this.asteroidsCount = this.game.rnd.integerInRange(size/densityLowerBound, size/densityUpperBound);
        this.asteroids = this.game.asteroids;
        for (var i = 0; i < this.asteroidsCount; i++) { 
            var xPos = game.rnd.integerInRange(options.x-size, options.x+size);
            var yPos = game.rnd.integerInRange(options.y-size, options.y+size);
            
            var bigness = game.rnd.integerInRange(0,100);

            if(bigness>=70){
                var asteroid = new Asteroid(this.game,this.asteroids,'large',xPos,yPos);
            } else if(bigness<70 && bigness>50){
                var asteroid = new Asteroid(this.game,this.asteroids,'medium',xPos,yPos);                
            } else {
                var asteroid = new Asteroid(this.game,this.asteroids,'small',xPos,yPos);                
            }

            // Add to system
            this.system.stellarObjects.push(asteroid);
        }

        this.buoy = new Buoy(this.game,options.x,options.y);
        this.buoy.description = `${Names.proper()} Asteroid Field`

        this.system.stellarObjects.push(this.buoy);
    }

    update(){
        super.update();
        if(this.system == this.game.system){    
            this.game.physics.arcade.collide(this.asteroids, this.asteroids);
        }
    }    
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/nebula.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Consumable extends InventoryObject {
    constructor(game,options) {
        super(game,options);

        this.parentObject = this.game.player.ship;
        this.isConsumable = true;
    }

    consume(){
        this.parentObject.removeItemFromInventory(this);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/reactor.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Nebula extends GameObject {
    constructor(game,options) {
        super(game);

        var x = options.x;
        var y = options.y;
        var size = options.size;
        if(size==undefined) size = 2000;
        this.size = size;
        this.system = options.system;
            
        var xPos = game.rnd.integerInRange(x-this.size, x+this.size);
        var yPos = game.rnd.integerInRange(y-this.size, y+this.size);

        var densityLowerBound = 50;
        var densityUpperBound = 60;

        this.iceteroidsCount = this.game.rnd.integerInRange(size/densityLowerBound, size/densityUpperBound);
        this.iceteroids = this.game.asteroids;
        for (var i = 0; i < this.iceteroidsCount; i++) { 
            var xPos = game.rnd.integerInRange(x-size, x+size);
            var yPos = game.rnd.integerInRange(y-size, y+size);
            
            var bigness = game.rnd.integerInRange(0,100);

            if(bigness>=70){
                var iceteroid = new Iceteroid(this.game,this.iceteroids,'large',xPos,yPos);
            } else {
                var iceteroid = new Iceteroid(this.game,this.iceteroids,'small',xPos,yPos);                
            }
            this.system.stellarObjects.push(iceteroid);
        }

        this.buoy = new Buoy(this.game,x,y);
        this.buoy.description = `${Names.proper()} Ice Nebula`
        this.name = this.buoy.description;
        this.system.stellarObjects.push(this.buoy);

        this.shouldShowNebulaEffect = false;
        this.nebulaSpawnInterval = 10;
        this.nebulaSpawnCountdown = this.nebulaSpawnInterval;

        // Effects
        this.nebulaOverlay = this.game.add.graphics(0, 0);
        this.nebulaOverlay.beginFill(0x34495e);
        this.nebulaOverlay.drawRect(0,0,screenWidth,screenHeight);
        this.nebulaOverlay.endFill();
        this.nebulaOverlay.alpha = 0;
        this.nebulaOverlayTargetAlpha = .4;
        this.game.starsTargetAlpha = .2;
        this.nebulaOverlayStepAlpha = .002;
        this.nebulaOverlay.visible = false;
        this.nebulaOverlay.fixedToCamera = true;
        
        var smoke = {
            lifespan: 7000,
            image: 'nebula-cloud',
            sendToBack: true,
            alpha: { initial: 0, value: .06, control: [ { x: 0, y: 0 }, { x: 0.2, y: 1 }, { x: 0.5, y: 0.5 }, { x: 1, y: 0 } ] },
            scale: { min: 1, max: 1.5 },
            vx: { min: -0.2, max: 0.2 },
            vy: { min: -0.2, max: -0.2 },
            hsv: { value: 210 },
        };
        this.game.ps.addData('nebula-cloud', smoke);
        this.smokeEmitter = this.game.ps.createEmitter();
        this.smokeEmitter.addToWorld();

    	this.particlesEmitter = game.add.emitter(0,0, 500);
    	this.particlesEmitter.width = game.camera.width;
    	this.particlesEmitter.height = game.camera.height;
    	    
    	this.particlesEmitter.makeParticles(['ice-small-1','ice-small-2','ice-small-3','ice-small-4','ice-small-5']);
    
    	this.particlesEmitter.setAlpha(0, 1, 2000,Phaser.Easing.Quadratic.InOut,true);

    	this.particlesEmitter.minParticleScale = 0.08;
    	this.particlesEmitter.maxParticleScale = 0.35;
    
    	this.particlesEmitter.setYSpeed(-10, 10);
    	this.particlesEmitter.setXSpeed(-10, 10);
        this.particlesEmitter.gravity = 3;
    
    	this.particlesEmitter.minRotation = -100;
    	this.particlesEmitter.maxRotation = 100;
    
    	this.particlesEmitter.start(false, 4000, 10, 0);
    	this.particlesEmitter.on = false;
    	this.iceteroids.add(this.particlesEmitter);
    	
    	// Ambient Sounds
        this.ambientSound = game.add.audio('nebula-ambient-1');
    }
    
    destroy(){
        if(this.shouldShowNebulaEffect) this.game.player.exitDarkness();
        super.destroy();
    }
    
    update(){
        super.update();
        
        if(this.system == this.game.system){    
            this.distanceToPlayer = this.game.physics.arcade.distanceBetween(this.buoy.sprite, this.game.player.sprite);
        
            if(this.distanceToPlayer<=this.size*1.5){
                this.game.player.enterDarkness(this);
                this.shouldShowNebulaEffect = true;
            } else {
                this.game.player.exitDarkness(this);
                this.shouldShowNebulaEffect = false;
            }
            
            if(this.shouldShowNebulaEffect){   
                // Particles
                this.particlesEmitter.on = true;   
                this.particlesEmitter.x = this.game.camera.x + this.game.camera.width/2;
                this.particlesEmitter.y = this.game.camera.y + this.game.camera.height/2;
    
                // Overlay
                this.nebulaOverlay.visible = true;
                
                if(this.nebulaOverlay.alpha<=this.nebulaOverlayTargetAlpha)
                    this.nebulaOverlay.alpha+=this.nebulaOverlayStepAlpha
    
                if(this.game.stars.alpha>=this.game.starsTargetAlpha)
                    this.game.stars.alpha-=this.nebulaOverlayStepAlpha
                
                if(this.game.stars.alpha<=this.game.starsTargetAlpha)
                    this.game.stars.alpha=this.game.starsTargetAlpha    
                
                // Smoke
                if(this.nebulaSpawnCountdown==0){
                    this.smokeEmitter.emit(
                        'nebula-cloud',
                        this.game.camera.x + this.game.rnd.integerInRange(0, this.game.camera.width), 
                        this.game.camera.y + this.game.rnd.integerInRange(0, this.game.camera.height),
                    ) 
                    this.nebulaSpawnCountdown = this.nebulaSpawnInterval;
                } else {
                    this.nebulaSpawnCountdown--;
                }
                
                // Sound
                if(!this.ambientSound.isPlaying) {
                    console.log("Start Loop");
                    this.ambientSound.loopFull(AMBIENT_VOLUME);
                }            
            } else {
                // Stop Particles
                this.particlesEmitter.on = false;   
                
                // Hide overlay
                this.nebulaOverlay.alpha-=this.nebulaOverlayStepAlpha
                
                if(this.nebulaOverlay.alpha<this.nebulaOverlayStepAlpha){
                    this.nebulaOverlay.alpha = 0;
                    this.nebulaOverlay.visible = false;
                }
                
                // Stars
                this.game.stars.alpha+=this.nebulaOverlayStepAlpha
                if(this.game.stars.alpha>=1)
                    this.game.stars.alpha=1;        
            
                // Stop sound
                if(this.ambientSound.isPlaying && this.ambientSound.volume == AMBIENT_VOLUME) {
                    this.ambientSound.fadeOut(3000);    
                }
                this.ambientSound.onFadeComplete.addOnce(function(){
                    this.ambientSound.stop();
                }, this);
            }
        }
    }
    
}
class Reactor extends Equipment {
    constructor(game,options) {
        super(game,options);
        this.chargeRate = options.data.chargeRate;
        this.capacity = options.data.capacity;

        this.isReactor = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','type','capacity','readableChargeRate'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Reactor Type','Capacity','Recharge Rate'];

        this.powerUpSound = game.add.audio('power-up')
        this.powerDownSound = game.add.audio('power-down')
    }

    set equipped(equipped){
        this._equipped = equipped;
        
        if(this.parentObject){
             if(equipped) this.parentObject.maxEnergy += this.capacity;
             if(!equipped) this.parentObject.maxEnergy -= this.capacity;
        }
        
        if(equipped){
            this.powerUpSound.play();
        } else {
            this.powerDownSound.play();            
        }
    }

    get equipped(){
        return this._equipped;
    }

    update(){
        super.update();
        if(this.parentObject) this.parentObject.charge(this.chargeRate);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/iceteroid.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/batteries.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Iceteroid extends GameObject {
    constructor(game,group,size,x,y) {
        super(game);
     
        this.group = group
        this.emitFlakes = false;
        
        if(x==undefined) x = this.game.world.centerX+game.rnd.integerInRange(-1000, 1000);
        if(y==undefined) y = this.game.world.centerY+game.rnd.integerInRange(-1000, 1000);
        if(size==undefined) size = 'large';
        this.size = size;

        this.sprite = this.game.asteroids.create(x,y,`ice-${size}-${game.rnd.integerInRange(1, 5)}`);

        this.sprite.parentObject = this;
        this.game.physics.p2.enable(this.sprite,P2BODY_DEBUG);

        this.sprite.body.clearShapes();
        this.sprite.body.damping = 0;

        if(size=='large'){
            this.health = game.rnd.integerInRange(150, 200);
            this.sprite.body.mass = 10;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(10);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-10, 10),game.rnd.integerInRange(-10, 10)],0,0)

            this.minimapSize = 1.2;
        } else if(size=='small'){
            this.health = game.rnd.integerInRange(70, 100);

            this.sprite.body.mass = 5;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(8);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-2, 2),game.rnd.integerInRange(-2, 2)],0,0)

            this.minimapSize = .8;
        }

        this.sprite.body.rotation = game.rnd.integerInRange(0, 360)
        this.sprite.anchor.set(0.5);

        this.hitEmitter = this.game.add.emitter(0, 0, 100);
        this.hitEmitter.makeParticles(`ice-small-${game.rnd.integerInRange(1, 5)}`);
        this.hitEmitter.minParticleScale = .2;
        this.hitEmitter.maxParticleScale = .4;
        this.hitEmitter.gravity = 0;
        this.hitEmitter.particleBringToTop = true;
        
        this.explodeSounds = [
            game.add.audio('ice-crash-1'),
            game.add.audio('ice-crash-2'),
            game.add.audio('ice-crash-3'),
            game.add.audio('ice-crash-4'),
            game.add.audio('ice-crash-5'),
            game.add.audio('ice-crash-6'),
        ]
        this.damageSound = game.add.audio('crunch-1');
        this.soundCountdown = 10;
    }

    hit(bullet){
	    this.hitEmitter.x = bullet.x;
	    this.hitEmitter.y = bullet.y;	
	    this.emitFlakes = true;
	    this.soundCountdown = 10;
	    if(!this.damageSound.isPlaying) this.damageSound.loopFull(.5);
    }
        
    kill(){
        if(this.size=='large'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.explode();
            this.destroy();
            var a1 = new Iceteroid(this.game,this.group,'small',x-15,y-game.rnd.integerInRange(0,10));            
            var a2 = new Iceteroid(this.game,this.group,'small',x+15,y+game.rnd.integerInRange(0,10));
        } else if(this.size=='small'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.destroy();
            var flakeCount = game.rnd.integerInRange(2,5);

            for (var i = 0; i < flakeCount; i++) { 
                new IceFlakePickup(this.game,this.group,this.sprite.x,this.sprite.y)
            }
        }
        this.damageSound.stop();
    } 
       
    explode(){
	    this.explodeEmitter = this.game.add.emitter(this.sprite.x,this.sprite.y, 100);
	    this.game.asteroids.add(this.explodeEmitter);
        this.explodeEmitter.makeParticles(`ice-small-${game.rnd.integerInRange(1, 5)}`,0,7);
        this.explodeEmitter.gravity = 0;
        this.explodeEmitter.maxRotation = 100;
        this.explodeEmitter.minRotation = 30;
        this.explodeEmitter.minParticleScale = .2;
        this.explodeEmitter.maxParticleScale = .6;
        this.explodeEmitter.explode(6000, game.rnd.integerInRange(3, 7));
        this.explodeSounds[this.game.rnd.integerInRange(0,this.explodeSounds.length-1)].play();
    }
    
    // Rendering
    update() {
        super.update();
        this.distanceToPlayer = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite);

        if(this.distanceToPlayer<Math.max(screenWidth,screenHeight)){
            this.sprite.exists = true;
        } else {
            this.sprite.exists = false;
        }

        if(this.soundCountdown==0){
            this.damageSound.stop();
        } else {
            this.soundCountdown--;
        }
        
        // Spin
        if(this.sprite.body!=undefined) this.sprite.body.angularVelocity = this.roationSpeed;                
    }

    destroy(){
        if(this.explodeEmitter) this.explodeEmitter.destroy();
        this.hitEmitter.destroy();   
             
        super.destroy();
    }
}
class Batteries extends Equipment {
    constructor(game,parentObject) {
        super(game,parentObject);
        
        this.name = "Batteries"
        this.status = "OK"
        this.chargeRate = .03;
    }

    update(){
        super.update();
        this.parentObject.charge(this.chargeRate);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/items/flake.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/BasicFuelTank.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Item_Flake extends InventoryObject {
    constructor(game) {
        super(game);

        this.name = 'Asteroid Flake';
        this.storageClass = CARGO_STORAGE_CLASS.bulk
        this.rarity = RARITY.common;
        this.mass = 10;
        this.baseValue = 16;
        this.type = 'Mineral';
    }
}class BasicFuelTank extends Equipment {
    constructor(game,options) {
        super(game,options);
        this.fuelCapacity = options.data.fuelCapacity;

        this.isFuelTank = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','fuelCapacity'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Capacity'];
    }

    set equipped(equipped){
        this._equipped = equipped;
        
        
        if(this.parentObject){
            console.log(this.parentObject.maxFuel);
            
            if(equipped) this.parentObject.maxFuel += this.fuelCapacity;
            if(!equipped) this.parentObject.maxFuel -= this.fuelCapacity;
                          
            console.log(this.parentObject.maxFuel);
        }
        

/*
        TODO:
        if(equipped){
            this.powerUpSound.play();
        } else {
            this.powerDownSound.play();            
        }
*/
    }

    get equipped(){
        return this._equipped;
    }

    update(){
        super.update();
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/items/paladium.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/RepairKit.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Item_Paladium extends InventoryObject {
    constructor(game) {
        super(game);

        this.name = 'Raw Paladium';
        this.storageClass = CARGO_STORAGE_CLASS.bulk
        this.rarity = RARITY.rare;
        this.mass = 20;
        this.baseValue = 100;
        this.type = 'Mineral';
    }
}class RepairKit extends Consumable {
    constructor(game,options) {
        super(game,options);
        
        this.repairAmount = options.data.repairAmount;

        this.infoFields = ['baseValue','mass','rarity','__space__','repairAmount'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Recovery'];
    
        this.consumeSound = game.add.audio('repair-light')
    }
    
    consume(){
        super.consume();
        this.consumeSound.play();
        
        this.parentObject.health += this.repairAmount;

        if(this.parentObject.health>=this.parentObject.maxHealth) {
            this.parentObject.health = this.parentObject.maxHealth // Don't allow exceeding max health
        }
    }

}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/items/metoricIron.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/equipment/FuelKit.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Item_MeteoricIron extends InventoryObject {
    constructor(game) {
        super(game);

        this.name = 'Meteoric Iron';
        this.storageClass = CARGO_STORAGE_CLASS.bulk
        this.rarity = RARITY.uncommon;
        this.mass = 15;
        this.baseValue = 32;
        this.type = 'Mineral';
    }
}class FuelKit extends Consumable {
    constructor(game,options) {
        super(game,options);
        
        this.fuelAmount = options.data.fuelAmount;

        this.infoFields = ['baseValue','mass','rarity','__space__','fuelAmount'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Fuel Provided'];
    
        this.consumeSound = game.add.audio('glug')
    }
    
    consume(){
        super.consume();
        this.consumeSound.play();
        
        this.parentObject.fuelQuantity += this.fuelAmount;

        if(this.parentObject.fuelQuantity>=this.parentObject.maxFuel) {
            this.parentObject.fuelQuantity = this.parentObject.maxFuel // Don't allow exceeding max fuel
        }
    }

}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Merging js: app/items/fuel.js begins */

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/* Merging js: app/equipment/FTLFuel.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Item_Fuel extends InventoryObject {
    constructor(game) {
        super(game);

        this.name = 'Rocket Fuel';
        this.storageClass = CARGO_STORAGE_CLASS.liquid
        this.rarity = RARITY.exotic;
        this.mass = 1;
        this.type = 'Liquid'

        this.baseValue = 1;
    }
}class FTLFuel extends Consumable {
    constructor(game,options) {
        super(game,options);
        
        this.jumpsAmount = 1;
        this.isHyperdriveFuel = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','jumpsAmount'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Jumps'];
    }
    
    consume(){
        super.consume();
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/ships/basicMiner.js begins */
/* Merging js: app/weapons/_weapon.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




class Weapon extends Equipment {
    constructor(game,options) {
        super(game,options);

        this.isWeapon = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','type','damage','energyConsumption','range'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Weapon Type','Damage','Energy Consumption','Range'];
    }

    fire(){
        // Fallback
    }

    update(){
        super.update();
    }

    postUpdate(){
        // Bullet updates
        if(this.weapon!=undefined && this.alive){        
            var hits = this.game.physics.p2.hitTest(this.position);
            if(hits.length) this.weapon.hit(this,hits)
        }

        if (this.customRender) this.key.render();
        if (this.components.PhysicsBody) Phaser.Component.PhysicsBody.postUpdate.call(this);
        if (this.components.FixedToCamera) Phaser.Component.FixedToCamera.postUpdate.call(this);
        for (var i = 0; i < this.children.length; i++) {
            this.children[i].postUpdate();
        }
    }

    hit(bullet,hits){
        for (let hit of hits) {
            var target = hit.parent.sprite.parentObject;

            if(this.game.player.ship == target){
                return; // Can't hit yourself.
            }
            
            target.hit(bullet);
            
            target.inflictDamage(bullet.damage);
            bullet.kill();
        }
    }
}class BasicMiner extends Ship {
    constructor(game,x,y) {
        super(game,x,y);
        
        this.specs = {
            name : 'MV Fair Rosamond',
            description : 'Cobalt Class Mining Vessel',
            health: 130,
            turnDecay: .03,
            turnAccel: .1,
            leftRightThrust: 100,
            maxTurning: 10,
            reverseThrust: 100,
            maxReverse: 90,
            maxFuel : 2200,
            maxEnergy: 0,
            mass: 2, // Tons
            equipmentSlots : 4,
            centerOfGravity : {
                x : .5,
                y : .5,
            },
            polygon: [
                {
                    "shape": [ 5,36, 6,7, 21,39, 20,51, 6,50 ]
                },
                {
                    "shape": [ 28,38, 21,39, 6,7, 9,0, 18,0 ]
                },
                {
                    "shape": [ 28,38, 20,7, 28,7 ]
                },
                {
                    "shape": [ 6,7, 5,36, 0,36, 0,7 ]
                }
            ],
            size : {
                width : 45,
                height : 45,
                offsetX : 3,
                offsetY : -8,
            },
            weaponSlots : [
                {
                    position : {
                        x: 9,
                        y: -22
                    },
                    typesAllowed: [WEAPON_TYPES.miningLaser],
                }
            ],
            engineSlots : [{
                anchor : {
                    x: 0.57,
                    y: -1.5
                },
                angle : 0,
            }],
            RCS :{
                forward_left : {
                    x: 0,
                    y: 8,
                    angle : 90,
                },
                forward_right : {
                    x: 26,
                    y: 14,
                    angle : 270,                    
                },
                aft_left : {
                    x : 5,
                    y : 41,
                    angle : 90,
                },
                aft_right : {
                    x: 21,
                    y: 46,
                    angle : 270,                    
                },
                retro_a : {
                    x: 11,
                    y: 3,
                    angle : 180,
                    retro : true,                   
                },
                retro_b : {
                    x: 21,
                    y: 3,
                    angle : 180,
                    retro : true,                   
                },
            },
            dockingConnector : {
                position : {
                    x: -3,
                    y: -24,
                    angle : 90,
                },
                inUse: false,
            },
            storage : {
                equipment : 500,
                bulk : 800,
            }
        }

        // Sprites
        this.sprite = this.game.add.sprite(x,y, 'mining_ship');
        this.sprite.anchor.set(this.specs.centerOfGravity.x,this.specs.centerOfGravity.y);

        this.setupSprite(this.sprite);
        
        // Cargo
        this.emptyCargoHold();
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/ships/fuelTanker.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/ships/_ship.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class FuelTanker extends Ship {
    constructor(game,x,y) {
        super(game,x,y);
        
        this.specs = {
            name : 'AOG Belvidera',
            description : 'Fuel Tanker',
            health : 100,
            turnDecay: .005,
            turnAccel: .007,
            leftRightThrust: 100,
            maxTurning: 10,
            reverseThrust: 40,
            maxReverse: 60,
            maxFuel : 9000,
            maxEnergy: 150,
            mass: 10, // Tons
            equipmentSlots : 4,
            centerOfGravity : {
                x : .5,
                y : .5,
            },
            polygon: [
                {
                    "shape": [ 51,54, 37,53, 36,32, 86,32, 87,54 ]
                },
                {
                    "shape": [ 36,32, 37,53, 0,54, 0,32 ]
                },
                {
                    "shape": [ 36,93, 37,53, 51,54, 52,93 ]
                },
                {
                    "shape": [ 37,27, 51,32, 36,32 ]
                },
                {
                    "shape": [ 35,5, 50,27, 51,32, 37,27 ]
                },
                {
                    "shape": [ 46,1, 51.83333206176758,4.333335876464844, 50,27, 35,5, 40,1 ]
                }
            ],
            size : {
                width : 45,
                height : 45,
                offsetX : 3,
                offsetY : -8,
            },
            weaponSlots : [
                {
                    position : {
                        x: 0,
                        y: 0
                    },
                    typesAllowed: [WEAPON_TYPES.miningLaser],
                },
                {
                    position : {
                        x: 9,
                        y: -22
                    },
                    typesAllowed: [WEAPON_TYPES.miningLaser],
                }
            ],
            engineSlots : [{
                anchor : {
                    x: 0.55,
                    y: -2.8
                },
                angle : 0,
            }],
            RCS :{
                forward_left : {
                    x: 35,
                    y: 16,
                    angle : 90,
                },
                forward_right : {
                    x: 52,
                    y: 22,
                    angle : 270,                    
                },
                aft_left : {
                    x: 35,
                    y : 71,
                    angle : 90,
                },
                aft_right : {
                    x: 52,
                    y: 76,
                    angle : 270,                    
                },
                retro_a : {
                    x: 41,
                    y: 3,
                    angle : 180,
                    retro : true,                   
                },
                retro_b : {
                    x: 51,
                    y: 3,
                    angle : 180,
                    retro : true,                   
                },
            },
            storage : {
                bulk : 300,
                passengers : 2,
                gas : 0,
                liquid : 0,
            },
            dockingPorts : [{
                position : {
                    x: 0,
                    y: -47,
                    angle : 90,
                },
                inUse: false,
            }],
            dockingConnector : {
                position : {
                    x: 0,
                    y: -50,
                    angle : 90,
                },
                inUse: false,
            },
            canBeDockedTo: true,
        }

        // Sprites
        this.sprite = this.game.add.sprite(x,y, 'fuelTanker2');
        this.sprite.anchor.set(this.specs.centerOfGravity.x,this.specs.centerOfGravity.y);

        this.setupSprite(this.sprite);

        //var blaster = new BasicBlaster(this.game,this);
        //this.equipWeaponInSlot(blaster,1);

        // Engine
/*
        var engine = new BasicEngine(this.game,this);
        this.equipEngineInSlot(engine,0);
        this.refuel();

        // Reactor
        var reactor = new Reactor(this.game,this);
        this.equipEquipmentInSlot(reactor,0);
        this.recharge();
*/
        
        // Cargo
        this.emptyCargoHold();
    }
}
class Ship extends GameObject {
    constructor(game,x,y) {
        super(game);
        
        // Basic Ship
        this.specs = {
            name : 'Unknown Ship',
            description : 'Unknown Class',
            storage : {
                bulk : 100,
/*
                passengers : 100,
                gas : 100,
                liquid : 100,
*/
            }
        }
        
        this.isShip = true;
        
        this.xStart = x;
        this.yStart = y;

        this.dockingDistance = 250;
        this.dockedShips = [];
        this.isDocked = false;

        this.fuelQuantity = 0;
        this.energyQuantity = 0;
        this.maxEnergy = 0;
        this.oxygenQuantity = 3000;
        this.oxygenMax = 3000;
        this.hullBreachAtHealthPercentage = .40;
        this.hullBreached = false;
        this.O2Critical = false;

        this.weapons = [];
        this.engines = [];    
        this.equipment = [];
        
        this.canPickThingsUp = true;
        this.canNavigateTo = true;
        
        this.navigation = {
            currentWaypoint: 0,
        }
        this.navigationMode = NAVIGATION_MODE.free;
        this.navigationIndex = -1;

        // Lights
        var lightWidth = 820;
        var lightHeight = 680;
        this.maskPoly = new Phaser.Polygon(
            0,0,
            lightWidth,0,
            lightWidth/2,lightHeight
        );
        
        this.lightMask = game.add.graphics(0, 0);
        this.lightMask.beginFill(0xFFFFFF);
        this.lightMask.drawPolygon(this.maskPoly);
        this.lightMask.endFill();
        this.lightMask.position.x = (-lightWidth/2)-1;
        this.lightMask.position.y = -lightHeight-18;
        this.lightMask.visible = false;

        // Hyperdrive
        this.hyperDriveDelay = 3600;
        this.jumpWasAborted = false;

        // Sounds
        this.infoSound = game.add.audio('beep-beep');
        this.gasLeakSound = game.add.audio('gas-leak');
        this.dockConnectSound = game.add.audio('dock-connect');
        this.dockReleaseSound = game.add.audio('dock-release');
        this.navTargetChangedSound = game.add.audio('blorp');

        this.ftlChargeSound = game.add.audio('ftl-charge');
        this.ftlJumpSound = game.add.audio('ftl-jump');
        this.jumpCompleteSound = game.add.audio('jump-complete');

        this.crashSounds = [
            game.add.audio('crash-1'),
            game.add.audio('crash-2'),
            game.add.audio('crash-3'),
            game.add.audio('crash-4'),
            game.add.audio('crash-5'),
        ]

        this.crashLightSounds = [
            game.add.audio('crash-light-1'),
            game.add.audio('crash-light-2'),
        ]        

        this.crashThudSounds = [
            game.add.audio('crash-thud-1'),
            game.add.audio('crash-thud-2'),
        ]        
    }
    
    setupSprite(sprite){
        super.setupSprite(sprite);

        // Physics
        this.game.physics.p2.enable(sprite,P2BODY_DEBUG);
        this.sprite.body.clearShapes();
        this.sprite.body.loadPolygon(null,this.specs.polygon);       
        this.sprite.body.damping = 0;
        this.sprite.body.mass = this.specs.mass;
        this.sprite.parentObject = this;
        
        // Lights
        this.sprite.addChild(this.lightMask);

        if(this.specs.dockingConnector!=undefined){
            this.dockingConnector = this.sprite.addChild(this.game.make.sprite(0, 0, 'null'));
            this.dockingConnector.x = this.specs.dockingConnector.position.x;
            this.dockingConnector.y = this.specs.dockingConnector.position.y;
        }

        // Docking
        if(this.specs.canBeDockedTo){
            this.dockingPort = this.sprite.addChild(this.game.make.sprite(0, 0, 'dock-arrow'));
            this.dockingPort.x = this.specs.dockingPorts[0].position.x;
            this.dockingPort.y = this.specs.dockingPorts[0].position.y;
            this.dockingPort.anchor.set(.5,2.5);
            this.dockingPort.visible = false;

            this.dockingPortBlink = this.game.add.tween(this.dockingPort).to({
                alpha: 1,
                y: '5'
            }, 600, "Quart.easeOut", true, 0, 0, true).loop(true);
        }
        
        this.setupRCSThrusters();
        this.game.ships.add(this.sprite);        
        
        // Health
        this.health = this.specs.health;
        this.maxHealth = this.specs.health;
        
        // Fuel
        this.maxFuel = this.specs.maxFuel
        
        // Info
        this.name = this.specs.name;
        this.description = this.specs.description;
        
        this.nameText = this.game.add.text(
            0,0,
            this.name, 
            { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'left' },
            this.game.ships, 
        );
        this.nameText.alpha = 0;

        this.subText = this.game.add.text(
            0,0, 
            this.description, 
            { font: `11px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
            this.game.ships, 
        );
        this.subText.alpha = 0;

        this.landingMessage = this.game.add.text(
            0,0,
            'Cleared to Dock', 
            { font: `10px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
            this.game.ships, 
        );
        this.landingMessage.alpha = 0;

        // Emiiters
        var flamesData = {
            lifespan: 1000,
            image: 'white',
            bringToTop: true,
            blendMode: 'ADD',
            hsv: { initial: 0, value: 70, control: 'linear' },
            alpha: { initial: 0, value: 1, control: [ { x: 0, y: 1 }, { x: 0.5, y: 0.8 }, { x: 1, y: 0 } ] },
            scale: { min: 0.05, max: .5 },
            vx: { min: -0.5, max: 0.5 },
            vy: { min: -.1, max: .1 }
        };
        this.game.ps.addData('flames', flamesData);
        this.flamesEmitter = this.game.ps.createEmitter(Phaser.ParticleStorm.SPRITE, new Phaser.Point(0, 0));
        this.flamesEmitter.addToWorld();

        // Atmosphere
        this.ventData = {
            lifespan: 8000,
            image: 'white-smooth',
            vx: { min: -.4, max: .4 },
            vy: { min: -.4, max: .4 },
            alpha: { min: 0, max: .3 },
            scale: { initial: 0.1, value: .4, control: 'linear' },
        };
        this.game.ps.addData('atmosphere', this.ventData);
        this.atmosphereEmitter = this.game.ps.createEmitter(Phaser.ParticleStorm.SPRITE, new Phaser.Point(0, 0));
        this.atmosphereEmitter.addToWorld();
        this.atmosphereWell = this.atmosphereEmitter.createGravityWell(0,0, .01);

        // Hyperdrive
        this.hyperData = {
            lifespan: 300,
            image: 'white-smooth',
            bringToTop: true,
            blendMode: 'ADD',
            hsv: { value: 250,},
            alpha: { value: .5 , control:  [{ x: 0, y: 1 }, { x: 1, y: 0 } ]},
            scale: { value: .5 },
            emit: {
                name: { at: [ { time: 0, value: 'spark' } ] }, 
                value: 0, at: [ { time: 0, value: 5 } ]
            }
        };
        
        this.game.ps.addData('hyperDrive', this.hyperData);
        this.hyperDriveEmitter = this.game.ps.createEmitter(Phaser.ParticleStorm.SPRITE, new Phaser.Point(0, 0));
        this.hyperDriveEmitter.addToWorld();

        // Cargo Jettison
        this.cargoJettisonEmitter = game.add.emitter(0, 0, 3);    
        this.cargoJettisonEmitter.makeParticles('crate-tiny');
        this.cargoJettisonEmitter.gravity = 0;
        this.cargoJettisonEmitter.setAlpha(1,0,1000);
    }
    
    positionInfo(){
        var x = 20+this.sprite.x + this.sprite.width/2;
        var y = this.sprite.y;
        
        this.nameText.x = x; 
        this.nameText.y = y-40; 

        this.subText.x = x; 
        this.subText.y = y-20; 

        this.landingMessage.x = x; 
        this.landingMessage.y = y+20;             
    }
    
    // Weapons
    firePrimaryWeapon(){
        for (let weapon of this.weapons) {
            if(this.hasEnergy){
                this.consumeEnergy(weapon.energyConsumption)
                if(this.energyPercentage>1) weapon.weapon.fire();
            }
        }
    }

    equipWeaponInSlot(weapon,slot){
        this.weapons.push(weapon);
        
        weapon.weapon.trackSprite(
            this.sprite,
            this.specs.weaponSlots[slot].position.x,
            this.specs.weaponSlots[slot].position.y,
            true,
            270,
        );
    }

    unequipWeapon(weapon){
        weapon.equipped = false;

        var index = this.weapons.indexOf(weapon);
        if (index > -1) {
            this.weapons.splice(index, 1);
        }
    }

    // Engines
    equipEngineInSlot(engine,slot){
        // Equip
        this.engines.push(engine);

        engine.parentObject = this;
        engine.slot = slot;
        
        this.calculateMaxSpeed(); 
    }
    
    unequipEngine(engine){
        engine.equipped = false;
        
        var index = this.engines.indexOf(engine);
        if (index > -1) {
            this.engines.splice(index, 1);
        }
        
        this.calculateMaxSpeed();
    }

    calculateMaxSpeed(){
        // Calculate new max speed (average of engine max speeds)
        var maxSpeed = 0;
        for (let engine of this.engines) {
            maxSpeed += engine.maxSpeed;
        }
        this.maxSpeed = maxSpeed/10 // No idea.
    }
    
    
    setupRCSThrusters(){
        if(this.specs.RCS != undefined){
            this.thrusters = {};
            for (var thruster in this.specs.RCS) {
                this.addThruster(thruster,this.specs.RCS[thruster])
            }
        }
    }    
    
    addThruster(thruster,layout){
        this.thrusters[thruster] = new Thruster(this.game,{
            parentObject : this,
            layout : layout,
        })
        
        // Hande retro thrusters
        if(layout.retro !=undefined){
            this.thrusters[thruster].retro = layout.retro
        }
    }
    
    fireThruster(thrusterKey){
        if(this.thrusters[thrusterKey]!=undefined && this.hasFuel){
            var thruster = this.thrusters[thrusterKey];
            this.consumeFuel(thruster.fuelConsumption)
            thruster.fire();
        }
    }

    shutdownThruster(thruster){        
        var thruster = this.thrusters[thruster]
        thruster.shutdown();
    }
    
    shutdownAttitudeThrusters(){
        for (var thrusterKey in this.specs.RCS) {
            var thruster = this.thrusters[thrusterKey];
            if(!thruster.retro) thruster.shutdown();
        }        
    }
    shutdownRetroThrusters(){
        for (var thrusterKey in this.specs.RCS) {
            var thruster = this.thrusters[thrusterKey];
            if(thruster.retro) thruster.shutdown();
        }        
    }
    
    // Equipment
    equipEquipmentInSlot(equipment,slot){
        this.equipment.push(equipment);
    }

    unequipEquipment(equipment){
        equipment.equipped = false;
        
        var index = this.equipment.indexOf(equipment);
        if (index > -1) {
            this.equipment.splice(index, 1);
        }
    }

    
    // Movement    
    get heading(){
        return this.sprite.angle;
    }
    
    accelerate() {
        if(!this.isDocked){
            // Not Docked
            var totalThurst = 0;
            for (let engine of this.engines) {
                if(this.hasFuel){
                    this.consumeFuel(engine.fuelConsumption)
                    totalThurst += engine.thrust;
                    engine.accelerate();
                } else {
                    engine.deaccelerate();                
                }
            }
            this.sprite.body.thrust(totalThurst)
        } else {
            // Docked
            for (let engine of this.engines) {
                engine.deaccelerate();
            }
        }
    }
    
    get totalThurst(){
        var totalThurst = 0;
        for (let engine of this.engines) {
            totalThurst += engine.thrust;
        }
        return totalThurst;
    }
    
    limitSpeed() {
        var maxVelocity = this.maxSpeed;
        if(this.hyperDriveEngaged) maxVelocity = 50;
        var sprite = this.sprite;

        var body = sprite.body
        var angle, currVelocitySqr, vx, vy;
        vx = body.data.velocity[0];
        vy = body.data.velocity[1];
        currVelocitySqr = vx * vx + vy * vy;
        if (currVelocitySqr > maxVelocity * maxVelocity) {
            angle = Math.atan2(vy, vx);
            vx = Math.cos(angle) * maxVelocity;
            vy = Math.sin(angle) * maxVelocity;
            body.data.velocity[0] = vx;
            body.data.velocity[1] = vy;
        }
    };
        
    deaccelerate() {
        if(this.sprite){
            this.sprite.body.acceleration = 0;
    
            for (let engine of this.engines) {
                engine.deaccelerate();
            }

            this.shutdownRetroThrusters();
        }
    }

    goInReverse() {
        if(!this.isDocked && this.hasFuel && !this.hyperDriveEngaged) {
            if(this.speed<this.specs.maxReverse){
                this.sprite.body.reverse(this.specs.reverseThrust)
            }

            this.fireThruster('retro_a');
            this.fireThruster('retro_b');
        }
    }
    
    turnLeft(){
        if(!this.isDocked && this.sprite.body.angularVelocity>-this.specs.maxTurning && this.hasFuel && !this.hyperDriveEngaged) {
            this.sprite.body.angularVelocity -= this.specs.turnAccel;
        
            this.fireThruster('forward_right');
            this.fireThruster('aft_left');
        }
    }

    turnRight(){
        if(!this.isDocked && this.sprite.body.angularVelocity<this.specs.maxTurning && this.hasFuel && !this.hyperDriveEngaged) {
            this.sprite.body.angularVelocity += this.specs.turnAccel;

            this.fireThruster('forward_left');
            this.fireThruster('aft_right');
        }
    }

    moveLeft(){
        if(!this.isDocked && this.hasFuel && !this.hyperDriveEngaged) {
            this.sprite.body.thrustLeft(this.specs.leftRightThrust)

            this.fireThruster('forward_right');
            this.fireThruster('aft_right');
        }
    }

    moveRight(){
        if(!this.isDocked && this.hasFuel && !this.hyperDriveEngaged) {
            this.sprite.body.thrustRight(this.specs.leftRightThrust)

            this.fireThruster('forward_left');
            this.fireThruster('aft_left');
        }
    }

    deaccelerateTurning(){
        if(this.sprite){
            if(this.sprite.body.angularVelocity>0){
                this.sprite.body.angularVelocity = Math.max(this.sprite.body.angularVelocity-this.specs.turnDecay,0);
            }
            if(this.sprite.body.angularVelocity<0){
                this.sprite.body.angularVelocity = Math.min(this.sprite.body.angularVelocity+this.specs.turnDecay,0);
            }
        }
        
        this.shutdownAttitudeThrusters();
    }
    
    
    // Navigation
    navigate(){
        if(this.navigationMode == NAVIGATION_MODE.free) return;

        if(this.navigationMode == NAVIGATION_MODE.stationKeeping) this.keepStation();

        if(this.navigationMode == NAVIGATION_MODE.target) this.trackTargetCurrentNavigationTarget();
        
        if(this.navigationMode == NAVIGATION_MODE.followWaypoints) {
            this.goToWayPoint(this.navigation.waypoints[this.navigation.currentWaypoint]);
        }
    }

    goToWayPoint(waypoint){
        var shipAngle = this.sprite.rotation;
        
        // Heading
        var angleToWaypoint = this.game.physics.arcade.angleToXY(this.sprite, waypoint.x, waypoint.y) + 1.5708;
        var vx = this.sprite.body.velocity.x;
        var vy = this.sprite.body.velocity.y;
        var eta = this.distanceToWaypoint/Math.sqrt(Math.pow(vx,2) + Math.pow(vy,2)); // Seconds until impact.
        
        var difference = Phaser.Math.wrapAngle(Math.degrees(angleToWaypoint - this.sprite.body.rotation));

        var distanceTolerance = 30;
        if(this.distanceToWaypoint<distanceTolerance){
            this.deaccelerate();
            this.sprite.body.setZeroVelocity();
            this.sprite.body.setZeroRotation();
            this.reachedWaypoint();
        } else {
            var turnSpeed = Math.abs(difference)*.02;
            if(difference<-3 && difference>-180){
                if(Math.abs(this.sprite.body.angularVelocity)< turnSpeed){
                    this.turnLeft();
                } else {
                    this.deaccelerateTurning();                
                }
                this.deaccelerate();
            } else if(difference>3 && difference<180) {
                if(Math.abs(this.sprite.body.angularVelocity)< turnSpeed){
                    this.turnRight();
                } else {
                    this.deaccelerateTurning();                
                }
                this.deaccelerate();
            } else {
                if(eta < 8){
                    if(this.distanceToWaypoint>distanceTolerance){
                        this.goInReverse();                    
                    }
                    this.deaccelerate();
                } else {
                    this.accelerate();
                }
            }
        }
    }

    reachedWaypoint(){
        if(this.navigationMode == NAVIGATION_MODE.followWaypoints) {
            var w = this.navigation.currentWaypoint + 1;
            if(w>this.navigation.waypoints.length-1){
                w = 0;
            }
            
            this.navigation.currentWaypoint = w;
        }
    }
            
    get distanceToWaypoint(){
        var waypoint = this.navigation.waypoints[this.navigation.currentWaypoint];
        return this.game.physics.arcade.distanceToXY(this.sprite, waypoint.x,waypoint.y);
    }
    
    navigateWaypoints(){
        this.navigationMode = NAVIGATION_MODE.followWaypoints;
    }
    
    keepStation(){
        // Holds steady speed and heading
    }
    
    trackTargetCurrentNavigationTarget(){
        // Doesnt do much.
    }
    
    nextNavigationTarget(){
        this.navigationMode = NAVIGATION_MODE.target;
        this.navigationIndex++;
        
        if(this.navigationIndex>this.navigatableObjects.length-1){
            this.navigationIndex = -1;   
        }

        this.navTargetChangedSound.play();
        
        this.setNavigationTargetToCurrentNavigationTargetIndex();
    }
    
    get navigatableObjects() {
        var objects = [];
        this.game.system.stellarObjects.forEach(function(gameObject) {
            if(gameObject.canNavigateTo && gameObject != this){
                objects.push(gameObject);
            }
        },this);
        this.game.system.planets.forEach(function(gameObject) {
            if(gameObject.canNavigateTo && gameObject != this){
                objects.push(gameObject);
            }
        },this);

        return objects;
    }
    
    setNavigationTargetToCurrentNavigationTargetIndex(){
        var index = 0;
        var target = null;
        this.navigatableObjects.forEach(function(navigatableObject) {
            if(index==this.navigationIndex){
                target = navigatableObject;
            }
            index ++;
        },this);
        this.navigationTarget = target;
    }
    
    get distanceToCurrentNavigationTarget(){
        return this.game.physics.arcade.distanceToXY(
            this.sprite,
            this.navigationTarget.sprite.x,
            this.navigationTarget.sprite.y
        );
    }

    get formattedDistanceToCurrentNavigationTarget(){
        //console.log(this.navigationTarget);
        var distance;
        if(this.navigationTarget.isPlanet){
            distance = this.distanceToCurrentNavigationTarget*DISTANCE_FACTOR_PLANETS;
            if(distance<75000){
                return 'Arrived';
            } else {
                return numeral(distance).format('0,0.0 a').toUpperCase()+'m';
            }
        } else {
            distance = this.distanceToCurrentNavigationTarget*DISTANCE_FACTOR_SHIPS;
            if(distance<10){
                return 'Arrived';
            } else {            
                return numeral(distance).format('0,0.0 a').toUpperCase()+'m';
            }
        }
    }

    get formattedTimeToCurrentNavigationTarget(){
        var vx = this.sprite.body.velocity.x;
        var vy = this.sprite.body.velocity.y;
        var distanceToNavigationTarget = this.distanceToCurrentNavigationTarget
        if(this.navigationTarget.isPlanet){
            distanceToNavigationTarget = distanceToNavigationTarget*2; // Planets have difference scale
        }
        
        var eta = distanceToNavigationTarget/Math.sqrt(Math.pow(vx,2) + Math.pow(vy,2));
        if(eta<1 || eta.isNaN){
            return '--';
        } else {
            return TIME_FORMAT(eta);       
        }
    }
    
    get angleToCurrentNavigationTarget(){
        var angleToWaypoint = this.game.physics.arcade.angleToXY(
            this.sprite,
            this.navigationTarget.sprite.x,
            this.navigationTarget.sprite.y
        );
        var difference = Phaser.Math.wrapAngle(Math.degrees(angleToWaypoint));
        return difference;
    }
    
    
    // Fuel Mgmt
    refuel(){
        this.fuelQuantity = this.maxFuel;
        this.lowFuelLightShown = false;
        
        this.game.hud.hasFuel();
    }
    
    lowFuelLight(){
        if(!this.lowFuelLightShown) {
            this.lowFuelLightShown = true;
            this.game.hud.lowFuel();
        }
    }
    
    consumeFuel(amount){
        this.fuelQuantity -= amount;

        if(this.fuelPercentage<25){
            this.lowFuelLight();
        }

        if(!this.hasFuel){
            this.game.hud.blinkingWarning("Out of Fuel");
        }
    }

    addFuel(amount){
        this.fuelQuantity += amount;

        if(this.fuelPercentage>25){
            this.game.hud.hasFuel();
        }
    }
    
    get fuelPercentage(){
        return Math.round((this.fuelQuantity/this.maxFuel)*100)        
    }

    get hasFuel(){
        if(this.fuelQuantity>=0){
            return true;
        } else {
            return false;
        }
    }
    
    // Energy Management
    recharge(){
        this.energyQuantity = this.maxEnergy;
    }
    
    charge(amount){
        if(this.energyQuantity <= this.maxEnergy){
            this.energyQuantity += amount;
        }
        
        if(this.energyQuantity>=this.maxEnergy){
            this.energyQuantity = this.maxEnergy;
        }
    }
            
    consumeEnergy(amount){
        this.energyQuantity -= amount;

        if(!this.hasEnergy){
            //this.game.hud.blinkingWarning("Not Enough Energy");
        }
    }
    
    get energyPercentage(){
        var value = Math.round((this.energyQuantity/this.maxEnergy)*100);
        return Math.max(value,0);
    }
        
    get hasEnergy(){
        if(this.energyQuantity>=0){
            return true;
        } else {
            return false;
        }
    }

    // Landing
    attemptToLand(){                
        // Dock initiator calls this (ie. Dockee connects to Docker)
        var closestLandingSite = false;
        var landingSitesInRange = [];
        for (let landingSite of this.game.gameObjects) {
            if(landingSite.canLand && landingSite.system == this.game.system){
                var distance = this.game.physics.arcade.distanceBetween(landingSite.sprite, this.sprite);
                if(distance<=landingSite.showInfoDistance)
                    landingSitesInRange.push({
                        distance: distance,
                        landingSite: landingSite,
                    })
            }
        }
        if(landingSitesInRange.length>0){
            landingSitesInRange.sort(function(a, b) {
                return a.distance - b.distance;
            });

            var landingSite = landingSitesInRange[0].landingSite; // Closest
            var maxSpeedWhenLanding = 10;

            if((this.speed)>maxSpeedWhenLanding){
                this.game.hud.message("Moving maxSpeedWhenLandingt to land");
                return;
            }

            this.landAt(landingSite);

        } else {
            this.game.hud.message("No Landing Site Available");
        }
    }

    landAt(landingSite){
        if(this == this.game.player.ship){
            this.game.add.tween(this.sprite).to( { alpha: 0 }, 600, "Quart.easeOut", true);
            this.game.add.tween(this.sprite.scale).to( { x: .5, y: .5 }, 600, "Quart.easeOut", true);

            // Refuel if needed (Only if autorefuel is on)
            if(this.game.player.settings.autoRefuel && landingSite.hasService(PLANET_SERVICES.fuelDepot)){
                this.game.player.autoRefuel();
            }

            this.game.arrivalScreen.destination = landingSite;
            this.game.arrivalScreen.show();
        } else {
            // Handle AI Ship landing
        }
    }

    takeOff(){
        this.game.skipTime(1,'day');
        this.game.skipTime(game.rnd.integerInRange(1, 12),'hour');

        this.game.add.tween(this.sprite).to( { alpha: 1 }, 600, "Quart.easeOut", true, 500);
        this.game.add.tween(this.sprite.scale).to( { x: 1, y: 1 }, 600, "Quart.easeOut", true, 500);    
    }

    // Docking
    attemptToDock(){        
        if(this.isDocked){
            if(this.dockingInProgress){
                this.abortDocking();
            } else {
                this.releaseDock();
            }
            return;
        }
        
        // Dock initiator calls this (ie. Dockee connects to Docker)
        var closestShip = false;
        var shipsInRange = [];
        for (let ship of this.game.gameObjects) {
            if(ship.specs!=undefined && ship!=this){
                var distance = this.game.physics.arcade.distanceBetween(ship.sprite, this.sprite);
                    shipsInRange.push({
                        distance: distance,
                        ship: ship,
                    })
            }
        }
        if(shipsInRange.length>0){
            shipsInRange.sort(function(a, b) {
                return a.distance - b.distance;
            });

            var shipToDockTo = shipsInRange[0].ship;
            var maxSpeedWhenDocking = 10;
            
            

            if((this.sprite.body.speed-shipToDockTo.sprite.body.speed)>maxSpeedWhenDocking){
                this.game.hud.message("Moving too fast to dock");
                return;
            }
            
            if(!this.okToDock){
                this.game.hud.message("Not aligned for docking");
            } else {
                this.dockWith(shipToDockTo);
            }
        } else {
            this.game.hud.message("No Dock Available");
        }
    }
    
    dockWith(ship){
        var dockingSpeed = 3000;
        
        var dockingPortNumber = 0;

        this.sprite.body.clearShapes();
        ship.sprite.body.clearShapes();
        ship.sprite.body.static = true;        
        
        var dockingPosition = ship.specs.dockingPorts[dockingPortNumber].position

        var dockingAngle = 180 * Math.PI / 180;        
        this.dockingConstraint = game.physics.p2.createLockConstraint(this.sprite, ship.sprite, [0, 72], dockingAngle, 500);
        this.dockedToShip = ship;

        this.isDocked = true;
        this.dockingTarget = ship;
        ship.landingMessage.setText('Docking...');

        game.time.events.add(Phaser.Timer.SECOND * 0, this.dockingComplete, {
            target: ship,
            dockedShip: this,
            portNumber: dockingPortNumber,
            game: this.game,
        });
    }
    
    dockingComplete(){
        
        var target = this.target;
        var dockedShip = this.dockedShip;
        var portNumber = this.portNumber; // What docking port am i at?

        this.target.dockConnectSound.play();
        
        target.sprite.body.loadPolygon(null,target.specs.polygon);       
        target.sprite.body.dynamic = true
        target.sprite.body.mass = true

        dockedShip.sprite.body.loadPolygon(null,dockedShip.specs.polygon)
        dockedShip.dockedToShip.sprite.body.dynamic = true;        
        dockedShip.dockedToShip.sprite.body.mass = dockedShip.specs.mass;        

        dockedShip.isDocked = true;
        dockedShip.dockedAtPortNumber = portNumber;
        dockedShip.hardDocked = true;
        dockedShip.dockingInProgress = false;

        target.dockedShips.push(dockedShip);

        this.game.hud.message("Docking Successful");
        target.landingMessage.setText('Press D to Release');
    }    

    releaseDock(){
        if(this.hardDocked && this.isDocked){
            this.dockReleaseSound.play();
            game.physics.p2.removeConstraint(this.dockingConstraint);
            
    	    var emitter = this.game.add.emitter(0,0,100);
            this.dockingConnector.addChild(emitter);
                
            emitter.makeParticles('cloud');
            emitter.gravity = 0;
            emitter.maxRotation = 100;
            emitter.minRotation = 30;
            emitter.minParticleScale = .01;
            emitter.maxParticleScale = .1;
            emitter.explode(200, game.rnd.integerInRange(7, 10));
            this.game.time.events.add(500, this.destroyEmitter, emitter);  
        }

        // Reset Docking
        this.abortDocking();
    }

    abortDocking(){
        //this.dockedToShip.landingMessage.setText('Press D to Dock');


        this.isDocked = false;
        this.dockedToShip = null;
        this.dockedAtPortNumber = null;
        this.hardDocked = false;
        this.dockingInProgress = false;
        this.dockingTarget = null;
    }
    
    // Info
    showInfoIfNeeded(){
        if(this.shouldShowInfo && !this.infoShowing){
            this.infoSound.play();

            this.game.add.tween(this.nameText).to( { alpha: 1 }, 300, "Quart.easeOut", true);
            //this.game.add.tween(this.nameText).to( { y: '-30' }, 300, "Quart.easeOut", true);    
            
            this.game.add.tween(this.subText).to( { alpha: 1 }, 300, "Quart.easeOut", true);
            //this.game.add.tween(this.subText).to( { y: '-30' }, 300, "Quart.easeOut", true);                

            this.game.add.tween(this.landingMessage).to( { alpha: .5 }, 300, "Quart.easeOut", true,400);
            //this.game.add.tween(this.landingMessage).to( { y: '-30' }, 300, "Quart.easeOut", true,400);                
        
            this.infoShowing = true;
            this.dockingPort.visible = true;
        }
        
        if(!this.shouldShowInfo && this.infoShowing){
            this.hideInfo();
            this.infoShowing = false;
            this.dockingPort.visible = false;
        }
    }
    
    hideInfo(){
        this.game.add.tween(this.nameText).to( { alpha: 0 }, 300, "Quart.easeOut", true);        
        this.game.add.tween(this.subText).to( { alpha: 0 }, 300, "Quart.easeOut", true);        
        this.game.add.tween(this.landingMessage).to( { alpha: 0 }, 300, "Quart.easeOut", true);

        this.game.add.tween(this.subText).to( { y: '+30' }, 0, "Quart.easeOut", true);                
        this.game.add.tween(this.nameText).to( { y: '+30' }, 0, "Quart.easeOut", true);    
        this.game.add.tween(this.landingMessage).to( { y: '+30' }, 0, "Quart.easeOut", true);                

        this.infoShowing = false;
    }
    
    get shouldShowInfo(){
        if(this.distanceToPlayer<=this.showInfoDistance) {
            return true;
        } else {
            return false;
        }
    }
    // Weapons + Damage Collisions
    processBulletCollision(ship, bullet){
	    var emitter = this.game.add.emitter(bullet.x, bullet.y, 100);
        emitter.makeParticles('asteroid-flake-3');
        emitter.minParticleScale = .5;
        emitter.maxParticleScale = 1;
        emitter.gravity = 0;
        emitter.explode(200, 1);
        this.game.time.events.add(500, this.destroyEmitter, emitter);
        
        bullet.kill();
        return false; // Never collides, just dies.
    }
    
    playJettisonCargoAnimation(){
        this.cargoJettisonEmitter.setAngle(this.sprite.angle+90-30,this.sprite.angle+90+30);
        this.cargoJettisonEmitter.x = this.sprite.x;
        this.cargoJettisonEmitter.y = this.sprite.y;
        this.cargoJettisonEmitter.start(true, 5000, null, 1);
    }
    

    // HyperDrive™
    toggleHyperDrive(){        
        if(!this.hyperDriveEngaged){
            if(this.jumpsRemaining<1){
                this.game.hud.message("No FTL fuel in inventory");
                return;
            }

            if((this.speed)>15){
                this.game.hud.message("Moving too fast to engage FTL Drive");
                return;
            }

            this.hyperDriveTimer = game.time.events.add(this.hyperDriveDelay, this.jump, this);
            this.ftlChargeSound.play();
            this.hyperDriveEngaged = true;
            this.jumpWasAborted = false;
            
            this.consumeHyperdriveFuel();
        }
    }
    
    hyperDriveUpdate(){
        this.sprite.body.thrust(500);
        this.hyperDriveEmitter.emit(
            'hyperDrive',
            this.sprite.worldPosition.x + this.game.camera.x,
            this.sprite.worldPosition.y + this.game.camera.y
        );        
    }
    
    abortJump(){
        this.ftlChargeSound.stop();
        
        if(this.hyperDriveEngaged){
            this.jumpCompleteSound.play();
        }
        
        this.jumpWasAborted = true;
        
        this.disengageHyperDrive();    
    }
    
    get jumpsRemaining(){
        // Calculate remaing hyperdrive fuel.
        var jumpsRemaining = 0;
        for (let item of this.inventory){
            if(item.isHyperdriveFuel) jumpsRemaining++;
        }
        return jumpsRemaining;
    }

    consumeHyperdriveFuel(){
        for (let item of this.inventory){
            if(item.isHyperdriveFuel) {
                item.consume();
                break;
            }
        }
    }
    
    jump(){
        if(this.jumpWasAborted) return;

        this.ftlJumpSound.play();
        game.camera.flash(0xFFFFFF, 500);
        
        // Systems
        var previousSystem = this.game.mapScreen.map.currentPath.shift();
        var currentSystem = this.game.mapScreen.map.currentPath.firstItem();
        if(currentSystem) currentSystem.arrive();
        
        // Time
        this.game.skipTime(rng.nextInt(6,36),'hours');             
        
        // We're there.
        if(this.game.mapScreen.map.currentPath.length==1){
            if(this.game.mapScreen.map.currentPath.firstItem() == currentSystem){
                this.game.mapScreen.map.currentPath = false;
                this.game.mapScreen.map.navigationDestination = null;
                
                game.time.events.add(1000, function(){
                    this.game.hud.hideFTLPanel();
                }, this);
            }
        }
        
        // Figure out where we should land
        var angleToSystemCenter = Phaser.Math.reverseAngle(Math.atan2(
            this.sprite.y - this.game.world.centerY,
            this.sprite.x - this.game.world.centerX
        ));
         // Radians
        var r = 5000;
        var landingX = this.sprite.x + r * Math.cos(angleToSystemCenter);
        var landingY = this.sprite.y + r * Math.sin(angleToSystemCenter);
                
        this.sprite.body.x = landingX;
        this.sprite.body.y = landingY;
        
        // Slow down
        var slowDownTween = this.game.add.tween(this.sprite.body).to({
            damping: .95,
        }, 2000, "Quart.easeOut", true)
        slowDownTween.onComplete.add(function(){
            var slowDownTween = this.game.add.tween(this.sprite.body).to({
                damping: 0,
            }, 1000, "Quart.easeOut", true)
        }, this);
        game.time.events.add(2000, function(){
            this.disengageHyperDrive();
        }, this);

        // Power down sound
        game.time.events.add(800, function(){
            this.jumpCompleteSound.play();
        }, this);

        // Cleanup
        this.game.player.exitDarkness();
        this.game.hud.updateFTLPanel();
        this.navigationMode = NAVIGATION_MODE.free;
        this.navigationIndex = -1;
        this.setNavigationTargetToCurrentNavigationTargetIndex();
   }
    
    disengageHyperDrive(){
        this.hyperDriveEngaged = false;
        this.hyperDriveTimer = game.time.events.remove(this.hyperDriveDelay);
    }

    // Venting
    ventAtmosphere(){
        var o2Density = (this.oxygenQuantity/this.oxygenMax)*.05;
        var o2Spread = (this.oxygenQuantity/this.oxygenMax)/2;
        this.ventData.alpha = { min: 0, max: .05 };
        this.ventData.vx = { min: -o2Spread, max: o2Spread };
        this.ventData.vy = { min: -o2Spread, max: o2Spread };
        
        var x = this.sprite.worldPosition.x + this.game.camera.x;
        var y = this.sprite.worldPosition.y + this.game.camera.y;
        
        this.atmosphereWell.position.x = x;
        this.atmosphereWell.position.y = y;        
        
        if(this.oxygenQuantity>0){
            this.atmosphereEmitter.emit(
                'atmosphere',
                x,
                y
            );
            this.oxygenQuantity--;
            
            if(this.oxygenQuantity<1000){
                if(this == this.game.player.ship && !this.O2Critical) {
                    this.game.hud.blinkingWarning("Oxygen Levels Critical");
                }
                this.O2Critical = true;
            }
            
        } else {
            this.asphyxiate();
        }
    }
    
    get o2Percent(){
        return this.oxygenQuantity/this.oxygenMax;
    }
    
    asphyxiate(){
        this.kill();
    }
    
    burn(){
        this.flamesEmitter.emit(
            'flames',
            this.sprite.worldPosition.x + this.game.camera.x,
            this.sprite.worldPosition.y + this.game.camera.y
        );        
    }

    // Damage
    inflictDamage(amount){
        super.inflictDamage(amount);

        if(this.healthPercentage<this.hullBreachAtHealthPercentage && !this.hullBreached){
            this.hullBreached = true;
            if(this == this.game.player.ship) {
                this.gasLeakSound.play();
                this.game.hud.showO2Panel();
                this.game.hud.blinkingWarning("Hull Breach - Venting Atmosphere");
            }
        }

    }

    // Sounds
    crash_sound(){
        var isPlayingAnySound = false;
        for (let sound of this.crashSounds)
            if(sound.isPlaying){
                isPlayingAnySound = true;
                break;
            }
        
        if(!isPlayingAnySound){
            this.crashSounds[this.game.rnd.integerInRange(0,this.crashSounds.length-1)].play();
        }               
    }
    crashSoft_sound(){
        var isPlayingAnySound = false;
        for (let sound of this.crashLightSounds)
            if(sound.isPlaying){
                isPlayingAnySound = true;
                break;
            }
        
        if(!isPlayingAnySound){
            this.crashLightSounds[this.game.rnd.integerInRange(0,this.crashLightSounds.length-1)].play();
        }       
    }
    crashThud_sound(){
        var isPlayingAnySound = false;
        for (let sound of this.crashThudSounds)
            if(sound.isPlaying){
                isPlayingAnySound = true;
                break;
            }
        
        if(!isPlayingAnySound){
            this.crashThudSounds[this.game.rnd.integerInRange(0,this.crashThudSounds.length-1)].play();
        }       
    }

    
    // Rendering
    update() {
        super.update(); 
        this.positionInfo();        
        this.navigate();        

        // Damage
        if(this.hullBreached){
            this.ventAtmosphere();
            if(this.healthPercentage>this.hullBreachAtHealthPercentage){
                this.hullBreached = false;
                if(this == this.game.player.ship) {
                    this.game.hud.hideO2Panel();
                }
            }
        }



        // Cargo

        // Hyperdrive
        if(this.hyperDriveEngaged) this.hyperDriveUpdate();
        
        // Docking
        if(this.specs.canBeDockedTo && this.sprite != this.game.player.ship.sprite){
            var a = this.dockingPort.worldPosition.x - this.game.player.ship.dockingConnector.worldPosition.x;
            var b = this.dockingPort.worldPosition.y - this.game.player.ship.dockingConnector.worldPosition.y;
            var d = Math.sqrt(a*a + b*b);
           
            // Rotation
            var r = Math.abs(Math.abs(this.sprite.angle - this.game.player.ship.sprite.angle) - 180); 

            if(d<15 && r<20){
                this.game.player.ship.okToDock = true;
                this.landingMessage.setText("Press D to Dock");
            } else {
                this.game.player.ship.okToDock = false;
                this.landingMessage.setText("Cleared to Dock");
            }
            
            // Update distance for info
            this.distanceToPlayer = this.game.physics.arcade.distanceBetween(
                this.sprite,
                this.game.player.sprite
            );

            this.showInfoIfNeeded();
        }

        if(this.isDocked || this.dockingInProgress){
            this.sprite.x += this.dockingTarget.sprite.deltaX;
            this.sprite.y += this.dockingTarget.sprite.deltaY;
        }

        // Finally, limit speed.
        this.limitSpeed();
    }   
}





/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/ships/shuttle.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/engines/_engine.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Shuttle extends Ship {
    constructor(game,x,y) {
        super(game,x,y);
        
        this.specs = {
            name : 'Shuttle',
            description : 'Shuttle',
            health: 100,
            turnDecay: .03,
            turnAccel: .1,
            leftRightThrust: 100,
            maxTurning: 10,
            reverseThrust: 100,
            maxReverse: 90,
            maxFuel : 2200,
            maxEnergy: 100,
            mass: 1, // Tons
            equipmentSlots : 4,
            centerOfGravity : {
                x : .5,
                y : .5,
            },
            polygon: [
                {
                    "shape": [   8, 24  ,  19, 24  ,  18, 33  ,  9, 33  ]
                } ,
                {
                    "shape": [   27, 22  ,  19, 24  ,  8, 24  ,  0, 16  ,  7, 12  ,  21, 14  ,  27, 16  ]
                } ,
                {
                    "shape": [   0, 16  ,  8, 24  ,  0, 22  ]
                } ,
                {
                    "shape": [   7, 12  ,  12, 0  ,  17, 2  ,  21, 14  ]
                }
            ],
            weaponSlots : [],
            engineSlots : [{
                anchor : {
                    x: 0.57,
                    y: -1.6,
                },
                angle : 0,
            }],
            RCS :{
                forward_left : {
                    x: 10,
                    y: 3,
                    angle : 90,
                },
                forward_right : {
                    x: 17,
                    y: 8,
                    angle : 270,                    
                },
                aft_left : {
                    x : 8,
                    y : 25,
                    angle : 90,
                },
                aft_right : {
                    x: 19,
                    y: 31,
                    angle : 270,                    
                },
                retro_a : {
                    x: 7,
                    y: 17,
                    angle : 180,
                    retro : true,                   
                },
                retro_b : {
                    x: 25,
                    y: 17,
                    angle : 180,
                    retro : true,                   
                },
            },
            dockingConnector : {
                position : {
                    x: 0,
                    y: -18,
                    angle : 90,
                },
                inUse: false,
            },
            storage : {
                passengers : 6,
            }
        }

        // Sprites
        
        this.sprite = this.game.add.sprite(x,y, 'shuttle');
        this.sprite.anchor.set(this.specs.centerOfGravity.x,this.specs.centerOfGravity.y);

        this.setupSprite(this.sprite);

        // Engine
        var engine = new SmallEngine(this.game,this);
        this.equipEngineInSlot(engine,0);
        this.refuel();

        // Reactor
        var reactor = new Batteries(this.game,this);
        this.equipEquipmentInSlot(reactor,0);
        this.recharge();
        
        // Cargo
        this.emptyCargoHold();
    }
}
class Engine extends Equipment {
    constructor(game,options) {
        super(game,options);

        this.fuelConsumption = 1;
        this.thrust = 100;
        this.spoolUpSpeed = 1;
        this.spoolDownSpeed = .04;

        this.currentSpool = 0;
        this.isEngine = true;

        this.infoFields = ['baseValue','mass','rarity','__space__','type','thrust','fuelConsumption'];
        this.infoFieldLabels = ['Value','Weight','Rarity','','Engine Type','Thrust','Fuel Consumption'];
    }

    set slot(slot){
        var slotAnchor = this.parentObject.specs.engineSlots[slot].anchor;
        
        // Setup Flames
        this.flames = this.parentObject.sprite.addChild(this.game.make.sprite(0, 0, 'blue_flame'));
        //this.flames.blendMode = PIXI.blendModes.ADD; // Some bug that makes the sidebar blink.
        this.flames.angle = this.parentObject.specs.engineSlots[slot].angle;
        this.flames.anchor.set(slotAnchor.x,slotAnchor.y);
    }

    accelerate(){
        if(this.currentSpool<=1){
            this.currentSpool = Math.min(this.currentSpool+this.spoolUpSpeed,1);
        }
        if(this.retro) {
            this.currentSpool = 1
        }        
    }

    deaccelerate(){
        if(!this.retro) {
            this.currentSpool = Math.max(this.currentSpool-this.spoolDownSpeed,0)
        } else {
            this.currentSpool = Math.max(this.currentSpool-.1,0)            
        }
    }

    fire(){
        this.accelerate();
    }
    
    shutdown(){
        this.deaccelerate();    
    }

    update(){
        this.flames.alpha = this.currentSpool;    
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/weapons/focusedBeam.js begins */
/* Merging js: app/engines/basicEngine.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




class BasicEngine extends Engine {
    constructor(game,options) {
        super(game,options);

        this.thrust = options.data.thrust;
        this.maxSpeed = options.data.maxSpeed;
        this.spoolUpSpeed = options.data.spoolUpSpeed;
        this.spoolDownSpeed = options.data.spoolDownSpeed;
        this.fuelConsumption = options.data.fuelConsumption;

        this.sound = game.add.audio('basic-engine');
    }
    accelerate(){
        super.accelerate();
        if(!this.sound.isPlaying) this.sound.play();
        
        this.sound.volume = this.flames.alpha;
    }
    deaccelerate(){
        super.deaccelerate();
        this.sound.volume = this.flames.alpha;
        
        if(this.sound.volume==0 && this.sound.isPlaying) this.sound.stop();
    }

}class FocusedBeamWeapon extends Weapon {
    constructor(game,options) {
        super(game,options);
        
        this.baseBulletSpeed = 400;
        this.weapon = game.add.weapon(40, 'laser-sparkle');
        this.weapon.bulletKillType = Phaser.Weapon.KILL_LIFESPAN;
        this.weapon.bulletLifespan = options.data.range;
        this.weapon.bulletSpeed = this.baseBulletSpeed;
        this.weapon.fireRate = 20;
        this.weapon.bulletAngleVariance = 1.5;
        this.weapon.bulletSpeedVariance = 90;
        this.weapon.bullets.alpha = 1;
        this.weapon.bullets.blendMode = PIXI.blendModes.ADD;
        this.weapon.bullets.setAll('scale.x', 0.3);
        this.weapon.bullets.setAll('scale.y', 0.1);
        this.weapon.bullets.setAll('damage',options.data.damage);
        this.weapon.bullets.setAll('smoothed',false);
        this.weapon.setBulletBodyOffset(6, 6, 50, 30);        
        this.weapon.onFire.add(this.fire, this);
        // Should be on the ships
        this.game.ships.addChild(this.weapon.bullets)
        
        this.weapon.bullets.forEach(function(bullet){
            bullet.weapon = this;
            bullet.postUpdate = this.postUpdate;
        },this);

        this.energyConsumption = options.data.energyConsumption;

        this.sound = game.add.audio('mining-laser')
        this.sound.addMarker('begin',0,0.15);
        this.sound.addMarker('loop',0.15,0.573);
        this.sound.addMarker('end',1.123,0.45);
        this.soundCountdown = 10;
        this.coolingDown = false;
        this.sound.onStop.add(this.soundStopped, this);
    }
    soundStopped(sound,marker){
        if(marker=='begin'){
            this.sound.play('loop',0,1,true);
        }
        if(marker=='end'){
            this.sound.pause();
            this.coolingDown = false;
        }
    }    
    
    fire(){
        super.fire();
	    this.soundCountdown = 10;
        if(!this.sound.isPlaying) this.sound.play('begin');
    }
    
    doneFiring(){
        if(!this.coolingDown && this.sound.isPlaying) {
            this.sound.play('end');
            this.coolingDown = true;
        }
    }
    
    update(){
        if(this.soundCountdown==0){
            this.doneFiring();
        } else {
            this.soundCountdown--;
        }

        if(this.parentObject) this.weapon.bulletSpeed = this.parentObject.speed + this.baseBulletSpeed;
    }
}






/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/engines/smallEngine.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/weapons/basicBlaster.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class SmallEngine extends Engine {
    constructor(game,options) {
        super(game,options);

        this.name = 'Small Engine';
        this.key = 'small_engine';

        this.thrust = 130;
        this.maxSpeed = 150;
        this.spoolUpSpeed =.08;
        this.spoolDownSpeed = .04;
        this.fuelConsumption = .8;

        this.flames = this.parentObject.sprite.addChild(this.game.make.sprite(0, 0, 'blue_flame'));
        this.flames.scale.set(.6);
    }
}class BasicBlaster extends Weapon {
    constructor(game,parentObject) {
        super(game,parentObject);

        this.weapon = game.add.weapon(40, 'blasterBullet');
        this.weapon.bulletKillType = Phaser.Weapon.KILL_LIFESPAN;
        this.weapon.bulletLifespan = 1000;
        this.weapon.bulletSpeed = 450;
        this.weapon.fireRate = 250;
        this.weapon.bulletAngleVariance = 0;
        this.weapon.bulletSpeedVariance = 10;
        this.weapon.bullets.alpha = 1;
        this.weapon.bullets.blendMode = PIXI.blendModes.ADD;
        this.weapon.bullets.setAll('damage',2);
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Merging js: app/engines/_thruster.js begins */

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/* Merging js: app/planets/_planet.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */



class Planet extends GameObject{
    constructor(game,x,y) {
        super(game);

        this.minimapSize = 2.3;
        this.distanceToPlayer;
        
        this.showInfoDistance = 90;
        this.infoShowing = false;

        this.isPlanet = true;
        this.canNavigateTo = true;
        this.canLand = true;
        
        this.services = [];
        this.specs = {
            storage : {
                bulk : Infinity,
                passengers : Infinity,
                liquid : Infinity,
                gas : Infinity,
            }
        }

        this.itemMarkup = 1.1 // Multuplier
        this.infoSound = game.add.audio('beep-beep');
    }
    
    setupSprite(options){
        super.setupSprite(this.sprite);
        this.wrapper = this.game.make.group();
        this.wrapper.add(this.sprite);

        this.sprite.anchor.setTo(.5, .5);
        this.sprite.smoothed = false;
        this.sprite.parentObject = this;

        this.game.planets.add(this.wrapper);

        this.nameText = this.game.add.text( 
            20+this.sprite.x + this.sprite.width/2,this.sprite.top+10, 
            this.name, 
            { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'left' },
            this.game.planets,
        );
        this.wrapper.add(this.nameText);
        this.nameText.alpha = 0;

        this.subText = this.game.add.text(
            20+this.sprite.x + this.sprite.width/2,this.sprite.top + 30, 
            this.description, 
            { font: `11px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
            this.game.planets,
        );
        this.wrapper.add(this.subText);
        this.subText.alpha = 0;

        this.landingMessage = this.game.add.text(
            20+this.sprite.x + this.sprite.width/2,this.sprite.top + 60, 
            'Press L to Land', 
            { font: `10px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
            this.game.planets,
            this.wrapper
        );
        this.wrapper.add(this.landingMessage);
        this.landingMessage.alpha = 0;
    }
    
    // Info Display
    showInfoIfNeeded(){
        if(this.shouldShowInfo && !this.infoShowing && this.game.initialized){ 
            if(!this.game.player.ship.hyperDriveEngaged) this.infoSound.play();
                   
            this.game.add.tween(this.nameText).to( { alpha: 1 }, 300, "Quart.easeOut", true);
            this.game.add.tween(this.subText).to( { alpha: 1 }, 300, "Quart.easeOut", true);

            if(this.canLand){
                this.game.add.tween(this.landingMessage).to( { alpha: .5 }, 300, "Quart.easeOut", true);
            }
        
            this.infoShowing = true;
        }
        
        if(!this.shouldShowInfo && this.infoShowing){
            this.hideInfo();
            this.infoShowing = false;
        }
    }

    get shouldShowInfo(){
        if(this.distanceToPlayer<=this.showInfoDistance) {
            return true;
        } else {
            return false;
        }
    }
    
    hideInfo(){
        this.game.add.tween(this.nameText).to( { alpha: 0 }, 300, "Quart.easeOut", true);        
        this.game.add.tween(this.subText).to( { alpha: 0 }, 300, "Quart.easeOut", true);        
        this.game.add.tween(this.landingMessage).to( { alpha: 0 }, 300, "Quart.easeOut", true);

        this.infoShowing = false;
    }
        
    // Services        
    hasService(service){
        return this.services.includes(service);
    }
    
    get services(){
        var services = [];
        for (let service of PLANET_SERVICES_REQUIREMENTS)
            if(this.stats[service.requirement]>=service.level)
                services.push(service.service)
        return services;
    }

    set services(services){
        this._services = services;
    }


    // Planets have lots of free space. Like, a lot.
    calculateFreeSpaceForStorageClass(storageClass){
        return Infinity;
    }

    update() {
        super.update();
        if(this.sprite.exists){
            this.distanceToPlayer = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite);
            this.showInfoIfNeeded();
            
            // Paralax
            if(this.isPlanet){
                if(this.game.camera.deltaX || this.game.camera.deltaY){
                    this.wrapper.addAll('x', this.game.camera.deltaX - this.game.camera.deltaX/2, true, true);
                    this.wrapper.addAll('y', this.game.camera.deltaY - this.game.camera.deltaY/2, true, true);                    
                }
            }
        }
    }

}class Thruster extends Engine {
    constructor(game,options) {
        super(game,options);
        this.game.register(this);

        this.engineType = ENGINE_TYPES.reactionControlThruster;
        this.thrust = 0;
        this.fuelConsumption = .1;

        this.spoolUpSpeed = .3;
        this.spoolDownSpeed = .6;

        this.layout = options.layout;

        this.flames = this.parentObject.sprite.addChild(this.game.make.sprite(0, 0, 'rcs_flame'));
        this.flames.x = this.layout.x-this.parentObject.sprite.width/2;
        this.flames.y = this.layout.y-this.parentObject.sprite.height/2;
        this.flames.angle = this.layout.angle;
        this.flames.scale.set(.9);
        this.flames.anchor.set(0,0);

        var smoke = {
            image: 'smoke-trail',
            lifespan: { min: 150, max: 400 },
            scale: { value: { min: .03, max: .1 } },
            vx: { value: { min: 0, max: 0 } },
            vy: { value: { min: 0, max: 0 }, delta: .2, control: [ { x: 0, y: 1 }, { x: 0, y: 0 } ] },
            alpha: { value: .3, control :[ { x: 0, y: 0 }, { x: 0.3, y: 1 }, { x: 1, y: 0 }] },
            rotation: { value: 0, delta: { min: -2.0, max: 2.0 } }
        };

        this.emitter = this.game.ps.createEmitter(); 
        this.emitter.addToWorld();

        this.game.ps.addData('smoke', smoke);
        this.soundCountdown = 10;
    }
    accelerate(){
        super.accelerate();
        this.puff();
    }
    deaccelerate(){
        super.deaccelerate();
    }    
    puff(){
        var px = this.flames.worldPosition.x + game.camera.x;
        var py = this.flames.worldPosition.y + game.camera.y;

        this.emitter.emit('smoke', px, py, { total: 1 });
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/planets/basicPlanet.js begins */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Merging js: app/gameObjects/pickup.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class BasicPlanet extends Planet {
    constructor(game,options) {
        super(game,options.x,options.y); 
                
        this.system = options.system;
        this.index = options.index;
        this.order = (this.index+1).toRoman()   

        // Basics
        this.stats = {
            culture  : this.determineIntegerBetween(0,10),
            industry : this.determineIntegerBetween(0,10),
            science  : this.determineIntegerBetween(0,10),
            trade    :  this.determineIntegerBetween(0,10),
        }
        var bestStat = Object.keys(this.stats)
                           .sort(function(a, b) {
                               return this.stats[b] - this.stats[a];
                           }.bind(this))[0];  
                                            
        var worstStat = Object.keys(this.stats)
                           .sort(function(a, b) {
                               return this.stats[b] + this.stats[a];
                           }.bind(this))[0];                   

        // Specialization - determines low demand things (less expensive)
        this.specialization = this.determineItemFromArray(PLANET_SPECIALIZATIONS[bestStat]);
       
        // Weakness - determines high demand things (more expensive)
        this.weakness = this.determineItemFromArray(PLANET_SPECIALIZATIONS[worstStat]);

        // Population is for passenger terminals
        this.population = this.determineIntegerBetween(0,100000000);

        this.name = `${this.system.name} ${this.order}`;
        this.description = "Class D Planet"
        this.welcomeTitle = "Terrestrial Planet";
        this.welcomeText = `${this.name} is a medium-sized terrestrial planet in the ${this.system.name} system. \nSpeciality ${this.specialization} \nScience ${this.stats.science} \nCulture ${this.stats.culture} \nIndustry ${this.stats.industry} \nTrade ${this.stats.trade}`;

        // Sprite
        this.spriteImage = this.determineItemFromArray(this.game.planetImages);        
        this.sprite = this.game.make.sprite(options.x,options.y, this.spriteImage);
        this.sprite.exists = false;
        this.setupSprite(options);
        
        // Economics
        this.game.economy.registerMarket(this);
    }

    update() {
        super.update();
    }
}
class Pickup extends GameObject {
    constructor(game,group,x,y) {
        super(game);
     
        this.group = group        
        this.magneticDistance = 150;    
    }

    pickedUpBy(object){
        this.destroy();
        return object.collectNumberOfItems(1,this.contents);
    }

    processCollision(pickup,object){
        this.pickedUpBy(this.game.player.ship)
    }
            
    kill(){
        var fadeOut = this.game.add.tween(this.sprite).to( { alpha: 0 }, 2000, "Quart.easeIn", true);
        fadeOut.onComplete.add(function(){
            this.destroy();            
        }, this);
    }
           
    // Rendering
    update() {
        super.update();

        if(this.alive){
            var hits = this.game.physics.p2.hitTest(this.sprite.position);
            for (let hit of hits) {
                var target = hit.parent.sprite.parentObject;                
                if(target.canPickThingsUp) this.pickedUpBy(target);                
            }
        }
    }
    
    
}




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/flake.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/planets/basicMoon.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class FlakePickup extends Pickup {
    constructor(game,group,x,y) {
        super(game);
     
        this.group = group

        // Basic Physics
        this.sprite = this.group.create(x,y,'asteroid-flake-'+game.rnd.integerInRange(1,3))
        this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
        this.sprite.body.bounce.setTo(1, 1);
        this.sprite.body.collideWorldBounds = true;

        // Flake
        this.lifespan = game.rnd.realInRange(30,60);
        this.game.time.events.add(Phaser.Timer.SECOND * this.lifespan, this.kill, this);
        this.sprite.body.velocity.setTo(game.rnd.integerInRange(-20, 20),game.rnd.integerInRange(-20, 20));
        this.sprite.body.mass = 3;
        this.sprite.body.setSize(30, 30, 6, 6);
        this.sprite.body.checkCollision.up = false;
        this.sprite.body.checkCollision.down = false;
        this.sprite.body.checkCollision.left = false;
        this.sprite.body.checkCollision.right = false;
        this.roationSpeed = game.rnd.integerInRange(-50,50);
        this.sprite.anchor.set(0.5);

        var scale = game.rnd.realInRange(.5,1.25)
        this.sprite.scale.setTo(scale, scale);
        
        // Item
        var chance = game.rnd.realInRange(0,1);
        if(chance<RARITY_MINING_CHANCE.rare){
            this.contents = InventoryObject.make('raw_paladium',this.game);            
        } else if(chance<RARITY_MINING_CHANCE.uncommon){
            this.contents = InventoryObject.make('meteoric_iron',this.game);            
        } else {
            this.contents = InventoryObject.make('asteroid_flake',this.game);            
        }
    }

    processCollision(pickup,player){
        super.processCollision(pickup,player);
    }
        
    update() {
        super.update();
        // Spin
        if(this.sprite.alive){
            this.sprite.body.angularVelocity = this.roationSpeed;
    
            var distance = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite);
            if(distance<this.magneticDistance){
                this.game.physics.arcade.moveToObject(this.sprite, this.game.player.sprite, 100)
            }            
        }
    }
    
}
class BasicMoon extends Planet {
    constructor(game,x,y) {
        super(game,x,y);        
        this.sprite = this.game.add.sprite(x,y, 'moon-1');
        this.sprite.scale.setTo(1.3, 1.3);

        this.name = "Persicus"
        this.description = "Moon of Mosisia"
        this.welcomeText = "Persicus is an intermediately sized terrestrial moon in the Pavo system. A lot of the moon is comprised of frigid desert, while a smaller portion is frozen oceans. Plant and animal life on this planet is non existant. The moon has no atmosphere, and is breathable without advanced life support systems.";

        this.services = [
            PLANET_SERVICES.passengerTerminal,            
        ]

        this.setupSprite();
    }

    update() {
        super.update();
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Merging js: app/gameObjects/iceFlake.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/ships/buoy.js begins */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class IceFlakePickup extends Pickup {
    constructor(game,group,x,y) {
        super(game);
     
        this.group = group

        // Basic Physics
        this.sprite = this.group.create(x,y,'ice-small-'+game.rnd.integerInRange(1,5))
        this.game.physics.enable(this.sprite, Phaser.Physics.ARCADE);
        this.sprite.body.bounce.setTo(1, 1);
        this.sprite.body.collideWorldBounds = true;

        // Flake
        this.lifespan = game.rnd.realInRange(30,60);
        this.game.time.events.add(Phaser.Timer.SECOND * this.lifespan, this.kill, this);
        this.sprite.body.velocity.setTo(game.rnd.integerInRange(-20, 20),game.rnd.integerInRange(-20, 20));
        this.sprite.body.mass = 2;
        this.sprite.body.setSize(16, 16, 6, 6);
        this.sprite.body.checkCollision.up = false;
        this.sprite.body.checkCollision.down = false;
        this.sprite.body.checkCollision.left = false;
        this.sprite.body.checkCollision.right = false;
        this.roationSpeed = game.rnd.integerInRange(-50,50);
        this.sprite.anchor.set(0.5);

        var scale = game.rnd.realInRange(.3,.6)
        this.sprite.scale.setTo(scale, scale);
        
        // Item
        var chance = game.rnd.realInRange(0,1);
        if(chance<RARITY_MINING_CHANCE.rare){
            this.contents = InventoryObject.make('volatile_compounds',this.game);            
        } else if(chance<RARITY_MINING_CHANCE.uncommon){
            this.contents = InventoryObject.make('ionized_gas',this.game);            
        } else {
            this.contents = InventoryObject.make('space_ice',this.game);            
        }
    }

    processCollision(pickup,player){
        super.processCollision(pickup,player);
    }
        
    update() {
        super.update();
        // Spin
        if(this.sprite.alive){
            this.sprite.body.angularVelocity = this.roationSpeed;
    
            var distance = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite);
            if(distance<this.magneticDistance){
                this.game.physics.arcade.moveToObject(this.sprite, this.game.player.sprite, 100)
            }            
        }
    }
    
}
class Buoy extends Planet {
    constructor(game,x,y) {
        super(game,x,y);
        
        this.specs = {
            name : 'Navigation Buoy',
            description : '',
        }
        
        this.sprite = this.game.add.sprite(x,y, 'buoy');
        this.sprite.scale.setTo(1.3, 1.3);

        this.name = this.specs.name;
        this.description = this.specs.description;
        this.showInfoDistance = 120;
        
        this.canLand = false;
        this.isPlanet = false;
        
        this.setupSprite();

        var blink = this.sprite.animations.add('blink');
        this.sprite.animations.play('blink', 1, true);
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/asteroid.js begins */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/player.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Player extends GameObject {
    constructor(game) {
        super(game);

        this.ship = new BasicMiner(game,this.game.world.centerX-350,this.game.world.centerY-200);
        this.sprite = this.ship.sprite;

        this.name = 'Dash Riprock';
        
        this._credits = 1000;
        
        // Settings
        this.settings = {};
        this.settings.autoRefuel = true;

        // Keys
        this.controlMode = CONTROL_MODE.play;

        // RCS
        this.rcsSoundCountdown = 1;
        this.rcsSound = game.add.audio('rcs-loop');
        this.rcsSound.onFadeComplete.add(this.rcsSoundFadeComplete, this);

        this.allowHissSound = true;
        this.allowHissSoundForReverse = true;
        this.hissSounds = [
            game.add.audio('hiss-1'),
            game.add.audio('hiss-2'),
            game.add.audio('hiss-3'),
            game.add.audio('hiss-4'),
            game.add.audio('hiss-5')
        ]


        this.cursors = this.game.input.keyboard.createCursorKeys();
        this.fireButton = this.game.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);  
        
        // Navigation
        var tabKey = game.input.keyboard.addKey(Phaser.Keyboard.TAB);
        tabKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.ship.nextNavigationTarget();
        }, this);

        // Landing
        var lKey = game.input.keyboard.addKey(Phaser.Keyboard.L);
        lKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.ship.attemptToLand();
        }, this);

        // Docking
        var dKey = game.input.keyboard.addKey(Phaser.Keyboard.D);
        dKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.ship.attemptToDock();
        }, this);

        // HyperDrive
        var jKey = game.input.keyboard.addKey(Phaser.Keyboard.J);
        jKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.ship.toggleHyperDrive();
        }, this);
        var aKey = game.input.keyboard.addKey(Phaser.Keyboard.A);
        aKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) {
                this.game.hud.abortFTL();
                this.ship.abortJump();
            }
        }, this);
        var hKey = game.input.keyboard.addKey(Phaser.Keyboard.H);
        hKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.game.hud.toggleFTLPanel();
        }, this);

        // Inventory
        var iKey = game.input.keyboard.addKey(Phaser.Keyboard.I);
        iKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.game.inventoryScreen.show();
        }, this);

        // Map
        var mKey = game.input.keyboard.addKey(Phaser.Keyboard.M);
        mKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.game.mapScreen.show();
        }, this);

        // Camera
        var cKey = game.input.keyboard.addKey(Phaser.Keyboard.C);
        cKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.game.toggleCameraMode();
        }, this);

    }

    enterDarkness(nebula){
        this.currentNebula = nebula;
        
        if(!this.inDarkness){
            // Wait a bit to hit the lights
            game.time.events.add(Phaser.Timer.SECOND * 2, function(){
                if(this.currentNebula)
                this.game.hud.title(
                    `${this.currentNebula.name}, ${this.game.system.name} System`,
                    moment(this.game.starDate).format('MMMM Do YYYY, HH:mm'),
                );
            }, this);

            game.time.events.add(Phaser.Timer.SECOND * 3, function(){
                if(this.currentNebula){
                    this.game.planets.mask = this.ship.lightMask;
                    this.game.asteroids.mask = this.ship.lightMask;
                    this.game.stars.mask = this.ship.lightMask;
                    // Hack to show only player ship
                    this.ship.sprite.visible = false;
                    this.game.ships.setAll('mask', this.ship.lightMask,false,true);
                    this.ship.sprite.visible = true;
                    this.ship.lightMask.visible = true;    
                }
            }, this);

            this.inDarkness = true;
        }
    }

    exitDarkness(nebula){
        if(this.inDarkness){
            game.time.events.add(Phaser.Timer.SECOND * 1, function(){
                this.game.planets.mask = null;
                this.game.asteroids.mask = null;
                this.game.stars.mask = null;
                this.game.ships.mask = null;
                this.ship.lightMask.visible = false;    
            }, this);

            this.currentNebula = null;
            this.inDarkness = false;
        }
    }
    
    get credits(){
        if(this._credits<999999){
            return CREDIT_PREFIX.short + numeral(this._credits).format('0,0');
        } else {
            return CREDIT_PREFIX.short + numeral(this._credits).format('(0.00 a)');
        }
    }

    debitCredits(amount){
        if(this._credits>=amount){
            this._credits-=amount;
            return true;
        } else {
            return false;
        }
    }

    addCredits(amount){
        this._credits+=amount;
        return true;
    }


    autoRefuel(){
        var fuelNeeded = this.ship.maxFuel - this.ship.fuelQuantity;
        this.game.economy.buyFuel(fuelNeeded);
    }
    
    buy(item, amount = 1){
        debugger;
    }
    
    sell(item, amount = 1){
        
    }
    
    stop(){
        // Used when landing etc.
        this.ship.sprite.body.setZeroVelocity();
        this.ship.sprite.body.setZeroRotation();
        this.ship.sprite.body.setZeroForce();
    }
    
    rcsSoundFadeComplete(){
        this.rcsSound.stop();
    }
    
    hiss(){
        if(this.allowHissSound) {
            if(!this.ship.hyperDriveEngaged && !this.ship.fuelQuanity){
                this.hissSounds[this.game.rnd.integerInRange(0,this.hissSounds.length-1)].play('',0,.4);
            }
        }        
        this.allowHissSound = false;
    }
    
    reverseHiss(){
        if(this.allowHissSoundForReverse) {
            if(!this.ship.hyperDriveEngaged && !this.ship.fuelQuanity){
                this.hissSounds[this.game.rnd.integerInRange(0,this.hissSounds.length-1)].play('',0,.4);            
            }
        }
        this.allowHissSoundForReverse = false;
    }
        
    update() {
        super.update();
        
        if(this.rcsSoundCountdown>=0){
            if(this.rcsSoundCountdown==0){
                this.rcsSound.fadeOut(30);
            } else {
                this.rcsSoundCountdown--;
            }
        }


        // Normal "Play" control mode"
        if(this.controlMode == CONTROL_MODE.play && !this.ship.isDocked){
            // Accel
            if (this.cursors.up.isDown && !this.ship.hyperDriveEngaged) {
                this.ship.accelerate();
            } else if(this.cursors.down.isDown && !this.ship.hyperDriveEngaged) {
                this.reverseHiss();
                this.rcsSoundCountdown = 1;
                if(!this.rcsSound.isPlaying && !this.ship.hyperDriveEngaged && this.ship.fuelQuanity) this.rcsSound.loopFull(.33);
                this.ship.goInReverse();
            } else {
                this.allowHissSoundForReverse = true;
                this.ship.deaccelerate();
            }
        
            // Turning / Strafing
            if (this.cursors.left.isDown) {
                this.hiss();

                this.rcsSoundCountdown = 1;
                if(!this.rcsSound.isPlaying && !this.ship.hyperDriveEngaged && this.ship.fuelQuanity) this.rcsSound.loopFull(.33);

                if(this.cursors.left.shiftKey){
                    this.ship.moveLeft();
                } else {
                    this.ship.turnLeft();
                }
            } else if (this.cursors.right.isDown) {
                this.hiss();

                this.rcsSoundCountdown = 1;
                if(!this.rcsSound.isPlaying && !this.ship.hyperDriveEngaged && this.ship.fuelQuanity) this.rcsSound.loopFull(.33);

                if(this.cursors.right.shiftKey){
                    this.ship.moveRight();
                } else {
                    this.ship.turnRight();
                }
            } else {
                this.allowHissSound = true;
                this.ship.deaccelerateTurning();
            }
            
            // Firing
            if (this.fireButton.isDown) {
                this.ship.firePrimaryWeapon();
            }
        }
    }
}
class Asteroid extends GameObject {
    constructor(game,group,size,x,y) {
        super(game);
     
        this.group = group
        this.emitFlakes = false;
        
        if(x==undefined) x = this.game.world.centerX+game.rnd.integerInRange(-1000, 1000);
        if(y==undefined) y = this.game.world.centerY+game.rnd.integerInRange(-1000, 1000);
        if(size==undefined) size = 'large';
        this.size = size;

        if(size=='tiny'){
            var rnd = game.rnd.integerInRange(1, 3);
            this.sprite = this.game.asteroids.create(x,y,'asteroid-flake-'+rnd);
        } else {
            this.sprite = this.game.asteroids.create(x,y,'asteroid-'+size);
        }

        this.sprite.parentObject = this;
        this.game.physics.p2.enable(this.sprite,P2BODY_DEBUG);

        this.sprite.body.clearShapes();
        this.sprite.body.damping = 0;

        if(size=='large'){
            this.health = game.rnd.integerInRange(150, 200);
            this.sprite.body.mass = 100;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(32);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-50, 50),game.rnd.integerInRange(-50, 50)],0,0)

            this.minimapSize = 1.2;
        } else if(size=='medium'){
            this.health = game.rnd.integerInRange(70, 100);

            this.sprite.body.mass = 50;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(20);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-10, 10),game.rnd.integerInRange(-10, 10)],0,0)

            this.minimapSize = .8;
        } else if(size=='small'){
            // Small
            this.health = game.rnd.integerInRange(20, 30);

            this.sprite.body.mass = 10;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(14);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-10, 10),game.rnd.integerInRange(-10, 10)],0,0)

            this.minimapSize = .5;
        } else if(size=='tiny'){
            // Tiny
            this.health = game.rnd.integerInRange(3, 10);

            this.sprite.body.mass = .1;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(5);
        this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-.05, .05),game.rnd.integerInRange(-.05, .05)],0,0)

            this.minimapSize = 0;
        }

        this.sprite.body.rotation = game.rnd.integerInRange(0, 360)
        this.sprite.anchor.set(0.5);

        this.hitEmitter = this.game.add.emitter(0, 0, 100);
        this.hitEmitter.makeParticles('asteroid-flake-3');
        this.hitEmitter.minParticleScale = .5;
        this.hitEmitter.maxParticleScale = 1;
        this.hitEmitter.gravity = 0;
        this.hitEmitter.particleBringToTop = true;
        
        this.explodeSounds = [
            game.add.audio('rock-crash-1'),
            game.add.audio('rock-crash-2'),
            game.add.audio('rock-crash-3'),
            game.add.audio('rock-crash-4'),
            game.add.audio('rock-crash-5'),
            game.add.audio('rock-crash-6'),
        ]
        this.damageSound = game.add.audio('crunch-1');
        this.soundCountdown = 10;
    }

    hit(bullet){
	    this.hitEmitter.x = bullet.x;
	    this.hitEmitter.y = bullet.y;	
	    this.emitFlakes = true;
	    this.soundCountdown = 10;
	    if(!this.damageSound.isPlaying) this.damageSound.loopFull(.5);
    }
        
    kill(){
        if(this.size=='large'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.explode();
            this.destroy();
            var a1 = new Asteroid(this.game,this.group,'medium',x-20,y-game.rnd.integerInRange(0,10));            
            var a2 = new Asteroid(this.game,this.group,'medium',x+20,y+game.rnd.integerInRange(0,10));
        } else if(this.size=='medium'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.destroy();
            var a1 = new Asteroid(this.game,this.group,'small',x-15,y-game.rnd.integerInRange(0,10));            
            var a2 = new Asteroid(this.game,this.group,'small',x+15,y+game.rnd.integerInRange(0,10));
        } else if(this.size=='small'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.destroy();
            var flakeCount = game.rnd.integerInRange(3,6);

            for (var i = 0; i < flakeCount; i++) { 
                new FlakePickup(this.game,this.group,this.sprite.x,this.sprite.y)
            }
        } else if(this.size=='tiny'){
            this.destroy();
        }
        this.damageSound.stop();
    } 
       
    explode(){
	    this.explodeEmitter = this.game.add.emitter(this.sprite.x,this.sprite.y, 100);
	    this.game.asteroids.add(this.explodeEmitter);
        this.explodeEmitter.makeParticles('asteroid-flake-1',0,7);
        this.explodeEmitter.gravity = 0;
        this.explodeEmitter.maxRotation = 100;
        this.explodeEmitter.minRotation = 30;
        this.explodeEmitter.minParticleScale = .5;
        this.explodeEmitter.maxParticleScale = 1;
        this.explodeEmitter.explode(6000, game.rnd.integerInRange(3, 7));
        this.explodeSounds[this.game.rnd.integerInRange(0,this.explodeSounds.length-1)].play();
    }
    
    // Rendering
    update() {        
        super.update();
        this.distanceToPlayer = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite);

        if(this.distanceToPlayer<Math.max(screenWidth,screenHeight)){
            this.sprite.exists = true;
        } else {
            this.sprite.exists = false;
        }

        if(this.soundCountdown==0){
            this.damageSound.stop();
        } else {
            this.soundCountdown--;
        }
        
        // Spin
        if(this.sprite.body!=undefined) this.sprite.body.angularVelocity = this.roationSpeed;                
    }
    
    destroy(){
        if(this.explodeEmitter) this.explodeEmitter.destroy();
        this.hitEmitter.destroy();   
             
        super.destroy();
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/asteroidField.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/hud.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class HUD {
    constructor(game) {
        this.game = game;
        this.group = this.game.hudGroup;
        this.group.fixedToCamera = true;
        var x = this.game.camera.width - 120;
        var y = 160;
        var lineHeight = 12;
        var padding = 8;
        var width = 100;
        var borderRadius = 5;

        this.tweens = {};

        this.masterAlarmSound = game.add.audio('master_alarm');
        this.titleNotificationSound = game.add.audio('title-notification');
        this.panelToggleSound = game.add.audio('panel-toggle');
        this.lowFuelSound = game.add.audio('low-fuel-warning');

        // Updaters
        game.time.events.loop(Phaser.Timer.SECOND * .35, this.slowUpdate, this);
        game.time.events.loop(Phaser.Timer.SECOND * 1, this.verySlowUpdate, this);

        // Sidebar
        this.sidebarWidth = 140;
        this.sidebar = this.group.add(new Phaser.Graphics(this.game.game,0,0));
        this.sidebar.beginFill(0x111111);
        this.sidebar.drawRect(
            x-20,
            0,
            this.sidebarWidth,
            this.game.camera.height,
            
        )
        this.sidebar.endFill();

        // Date
        this.stardateLabel = new Phaser.BitmapText(
            this.game.game, 
            this.game.camera.width-8-140,
            10,
            'pixelmix_8',
            this.game.starDate,
            5
        );
        this.stardateLabel.anchor.set(1,0);
        this.stardateLabel.tint = 0x948f9c;
        this.group.add(this.stardateLabel)

        // System 
        this.systemLabel = new Phaser.BitmapText(
            this.game.game, 
            x-8,
            10,
            'pixelmix_8',
            `${this.game.system.name}`,
            5
        );
        this.systemLabel.anchor.set(0,0);
        this.group.add(this.systemLabel)

        // Minimap        
        this.minimap = new Minimap(this.game,this);
        
        // Navigation
        this.navigationGroup = this.game.add.group()
        this.group.add(this.navigationGroup)

        this.navDestDisplay = new Phaser.BitmapText(
            this.game.game, 
            20,
            20,
            'pixelmix_8',
            'USS Ajax (Fuel Tanker)',
            5
        );  
        this.navigationGroup.add(this.navDestDisplay)

        // ETA
        this.navETALabel = new Phaser.BitmapText(
            this.game.game, 
            20,
            34,
            'pixelmix_8',
            'ETA',
            5
        );  
        this.navETALabel.tint = 0x948f9c;
        this.navigationGroup.add(this.navETALabel)

        this.navETADisplay = new Phaser.BitmapText(
            this.game.game, 
            70,
            34,
            'pixelmix_8',
            '59:59',
            5
        );  
        this.navETADisplay.anchor.set(1,0);
        this.navigationGroup.add(this.navETADisplay)

        // Distance
        this.navDistanceLabel = new Phaser.BitmapText(
            this.game.game, 
            90,
            34,
            'pixelmix_8',
            'Dist.',
            5
        );  
        this.navDistanceLabel.tint = 0x948f9c;
        this.navigationGroup.add(this.navDistanceLabel)

        this.navDistanceDisplay = new Phaser.BitmapText(
            this.game.game, 
            120,
            34,
            'pixelmix_8',
            '9999m',
            5
        );  
        this.navDistanceDisplay.anchor.set(0,0);
        this.navigationGroup.add(this.navDistanceDisplay)

        // EFI
        this.healthProgressBar = new ProgressBar(this.game,this,'HULL',x-8,y+8);
        this.fuelProgressBar = new ProgressBar(this.game,this,'FUEL',x-8,y+43);
        this.energyProgressBar = new ProgressBar(this.game,this,'ENERGY',x-8,y+78);


        // Credits
        this.creditsText = new Phaser.BitmapText(
            this.game.game, 
            x+108,
            this.energyProgressBar.y + this.energyProgressBar.height + 11,
            'pixelmix_8',
            '',
            5
        );  
        this.group.add(this.creditsText);
        this.creditsText.anchor.set(1,0);
        this.creditsLabel = new Phaser.BitmapText(
            this.game.game, 
            x-8,
            this.creditsText.y,
            'pixelmix_8',
            CREDIT_PREFIX.long.toUpperCase(),
            5
        );  
        this.creditsLabel.tint = 0x948f9c;
        this.group.add(this.creditsLabel)

        // Cargo
        this.cargoText = {};
        var cargoHeight = 0;
        this.cargoLabel = new Phaser.BitmapText(
            this.game.game, 
            x-8,
            y+142,
            'pixelmix_8',
            'CARGO (kg)',
            5
        );  
        this.cargoLabel.tint = 0x948f9c;
        this.group.add(this.cargoLabel)
        Object.keys(this.game.player.ship.specs.storage).forEach(function(key,index) {
            var cargoType = this.game.player.ship.specs.storage[key];
            this.cargoText[key] = new Phaser.BitmapText(
                this.game.game, 
                x+108,
                (this.cargoLabel.y+padding)+(lineHeight*index)+padding,
                'pixelmix_8',
                '0',
                5
            );
            
            this.group.add(this.cargoText[key]);
            this.cargoText[key].anchor.set(1,0);
    
            var cargoTypeLabel = new Phaser.BitmapText(
                this.game.game, 
                x-8,
                this.cargoText[key].y,
                'pixelmix_8',
                key.charAt(0).toUpperCase() + key.slice(1),
                5
            );
            cargoTypeLabel.tint = 0x948f9c;
            this.group.add(cargoTypeLabel);
            cargoHeight = (index*lineHeight)+padding*4;
        }.bind(this));

        // Equipment
        this.equipmentText = {};
        var eIndex = 0;
        var equipmentHeight = 0;
/*
        this.equipmentLabel = new Phaser.BitmapText(
            this.game.game, 
            x-8,
            this.cargoLabel.y + cargoHeight + padding,
            'pixelmix_8',
            'EQUIPMENT',
            5
        );  
        this.equipmentLabel.tint = 0x948f9c;
        this.group.add(this.equipmentLabel)
*/
        var equipmentList = this.game.player.ship.equipment.concat(this.game.player.ship.weapons);        
/*
        for (let equipment of equipmentList) {
            var name = equipment.name;
            if(equipment.equipped){
                var equipmentNameLabel = new Phaser.BitmapText(
                    this.game.game, 
                    x-8,
                    (this.equipmentLabel.y+padding)+(lineHeight*eIndex)+padding,
                    'pixelmix_8',
                    name,
                    5
                );
                this.group.add(equipmentNameLabel);
                equipmentNameLabel.anchor.set(0,0);
    
                var equipmentStatusLabel = new Phaser.BitmapText(
                    this.game.game, 
                    x+108,
                    equipmentNameLabel.y,
                    'pixelmix_8',
                    equipment.status,
                    5
                );
                equipmentStatusLabel.tint = 0x948f9c;
                this.group.add(equipmentStatusLabel);
                equipmentStatusLabel.anchor.set(1,0);
            }
            eIndex++;
        }
*/

        // Master Alarm
        this.masterAlarmSprite = this.game.add.sprite(this.game.camera.width-200,10, 'master-alarm');
        this.masterAlarmSprite.animations.add('blink');    
        this.masterAlarmSprite.animations.play('blink', 5, true);
        this.masterAlarmSprite.visible = false;
        this.masterAlarmSprite.inputEnabled = true;
        this.masterAlarmSprite.events.onInputUp.add(this.masterAlarmClicked, this);
        this.group.add(this.masterAlarmSprite);

        // O2
        this.o2gauge = this.game.add.group();
        this.group.add(this.o2gauge);
        
        this.o2gaugeBg = this.game.add.sprite(0,0, 'oxygen-gauge');
        this.o2gaugeArrow = this.game.add.sprite(0,0, 'gauge-arrow');
        this.group.add(this.o2gaugeBg);
        this.group.add(this.o2gaugeArrow);
        
        this.o2gaugeBg.x = 32 - 100
        this.o2gaugeArrow.x = this.o2gaugeBg.x + 8;
        this.o2gaugeBg.y = this.game.camera.height - this.o2gaugeBg.height - 100;
        this.o2gaugeArrow.y = this.o2gaugeBg.y + 29;

        // FTL
        this.ftlPanel = this.game.add.group();
        this.group.add(this.ftlPanel);
        this.ftlPanelBg = this.game.add.sprite(0,0, 'ftl-panel');
        this.ftlPanel.add(this.ftlPanelBg);

        this.ftlPanelText = new Phaser.BitmapText(
            this.game.game, 
            25,
            17,
            'pixelmix_8_leaded',
            '',
            5
        );
        this.ftlPanelText.tint = 0x15ae5c;
        this.ftlPanel.add(this.ftlPanelText);

        this.ftlPanelStatusText = new Phaser.BitmapText(
            this.game.game, 
            132,
            17,
            'pixelmix_8_leaded',
            '',
            5
        );
        
        this.ftlPanelStatusText.tint = 0x15ae5c;
        this.ftlPanel.add(this.ftlPanelStatusText);
        this.ftlPanelStatusBlink = game.add.tween(this.ftlPanelStatusText).to(
            { alpha:0 }, 1000, Phaser.Easing.Quadratic.InOut, false, 0, -1)
        this.ftlPanelHelpText = new Phaser.BitmapText(
            this.game.game, 
            18,
            135,
            'pixelmix_8',
            '(H) Hide',
            5
        );
        this.ftlPanel.add(this.ftlPanelHelpText);

        this.ftlPanelX = this.game.camera.width-150-this.ftlPanelBg.width;
        this.ftlPanelY = this.game.camera.height-this.ftlPanelBg.height-10+200;
        
        this.ftlPanel.y = this.ftlPanelY;
        this.ftlPanel.x = this.ftlPanelX;

        // Storage
        Object.keys(this.game.player.ship.specs.storage).forEach(function(key,index) {
            if(this.equipmentText[key]){
                var equipmentType = this.game.player.ship.specs.storage[key];    
                var equipmentTypeLabel = new Phaser.BitmapText(
                    this.game.game, 
                    x-8,
                    this.equipmentText[key].y,
                    'pixelmix_8',
                    key.charAt(0).toUpperCase() + key.slice(1),
                    5
                );
                equipmentTypeLabel.tint = 0x948f9c;
                this.group.add(equipmentTypeLabel);
                equipmentHeight = (index*lineHeight)+padding*4;
            }
        }.bind(this));


        // MESSAGES
        // Title
        this.message__title = this.game.add.text(
            0,0,
            '', 
            { font: `16px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
        );
        this.message__title.alpha = 0;
        this.group.add(this.message__title)
        
        // Subtitle
        this.message__subTitle = this.game.add.text(
            0,0, 
            '', 
            { font: `12px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
        );
        this.message__subTitle.alpha = 0;
        this.group.add(this.message__subTitle)
        
        // Nav Arrow
        this.navigationArrow = this.game.make.sprite(0,0, 'nav-arrow');
        this.navigationArrow.anchor.set(-10,.5);
        this.navArrowResetPostionTween = this.game.add.tween(this.navigationArrow).to({
            angle: 0,
            x: 0,
            y: 0,
        }, 300, "Quart.easeOut", false);

        this.group.add(this.navigationArrow);

        
        this.messageTextY = this.game.camera.height-100;
        this.messageText = this.game.add.text(
            0,
            0, 
            '', 
            { font: `14px ${FONT}`, fill: "#FFFFFF", align: 'center',  boundsAlignH: 'center' }, 
            this.group,
        );
        this.messageText.setTextBounds(0, 0, screenWidth-this.sidebarWidth, screenHeight);
        this.messageText.stroke = '#000000';
        this.messageText.strokeThickness = 3;
        this.messageText.alpha = 0;

        this.tweens.messageFadeIn = this.game.add.tween(this.messageText).to( { alpha: 1 }, 300, "Quart.easeOut", false);
    	this.tweens.messageMoveUp = this.game.add.tween(this.messageText).to( { y: '-30' }, 300, "Quart.easeOut", false);
     class AsteroidField extends GameObject {
    constructor(game,options) {
        super(game);
        
        this.system = options.system;
        var size = options.size;
        if(size==undefined) size = 2000;
        var densityLowerBound = 50;
        var densityUpperBound = 60;
        
        this.asteroidsCount = this.game.rnd.integerInRange(size/densityLowerBound, size/densityUpperBound);
        this.asteroids = this.game.asteroids;
        for (var i = 0; i < this.asteroidsCount; i++) { 
            var xPos = game.rnd.integerInRange(options.x-size, options.x+size);
            var yPos = game.rnd.integerInRange(options.y-size, options.y+size);
            
            var bigness = game.rnd.integerInRange(0,100);

            if(bigness>=70){
                var asteroid = new Asteroid(this.game,this.asteroids,'large',xPos,yPos);
            } else if(bigness<70 && bigness>50){
                var asteroid = new Asteroid(this.game,this.asteroids,'medium',xPos,yPos);                
            } else {
                var asteroid = new Asteroid(this.game,this.asteroids,'small',xPos,yPos);                
            }

            // Add to system
            this.system.stellarObjects.push(asteroid);
        }

        this.buoy = new Buoy(this.game,options.x,options.y);
        this.buoy.description = `${Names.proper()} Asteroid Field`

        this.system.stellarObjects.push(this.buoy);
    }

    update(){
        super.update();
        if(this.system == this.game.system){    
            this.game.physics.arcade.collide(this.asteroids, this.asteroids);
        }
    }    
}
   this.tweens.messageFadeOut = this.game.add.tween(this.messageText).to( { alpha: 0 }, 300, "Quart.easeOut", false, 2000);
    
        // Blinky
        this.blinkyMessageText = this.game.add.text(
            this.game.camera.width/2,
            this.game.camera.height-70, 
            '', 
            { font: `18px ${FONT}`, fill: "#FFFFFF", align: 'center' }, 
        );
        this.blinkyMessageText.anchor.x = .5;
        this.blinkyMessageText.fixedToCamera = true;
        this.blinkyMessageText.tint = 0xe74c3c;

        this.verySlowUpdate();
        this.slowUpdate();
    }
    
    title(message,submessage){
        this.titleNotificationSound.play();

        var delay = 2000;        
        
        this.message__title.x = 32;
        this.message__title.y = this.game.camera.height-50;
        this.message__subTitle.x = 32;
        this.message__subTitle.y = this.game.camera.height-25;
        
        this.message__title.setText(message);
        this.message__subTitle.setText(submessage);
                    
        var fadeIn1 = this.game.add.tween(this.message__title).to( { alpha: 1 }, 1000, "Quart.easeOut", false);
    	var moveUp1 = this.game.add.tween(this.message__title).to( { y: '-30' }, 300, "Quart.easeOut", true);
        var fadeOut1 = this.game.add.tween(this.message__title).to( { alpha: 0 }, 1500, "Quart.easeOut", false, delay);
        fadeIn1.chain(fadeOut1);
        fadeIn1.start();

        var submessageDelay = 300;
        var fadeIn2 = this.game.add.tween(this.message__subTitle).to( { alpha: 1 }, 1000, "Quart.easeOut", false, submessageDelay);
    	var moveUp2 = this.game.add.tween(this.message__subTitle).to( { y: '-30' }, 300, "Quart.easeOut", true, submessageDelay);
        var fadeOut2 = this.game.add.tween(this.message__subTitle).to( { alpha: 0 }, 1500, "Quart.easeOut", false, delay-submessageDelay);    
        fadeIn2.chain(fadeOut2);
        fadeIn2.start();
    }

    message(message){
        this.messageText.y =  this.messageTextY;
        this.messageText.setText(message);
    
        this.tweens.messageFadeIn.chain(this.tweens.messageFadeOut);
        this.tweens.messageFadeIn.start();
        this.tweens.messageMoveUp.start();
    }

    warning(message){
        var delay = 2000;
        var messageText = this.game.add.text(
            this.game.camera.width/2,
            this.game.camera.height-100, 
            message, 
            { font: `18px ${FONT}`, fill: "#FFFFFF", align: 'center' }, 
        );

        messageText.anchor.x = .5;
        messageText.fixedToCamera = true;
        messageText.alpha = 0;
    
        var fadeIn = this.game.add.tween(messageText).to( { alpha: 1 }, 300, "Quart.easeOut", false);
    	var moveUp = this.game.add.tween(messageText).to( { y: '-30' }, 300, "Quart.easeOut", true);
        var fadeOut = this.game.add.tween(messageText).to( { alpha: 0 }, 300, "Quart.easeOut", false, delay);
    
        fadeIn.chain(fadeOut);
        fadeIn.start();
    }
    blinkingWarning(message){
        var delay = 2000;
        this.blinkyMessageText.setText(message);
            
        var blink = this.game.add.tween(this.blinkyMessageText).to({
            alpha: .5,
        }, 300, "Quart.easeOut", true, 0, 0, true).loop(true);
    }
    
    updateNavigationDisplay(){
        if(this.navDestDisplay!=undefined){
            var player = this.game.player.ship;
            var target = player.navigationTarget;
            if(target==null){
                this.navDestDisplay.setText('Navigation Off');
                this.navigationGroup.visible = false;
                this.navigationArrow.visible = false;
            } else {
                this.navDestDisplay.setText(`> ${target.name} (${target.description})`);
                this.navETADisplay.setText(`${this.game.player.ship.formattedTimeToCurrentNavigationTarget}`);
                this.navDistanceDisplay.setText(`${this.game.player.ship.formattedDistanceToCurrentNavigationTarget}`);        
                this.navigationGroup.visible = true;
                            
                if(player.distanceToCurrentNavigationTarget>150){
                    this.navigationArrow.visible = true;
                    this.navigationArrow.angle = player.angleToCurrentNavigationTarget;
                    this.navigationArrow.x = this.game.player.ship.sprite.x - this.game.camera.x;
                    this.navigationArrow.y = this.game.player.ship.sprite.y - this.game.camera.y;                
                } else {        
                    this.game.add.tween(this.navigationArrow).to({
                        angle: 90,
                        x: target.sprite.x - this.game.camera.x,
                        y: ((target.sprite.y - target.sprite.height/2) - this.game.camera.y)-100,
                    }, 300, "Quart.easeOut", true);
                }
            }
        }
    }
    

    purchaseReceipt(title,message,amount){
        var notification = new Notification(this.game);
        notification.text = title;
        notification.subText = message;
        notification.accessoryText = numeral(-amount).format('$0,0[.]00');
        this.game.notificationGroup.add(notification);

        notification.show();
    }
    
    showSystemInfo(){
        this.title(`${this.game.system.name} System`,moment(this.game.starDate).format('MMMM Do YYYY, HH:mm'));
    }
    
    set masterAlarm(alarm){
        this.masterAlarmSprite.visible = alarm;
        if(alarm){
            this.masterAlarmSound.loopFull();
        } else {
            this.masterAlarmSound.stop();            
        }
    }
    
    masterAlarmClicked(){
        this.masterAlarm = false;
    }
    
    showO2Panel(){
        this.masterAlarm = true;
        game.add.tween(this.o2gaugeBg).to( {x: '+100'}, 600, "Quart.easeOut", true);
        game.add.tween(this.o2gaugeArrow).to( {x: '+100'}, 600, "Quart.easeOut", true);        
    }

    hideO2Panel(){
        this.masterAlarm = false;
        game.add.tween(this.o2gaugeBg).to( {x: '-100'}, 600, "Quart.easeOut", true);
        game.add.tween(this.o2gaugeArrow).to( {x: '-100'}, 600, "Quart.easeOut", true);        
    }

    
    set o2Percent(o2){
        this.o2gaugeArrow.y = (this.o2gaugeBg.y + 29) - (107*o2) + 107;
    }
    
    toggleFTLPanel(){
        if(this.ftlPanel.y == this.ftlPanelY){
            this.showFTLPanel();
        } else {
            this.hideFTLPanel();
        }
    }
    
    showFTLPanel(){
        this.updateFTLPanel(true);
        if(this.ftlPanel.y == this.ftlPanelY){
            this.panelToggleSound.play();
            this.ftlPanel.visible = true;
            var showPanelTween = game.add.tween(this.ftlPanel).to( {y: '-200'}, 400, "Quart.easeOut", true);
        }
    }

    hideFTLPanel(){
        this.updateFTLPanel(true);
        if(this.ftlPanel.y == this.ftlPanelY-200){
            this.panelToggleSound.play();
            var hidePanelTween = game.add.tween(this.ftlPanel).to( {y: '+200'}, 400, "Quart.easeOut", true);
            hidePanelTween.onComplete.add(function(){
                this.ftlPanel.visible = false;
            }, this);
        }
    }
    
    abortFTL(){
        if(this.game.mapScreen.map.currentPath){
            this.panelToggleSound.play();
            this.game.mapScreen.map.currentPath = false;
            this.game.mapScreen.map.navigationDestination = null;
            this.updateFTLPanel(true);
        }
    }
    
    lowFuel(){
        this.message("Low Fuel");
        this.lowFuelSound.loopFull();
    }
    
    hasFuel(){
        this.lowFuelSound.stop();
    }
        
    updateFTLPanel(force){
        if(this.ftlPanel.y == this.ftlPanelY-200 || force){ // If is showing
            var panelText = '';
            var path = this.game.mapScreen.map.currentPath
            if(!this.game.mapScreen.map.navigationDestination) path = false;
                if(path.length>0 || path!=false){
                    if(path.length==2) {
                        var destination = path[path.length-1];
                        var destinationName = destination.name.substring(0,12);
                        var formattedDistance = numeral(this.game.system.distanceToStarSystem(destination)*PIXEL_TO_LIGHTYEAR).format('0,0.0a');                    
                        panelText = `FTL DRIVE\nDESTINATION\n${destinationName} (${formattedDistance} ly)\n\nPRESS J TO JUMP`;
                    } else {
                        panelText = 'FTL DRIVE\nCOURSE SET\n';
                        for (var i = 0; i < path.length; i++) {
                            var system;
                            if(path[i+1]!=undefined) {
                                system = path[i+1];
                            } else {
                                system = false;
                            }
                            if(i<4 && system){
                                panelText += `${i+1}. ${system.name.substring(0,18)}\n`;                            
                            }
                            if(i==5){
                                panelText += `... ${path.length-i} more`;                            
                            }
                        }
                    }

                    this.ftlPanelHelpText.setText('(J) Jump  (A) Abort  (H) Hide')
                } else {
                    panelText = 'FTL DRIVE\n';
                    panelText += `NO DESTINATION\n\nPRESS M TO VIEW MAP`;

                    this.ftlPanelHelpText.setText('(H) Hide')
                }
            this.ftlPanelText.setText(panelText);
            this.ftlPanelStatusText.setText(`CHARGES: ${this.game.player.ship.jumpsRemaining}`);
            this.ftlPanelStatusText.x = 101;
        }
    }

    slowUpdate(){
        this.minimap.update();
    }

    verySlowUpdate(){
        // Credits
        this.creditsText.setText(`${this.game.player.credits}`);

        // Cargo
        Object.keys(this.game.player.ship.specs.storage).forEach(function(key,index) {
            var usedSpace = this.game.player.ship.usedSpaceForStorageClass(key);
            var maxSpace = this.game.player.ship.maxSpaceForStorageClass(key);
            this.cargoText[key].setText(`${usedSpace}/${maxSpace}`);
        }.bind(this));

        // FTL
        this.updateFTLPanel();
    
        // System
        this.systemLabel.setText(this.game.system.name);        
    }
    
    update() {
        // Navigation
        this.updateNavigationDisplay();

        // EFI
        if(this.healthValue_cache!=this.game.player.ship.health || this.healthMaxValue_cache!=this.game.player.ship.maxHealth){
            this.healthProgressBar.value = this.game.player.ship.health;
            this.healthProgressBar.max = this.game.player.ship.maxHealth;
        }
        this.healthValue_cache = this.healthProgressBar.value
        this.healthMaxValue_cache = this.healthProgressBar.max
        
        if(this.fuelPercentage_cache!=this.game.player.ship.fuelPercentage)
            this.fuelProgressBar.valuePercent = this.game.player.ship.fuelPercentage;
        
        if(this.energyPercentage_cache!=this.game.player.ship.energyPercentage)        
            this.energyProgressBar.valuePercent = this.game.player.ship.energyPercentage;
        
        this.fuelPercentage_cache = this.fuelProgressBar.valuePercent;
        this.energyPercentage_cache = this.energyProgressBar.valuePercent;

        // O2
        this.o2Percent = this.game.player.ship.o2Percent;
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Merging js: app/minimap.js begins */

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/* Merging js: app/gameObjects/nebula.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Minimap {
    constructor(game,hud) {
        this.game = game;
        this.phaserGame = game.game;
        
        this.size = 116;
        this.width = this.size;
        this.height = this.size;
        this.x = this.game.camera.width - 128;
        this.y = 30;
        
        this.hud = hud;
        this.defaultScale = .03;
        this.scale = this.defaultScale;
        this.distanceFactor = 55;
            
        this.background = this.hud.group.create(this.x,this.y,'minimap-bg')
        this.background.width = this.size;
        this.background.height = this.size;
        this.background.tint = 0x1A1A1A;

        this.dotsBitmapData = this.phaserGame.add.bitmapData(this.width);
        
        this.phaserGame.cache.addBitmapData('minimap-display', this.dotsBitmapData);
        this.mapDots = this.hud.group.create(
            this.background.x,
            this.background.y,
            this.phaserGame.cache.getBitmapData('minimap-display')
        )
    }
    update(){
        this.dotsBitmapData.clear();
        this.game.system.stellarObjects.forEach(this.drawDotsForGameObject,this);
        this.game.system.planets.forEach(this.drawDotsForGameObject,this);
        this.dotsBitmapData.dirty = true;        
    }
    
    drawDotsForGameObject(gameObject){
        if(gameObject.sprite!=undefined){
            var distance = this.game.physics.arcade.distanceBetween(gameObject.sprite, this.game.player.sprite);
            if(distance<(this.distanceFactor/this.scale)){
                var x = ((gameObject.sprite.x-this.game.player.ship.sprite.x)*this.scale)+this.size/2;
                var y = ((gameObject.sprite.y-this.game.player.ship.sprite.y)*this.scale)+this.size/2;
                var size = 1; // Default dot size
                if(gameObject.minimapSize!=undefined){
                    size = gameObject.minimapSize;
                }
                var a = Math.abs(distance*(this.distanceFactor/100000)-1)+.1
                
                if(this.game.player.ship.navigationTarget == gameObject){
                    this.dotsBitmapData.circle(x,y,size+3,`rgba(255,255,255,${a})`);                            
                    this.dotsBitmapData.circle(x,y,size+2,`#3f3c46`);                            
                    this.dotsBitmapData.circle(x,y,size,`rgba(255,255,255,${a})`);                            
                } else {
                    this.dotsBitmapData.circle(x,y,size,`rgba(255,255,255,${a})`);                            
                }
                
                // Player
                this.dotsBitmapData.circle(this.size/2,this.size/2,1,`rgba(255,255,255,1)`);                            
            }
        }
    }
    
}class Nebula extends GameObject {
    constructor(game,options) {
        super(game);

        var x = options.x;
        var y = options.y;
        var size = options.size;
        if(size==undefined) size = 2000;
        this.size = size;
        this.system = options.system;
            
        var xPos = game.rnd.integerInRange(x-this.size, x+this.size);
        var yPos = game.rnd.integerInRange(y-this.size, y+this.size);

        var densityLowerBound = 50;
        var densityUpperBound = 60;

        this.iceteroidsCount = this.game.rnd.integerInRange(size/densityLowerBound, size/densityUpperBound);
        this.iceteroids = this.game.asteroids;
        for (var i = 0; i < this.iceteroidsCount; i++) { 
            var xPos = game.rnd.integerInRange(x-size, x+size);
            var yPos = game.rnd.integerInRange(y-size, y+size);
            
            var bigness = game.rnd.integerInRange(0,100);

            if(bigness>=70){
                var iceteroid = new Iceteroid(this.game,this.iceteroids,'large',xPos,yPos);
            } else {
                var iceteroid = new Iceteroid(this.game,this.iceteroids,'small',xPos,yPos);                
            }
            this.system.stellarObjects.push(iceteroid);
        }

        this.buoy = new Buoy(this.game,x,y);
        this.buoy.description = `${Names.proper()} Ice Nebula`
        this.name = this.buoy.description;
        this.system.stellarObjects.push(this.buoy);

        this.shouldShowNebulaEffect = false;
        this.nebulaSpawnInterval = 10;
        this.nebulaSpawnCountdown = this.nebulaSpawnInterval;

        // Effects
        this.nebulaOverlay = this.game.add.graphics(0, 0);
        this.nebulaOverlay.beginFill(0x34495e);
        this.nebulaOverlay.drawRect(0,0,screenWidth,screenHeight);
        this.nebulaOverlay.endFill();
        this.nebulaOverlay.alpha = 0;
        this.nebulaOverlayTargetAlpha = .4;
        this.game.starsTargetAlpha = .2;
        this.nebulaOverlayStepAlpha = .002;
        this.nebulaOverlay.visible = false;
        this.nebulaOverlay.fixedToCamera = true;
        
        var smoke = {
            lifespan: 7000,
            image: 'nebula-cloud',
            sendToBack: true,
            alpha: { initial: 0, value: .06, control: [ { x: 0, y: 0 }, { x: 0.2, y: 1 }, { x: 0.5, y: 0.5 }, { x: 1, y: 0 } ] },
            scale: { min: 1, max: 1.5 },
            vx: { min: -0.2, max: 0.2 },
            vy: { min: -0.2, max: -0.2 },
            hsv: { value: 210 },
        };
        this.game.ps.addData('nebula-cloud', smoke);
        this.smokeEmitter = this.game.ps.createEmitter();
        this.smokeEmitter.addToWorld();

    	this.particlesEmitter = game.add.emitter(0,0, 500);
    	this.particlesEmitter.width = game.camera.width;
    	this.particlesEmitter.height = game.camera.height;
    	    
    	this.particlesEmitter.makeParticles(['ice-small-1','ice-small-2','ice-small-3','ice-small-4','ice-small-5']);
    
    	this.particlesEmitter.setAlpha(0, 1, 2000,Phaser.Easing.Quadratic.InOut,true);

    	this.particlesEmitter.minParticleScale = 0.08;
    	this.particlesEmitter.maxParticleScale = 0.35;
    
    	this.particlesEmitter.setYSpeed(-10, 10);
    	this.particlesEmitter.setXSpeed(-10, 10);
        this.particlesEmitter.gravity = 3;
    
    	this.particlesEmitter.minRotation = -100;
    	this.particlesEmitter.maxRotation = 100;
    
    	this.particlesEmitter.start(false, 4000, 10, 0);
    	this.particlesEmitter.on = false;
    	this.iceteroids.add(this.particlesEmitter);
    	
    	// Ambient Sounds
        this.ambientSound = game.add.audio('nebula-ambient-1');
    }
    
    destroy(){
        if(this.shouldShowNebulaEffect) this.game.player.exitDarkness();
        super.destroy();
    }
    
    update(){
        super.update();
        
        if(this.system == this.game.system){    
            this.distanceToPlayer = this.game.physics.arcade.distanceBetween(this.buoy.sprite, this.game.player.sprite);
        
            if(this.distanceToPlayer<=this.size*1.5){
                this.game.player.enterDarkness(this);
                this.shouldShowNebulaEffect = true;
            } else {
                this.game.player.exitDarkness(this);
                this.shouldShowNebulaEffect = false;
            }
            
            if(this.shouldShowNebulaEffect){   
                // Particles
                this.particlesEmitter.on = true;   
                this.particlesEmitter.x = this.game.camera.x + this.game.camera.width/2;
                this.particlesEmitter.y = this.game.camera.y + this.game.camera.height/2;
    
                // Overlay
                this.nebulaOverlay.visible = true;
                
                if(this.nebulaOverlay.alpha<=this.nebulaOverlayTargetAlpha)
                    this.nebulaOverlay.alpha+=this.nebulaOverlayStepAlpha
    
                if(this.game.stars.alpha>=this.game.starsTargetAlpha)
                    this.game.stars.alpha-=this.nebulaOverlayStepAlpha
                
                if(this.game.stars.alpha<=this.game.starsTargetAlpha)
                    this.game.stars.alpha=this.game.starsTargetAlpha    
                
                // Smoke
                if(this.nebulaSpawnCountdown==0){
                    this.smokeEmitter.emit(
                        'nebula-cloud',
                        this.game.camera.x + this.game.rnd.integerInRange(0, this.game.camera.width), 
                        this.game.camera.y + this.game.rnd.integerInRange(0, this.game.camera.height),
                    ) 
                    this.nebulaSpawnCountdown = this.nebulaSpawnInterval;
                } else {
                    this.nebulaSpawnCountdown--;
                }
                
                // Sound
                if(!this.ambientSound.isPlaying) {
                    console.log("Start Loop");
                    this.ambientSound.loopFull(AMBIENT_VOLUME);
                }            
            } else {
                // Stop Particles
                this.particlesEmitter.on = false;   
                
                // Hide overlay
                this.nebulaOverlay.alpha-=this.nebulaOverlayStepAlpha
                
                if(this.nebulaOverlay.alpha<this.nebulaOverlayStepAlpha){
                    this.nebulaOverlay.alpha = 0;
                    this.nebulaOverlay.visible = false;
                }
                
                // Stars
                this.game.stars.alpha+=this.nebulaOverlayStepAlpha
                if(this.game.stars.alpha>=1)
                    this.game.stars.alpha=1;        
            
                // Stop sound
                if(this.ambientSound.isPlaying && this.ambientSound.volume == AMBIENT_VOLUME) {
                    this.ambientSound.fadeOut(3000);    
                }
                this.ambientSound.onFadeComplete.addOnce(function(){
                    this.ambientSound.stop();
                }, this);
            }
        }
    }
    
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/progressBar.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gameObjects/iceteroid.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class ProgressBar {
    constructor(game,hud,title,x,y) {
        this.game = game;
        this.phaserGame = game.game;
        this.x = x;
        this.y = y;
        this.height = 26;
        
        this.hud = hud;

        this.valuePercent = 0;
        this._valuePercent = 0;
        this.value = null;
        this._value = null;
        this.max = 0;
        this._max = 0;
        this.displayTotal = false;
        this.title = title;

        this.barBitmapData = this.phaserGame.add.bitmapData(116);
        this.barBitmapData.ctx.fillStyle = '#EEEEEE';

        this.phaserGame.cache.addBitmapData('progbar', this.barBitmapData);
        this.barSprite = this.hud.group.create(
            x,
            y+12,
            this.phaserGame.cache.getBitmapData('progbar')
        )

        var label = new Phaser.BitmapText(
            this.game.game,
            x,
            y, 'pixelmix_8',
            this.title,
            5,
        );
        label.tint = 0x948f9c;
        this.hud.group.add(label)

        this.amountDisplay = new Phaser.BitmapText(
            this.game.game,
            x+116,
            label.y, 'pixelmix_8',
            '',
            5
        );
        this.amountDisplay.tint = 0xFFFFFF;
        this.amountDisplay.anchor.set(1,0);
        this.hud.group.add(this.amountDisplay)   
    }

    set valuePercent(valuePercent){
        this._valuePercent = valuePercent;
        this.draw();
    }
    
    get valuePercent(){
        return this._valuePercent;
    }

    set value(value){
        this._value = value;
        this.draw();
    }
    
    get value(){
        return this._value;
    }

    set max(max){
        this._max = max;
        this.draw();
    }
    
    get max(){
        return this._max;
    }

    draw(){
        if(this.barBitmapData!=undefined){
            this.barBitmapData.clear();
            this.barBitmapData.ctx.fillStyle = '#504d54';
            this.barBitmapData.rect(0,0,116,10);
            if(this.value){
                this.barBitmapData.ctx.fillStyle = '#EEEEEE';
                this.barBitmapData.rect(0,0,Math.round(((this.value/this.max)*100)*1.16),10);
                this.amountDisplay.setText(`${Math.round(this.value)}/${Math.round(this.max)}`); 
            } else {
                if(isNaN(this.valuePercent)) this.valuePercent = 0;
                this.barBitmapData.ctx.fillStyle = '#EEEEEE';
                this.barBitmapData.rect(0,0,Math.round(this.valuePercent*1.16),10);
                this.amountDisplay.setText(this.valuePercent+"%");
            }
    
            this.barBitmapData.dirty = true;                    
        }
    }

    update(){    
    
    }
    
}class Iceteroid extends GameObject {
    constructor(game,group,size,x,y) {
        super(game);
     
        this.group = group
        this.emitFlakes = false;
        
        if(x==undefined) x = this.game.world.centerX+game.rnd.integerInRange(-1000, 1000);
        if(y==undefined) y = this.game.world.centerY+game.rnd.integerInRange(-1000, 1000);
        if(size==undefined) size = 'large';
        this.size = size;

        this.sprite = this.game.asteroids.create(x,y,`ice-${size}-${game.rnd.integerInRange(1, 5)}`);

        this.sprite.parentObject = this;
        this.game.physics.p2.enable(this.sprite,P2BODY_DEBUG);

        this.sprite.body.clearShapes();
        this.sprite.body.damping = 0;

        if(size=='large'){
            this.health = game.rnd.integerInRange(150, 200);
            this.sprite.body.mass = 10;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(10);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-10, 10),game.rnd.integerInRange(-10, 10)],0,0)

            this.minimapSize = 1.2;
        } else if(size=='small'){
            this.health = game.rnd.integerInRange(70, 100);

            this.sprite.body.mass = 5;
            this.roationSpeed = game.rnd.integerInRange(-.10, .10);            
            this.sprite.body.addCircle(8);
            this.sprite.body.applyImpulseLocal([game.rnd.integerInRange(-2, 2),game.rnd.integerInRange(-2, 2)],0,0)

            this.minimapSize = .8;
        }

        this.sprite.body.rotation = game.rnd.integerInRange(0, 360)
        this.sprite.anchor.set(0.5);

        this.hitEmitter = this.game.add.emitter(0, 0, 100);
        this.hitEmitter.makeParticles(`ice-small-${game.rnd.integerInRange(1, 5)}`);
        this.hitEmitter.minParticleScale = .2;
        this.hitEmitter.maxParticleScale = .4;
        this.hitEmitter.gravity = 0;
        this.hitEmitter.particleBringToTop = true;
        
        this.explodeSounds = [
            game.add.audio('ice-crash-1'),
            game.add.audio('ice-crash-2'),
            game.add.audio('ice-crash-3'),
            game.add.audio('ice-crash-4'),
            game.add.audio('ice-crash-5'),
            game.add.audio('ice-crash-6'),
        ]
        this.damageSound = game.add.audio('crunch-1');
        this.soundCountdown = 10;
    }

    hit(bullet){
	    this.hitEmitter.x = bullet.x;
	    this.hitEmitter.y = bullet.y;	
	    this.emitFlakes = true;
	    this.soundCountdown = 10;
	    if(!this.damageSound.isPlaying) this.damageSound.loopFull(.5);
    }
        
    kill(){
        if(this.size=='large'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.explode();
            this.destroy();
            var a1 = new Iceteroid(this.game,this.group,'small',x-15,y-game.rnd.integerInRange(0,10));            
            var a2 = new Iceteroid(this.game,this.group,'small',x+15,y+game.rnd.integerInRange(0,10));
        } else if(this.size=='small'){
            var x = this.sprite.x;
            var y = this.sprite.y;
            this.explode();         
            this.destroy();
            var flakeCount = game.rnd.integerInRange(2,5);

            for (var i = 0; i < flakeCount; i++) { 
                new IceFlakePickup(this.game,this.group,this.sprite.x,this.sprite.y)
            }
        }
        this.damageSound.stop();
    } 
       
    explode(){
	    this.explodeEmitter = this.game.add.emitter(this.sprite.x,this.sprite.y, 100);
	    this.game.asteroids.add(this.explodeEmitter);
        this.explodeEmitter.makeParticles(`ice-small-${game.rnd.integerInRange(1, 5)}`,0,7);
        this.explodeEmitter.gravity = 0;
        this.explodeEmitter.maxRotation = 100;
        this.explodeEmitter.minRotation = 30;
        this.explodeEmitter.minParticleScale = .2;
        this.explodeEmitter.maxParticleScale = .6;
        this.explodeEmitter.explode(6000, game.rnd.integerInRange(3, 7));
        this.explodeSounds[this.game.rnd.integerInRange(0,this.explodeSounds.length-1)].play();
    }
    
    // Rendering
    update() {
        super.update();
        this.distanceToPlayer = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite);

        if(this.distanceToPlayer<Math.max(screenWidth,screenHeight)){
            this.sprite.exists = true;
        } else {
            this.sprite.exists = false;
        }

        if(this.soundCountdown==0){
            this.damageSound.stop();
        } else {
            this.soundCountdown--;
        }
        
        // Spin
        if(this.sprite.body!=undefined) this.sprite.body.angularVelocity = this.roationSpeed;                
    }

    destroy(){
        if(this.explodeEmitter) this.explodeEmitter.destroy();
        this.hitEmitter.destroy();   
             
        super.destroy();
    }
}




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/items/flake.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/_guiScreen.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class GuiScreen {
    constructor(game,group) {                
        this.game = game;
        this.screen = this.game.add.group();
    
        this.screen.visible = false;
        this.parentScreen = null;

        this.fontFamily = FONT;
        this.fontFamilyLarge = FONT;
        this.fontSizeOffset = 0;
        this.textResolution = 2;
        
        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromBottom; // Default
        
        this.collapseSound = game.add.audio('gui_collapse');
        this.expandSound = game.add.audio('gui_expand');
        
        this.styles = {
            borderRadius: 5,
            darkGrey: 0x282731,
            midGrey: 0x3f3c46,
            lightGrey: 0x4d4b56,
            veryLightGrey : 0x948f9c,
            red: 0xc03b2b,
            green: 0x1aae5c,
            baseText : { font: `${14+this.fontSizeOffset}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'left'},
            smallWhiteText : { font: `${13+this.fontSizeOffset}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'left'},
            smallGreyText : { font: `italic ${13+this.fontSizeOffset}px ${this.fontFamilyLarge}`, fill: '#948f9c', align: 'left'},
            title : { font: `${18}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'left'},
        }
    }
    
    // Showing
    show(){
        this.previousControlMode = this.game.player.controlMode;
        this.screen.visible = true;

        switch(this.transitionStyle) {
            case SCREEN_TRANSITION_STYLE.fromBottom:
                this.expandSound.play();
                this.screen.y = this.game.camera.height;
                var transition = this.game.add.tween(this.screen.position).to({y: 0}, 500, Phaser.Easing.Back.InOut, true);
                break;
            case SCREEN_TRANSITION_STYLE.fromRight:
                this.screen.x = this.game.camera.width;
                var transition = this.game.add.tween(this.screen.position).to({x: 0}, 500, "Quart.easeOut", true);
                break;
            default:
                // None
        }
        if(transition!=undefined) transition.onComplete.add(this.didShow, this);
    }

    didShow(){
        if(this.parentScreen) this.parentScreen.childScreenDidShow();
    }
    
    // Hiding
    hide(){
        switch(this.transitionStyle) {
            case SCREEN_TRANSITION_STYLE.fromBottom:
                this.collapseSound.play();
                var transition = this.game.add.tween(this.screen.position).to({y: this.game.camera.height}, 500, Phaser.Easing.Back.InOut, true);
                break;
            case SCREEN_TRANSITION_STYLE.fromRight:
                var transition = this.game.add.tween(this.screen.position).to({x: this.game.camera.width}, 500, "Quart.easeOut", true);
                break;
            default:
                // None
        }
        transition.onComplete.add(this.didHide, this);

        if(this.parentScreen) this.parentScreen.childScreenWillHide();
    }
 
    didHide(){
        this.screen.visible = false;        
        this.game.player.controlMode = this.previousControlMode;
        
        this.cleanup();

        if(this.parentScreen) this.parentScreen.childScreenDidHide();
    }
    
    cleanup(){
        
    }
    
    childScreenDidHide(){
        
    }

    childScreenWillHide(){
        
    }

    childScreenWillShow(){
        
    }

    childScreenDidShow(){
        
    }

    update(){

    }

}class Item_Flake extends InventoryObject {
    constructor(game) {
        super(game);

        this.name = 'Asteroid Flake';
        this.storageClass = CARGO_STORAGE_CLASS.bulk
        this.rarity = RARITY.common;
        this.mass = 10;
        this.baseValue = 16;
        this.type = 'Mineral';
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Merging js: app/gui/arrival.js begins */

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/* Merging js: app/items/paladium.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class ArrivalScreen extends GuiScreen {
    constructor(game,group) {
        super(game,group);

        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromBottom;

        this._destination = null;
        this.serviceButtons = [];
        this.serviceScreens = {};      
        this.serviceSelectedIndex = null;
        
        this.setupKeys();
        this.setupScreen();
                
        this.wrapper = group;
        this.wrapper.add(this.screen);
        this.wrapper.fixedToCamera = true;
        this.wrapper.visible = false;

        this.controlGroup = this.game.add.group();
        this.screen.add(this.controlGroup);
    }
    
    setupKeys(){
        var upKey = game.input.keyboard.addKey(Phaser.Keyboard.UP);
        upKey.onUp.add(this.upKeyPressed, this);
        
        var downKey = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
        downKey.onUp.add(this.downKeyPressed, this);

        var leftKey = game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
        leftKey.onUp.add(this.leftKeyPressed, this);

        var rightKey = game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
        rightKey.onUp.add(this.rightKeyPressed, this);

        var escKey = game.input.keyboard.addKey(Phaser.Keyboard.ESC);
        escKey.onUp.add(function(){
            if(this.game.player.controlMode == CONTROL_MODE.landed) this.hide();
        }, this);

        var lKey = game.input.keyboard.addKey(Phaser.Keyboard.L);
        lKey.onUp.add(function(){
            if(this.game.player.controlMode == CONTROL_MODE.landed) this.hide();
        }, this);
    }
    
    upKeyPressed(){
        // Later
    }
    
    downKeyPressed(){
        // Later
    }
    
    leftKeyPressed(){
        this.selectPreviousService();
    }
    
    rightKeyPressed(){
        this.selectNextService();
    }
    
    selectNextService(){
        if(this.serviceSelectedIndex==null){
            this.serviceSelectedIndex = 0;
            return;
        }

        this.serviceSelectedIndex++;
        this.serviceSelectedIndex = this.serviceSelectedIndex.clamp(0,this.destination.services.length-1);
    
        this.layout();
    }
    
    selectPreviousService(){
        if(this.serviceSelectedIndex==null){
            this.serviceSelectedIndex = 0;
            return;
        }
        
        this.serviceSelectedIndex--;
        this.serviceSelectedIndex = this.serviceSelectedIndex.clamp(0,this.destination.services.length-1);
    
        this.layout();
    }
    
    clickSelectedService(){
        
    }
    
    setupScreen(){
        // BG
        this.bg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.panelBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));

        // Background
        this.bg.clear();
        this.bg.beginFill(this.styles.darkGrey);
        this.bg.drawRect(0,0,
            this.game.camera.width,
            this.game.camera.height*2,
            0
        )
        this.bg.endFill();

        // Panel
        this.panelHeight = this.game.scale.height-126;
        this.panelTop = 94;
        this.panelBg.clear();
        this.panelBg.beginFill(this.styles.midGrey);
        this.panelBg.drawRoundedRect(36,this.panelTop,
            this.game.camera.width-(36*2),
            this.panelHeight,
            this.styles.borderRadius
        )
        this.panelBg.endFill();

        
        // Title / Details / Date
        this.destDesc = this.game.add.text(
            36,24, 
            '', 
            this.styles.smallGreyText, 
            this.screen
        )
        this.destDesc.resolution = this.textResolution;

        this.destName = this.game.add.text(
            36,43, 
            '', 
            this.styles.title, 
            this.screen
        )
        this.destName.resolution = this.textResolution;
 
        this.destBreadcrumb = this.game.add.text(
            -1,43, 
            '', 
            this.styles.title, 
            this.screen
        )
        this.destBreadcrumb.tint = 0x948f9c;
        this.destBreadcrumb.resolution = this.textResolution;

        
        this.currentDate = this.game.add.text(
            36,68, 
            '', 
            this.styles.smallWhiteText, 
            this.screen
        )
        this.currentDate.resolution = this.textResolution;

        // Exit button
        this.exitButton = new Button(this.game,'exit-button',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        { font: `${13+this.fontSizeOffset}px ${FONT}`, fill: '#FFFFFF', align: 'center'}
        );
        this.exitButton.buttonX = this.game.camera.width - this.exitButton.buttonWidth - 36;
        this.exitButton.buttonY = 24;
        this.exitButton.text = "Takeoff (L)";
        this.exitButton.color = this.styles.red;
        this.screen.add(this.exitButton);

        // Credits
        this.creditsLabel = this.game.add.text(
            this.game.camera.width-36,68, 
            '', 
            this.styles.baseText, 
            this.screen
        );
        this.creditsLabel.anchor.set(1,0);
        this.creditsLabel.addColor('#948f9c', 0);
        this.creditsLabel.addColor('#FFFFFF', 7);
        this.creditsLabel.resolution = this.textResolution;

        // Photo
        this.picture = this.game.add.sprite(36, this.panelTop, 'planet-arrival-1');
        var cropRect = new Phaser.Rectangle(0, 0, 300, this.panelHeight);
        this.picture.crop(cropRect);
        this.screen.add(this.picture);
        this.innerColX = this.picture.width+36+24

        // Message
        this.innerColWidth = this.game.camera.width - (this.picture.width+36+24) - 36-24; 
        this.welcomeText = this.game.add.text(
            this.innerColX,this.panelTop+16, 
            '', 
            { font: ` ${12+this.fontSizeOffset}px Fira Code`, fill: '#FFFFFF', align: 'left', wordWrap: true, wordWrapWidth: this.innerColWidth }, 
            this.screen
        );
        this.welcomeText.lineSpacing = -4;
        this.welcomeText.resolution = this.textResolution;        
    }
    
    layout(){        
        this.cleanup();
        
        console.log(this.serviceSelectedIndex);
        
        // Description
        this.destDesc.setText(this.destination.description);

        // Name
        this.destName.setText(this.destination.name);
        
        // Breadcrumb
        this.destBreadcrumb.setText('');
        this.destBreadcrumb.alpha = 0;
        this.destBreadcrumb.x = this.destName.x + this.destName.width + 10
        
        // Date
        this.currentDate.setText(moment(this.game.starDate).format('MMMM Do YYYY, HH:mm'));

        // Text
        this.welcomeText.setText(this.destination.welcomeText);      
    
        // Services Buttons/
        this.controlGroup.visible = true;
        var servicesIndex = 0;
        var serviceRow = 1;
        for (let service of this.destination.services) {
            var serviceButton = new TwoLineButton(this.game,'service-button');
            serviceButton.screen = this;
            serviceButton.service = service;

            if(servicesIndex==this.serviceSelectedIndex){
                serviceButton.over = true;
            }

            serviceButton.callbacks = {
                onDown : function() {
                    this.screen.serviceButtonClicked(this);
                }.bind(serviceButton)
            }

            serviceButton.buttonWidth = (this.innerColWidth/2)-8
            if(isEven(servicesIndex)){
                serviceButton.buttonX = this.innerColX;
            } else {
                serviceButton.buttonX = this.innerColX + serviceButton.buttonWidth+16;
            }
            
            serviceButton.buttonY = (this.panelHeight+this.panelTop)-((serviceButton.buttonHeight+16)*serviceRow);
            serviceButton.text = PLANET_SERVICES_TITLE[service];
            serviceButton.subText = PLANET_SERVICES_DESC[service];
            serviceButton.color = this.styles.lightGrey;
            this.controlGroup.add(serviceButton);            
            
            servicesIndex++;
            if(servicesIndex % 2 === 0) serviceRow++class Item_Paladium extends InventoryObject {
    constructor(game) {
        super(game);

        this.name = 'Raw Paladium';
        this.storageClass = CARGO_STORAGE_CLASS.bulk
        this.rarity = RARITY.rare;
        this.mass = 20;
        this.baseValue = 100;
        this.type = 'Mineral';
    }
};
            this.serviceButtons.push(serviceButton);
        }            

        this.updateCredits();    
    }
        
    serviceButtonClicked(button){
        this.presentScreenForService(button.service)
    }
    
    presentScreenForService(service){
        // Present Screen
        if(service==PLANET_SERVICES.market){
            this.serviceScreens[PLANET_SERVICES.market] = new ExchangeScreen(this.game,this.screen,this.destination);
            this.serviceScreens[PLANET_SERVICES.market].parentScreen = this;
            this.screen.add(this.serviceScreens[PLANET_SERVICES.market].screen);            
        }

        var screenToPresent = this.serviceScreens[service]
        screenToPresent.show();          

        // Update Breadcrumb
        this.destBreadcrumb.setText('/ ' + PLANET_SERVICES_TITLE[service]);
        this.destBreadcrumb.alpha = 0;
        var transition = this.game.add.tween(this.destBreadcrumb).to({alpha: 1}, 600, "Quart.easeOut", true);

        // Disable buttons
        this.controlGroup.forEach(function(control){
            control.sprite.input.enabled = false;
        }, this)
    }

    childScreenWillHide(){
        super.childScreenWillHide();
        this.game.add.tween(this.destBreadcrumb).to({alpha: 0}, 600, "Quart.easeOut", true);

        // Enable buttons
        this.controlGroup.forEach(function(control){
            control.sprite.input.enabled = true;
        }, this)

        this.updateCredits();   
    }
    
    childScreenDidHide(){
        super.childScreenDidHide();
    }
    
    show(){
        super.show();

        this.wrapper.visible = true;
        
        // Arrival Specific 
        this.game.player.stop();                
    }

    didShow(){
        super.didShow();        
        this.game.player.controlMode = CONTROL_MODE.landed;
        this.controlGroup.visible = true;        
    }
    
    hide(){
        super.hide();

        // Arrivial Specific
        this.game.player.ship.takeOff();

        // Wait a second then show where we are.
        game.time.events.add(Phaser.Timer.SECOND * 1, function(){
            this.game.hud.showSystemInfo();
        }, this);
    }

    didHide(){
        super.didHide();
    }
    
    cleanup(){
        for (let button of this.serviceButtons) {
            button.destroy(true);
        }
        
        Object.keys(this.serviceScreens).forEach(function(key,index) {
            var screen = this.serviceScreens[key];
            screen.cleanup();
            screen.screen.destroy(true);
        }.bind(this));
    }
    
    get destination(){
        return this._destination;
    }

    set destination(destination){
        this._destination = destination;
        this.layout();
    }

    updateCredits(){
        this.creditsLabel.setText('CREDITS ' + this.game.player.credits);
    }


}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/items/metoricIron.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/inventory.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Item_MeteoricIron extends InventoryObject {
    constructor(game) {
        super(game);

        this.name = 'Meteoric Iron';
        this.storageClass = CARGO_STORAGE_CLASS.bulk
        this.rarity = RARITY.uncommon;
        this.mass = 15;
        this.baseValue = 32;
        this.type = 'Mineral';
    }
}class InventoryScreen extends GuiScreen {
    constructor(game,group) {
        super(game,group);

        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromBottom;
        
        this.setupScreen();
                
        this.wrapper = group;
        this.wrapper.add(this.screen);
        this.wrapper.fixedToCamera = true;
        this.wrapper.visible = false;

        this.helpTexts = {
            default : '(UP/DOWN) Select Item   (J) Jettison',
            equipment : '(UP/DOWN) Select Item   (J) Jettison   (E) Equip/Unequip',
            consumable : '(UP/DOWN) Select Item   (J) Jettison   (SPACE) Use',
        }

        this.jettisonSound = game.add.audio('jettison');

    }
    
    setupKeys(){
        this.downKey = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);       
        this.downKeyOnUp = function(){
            this.myList.selectNextItem();
            this.update();
        }
        this.downKey.onUp.add(this.downKeyOnUp, this);

        this.upKey = game.input.keyboard.addKey(Phaser.Keyboard.UP);
        this.upKeyOnUp = function(){
            this.myList.selectPreviousItem();
            this.update();
        }
        this.upKey.onUp.add(this.upKeyOnUp, this);

        this.escKey = game.input.keyboard.addKey(Phaser.Keyboard.ESC);
        this.escKeyOnUp = function(){
            this.hide();
        }
        this.escKey.onUp.add(this.escKeyOnUp, this);

        this.iKey = game.input.keyboard.addKey(Phaser.Keyboard.I);
        this.iKeyOnUp = function(){
            this.hide();
        }
        this.iKey.onUp.add(this.iKeyOnUp, this);

        this.eKey = game.input.keyboard.addKey(Phaser.Keyboard.E);
        this.eKeyOnUp = function(){
            this.toggleEquipForSelectedItem();
        }
        this.eKey.onUp.add(this.eKeyOnUp, this);

        this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        this.spaceKeyOnUp = function(){
            this.consumeSelectedItem();
        }
        this.spaceKey.onUp.add(this.spaceKeyOnUp, this);

        this.jKey = game.input.keyboard.addKey(Phaser.Keyboard.J);
        this.jKeyOnUp = function(){
            this.jettisonSelectedItem();
        }
        this.jKey.onUp.add(this.jKeyOnUp, this);
    }
    
    setupScreen(){
        this.screenWidth = this.game.camera.width-this.game.hud.sidebarWidth;

        this.bg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.tabBar = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.bottomBar = this.screen.add(new Phaser.Graphics(this.game.game,0,0));

        // Background
        this.bg.clear();
        this.bg.beginFill(0x111111);
        this.bg.drawRect(0,0,
            this.screenWidth,
            this.game.camera.height*2,
            0
        )
        this.bg.endFill();
        
        // Tab Bar
        this.tabBarHeight = 45;
        this.tabBar.clear();
        this.tabBar.beginFill(0x111111);
        this.tabBar.drawRect(0,0,
            this.screenWidth,
            this.tabBarHeight,
        )
        this.bottomBar.endFill();

        // Tabs
        this.shipTab = new TabItem(this.game,'ship-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.shipTab.buttonX = 0;
        this.shipTab.buttonY = 0;
        this.shipTab.text = "Ship";
        this.screen.add(this.shipTab);
        
        this.inventoryTab = new TabItem(this.game,'inv-tab');
        this.inventoryTab.buttonX = this.shipTab.buttonWidth + 1;
        this.inventoryTab.buttonY = 0;
        this.inventoryTab.text = "Inventory";
        this.inventoryTab.active = true;
        this.screen.add(this.inventoryTab);

        this.mapTab = new TabItem(this.game,'map-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.mapTab.buttonX = this.inventoryTab.buttonX + this.inventoryTab.buttonWidth + 1;
        this.mapTab.buttonY = 0;
        this.mapTab.text = "Map";
        this.screen.add(this.mapTab);

        this.statsTab = new TabItem(this.game,'stats-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.statsTab.buttonX = this.mapTab.buttonX + this.mapTab.buttonWidth + 1;
        this.statsTab.buttonY = 0;
        this.statsTab.text = "Stats";
        this.screen.add(this.statsTab);

        // Bottom Bar
        this.bottomBarHeight = 38;
        this.bottomBar.clear();
        this.bottomBar.beginFill(this.styles.darkGrey);
        this.bottomBar.drawRect(0,this.game.camera.height-this.bottomBarHeight,
            this.screenWidth,
            this.bottomBarHeight+100, // Overlap for animation
        )
        this.bottomBar.endFill();

        this.helpText = this.game.add.text(
            16,this.game.camera.height - 26, 
            '', 
            { font: `12px ${FONT}`, fill: '#929292', align: 'left'},
            this.screen
        )

        // Lists
        this.myList = new GuiInventoryList(this.game,this.screen);
        this.myList.title = 'All Items'
        this.myList.x = 0;
        this.myList.y = this.tabBarHeight;
        this.myList.listWidth = this.screenWidth/2;
        this.myList.listHeight = this.game.camera.height-this.bottomBarHeight-this.tabBarHeight;
        this.myList.itemCursorStyle = INVENTORY_LIST_CURSOR_STYLE.flat;
        this.myList.focus = true;
        this.myList.itemsPerPage = 12;
        this.myList.allowFilter = true;
        this.screen.add(this.myList);

        // Item Info
        // Background
        this.infoMargin = 16;
        this.infoWidth = (this.screenWidth/2)-1;

        this.itemInfoBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.itemInfoTitleBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.infoTitleLabel = this.game.add.text(
            0,0, 
            'Item', 
            { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'},
            this.screen
        )
        this.infoTitleLabel.resolution = 2;

        this.infoSubtitleLabel = this.game.add.text(
            0,0, 
            'Item', 
            { font: `13px ${FONT}`, fill: '#929292', align: 'right'},
            this.screen
        )
        this.infoSubtitleLabel.anchor.set(1,0);
        this.infoSubtitleLabel.resolution = 2;


        this.infoDescription = this.game.add.text(
            0,0, 
            '', 
            { font: `12px Fira Code`, fill: '#FFFFFF', align: 'left', }, 
            this.screen
        );
        this.infoDescription.setStyle({ font: `12px Fira Code`, fill: '#FFFFFF', align: 'left', wordWrap: true, wordWrapWidth: this.infoWidth-(this.infoMargin*2) })
        this.infoDescription.lineSpacing = -4;
        this.infoDescription.resolution = this.textResolution;        
        
        // Props
        this.propsGroup = this.game.add.group();
        this.screen.add(this.propsGroup);
    
        this.update();
    }
    
    layout(){        
        this.cleanup();
    }

    update(){
        this.updateItemInfo();        
    }

    updateItemInfo(){                        
        var infoX = this.myList.x + this.myList.listWidth+1;
        var infoY = 45;

        // Properites
        this.itemInfoBg.clear();
        this.itemInfoTitleBg.clear();
        var infoBgHeight = 100;
        this.propsGroup.removeAll(true);

        if(this.myList.selectedItem){
            // HelpTexts
            this.helpText.setText(this.helpTexts.default);
            if(this.myList.selectedItem.isEquippable) this.helpText.setText(this.helpTexts.equipment);
            if(this.myList.selectedItem.isConsumable) this.helpText.setText(this.helpTexts.consumable);

            // Description
            if(this.myList.selectedItem.description!=undefined){
                this.infoDescription.x = infoX+this.infoMargin;
                this.infoDescription.y = infoY + 40;
                this.infoDescription.setText(this.myList.selectedItem.description)
            } else {
                this.infoDescription.setText('');                
            }

            var props = this.myList.selectedItem.infoFields
            var labels = this.myList.selectedItem.infoFieldLabels

            var propIndex = 0;
            var propLineHeight = 20;
            for (let prop of props) {
                var propY = (propIndex*propLineHeight)+infoY+40+this.infoDescription.height+16;
                
                var propTitle = this.game.add.text(
                    infoX+16,propY, 
                    labels[propIndex], 
                    { font: `13px ${FONT}`, fill: '#929292', align: 'left'},
                    this.propsGroup
                )
                propTitle.resolution = 2;
    
                var value = this.myList.selectedItem[props[propIndex]];
                if(props[propIndex]=='baseValue') value = CREDIT_PREFIX.short + numeral(value).format(`0,0[.]00`);
                if(props[propIndex]=='rarity') value = RARITY_NAMES[this.myList.selectedItem[props[propIndex]]];
                if(props[propIndex]=='storageClass') value = CARGO_STORAGE_CLASS_NAMES[this.myList.selectedItem[props[propIndex]]];
                if(props[propIndex]=='mass') value = this.myList.selectedItem.readableMass;
                if(props[propIndex]=='energyConsumption') value = `${numeral(value).format('0,0')} kW`;
                if(props[propIndex]=='fuelConsumption') value = `${numeral(value).format('0,0.0')} units/sec`;
                if(props[propIndex]=='thrust') value = `${numeral(value).format('0,0')} kN`;
                if(props[propIndex]=='range') value = `${numeral(value).format('0,0')} m`;
                if(props[propIndex]=='capacity') value = `${numeral(value).format('0,0')} kWh`;
                if(props[propIndex]=='fuelCapacity') value = `${numeral(value).format('0,0')} units`;
                if(props[propIndex]=='fuelAmount') value = `${numeral(value).format('0,0')} units`;
    
                var propValue = this.game.add.text(
                    infoX+this.infoWidth-16,propY,
                    value, 
                    { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'right'},
                    this.propsGroup
                )
                if(props[propIndex]=='rarity') propValue.tint = RARITY_COLOR[this.myList.selectedItem[props[propIndex]]];
                propValue.anchor.set(1,0);
                propValue.resolution = 2;
                
                propIndex++;
            };
            infoBgHeight = this.game.camera.height - 83;            
            this.infoTitleLabel.x = infoX+16;
            this.infoTitleLabel.y = infoY+8;
            this.infoTitleLabel.visible = true;
            this.infoTitleLabel.setText(this.myList.selectedItem.name);

            this.infoSubtitleLabel.x = infoX+this.infoWidth-16;
            this.infoSubtitleLabel.y = this.infoTitleLabel.y;

            if(this.myList.selectedItem.type!=undefined) this.infoSubtitleLabel.setText(this.myList.selectedItem.type);
            if(this.myList.selectedItem.equipped) this.infoSubtitleLabel.setText('Equipped');
            if(!this.myList.selectedItem.equipped) this.infoSubtitleLabel.setText('Unequipped');
            if(this.myList.selectedItem.isConsumable) this.infoSubtitleLabel.setText('Consumable');
            
        } else {
            // Item Empty
            this.infoTitleLabel.visible = false;
            this.infoDescription.setText('');
            infoBgHeight = this.game.camera.height-83;
        }

        this.itemInfoBg.beginFill(0x3F3C46);
        this.itemInfoBg.drawRect(infoX,infoY,
            this.infoWidth,
            infoBgHeight,
            0
        )
        this.itemInfoBg.endFill();

        this.itemInfoTitleBg.beginFill(0x4D4B56);
        this.itemInfoTitleBg.drawRect(infoX,infoY,
            this.itemInfoBg.width,
            30,
        )
        this.itemInfoTitleBg.endFill(); 
    }
    
    toggleEquipForSelectedItem(){
        if(this.myList.selectedItem.isEquippable){
            if(this.myList.selectedItem.equipped){
               this.myList.selectedItem.unequip(); 
            } else {
               this.myList.selectedItem.equipTo(this.game.player.ship); 
            }
        }
        this.update();
        this.myList.layout();
    }
    
    consumeSelectedItem(){        
        if(this.myList.selectedItem.isConsumable){
           this.myList.selectedItem.consume(); 
        }
        this.refreshItems();
        this.myList.layout();
    }

    jettisonSelectedItem(){        
        this.jettisonSound.play();
        this.myList.selectedItem.remove();         
        
        this.refreshItems();
        this.myList.layout();
    }
    
    refreshItems(){
        this.myList.items = this.game.player.ship.inventory;
    }

        
    show(){
        super.show();

        this.refreshItems();
        this.wrapper.visible = true;
        this.setupKeys();
        this.update();
    }

    didShow(){
        super.didShow();        
        this.game.player.controlMode = CONTROL_MODE.inventory;
    }
    
    hide(){
        super.hide();
        this.cleanup();
        game.time.events.add(Phaser.Timer.SECOND * 1, function(){
            this.game.hud.showSystemInfo();
        }, this);
    }

    didHide(){
        super.didHide();
    }
    
    cleanup(){
        this.escKey.onUp.remove(this.escKeyOnUp, this);
        this.upKey.onUp.remove(this.upKeyOnUp, this);
        this.downKey.onUp.remove(this.downKeyOnUp, this);
        this.iKey.onUp.remove(this.iKeyOnUp, this);
        this.eKey.onUp.remove(this.eKeyOnUp, this);
        this.spaceKey.onUp.remove(this.spaceKeyOnUp, this);
        this.jKey.onUp.remove(this.jKeyOnUp, this);
    }    
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/items/fuel.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/exchange.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class ExchangeScreen extends GuiScreen {
    constructor(game,group,destination) {
        super(game,group);

        this.destination = destination;
        this.serviceButtons = [];
      
        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromRight;

        this.setupKeys();

        this.insetX = 32;
        this.insetBottom = 32;
        this.top = 94;

        this.helpTexts = {
            default : '(UP/DOWN) Select Item   (SPACEBAR) Buy/Sell Item   (TAB) Switch List   (RETURN) Accept',
            shift : '(UP/DOWN) Select Item   (SHIFT+SPACEBAR) Buy/Sell All   (TAB) Switch List   (RETURN) Accept',
        }

        // BG
        this.bg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.panelBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));

        // Background
        this.bg.clear();
        this.bg.beginFill(this.styles.darkGrey);
        this.bg.drawRect(0,this.top,
            this.game.camera.width,
            this.game.camera.height,
            0
        )
        this.bg.endFill();
        
        // Lists
        this.myList = new GuiInventoryList(this.game,this.screen);
        this.myList.title = 'My Ship'
        this.myList.x = this.insetX;
        this.myList.y = this.top;
        this.myList.itemCursorStyle = INVENTORY_LIST_CURSOR_STYLE.right;
        
        this.exchangeList = new GuiInventoryList(this.game);
        this.exchangeList.title =  `${this.destination.name} ${PLANET_SERVICES_TITLE.market}` 
        this.exchangeList.x = (this.game.camera.width - this.insetX) - this.exchangeList.listWidth; 
        this.exchangeList.y = this.top;
        this.exchangeList.itemCursorStyle = INVENTORY_LIST_CURSOR_STYLE.left;
        
        this.screen.add(this.myList);
        this.screen.add(this.exchangeList);
        
        this.myListDelta = []
        this.exchangeListDelta = [];

        this.activeList = this.myList;
        this.activeList.focus = true;

        // Item Info
        // Background
        this.itemInfoBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.itemInfoTitleBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.infoTitleLabel = this.game.add.text(
            0,0, 
            'Item', 
            { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'},
            this.screen
        )
        this.infoTitleLabel.resolution = 2;
        
        // Props
        this.propsGroup = this.game.add.group();
        this.screen.add(this.propsGroup);

        // Back Button
        this.backButton = new Button(this.game,'back-button',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        { font: `${13+this.fontSizeOffset}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'center'}
        );
        this.backButton.buttonX = this.insetX;
        this.backButton.buttonY = this.myList.listHeight+this.top+16;
        this.backButton.text = `${String.fromCharCode(0x2190)} Back`;
        this.screen.add(this.backButton);

        // Help Text
        this.helpText = this.game.add.text(
            this.insetX,this.game.camera.height - this.insetBottom-16, 
            this.helpTexts.default, 
            { font: `12px ${FONT}`, fill: '#929292', align: 'left'},
            this.screen
        )
        this.helpText.resolution = 2;


        // Sale Amount
        // Background
        this.saleAmountBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.saleTotalLabel = this.game.add.text(
            0,0,
            'Total', 
            { font: `14px ${FONT}`, fill: '#929292', align: 'left'},
            this.screen
        )
        this.saleTotalLabel.resolution = 2;

        this.saleAmountLabel = this.game.add.text(
            0,0,
            '', 
            { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'left'},
            this.screen
        )
        this.saleAmountLabel.anchor.set(1,0);
        this.saleAmountLabel.resolution = 2;

        this.acceptButton = new Button(this.game,'accept-button'class Item_Fuel extends InventoryObject {
    constructor(game) {
        super(game);

        this.name = 'Rocket Fuel';
        this.storageClass = CARGO_STORAGE_CLASS.liquid
        this.rarity = RARITY.exotic;
        this.mass = 1;
        this.type = 'Liquid'

        this.baseValue = 1;
    }
},{
            onReleased : function() {
                this.acceptTransaction();
            }.bind(this),
        },
        { font: `${13+this.fontSizeOffset}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'center'}
        );
        this.screen.add(this.acceptButton);
    }

    update(){
        super.update();
        this.updateItemInfo();        
    }
    
    updateSaleAmount(){
        var saleAmountMargin = 16;
        var saleAmountHeight = 70;
        var saleAmountX = this.myList.x+this.myList.listWidth+saleAmountMargin;
        var saleAmountY = this.exchangeList.listHeight + this.top - saleAmountHeight;
        var saleAmountWidth = this.game.camera.width-(this.exchangeList.listWidth*2)-(this.insetX*2)-(saleAmountMargin*2);
            
        // Labels
        this.saleTotalLabel.x = saleAmountX + 8;
        this.saleTotalLabel.y = saleAmountY + 8;

        this.saleAmountLabel.x = saleAmountX - 8 + saleAmountWidth;
        this.saleAmountLabel.y = saleAmountY + 8;
        
        var saleAmount = this.calculateSaleAmount();

        var formattedSaleAmount = CREDIT_PREFIX.short + numeral(Math.abs(saleAmount)).format('0,0');
        if(saleAmount>0) formattedSaleAmount = '+' + formattedSaleAmount
        if(saleAmount<0) formattedSaleAmount = '-' + formattedSaleAmount
        if(saleAmount!=0){
            // BG
            this.saleAmountBg.clear();
            this.saleAmountBg.beginFill(0x3F3C46);
            this.saleAmountBg.drawRect(saleAmountX,saleAmountY,
                saleAmountWidth,
                saleAmountHeight,
                0
            )
            this.saleAmountBg.endFill();
            this.saleTotalLabel.visible = true;
            this.saleAmountBg.visible = true;
            this.acceptButton.visible = true;
        } else {
            this.saleTotalLabel.visible = false;
            this.saleAmountBg.visible = false;
            this.acceptButton.visible = false;
        }
        
        // Is there enough room?
        this.hasEnoughSpace = true;
        this.massNeeded = {};
        if(this.myListDelta.length>0){
            // Zero each type of storage
            Object.keys(CARGO_STORAGE_CLASS).forEach(function(key,index) {
                this.massNeeded[key] = 0
            }.bind(this));

            // Add mass per storage class
            for (let item of this.myListDelta) {
                this.massNeeded[item.storageClass] += this.massNeeded[item.storageClass] + item.mass;
            }

            // Verify for each storage class there is enough room
            for (let storageClass of Object.keys(CARGO_STORAGE_CLASS)) {
                var massNeeded = this.massNeeded[storageClass];
                if(massNeeded>0){
                    if(!this.game.player.ship.hasEnoughSpaceForItemOfStorageClassWithMass(storageClass,massNeeded))
                        this.hasEnoughSpace = false;
                }
            }
        }

        // Button setup
        this.acceptButton.buttonX = saleAmountX + 8;
        this.acceptButton.buttonY = saleAmountY + 8 + 24;
        this.acceptButton.buttonWidth = saleAmountWidth-16;

        if(this.hasEnoughSpace){
            this.acceptButton.text = `Accept ${formattedSaleAmount}`;
            this.acceptButton.color = this.styles.green;
        } else {
            this.acceptButton.text = `Not Enough Space`;
            this.acceptButton.color = this.styles.red;
        }
        

        
    }
    
    calculateSaleAmount(){
        var myListDeltaTotal = 0;
        var exchangeListDeltaTotal = 0;
        for (let item of this.myListDelta) {
            if(item.containedIn == this.destination){
                myListDeltaTotal += item.buyValue
            } else {
                myListDeltaTotal += item.baseValue
            }               
        } 

        for (let item of this.exchangeListDelta) {
            if(item.containedIn == this.destination){
                exchangeListDeltaTotal += item.buyValue;
            } else {
                exchangeListDeltaTotal += item.baseValue;
            }               
        } 


        return exchangeListDeltaTotal - myListDeltaTotal;        
    }
    
    updateItemInfo(){
        var item = this.activeList.selectedItem;
                        
        var infoMargin = 16;
        var infoWidth = this.game.camera.width-(this.exchangeList.listWidth*2)-(this.insetX*2)-(infoMargin*2)
        var infoX = this.myList.x+this.myList.listWidth+infoMargin;
        var infoY = this.top;

        // Properites
        this.itemInfoBg.clear();
        this.itemInfoTitleBg.clear();
        var infoBgHeight = 100;
        this.propsGroup.removeAll(true);
        if(item){
            var props = ['baseValue','mass','rarity','storageClass'];
            var labels = ['Value','Weight','Rarity','Container'];
            var propIndex = 0;
            var propLineHeight = 20;
            for (let prop of props) {
                var propY = (propIndex*propLineHeight)+infoY+40;
                if(item[prop]==undefined) return;
                
                var propTitle = this.game.add.text(
                    infoX+8,propY, 
                    labels[propIndex], 
                    { font: `13px ${FONT}`, fill: '#929292', align: 'left'},
                    this.propsGroup
                )
                propTitle.resolution = 2;
    
                var value = item[props[propIndex]];
                if(props[propIndex]=='baseValue') {
                    if(item.containedIn == this.destination){
                        // Prices are higher when buying ;)
                        value = CREDIT_PREFIX.short + numeral(item.buyValue).format(`0,0[.]00`);
                    } else {
                        value = CREDIT_PREFIX.short + numeral(value).format(`0,0[.]00`);
                    }   
                }
                if(props[propIndex]=='rarity') value = RARITY_NAMES[item[props[propIndex]]];
                if(props[propIndex]=='storageClass') value = CARGO_STORAGE_CLASS_NAMES[item[props[propIndex]]];
                if(props[propIndex]=='mass') value = item.readableMass;
    
                var propValue = this.game.add.text(
                    infoX+infoWidth-8,propY,
                    value, 
                    { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'right'},
                    this.propsGroup
                )
                if(props[propIndex]=='rarity') propValue.tint = RARITY_COLOR[item[props[propIndex]]];
                propValue.anchor.set(1,0);
                propValue.resolution = 2;
                
                propIndex++;
            };
            infoBgHeight = propIndex*propLineHeight+30+16

            this.itemInfoBg.beginFill(0x3F3C46);
            this.itemInfoBg.drawRect(infoX,infoY,
                infoWidth,
                infoBgHeight,
                0
            )
            this.itemInfoBg.endFill();
    
            this.itemInfoTitleBg.beginFill(0x4D4B56);
            this.itemInfoTitleBg.drawRect(infoX,infoY,
                this.itemInfoBg.width,
                30,
            )
            this.itemInfoTitleBg.endFill(); 
            
            this.infoTitleLabel.x = infoX+8;
            this.infoTitleLabel.y = infoY+8;
            this.infoTitleLabel.visible = true;
            this.infoTitleLabel.setText(item.name);
        } else {
            // Item Empty
            this.infoTitleLabel.visible = false;
        }

        this.updateSaleAmount();
    }
    
    transferAllOfSelectedItem(){
        var amount = this.activeList.amountOfSelectedItem;
        for (var i = 0; i < amount; i++) { 
            this.transferSelectedItem();
        }
    }
    
    transferSelectedItem(){
        var item = this.activeList.selectedItem; 
               
        if(item) {
            if(this.activeList==this.myList){
                this.exchangeList.addItem(item);
                this.exchangeListDelta.push(item);
                
                this.myList.removeItem(item);

                var index = this.myListDelta.indexOf(item);
                if (index > -1) this.myListDelta.splice(index, 1);
            }
            if(this.activeList==this.exchangeList){
                this.myList.addItem(item);
                this.myListDelta.push(item);
                
                this.exchangeList.removeItem(item);

                var index = this.exchangeListDelta.indexOf(item);
                if (index > -1) this.exchangeListDelta.splice(index, 1);
            }
        }        
    }
    
    toggleActiveList(){
        this.activeList.focus = false;
        if(this.activeList==this.myList){
            this.activeList=this.exchangeList
        } else {
            this.activeList=this.myList            
        }
        this.activeList.focus = true;
        this.update();
    }
    
    acceptTransaction(){
        if(!this.hasEnoughSpace) {
            this.showNotEnoughSpaceNotification();
            return;
        }

        var saleAmount = this.calculateSaleAmount();
        if(saleAmount!=0){
            if(saleAmount<0){
                // Buy. We will deduct credits.
                if(this.game.player.debitCredits(Math.abs(saleAmount))){
                    // Valid transaction
                    this.completeTransaction(saleAmount);
                } else {
                    // Not Enough.
                    this.showNotEnoughCreditsNotification();
                }
            }
            if(saleAmount>0){
                // Sell. We will add credits.
                this.game.player.addCredits(Math.abs(saleAmount))
                this.completeTransaction(saleAmount);
            }
        }
    }

    completeTransaction(saleAmount){
        
        var myItems = [].concat.apply([], this.myList.items);
        this.game.player.ship.emptyCargoHold();        
        for (let item of myItems) {
            this.game.player.ship.addItemsToInventory(1,item);
        }
    
        var destinationItems = [].concat.apply([], this.exchangeList.items);
        this.destination.emptyCargoHold();
        for (let item of destinationItems) {
            item.equipped = false;
            this.destination.addItemsToInventory(1,item);
        }
        
        // Clear deltas
        this.myListDelta = [];
        this.exchangeListDelta = [];
        
        // Notify
        this.showPurchaseNotification(saleAmount);

        // Cleanup
        this.hide();        
    }
    

    showPurchaseNotification(amount){
        var notification = new Notification(this.game);
        notification.text = 'Transaction Complete';
        notification.subText = 'Items have been transferred.';
        notification.accessoryText = numeral(amount).format('$0,0[.]00');
        notification.show();
    }

    showNotEnoughCreditsNotification(){
        var notification = new Notification(this.game);
        notification.text = 'Not Enough Credits';
        notification.subText = 'Cannot accept this transaction.';
        notification.show();
    }

    showNotEnoughSpaceNotification(){
        var notification = new Notification(this.game);
        notification.text = 'Not Enough Cargo Space';
        notification.subText = 'Free up space in your cargo hold.';
        notification.show();
    }
    
    setupKeys(){
        this.downKey = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
        this.upKey = game.input.keyboard.addKey(Phaser.Keyboard.UP);
        this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        this.tabKey = game.input.keyboard.addKey(Phaser.Keyboard.TAB);
        this.enterKey = game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
        this.shiftKey = game.input.keyboard.addKey(Phaser.Keyboard.SHIFT);

        this.downKeyOnUp = function(){
            this.activeList.selectNextItem();
            this.update();
        }
        this.downKey.onUp.add(this.downKeyOnUp, this);

        this.upKeyOnUp = function(){
            this.activeList.selectPreviousItem();
            this.update();
        }
        this.upKey.onUp.add(this.upKeyOnUp, this);

        this.spaceKeyOnUp = function(){
            if(this.spaceKey.shiftKey){
                this.transferAllOfSelectedItem();
            } else {
                this.transferSelectedItem();
            }
            this.update();
        }
        this.spaceKey.onUp.add(this.spaceKeyOnUp, this);

        this.tabKeyOnUp = function(){
            this.toggleActiveList();
            this.update();
        }
        this.tabKey.onUp.add(this.tabKeyOnUp, this);

        this.enterKeyOnUp = function(){
            this.acceptTransaction();
            this.update();
        }
        this.enterKey.onUp.add(this.enterKeyOnUp, this);

        // Help Text Changes with shift key
        this.shiftKeyOnDown = function(){
            this.helpText.setText(this.helpTexts.shift)
        }
        this.shiftKey.onDown.add(this.shiftKeyOnDown, this);
        this.shiftKeyOnUp = function(){
            this.helpText.setText(this.helpTexts.default);
        }
        this.shiftKey.onUp.add(this.shiftKeyOnUp, this);
    }
        
    layout(){        
        this.cleanup();
    }
    
    show(){
        super.show();

        this.myList.items = this.game.player.ship.inventory.slice(0);
        this.exchangeList.items = this.destination.inventory.slice(0);

        this.update();        
    }

    didShow(){
        super.didShow();        

        this.game.player.controlMode = CONTROL_MODE.exchange;
    }
    
    hide(){
        super.hide();
    }

    didHide(){
        super.didHide();
    }    
    
    cleanup(){
        this.downKey.onUp.remove(this.downKeyOnUp, this);
        this.upKey.onUp.remove(this.upKeyOnUp, this);
        this.spaceKey.onUp.remove(this.spaceKeyOnUp, this);
        this.tabKey.onUp.remove(this.tabKeyOnUp, this);
        this.enterKey.onUp.remove(this.enterKeyOnUp, this);

        this.shiftKey.onUp.remove(this.shiftKeyOnUp, this);
        this.shiftKey.onDown.remove(this.shiftKeyOnDown, this);
   }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Merging js: app/ships/basicMiner.js begins */

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/* Merging js: app/gui/button.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Button extends Phaser.Group {
    constructor(game,key,callbacks,textStyle = null) {
        super(game.game);
        this.phaserGame = game.game;
        this.callbacks = callbacks;
            
        this.bg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.label = this.phaserGame.add.text(
            0,0, 
            this._text, 
            this.buttonTextStyle,
            this
        )
        this.label.resolution = 2;
        this.label.anchor.set(0.5)

        this.subLabel = this.phaserGame.add.text(
            0,0, 
            this._subText, 
            this.buttonTextStyle,
            this
        )
        this.subLabel.resolution = 2;
        this.subLabel.anchor.set(0.5)

        this._text = '';
        this._subText = '';
        this._buttonX = 0;
        this._buttonY = 0;
        this._color = 0x4d4b56;

        this.buttonWidth = 100;
        this.buttonHeight = 27;
        this.lineHeight = 3;
        this.padding = 8;

        this.key = 'button_'+key;

        this.buttonTextStyle = textStyle || { font: `12px ${FONT}`, fill: '#FFFFFF', align: 'center'};

        this.sprite = this.create(this.buttonX,this.buttonY,'null') 
        this.sprite.inputEnabled = true;
        this.sprite.events.onInputUp.add(this.onReleased, this);
        this.sprite.events.onInputDown.add(this.onDown, this);
        this.sprite.events.onInputOver.add(this.onOver, this);
        this.sprite.events.onInputOut.add(this.onOut, this);
    }
    
    onOver(){
        this.over = true;   
        this.layout();
    }

    onOut(){
        this.over = false;
        this.layout();
    }
    
    onDown() {
        if(this.callbacks.onDown) this.callbacks.onDown(this);
    }

    onReleased() {
        if(this.callbacks.onReleased) this.callbacks.onReleased(this);
    }
    
    set buttonX(x){
        this._buttonX = x
        this.layout();
    }

    set buttonY(y){
        this._buttonY = y
        this.layout();
    }

    get buttonX(){
        return this._buttonX;
    }

    get buttonY(){
        return this._buttonY;
    }

    set text(text){
        this._text = text;
        this.layout();
    }
    
    get text(){
        return this._text;
    }

    set subText(subText){
        this._subText = subText;
        this.layout();
    }
    
    get subText(){
        return this._subText;
    }

    set color(color){
        this._color = color;
        this.layout();
    }
    
    get color(){
        return this._color;
    }
        
    layout(){
        this.bg.clear();
        if(this.over){
            var c = tinycolor(this._color.toString(16)).darken().toHex();
            this.bg.beginFill(parseInt(c,16));
        } else {
            this.bg.beginFill(this.color);
        }
        this.bg.drawRoundedRect(this.buttonX,this.buttonY,
            this.buttonWidth,
            this.buttonHeight,
            5
        )
        this.bg.endFill();  

        this.sprite.width = this.buttonWidth;
        this.sprite.height = this.buttonHeight;
        this.sprite.x = this.buttonX;
        this.sprite.y = this.buttonY;
        
        this.label.x = this.buttonX+this.buttonWidth/2;
        this.label.y = this.buttonY+this.buttonHeight/2+this.lineHeight
        this.label.setStyle(this.buttonTextStyle)
        this.label.setText(this.text);
    }
}class BasicMiner extends Ship {
    constructor(game,x,y) {
        super(game,x,y);
        
        this.specs = {
            name : 'MV Fair Rosamond',
            description : 'Cobalt Class Mining Vessel',
            health: 130,
            turnDecay: .03,
            turnAccel: .1,
            leftRightThrust: 100,
            maxTurning: 10,
            reverseThrust: 100,
            maxReverse: 90,
            maxFuel : 2200,
            maxEnergy: 0,
            mass: 2, // Tons
            equipmentSlots : 4,
            centerOfGravity : {
                x : .5,
                y : .5,
            },
            polygon: [
                {
                    "shape": [ 5,36, 6,7, 21,39, 20,51, 6,50 ]
                },
                {
                    "shape": [ 28,38, 21,39, 6,7, 9,0, 18,0 ]
                },
                {
                    "shape": [ 28,38, 20,7, 28,7 ]
                },
                {
                    "shape": [ 6,7, 5,36, 0,36, 0,7 ]
                }
            ],
            size : {
                width : 45,
                height : 45,
                offsetX : 3,
                offsetY : -8,
            },
            weaponSlots : [
                {
                    position : {
                        x: 9,
                        y: -22
                    },
                    typesAllowed: [WEAPON_TYPES.miningLaser],
                }
            ],
            engineSlots : [{
                anchor : {
                    x: 0.57,
                    y: -1.5
                },
                angle : 0,
            }],
            RCS :{
                forward_left : {
                    x: 0,
                    y: 8,
                    angle : 90,
                },
                forward_right : {
                    x: 26,
                    y: 14,
                    angle : 270,                    
                },
                aft_left : {
                    x : 5,
                    y : 41,
                    angle : 90,
                },
                aft_right : {
                    x: 21,
                    y: 46,
                    angle : 270,                    
                },
                retro_a : {
                    x: 11,
                    y: 3,
                    angle : 180,
                    retro : true,                   
                },
                retro_b : {
                    x: 21,
                    y: 3,
                    angle : 180,
                    retro : true,                   
                },
            },
            dockingConnector : {
                position : {
                    x: -3,
                    y: -24,
                    angle : 90,
                },
                inUse: false,
            },
            storage : {
                equipment : 500,
                bulk : 800,
            }
        }

        // Sprites
        this.sprite = this.game.add.sprite(x,y, 'mining_ship');
        this.sprite.anchor.set(this.specs.centerOfGravity.x,this.specs.centerOfGravity.y);

        this.setupSprite(this.sprite);
        
        // Cargo
        this.emptyCargoHold();
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/tabItem.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/ships/fuelTanker.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class FuelTanker extends Ship {
    constructor(game,x,y) {
        super(game,x,y);
        
        this.specs = {
            name : 'AOG Belvidera',
            description : 'Fuel Tanker',
            health : 100,
            turnDecay: .005,
            turnAccel: .007,
            leftRightThrust: 100,
            maxTurning: 10,
            reverseThrust: 40,
            maxReverse: 60,
            maxFuel : 9000,
            maxEnergy: 150,
            mass: 10, // Tons
            equipmentSlots : 4,
            centerOfGravity : {
                x : .5,
                y : .5,
            },
            polygon: [
                {
                    "shape": [ 51,54, 37,53, 36,32, 86,32, 87,54 ]
                },
                {
                    "shape": [ 36,32, 37,53, 0,54, 0,32 ]
                },
                {
                    "shape": [ 36,93, 37,53, 51,54, 52,93 ]
                },
                {
                    "shape": [ 37,27, 51,32, 36,32 ]
                },
                {
                    "shape": [ 35,5, 50,27, 51,32, 37,27 ]
                },
                {
                    "shape": [ 46,1, 51.83333206176758,4.333335876464844, 50,27, 35,5, 40,1 ]
                }
            ],
            size : {
                width : 45,
                height : 45,
                offsetX : 3,
                offsetY : -8,
            },
            weaponSlots : [
                {
                    position : {
                        x: 0,
                        y: 0
                    },
                    typesAllowed: [WEAPON_TYPES.miningLaser],
                },
                {
                    position : {
                        x: 9,
                        y: -22
                    },
                    typesAllowed: [WEAPON_TYPES.miningLaser],
                }
            ],
            engineSlots : [{
                anchor : {
                    x: 0.55,
                    y: -2.8
                },
                angle : 0,
            }],
            RCS :{
                forward_left : {
                    x: 35,
                    y: 16,
                    angle : 90,
                },
                forward_right : {
                    x: 52,
                    y: 22,
                    angle : 270,                    
                },
                aft_left : {
                    x: 35,
                    y : 71,
                    angle : 90,
                },
                aft_right : {
                    x: 52,
                    y: 76,
                    angle : 270,                    
                },
                retro_a : {
                    x: 41,
                    y: 3,
                    angle : 180,
                    retro : true,                   
                },
                retro_b : {
                    x: 51,
                    y: 3,
                    angle : 180,
                    retro : true,                   
                },
            },
            storage : {
                bulk : 300,
                passengers : 2,
                gas : 0,
                liquid : 0,
            },
            dockingPorts : [{
                position : {
                    x: 0,
                    y: -47,
                    angle : 90,
                },
                inUse: false,
            }],
            dockingConnector : {
                position : {
                    x: 0,
                    y: -50,
                    angle : 90,
                },
                inUse: false,
            },
            canBeDockedTo: true,
        }

        // Sprites
        this.sprite = this.game.add.sprite(x,y, 'fuelTanker2');
        this.sprite.anchor.set(this.specs.centerOfGravity.x,this.specs.centerOfGravity.y);

        this.setupSprite(this.sprite);

        //var blaster = new BasicBlaster(this.game,this);
        //this.equipWeaponInSlot(blaster,1);

        // Engine
/*
        var engine = new BasicEngine(this.game,this);
        this.equipEngineInSlclass TabItem extends Phaser.Group {
    constructor(game,key,callbacks,textStyle = null) {
        super(game.game);
        this.phaserGame = game.game;
        this.callbacks = callbacks;
            
        this.bg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.label = this.phaserGame.add.text(
            0,0, 
            this._text, 
            this.buttonTextStyle,
            this
        )
        this.label.resolution = 2;
        this.label.anchor.set(0.5)

        this._text = '';
        this._active = false;
        this._buttonX = 0;
        this._buttonY = 0;
        this.color = 0x282731;
        this.activeColor = 0x3F3C46;

        this.buttonWidth = 100;
        this.buttonHeight = 45;
        this.lineHeight = 3;
        this.padding = 8;

        this.key = 'tab_item'+key;

        this.buttonTextStyle = textStyle || { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'center'};

        this.sprite = this.create(this.buttonX,this.buttonY,'null') 
        this.sprite.inputEnabled = true;
        this.sprite.events.onInputUp.add(this.onReleased, this);
        this.sprite.events.onInputDown.add(this.onDown, this);
        this.sprite.events.onInputOver.add(this.onOver, this);
        this.sprite.events.onInputOut.add(this.onOut, this);
    }
    
    onOver(){
        this.over = true;   
        this.layout();
    }

    onOut(){
        this.over = false;
        this.layout();
    }
    
    onDown() {
        if(this.callbacks.onDown) this.callbacks.onDown(this);
    }

    onReleased() {
        if(this.callbacks.onReleased) this.callbacks.onReleased(this);
    }
    
    set buttonX(x){
        this._buttonX = x
        this.layout();
    }

    set buttonY(y){
        this._buttonY = y
        this.layout();
    }

    get buttonX(){
        return this._buttonX;
    }

    get buttonY(){
        return this._buttonY;
    }

    set text(text){
        this._text = text;
        this.layout();
    }
    
    get text(){
        return this._text;
    }

    set active(active){
        this._active = active;
        this.layout();
    }
    
    get active(){
        return this._active;
    }
        
    layout(){
        this.bg.clear();
        if(!this.active){
            if(this.over){
                this.bg.beginFill(this.activeColor);
            } else {
                this.bg.beginFill(this.color);
            }            
        } else {
            this.bg.beginFill(this.activeColor);
        }

        this.bg.drawRect(this.buttonX,this.buttonY,
            this.buttonWidth,
            this.buttonHeight,
        )
        this.bg.endFill();  

        this.sprite.width = this.buttonWidth;
        this.sprite.height = this.buttonHeight;
        this.sprite.x = this.buttonX;
        this.sprite.y = this.buttonY;
        
        this.label.x = this.buttonX+this.buttonWidth/2;
        this.label.y = this.buttonY+this.buttonHeight/2+this.lineHeight
        this.label.setStyle(this.buttonTextStyle)
        this.label.setText(this.text);
    }
}ot(engine,0);
        this.refuel();

        // Reactor
        var reactor = new Reactor(this.game,this);
        this.equipEquipmentInSlot(reactor,0);
        this.recharge();
*/
        
        // Cargo
        this.emptyCargoHold();
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/twoLineButton.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/ships/shuttle.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class TwoLineButton extends Button {
    constructor(game,key,callbacks,textStyle = null) {        
        super(game,key,callbacks,textStyle);
        this.buttonHeight = 50;
    }
            
    layout(){
        this.bg.clear();
        if(this.over){
            var c = tinycolor(this._color.toString(16)).darken().toHex();
            this.bg.beginFill(parseInt(c,16));
        } else {
            this.bg.beginFill(this.color);
        }
        this.bg.drawRoundedRect(this.buttonX,this.buttonY,
            this.buttonWidth,
            this.buttonHeight,
            5
        )
        this.bg.endFill();  

        this.sprite.width = this.buttonWidth;
        this.sprite.height = this.buttonHeight;
        this.sprite.x = this.buttonX;
        this.sprite.y = this.buttonY;
        
        this.label.x = this.buttonX+this.padding;
        this.label.y = this.buttonY+this.padding;
        this.label.setStyle({ font: `14px ${FONT}`, fill: '#FFFFFF', align: 'left'})
        this.label.setText(this.text);
        this.label.anchor.set(0);

        this.subLabel.x = this.buttonX+this.padding;
        this.subLabel.y = this.buttonY+this.buttonHeight/2+this.lineHeight
        this.subLabel.setStyle({ font: `11px ${FONT}`, fill: '#948f9c', align: 'left'})
        this.subLabel.setText(this.subText);
        this.subLabel.anchor.set(0);
    }
}class Shuttle extends Ship {
    constructor(game,x,y) {
        super(game,x,y);
        
        this.specs = {
            name : 'Shuttle',
            description : 'Shuttle',
            health: 100,
            turnDecay: .03,
            turnAccel: .1,
            leftRightThrust: 100,
            maxTurning: 10,
            reverseThrust: 100,
            maxReverse: 90,
            maxFuel : 2200,
            maxEnergy: 100,
            mass: 1, // Tons
            equipmentSlots : 4,
            centerOfGravity : {
                x : .5,
                y : .5,
            },
            polygon: [
                {
                    "shape": [   8, 24  ,  19, 24  ,  18, 33  ,  9, 33  ]
                } ,
                {
                    "shape": [   27, 22  ,  19, 24  ,  8, 24  ,  0, 16  ,  7, 12  ,  21, 14  ,  27, 16  ]
                } ,
                {
                    "shape": [   0, 16  ,  8, 24  ,  0, 22  ]
                } ,
                {
                    "shape": [   7, 12  ,  12, 0  ,  17, 2  ,  21, 14  ]
                }
            ],
            weaponSlots : [],
            engineSlots : [{
                anchor : {
                    x: 0.57,
                    y: -1.6,
                },
                angle : 0,
            }],
            RCS :{
                forward_left : {
                    x: 10,
                    y: 3,
                    angle : 90,
                },
                forward_right : {
                    x: 17,
                    y: 8,
                    angle : 270,                    
                },
                aft_left : {
                    x : 8,
                    y : 25,
                    angle : 90,
                },
                aft_right : {
                    x: 19,
                    y: 31,
                    angle : 270,                    
                },
                retro_a : {
                    x: 7,
                    y: 17,
                    angle : 180,
                    retro : true,                   
                },
                retro_b : {
                    x: 25,
                    y: 17,
                    angle : 180,
                    retro : true,                   
                },
            },
            dockingConnector : {
                position : {
                    x: 0,
                    y: -18,
                    angle : 90,
                },
                inUse: false,
            },
            storage : {
                passengers : 6,
            }
        }

        // Sprites
        
        this.sprite = this.game.add.sprite(x,y, 'shuttle');
        this.sprite.anchor.set(this.specs.centerOfGravity.x,this.specs.centerOfGravity.y);

        this.setupSprite(this.sprite);

        // Engine
        var engine = new SmallEngine(this.game,this);
        this.equipEngineInSlot(engine,0);
        this.refuel();

        // Reactor
        var reactor = new Batteries(this.game,this);
        this.equipEquipmentInSlot(reactor,0);
        this.recharge();
        
        // Cargo
        this.emptyCargoHold();
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

/* Merging js: app/gui/notification.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/weapons/focusedBeam.js begins */


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Notification extends Phaser.Group {
    constructor(game) {
        super(game.game);
        this.phaserGame = game.game;
        game.notificationGroup.add(this)
        
        this.sound = game.add.audio('success');

        this.buttonTextStyle = {font: `12px ${FONT}`, fill: '#FFFFFF', align: 'center'};

        this.bg2 = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.bg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
                
        this.label = this.phaserGame.add.text(
            0,0, 
            '', 
            this.buttonTextStyle,
            this
        )
        this.label.resolution = 2;

        this.subLabel = this.phaserGame.add.text(
            0,0, 
            '', 
            this.buttonTextStyle,
            this
        )
        this.subLabel.resolution = 2;

        this.accessoryLabel = this.phaserGame.add.text(
            0,0, 
            '', 
            this.buttonTextStyle,
            this
        )
        this.accessoryLabel.resolution = 2;

        this._text = '';
        this._subText = '';
        this._accessoryText = '';
        this._color = 0x4d4b56;

        this.notificationWidth = 250;
        this.notificationHeight = 50;
        this.lineHeight = 3;
        this.padding = 8;

        this._notificationX = (this.game.camera.width/2)-(this.notificationWidth/2);
        this._notificationY = 0;
    }

    set text(text){
        this._text = text;
        this.layout();
    }
    
    get text(){
        return this._text;
    }

    set subText(subText){
        this._subText = subText;
        this.layout();
    }
    
    get subText(){
        return this._subText;
    }

    set accessoryText(accessoryText){
        this._accessoryText = accessoryText;
        this.layout();
    }
    
    get accessoryText(){
        return this._accessoryText;
    }

    show(){
        var delay = 3000;
        
        var fadeIn = this.game.add.tween(this).to( { alpha: 1 }, 300, "Quart.easeOut", false);
    	var moveUp = this.game.add.tween(this).to( { y: '+'+this.notificationHeight/2 }, 300, "Quart.easeOut", true);
        var fadeOut = this.game.add.tween(this).to( { alpha: 0 }, 300, "Quart.easeOut", false, delay);
    
        fadeIn.chain(fadeOut);
        fadeIn.start();

        game.time.events.add(Phaser.Timer.SECOND * 5, this.destroy, this);
        
        this.sound.play();
    }

    destroyObject(){
        this.destroy();        
    } 

    layout(){
        this.bg2.clear();
        this.bg2.beginFill(0x948f9c);
        this.bg2.drawRoundedRect(this._notificationX-1,this._notificationY-1,
            this.notificationWidth+2,
            this.notificationHeight+2,
            5
        )
        this.bg2.endFill();  

        this.bg.clear();
        this.bg.beginFill(this._color);
        this.bg.drawRoundedRect(this._notificationX,this._notificationY,
            this.notificationWidth,
            this.notificationHeight,
            5
        )
        this.bg.endFill();  

        this.label.x = this._notificationX+this.padding;
        this.label.y = this._notificationY+this.padding;
        this.label.setStyle({ font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'})
        this.label.setText(this.text);
        this.label.anchor.set(0);

        this.subLabel.x = this._notificationX+this.padding;
        this.subLabel.y = this._notificationY+this.padding+20;
        this.subLabel.setStyle({ font: `11px ${FONT}`, fill: '#FFFFFF', align: 'left'})
        this.subLabel.setText(this.subText);
        this.subLabel.anchor.set(0);

        this.accessoryLabel.x = this._notificationX + this.notificationWidth - this.padding;
        this.accessoryLabel.y = this._notificationY + 3 + this.notificationHeight/2;
        this.accessoryLabel.setStyle({ font: `15px ${FONT}`, fill: '#FFFFFF', align: 'right'})
        this.accessoryLabel.setText(this.accessoryText);
        this.accessoryLabel.anchor.set(1,.5);

    }
}class FocusedBeamWeapon extends Weapon {
    constructor(game,options) {
        super(game,options);
        
        this.baseBulletSpeed = 400;
        this.weapon = game.add.weapon(40, 'laser-sparkle');
        this.weapon.bulletKillType = Phaser.Weapon.KILL_LIFESPAN;
        this.weapon.bulletLifespan = options.data.range;
        this.weapon.bulletSpeed = this.baseBulletSpeed;
        this.weapon.fireRate = 20;
        this.weapon.bulletAngleVariance = 1.5;
        this.weapon.bulletSpeedVariance = 90;
        this.weapon.bullets.alpha = 1;
        this.weapon.bullets.blendMode = PIXI.blendModes.ADD;
        this.weapon.bullets.setAll('scale.x', 0.3);
        this.weapon.bullets.setAll('scale.y', 0.1);
        this.weapon.bullets.setAll('damage',options.data.damage);
        this.weapon.bullets.setAll('smoothed',false);
        this.weapon.setBulletBodyOffset(6, 6, 50, 30);        
        this.weapon.onFire.add(this.fire, this);
        // Should be on the ships
        this.game.ships.addChild(this.weapon.bullets)
        
        this.weapon.bullets.forEach(function(bullet){
            bullet.weapon = this;
            bullet.postUpdate = this.postUpdate;
        },this);

        this.energyConsumption = options.data.energyConsumption;

        this.sound = game.add.audio('mining-laser')
        this.sound.addMarker('begin',0,0.15);
        this.sound.addMarker('loop',0.15,0.573);
        this.sound.addMarker('end',1.123,0.45);
        this.soundCountdown = 10;
        this.coolingDown = false;
        this.sound.onStop.add(this.soundStopped, this);
    }
    soundStopped(sound,marker){
        if(marker=='begin'){
            this.sound.play('loop',0,1,true);
        }
        if(marker=='end'){
            this.sound.pause();
            this.coolingDown = false;
        }
    }    
    
    fire(){
        super.fire();
	    this.soundCountdown = 10;
        if(!this.sound.isPlaying) this.sound.play('begin');
    }
    
    doneFiring(){
        if(!this.coolingDown && this.sound.isPlaying) {
            this.sound.play('end');
            this.coolingDown = true;
        }
    }
    
    update(){
        if(this.soundCountdown==0){
            this.doneFiring();
        } else {
            this.soundCountdown--;
        }

        if(this.parentObject) this.weapon.bulletSpeed = this.parentObject.speed + this.baseBulletSpeed;
    }
}






/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/weapons/basicBlaster.js begins */
/* Merging js: app/gui/inventoryList.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




class GuiInventoryList extends Phaser.Group {
    constructor(game) {
        super(game.game);
        this.phaserGame = game.game;

        this._title = '';
        this._items = [];
        this._focus = false;
        this._allowFilter = false;
        this._listWidth = 250;

        this.clickSound = game.add.audio('gui_click_soft');
        this.txSound = game.add.audio('gui_click');

        this.selectedItemIndex = 0;
        this.currentPage = 1;
        this.itemsPerPage = 8;

        this.itemCursorHeight = 32;
        this.listHeight = this.itemCursorHeight*(this.itemsPerPage+1);
        this.headerHeight = 30;

        // Background            
        this.bg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        
        // Title Label
        this.titleBg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.titleLabel = this.phaserGame.add.text(
            16,8, 
            '', 
            { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'},
            this
        )
        this.titleLabel.resolution = 2;

        // Empty Label
        this.emptyLabel = this.phaserGame.add.text(
            0,0,
            'No Items', 
            { font: `16px ${FONT}`, fill: '#948f9c', align: 'center'},
            this
        )
        this.emptyLabel.resolution = 2;
        this.add(this.emptyLabel);

        // Cursor
        this.itemCursor = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.setupCursors();
        
        // Lables
        this.labels = this.game.add.group();
        this.add(this.labels);

        this.layout();
    }
    setupCursors(){
        this.itemCursorLeftPolygon = new Phaser.Polygon(
            0,0,
            -8,this.itemCursorHeight/2, 
            0,this.itemCursorHeight,
            0,this.itemCursorHeight,
            this.listWidth,this.itemCursorHeight,
            this.listWidth,0,
        );
        this.itemCursorRightPolygon = new Phaser.Polygon(
            0,0,
            this.listWidth,0, 
            this.listWidth+8,this.itemCursorHeight/2,
            this.listWidth,this.itemCursorHeight,
            0,this.itemCursorHeight,
        );
        this.itemCursorFlatPolygon = new Phaser.Polygon(
            0,0,
            this.listWidth,0, 
            this.listWidth,this.itemCursorHeight,
            0,this.itemCursorHeight,
        );
    }
    set listWidth(listWidth){
        this._listWidth = listWidth;
        this.setupCursors();
        this.layout();
    }

    get listWidth(){
        return this._listWidth;
    }

    set focus(focus){ 
        if(focus) this.clickSound.play();
               
        this._focus = focus
        this.selectedItemIndex = 0;
        this.layout();
    }

    get focus(){
        return this._focus;
    }
        
    set title(title){
        this._title = title
        this.layout();
    }

    get title(){
        return this._title;
    }

    set allowFilter(allowFilter){
        this._allowFilter = allowFilter
        this.layout();
    }

    get allowFilter(){
        return this._allowFilter;
    }

    set items(items){
        this._items = [];
        items.sort((a, b) => a.name.localeCompare(b.name));
        
        this._groupedItems = _.groupBy(items, item => item.key);
        Object.keys(this._groupedItems).forEach(function(key,index) {
            var group = this._groupedItems[key];
            this._items.push(group)
        }.bind(this));

        this.layout();
    }

    get items(){
        return this._items;
    }
    
    get valueOfAllItems(){
        var totalValue = 0;
        if(this._items.length>0){
            for (let item of this._items) {
                totalValue += item.baseValue;
            }
        }
        return totalValue;
    }
    
    addItem(addedItem){
        this.txSound.play();

        var allItems = [].concat.apply([], this._items); // Flatten
        allItems.push(addedItem);
        this.items = allItems;
        
        this.layout();
    }

    removeItem(item){
        // Find + Remove Item
        var allItems = [].concat.apply([], this._items); // Flatten

        var index = allItems.indexOf(item);
        if (index > -1) allItems.splice(index, 1);

        this.items = allItems;        
        
        // Update Selected Index for last item
        if(this.selectedItemIndex == this._items.length) this.selectedItemIndex--;
        
        this.layout();
    }
    
    get selectedItem(){
        if(this.items.length>0) {
            try{
                if(this.currentPage>1){
                    return this._items[(this.selectedItemIndex+this.itemsPerPage*(this.currentPage-1))-2][0]                            
                } else {
                    return this._items[this.selectedItemIndex][0]            
                }                
            } catch(e){
                return null;
            }
            
        } else {
            return null;
        }
    }

    get amountOfSelectedItem(){
        return this._groupedItems[this.selectedItem.key].length;
    }


    get colorForSelectedItem(){
        if(this.selectedItem) return RARITY_COLOR[this.selectedItem.rarity];
    }
    
    selectNextItem(){
        this.clickSound.play();

        try {
            if(this.selectedItem==this.items[this.items.length-1][0]) return;
        } catch(e){}
            
        if(this.selectedItemIndex<=this.items.length) this.selectedItemIndex++;
        if(this.selectedItemIndex>=this.itemsPerPage-1) {
            this.currentPage++;
            this.selectedItemIndex=0;
        }
        
        this.layout();
    }

    selectPreviousItem(){
        this.clickSound.play();
        
        if(this.selectedItemIndex>0) this.selectedItemIndex--;
        if(this.selectedItemIndex==0 && this.currentPage>1){
            this.selectedItemIndex=this.itemsPerPage-2;
            this.currentPage--;
        }
        if(this.selectedItemIndex==0 && this.currentPage==1){
            this.selectedItemIndex=0;
        }
        this.layout();
    }
       
    updateCursorPosition(){
        if(this.currentPage>1 && this.selectedItemIndex==0){
            this.selectedItemIndex++;
        }

        this.itemCursor.clear();
        this.itemCursor.beginFill(this.colorForSelectedItem);
        if(this.itemCursorStyle == INVENTORY_LIST_CURSOR_STYLE.left){
            this.itemCursor.drawPolygon(this.itemCursorLeftPolygon);
        }
        if(this.itemCursorStyle == INVENTORY_LIST_CURSOR_STYLE.right){
            this.itemCursor.drawPolygon(this.itemCursorRightPolygon);
        }
        if(this.itemCursorStyle == INVENTORY_LIST_CURSOR_STYLE.flat){
            this.itemCursor.drawPolygon(this.itemCursorFlatPolygon);
        }
        this.itemCursor.endFill();
        this.itemCursor.visible = true;
    
        this.itemCursor.y = this.itemCursorHeight*this.selectedItemIndex + this.headerHeight;        
    }
    
    layout(){    
        // BG
        this.bg.clear();
        this.bg.beginFill(0x3F3C46);
        this.bg.drawRect(0,0,
            this.listWidth,
            this.listHeight,
        )
        this.bg.endFill();  
                
        // Title
        this.titleBg.clear();
        this.titleBg.beginFill(0x4D4B56);
        this.titleBg.drawRect(0,0,
            this.listWidth,
            this.headerHeight,
        )
        this.titleBg.endFill();

        // Title Label
        if(!this.allowFilter){
            this.titleLabel.setText(this._title);
        } else {
            this.titleLabel.setText(`${String.fromCharCode(0x2039)} ${this._title} ${String.fromCharCode(0x203a)}`);            
        }
        
        // Items
        this.labels.removeAll(true);
        var index = 0;

        // Cursor
        if(this.selectedItem && this.focus){
            this.updateCursorPosition();
        } else {
            this.itemCursor.visible = false;
        }

        // Empty Label
        this.emptyLabel.visible = false;
        if(this.items.length==0) this.emptyLabel.visible = true;
        this.emptyLabel.x = (this.listWidth/2)-(this.emptyLabel.width/2);
        this.emptyLabel.y = (this.listHeigclass BasicBlaster extends Weapon {
    constructor(game,parentObject) {
        super(game,parentObject);

        this.weapon = game.add.weapon(40, 'blasterBullet');
        this.weapon.bulletKillType = Phaser.Weapon.KILL_LIFESPAN;
        this.weapon.bulletLifespan = 1000;
        this.weapon.bulletSpeed = 450;
        this.weapon.fireRate = 250;
        this.weapon.bulletAngleVariance = 0;
        this.weapon.bulletSpeedVariance = 10;
        this.weapon.bullets.alpha = 1;
        this.weapon.bullets.blendMode = PIXI.blendModes.ADD;
        this.weapon.bullets.setAll('damage',2);
    }
}
ht/2)-(this.emptyLabel.height/2);

        var indexStart = (this.currentPage-1)*this.itemsPerPage;
        var indexEnd = this.currentPage*this.itemsPerPage;
        var indexOffset = 0;

        if(this.items.length>this.itemsPerPage){
            //indexEnd--;
        }
        if(this.currentPage>1){
            indexOffset =-2;
            indexStart-=2
            indexEnd-=2;
        }

        // Items
        for (var i = indexStart; i < indexEnd; i++) {
            if(this.items[i]!=undefined){
                var text = this.items[i][0].name

                if(this.items[i][0].isEquippable) {                    
                    if(this.items[i][0].equipped) {
                        text = `${String.fromCharCode(0x25cf)} ${this.items[i][0].name}`;
                    } else {
                        text = `${String.fromCharCode(0x25cb)} ${this.items[i][0].name}`                    
                    }
                }

                if(this.items[i].length>1){
                    text += ` (${this.items[i].length})`;
                }
                
                var arrow = false;
        
                // Arrows
                if(index==this.itemsPerPage-1){
                    text = String.fromCharCode(0x2193);
                    arrow = true;
                }
                if(index==0 && this.currentPage>1){
                    text = String.fromCharCode(0x2191);
                    arrow = true;
                }
                
                // Label
                var itemLabel = this.phaserGame.add.text(
                    16,this.itemCursorHeight*(index) + this.headerHeight + 8, 
                    text, 
                    { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'},
                    this
                )
                this.labels.add(itemLabel);
                
                if(index==this.selectedItemIndex && this.focus){
                    itemLabel.addColor("#000000", 0)
                } else {
                    if(!arrow) itemLabel.tint = RARITY_COLOR[this.items[i][0].rarity];
                }
                
                if(!arrow) itemLabel.tint = RARITY_COLOR[this.items[i][0].rarity];
                itemLabel.resolution = 2;
                index++;
            }
       }
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/planets/_planet.js begins */
/* Merging js: app/gui/map.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




class GalacticMap extends GameObject{
    constructor(game,options) {
        super(game);
        
        this.x = options.x || 0;
        this.y = options.y || 0;
        this.width = options.width || screenWidth;
        this.height = options.height || screenHeight;
        this.isActive = false;
        
        // Navigation
        this.starSystems = this.game.galaxy.starSystems;
        this.currentPath = [];
        this.navigationTarget = null;
        this.navigationTargetCache = null;
        this.navigationDestination = null;
        this.navArrow = game.make.sprite(0, 0, 'nav-arrow');
        this.navArrow.angle = 90;
        this.navArrow.anchor.set(1,.5);
        
        // Zooming
        this.mapZoom = 1;
        this.mapZoomCache = 0;
        this.mapZoomIncrement = .0025;
        this.mapZoomStep = 0;
        this.mapZoomMax = 2;
        this.mapZoomMin = .5;
        this.didZoom = false;
        
        // Scrolling
        this.mapScrollIncrement = .5;
        this.mapScrollDecay = 1.0;
        this.mapScrollMax = 1;
        this.mapScrollXStep = 0;
        this.mapScrollYStep = 0;
        this.mapScrollX = 0;
        this.mapScrollY = 0;
        this.mapScrollOffsetX = 0;
        this.mapScrollOffsetY = 0;

        // Sprite / Bitmap data
        this.bmd = game.add.bitmapData(this.width, this.height);    
        this.sprite = game.add.sprite(this.x, this.y, this.bmd);
        if(options.group) options.group.add(this.sprite);

        // Sounds
        this.navTargetChangedSound = game.add.audio('blorp');
        this.navDestinationAddedSound = game.add.audio('beep-beep');
        this.navDestinationClearedSound = game.add.audio('cancel');
        this.navTargetInvalidSound = game.add.audio('invalid');
    }
    
    setupKeys(){
        // Keys
        this.cursors = this.game.input.keyboard.createCursorKeys();
        this.plusKey = game.input.keyboard.addKey(Phaser.Keyboard.EQUALS);
        this.minusKey = game.input.keyboard.addKey(Phaser.Keyboard.UNDERSCORE);
        this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        this.spaceKey.onUp.add(this.setDestination,this);
    }
    
    centerOnSystem(system){
        this.mapScrollX = ((this.width/this.mapZoom)/2)-system.position.x;
        this.mapScrollY = ((this.height/this.mapZoom)/2)-system.position.y;    
    }
    
    findPathFromSystemToSystem(originSystem,destinationSystem){
        var path = [originSystem];
        var maxJumpDistance = 150;
        var angleToDestination = originSystem.angleToStarSystem(destinationSystem);
        var distanceToDestination = originSystem.distanceToStarSystem(destinationSystem);

        var validatePath = function(){
            if(path[path.length-1]!=destinationSystem) {
                getNextJump();
            }
        }

        var getNextJump = function(){
            if(path[path.length-1]){
                var nextJump = path[path.length-1].systemWithinRangeTowardsSystem(maxJumpDistance,destinationSystem);
                if(path.includes(nextJump)) return null;
                path.push(nextJump);
                validatePath();                
            } else {
                return null;
            }
        }

        if(distanceToDestination<=maxJumpDistance){
            // Destination is within one jump away. 
            path.push(destinationSystem);
        } else {
            getNextJump();
        }
         
        path.clean(null); // remove all nulls;
                
        return path;        
    }
    
    distanceOfPath(path){
        var distance = 0;
        var previousSystem = null;

        for(let system of path){
            if(previousSystem && system!=null){
                distance+= system.distanceToStarSystem(previousSystem);
            }
            previousSystem = system;
        }        
        
        return distance;
    }
    
    setDestination(){
        // Makes current target the destination.
        if(this.navigationDestination){
            this.navigationDestination = null;
            this.navDestinationClearedSound.play();
        } else {            
            this.navigationDestination = this.navigationTarget;
            this.navDestinationAddedSound.play();
        }
    }
    
    drawMap(){      
        this.bmd.ctx.clearRect(0,0,this.width,this.height);
        var zoom = this.mapZoom;        
        // Lines
        for(let system of this.starSystems){
            // Save distnce for later
            system.distanceFromMapCenter = Math.sqrt(
                Math.pow(
                    ((system.position.x+this.mapScrollX)*zoom)-this.width/2,
                2) + 
                Math.pow(
                    ((system.position.y+this.mapScrollY)*zoom)-this.height/2,
                2)
            );

            if(system.neighbors.length>0){
                for(let neighbor of system.neighbors){
                    if(neighbor!=null){
                    	this.bmd.ctx.strokeStyle = "#ffffff";
                    	this.bmd.ctx.lineWidth = 1;
                    	this.bmd.ctx.beginPath();
                    	this.bmd.ctx.moveTo((system.position.x+this.mapScrollX)*zoom, (system.position.y+this.mapScrollY)*zoom);
                    	this.bmd.ctx.lineTo((neighbor.position.x+this.mapScrollX)*zoom,(neighbor.position.y+this.mapScrollY)*zoom);
                    	this.bmd.ctx.stroke();
                    }
            	}
            }
        }

        this.drawGridLines({
            major : 100,
            minor : 25,
            color : '#333333',
        })

        for (var i = 0; i < this.currentPath.length; i++) {
            if(i<this.currentPath.length-1){
            	this.bmd.ctx.strokeStyle = "#1aae5c";
            	this.bmd.ctx.lineWidth = 4;
            	this.bmd.ctx.beginPath();
            	this.bmd.ctx.moveTo((this.currentPath[i].position.x+this.mapScrollX)*zoom, (this.currentPath[i].position.y+this.mapScrollY)*zoom);
            	this.bmd.ctx.lineTo((this.currentPath[i+1].position.x+this.mapScrollX)*zoom,(this.currentPath[i+1].position.y+this.mapScrollY)*zoom);
            	this.bmd.ctx.stroke();
            }
        }

        // Stars
        for(let system of this.starSystems){                  
            // Black Space
            this.bmd.ctx.fillStyle='#111111'
            this.bmd.ctx.beginPath();
            this.bmd.ctx.arc((system.position.x+this.mapScrollX)*zoom,(system.position.y+this.mapScrollY)*zoom,system.size+5,0,2*Math.PI);
            this.bmd.ctx.fill();

            // Current System Highlight
            if(system.isCurrentSystem || system==this.navigationDestination){
                this.bmd.ctx.strokeStyle='#1aae5c';
                this.bmd.ctx.lineWidth = 1.5;
                this.bmd.ctx.beginPath();
                this.bmd.ctx.arc((system.position.x+this.mapScrollX)*zoom,(system.position.y+this.mapScrollY)*zoom,system.size+5,0,2*Math.PI);
                this.bmd.ctx.stroke();  
            }

            // Star
            this.bmd.ctx.lineWidth = 1.5;
            this.bmd.ctx.beginPath();
            this.bmd.ctx.arc((system.position.x+this.mapScrollX)*zoom,(system.position.y+this.mapScrollY)*zoom,system.size,0,2*Math.PI);
            if(system.planetCount>0) {
                this.bmd.ctx.fillStyle = system.type.color;
	            this.bmd.ctx.fill();
            } else {
                this.bmd.ctx.strokeStyle='#AAAAAA';
	            this.bmd.ctx.stroke();
            }
            
            // Navigation Arrow
            if(system==this.navigationTarget) {
                this.bmd.draw(this.navArrow, (system.position.x+this.mapScrollX)*zoom, (system.position.y+this.mapScrollY)*zoom-10 );
            }
        }

        // Names/Labels
        for(let system of this.starSystems){
            var textMarginX = system.size+8;
            var textMarginY = 3;
            var lineSpacing = 15;
            
            var labelString = `${system.name}`
            this.bmd.ctx.font = `12px ${FONT}`;
            this.bmd.ctx.strokeStyle='#111111'
            this.bmd.ctx.fillStyle='#FFFFFF'
            this.bmd.ctx.lineWidth = 3;
            
         
class Planet extends GameObject{
    constructor(game,x,y) {
        super(game);

        this.minimapSize = 2.3;
        this.distanceToPlayer;
        
        this.showInfoDistance = 90;
        this.infoShowing = false;

        this.isPlanet = true;
        this.canNavigateTo = true;
        this.canLand = true;
        
        this.services = [];
        this.specs = {
            storage : {
                bulk : Infinity,
                passengers : Infinity,
                liquid : Infinity,
                gas : Infinity,
            }
        }

        this.itemMarkup = 1.1 // Multuplier
        this.infoSound = game.add.audio('beep-beep');
    }
    
    setupSprite(options){
        super.setupSprite(this.sprite);
        this.wrapper = this.game.make.group();
        this.wrapper.add(this.sprite);

        this.sprite.anchor.setTo(.5, .5);
        this.sprite.smoothed = false;
        this.sprite.parentObject = this;

        this.game.planets.add(this.wrapper);

        this.nameText = this.game.add.text( 
            20+this.sprite.x + this.sprite.width/2,this.sprite.top+10, 
            this.name, 
            { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'left' },
            this.game.planets,
        );
        this.wrapper.add(this.nameText);
        this.nameText.alpha = 0;

        this.subText = this.game.add.text(
            20+this.sprite.x + this.sprite.width/2,this.sprite.top + 30, 
            this.description, 
            { font: `11px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
            this.game.planets,
        );
        this.wrapper.add(this.subText);
        this.subText.alpha = 0;

        this.landingMessage = this.game.add.text(
            20+this.sprite.x + this.sprite.width/2,this.sprite.top + 60, 
            'Press L to Land', 
            { font: `10px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
            this.game.planets,
            this.wrapper
        );
        this.wrapper.add(this.landingMessage);
        this.landingMessage.alpha = 0;
    }
    
    // Info Display
    showInfoIfNeeded(){
        if(this.shouldShowInfo && !this.infoShowing && this.game.initialized){ 
            if(!this.game.player.ship.hyperDriveEngaged) this.infoSound.play();
                   
            this.game.add.tween(this.nameText).to( { alpha: 1 }, 300, "Quart.easeOut", true);
            this.game.add.tween(this.subText).to( { alpha: 1 }, 300, "Quart.easeOut", true);

            if(this.canLand){
                this.game.add.tween(this.landingMessage).to( { alpha: .5 }, 300, "Quart.easeOut", true);
            }
        
            this.infoShowing = true;
        }
        
        if(!this.shouldShowInfo && this.infoShowing){
            this.hideInfo();
            this.infoShowing = false;
        }
    }

    get shouldShowInfo(){
        if(this.distanceToPlayer<=this.showInfoDistance) {
            return true;
        } else {
            return false;
        }
    }
    
    hideInfo(){
        this.game.add.tween(this.nameText).to( { alpha: 0 }, 300, "Quart.easeOut", true);        
        this.game.add.tween(this.subText).to( { alpha: 0 }, 300, "Quart.easeOut", true);        
        this.game.add.tween(this.landingMessage).to( { alpha: 0 }, 300, "Quart.easeOut", true);

        this.infoShowing = false;
    }
        
    // Services        
    hasService(service){
        return this.services.includes(service);
    }
    
    get services(){
        var services = [];
        for (let service of PLANET_SERVICES_REQUIREMENTS)
            if(this.stats[service.requirement]>=service.level)
                services.push(service.service)
        return services;
    }

    set services(services){
        this._services = services;
    }


    // Planets have lots of free space. Like, a lot.
    calculateFreeSpaceForStorageClass(storageClass){
        return Infinity;
    }

    update() {
        super.update();
        if(this.sprite.exists){
            this.distanceToPlayer = this.game.physics.arcade.distanceBetween(this.sprite, this.game.player.sprite)   var labelX = ((system.position.x+this.mapScrollX)*zoom)+textMarginX;
            var labelY = ((system.position.y+this.mapScrollY)*zoom)+textMarginY;

            this.drawShadowText(labelString, labelX, labelY);
            
            // Subtext
            this.bmd.ctx.font = `10px ${FONT}`;
            if(system.isCurrentSystem){
                this.bmd.ctx.fillStyle='#1aae5c'
                this.drawShadowText('Current System', labelX, labelY+lineSpacing);
            }
            
            if(this.currentPath){
                if(system==this.currentPath.lastItem() && !system.isCurrentSystem){
                    if(system==this.navigationDestination){
                        this.bmd.ctx.fillStyle='#1aae5c'
                    } else {
                        this.bmd.ctx.fillStyle='#FFFFFF'
                    }
                    var formattedDistance = numeral(this.distanceToNavigationTarget*PIXEL_TO_LIGHTYEAR).format('0,0.0a');                    
                    if(this.currentPath.length==2){
                        var jumpText = 'Jump'
                    } else {
                        var jumpText = 'Jumps'
                    }
                    
                    this.drawShadowText(`${this.currentPath.length-1} ${jumpText} / ${formattedDistance} ly`, labelX, labelY+lineSpacing);
                } else if(system==this.navigationTarget) {
                    this.bmd.ctx.fillStyle='#c03b2b'
                    this.drawShadowText(`Out of Range`, labelX, labelY+lineSpacing);
                    
                }
            }
        }        
    }

    updateNavigation(){
        if(!this.navigationDestination){
            // 'Cursor' sort of...
            // Find the star closest to the center of the screen
            var lowest = Number.POSITIVE_INFINITY;
            var tmp;
            for (var i=this.starSystems.length-1; i>=0; i--) {
                tmp = this.starSystems[i].distanceFromMapCenter;
                if (tmp < lowest) {
                    lowest = tmp;
                    this.navigationTarget = this.starSystems[i];
                }
            }
            if(this.game.system!=this.navigationTarget){
                if(this.navigationTarget!=this.navigationTargetCache){
                    this.currentPath = this.findPathFromSystemToSystem(this.game.system,this.navigationTarget);
                    this.distanceToNavigationTarget = this.distanceOfPath(this.currentPath)
                    
                    if(this.currentPath.includes(this.navigationTarget)){
                        this.navTargetChangedSound.play();
                    } else {
                        this.navTargetInvalidSound.play();
                    }
                }
            } else {
                this.currentPath = false;
            }
            this.navigationTargetCache = this.navigationTarget;
        }
    }
    
    
    drawShadowText(text,x,y){
        this.bmd.ctx.strokeText(text,x,y);
        this.bmd.ctx.fillText(text,x,y);            
    }
    
    drawGridLines(options){
        var zoom = this.mapZoom;
        var major = options.major || 100*zoom;
        var minor = options.minor || 25*zoom;            
    	this.bmd.ctx.strokeStyle = options.color || "#333333";
    	
        // Verticle
        for (var x = 0; x <= this.game.galaxy.settings.mapWidth; x+=minor) {
            if (x % major == 0) {
                this.bmd.ctx.lineWidth = 2;
            } else {
                this.bmd.ctx.lineWidth = 1;                
            }
        	this.bmd.ctx.beginPath();
        	this.bmd.ctx.moveTo((x+this.mapScrollX)*zoom,this.mapScrollY*zoom);
        	this.bmd.ctx.lineTo((x+this.mapScrollX)*zoom,(this.mapScrollY*zoom)+(this.game.galaxy.settings.mapHeight*zoom));
            this.bmd.ctx.stroke();
        }


        // Horizontal
        for (var y = 0; y <= this.game.galaxy.settings.mapHeight; y+=minor) {
            if (y % major == 0) {
                this.bmd.ctx.lineWidth = 2;
            } else {
                this.bmd.ctx.lineWidth = 1;      ;
            this.showInfoIfNeeded();
            
            // Paralax
            if(this.isPlanet){
                if(this.game.camera.deltaX || this.game.camera.deltaY){
                    this.wrapper.addAll('x', this.game.camera.deltaX - this.game.camera.deltaX/2, true, true);
                    this.wrapper.addAll('y', this.game.camera.deltaY - this.game.camera.deltaY/2, true, true);                    
                }
            }
        }
    }

}          
            }
        	this.bmd.ctx.beginPath();
        	this.bmd.ctx.moveTo(this.mapScrollX*zoom,(y+this.mapScrollY)*zoom);
        	this.bmd.ctx.lineTo((this.mapScrollX*zoom)+(this.game.galaxy.settings.mapWidth*zoom),(y+this.mapScrollY)*zoom);
            this.bmd.ctx.stroke();
        }
    }
    
    update(){
        if(this.isActive){
            this.updateNavigation();
    
            if (this.cursors.up.isDown) {
                this.mapScrollYStep+=this.mapScrollIncrement;
            } else if(this.cursors.down.isDown){
                this.mapScrollYStep-=this.mapScrollIncrement;            
            } else {
                // Y
                if(this.mapScrollYStep>0)this.mapScrollYStep-=this.mapScrollDecay;
                if(this.mapScrollYStep<0)this.mapScrollYStep+=this.mapScrollDecay;
                if(Math.abs(this.mapScrollYStep)<this.mapScrollDecay) this.mapScrollYStep=0;
            }
    
            if (this.cursors.left.isDown) {
                this.mapScrollXStep+=this.mapScrollIncrement;
            } else if(this.cursors.right.isDown){
                this.mapScrollXStep-=this.mapScrollIncrement;            
            } else {
                // X
                if(this.mapScrollXStep>0)this.mapScrollXStep-=this.mapScrollDecay;
                if(this.mapScrollXStep<0)this.mapScrollXStep+=this.mapScrollDecay;
                if(Math.abs(this.mapScrollXStep)<this.mapScrollDecay) this.mapScrollXStep=0;
            }
    
            if (this.plusKey.isDown && this.didZoom==false) {
                if(this.mapZoom==.5){
                    this.mapZoom = 1
                    this.mapScrollX -= (this.width/2);
                    this.mapScrollY -= (this.height/2);
                } else if(this.mapZoom==1) {
                    this.mapZoom = 2
                    this.mapScrollX -= (this.width/4);
                    this.mapScrollY -= (this.height/4);
                }
    
                this.didZoom = true;
    
                game.time.events.add(Phaser.Timer.SECOND * .15, function(){
                    this.didZoom = false;
                }, this);
    
            } else if(this.minusKey.isDown && this.didZoom==false){
                if(this.mapZoom==1){
                    this.mapZoom = .5
                    this.mapScrollX += (this.width/2);
                    this.mapScrollY += (this.height/2);
                } else if(this.mapZoom==2) {
                    this.mapZoom = 1
                    this.mapScrollX += (this.width/4);
                    this.mapScrollY += (this.height/4);
                }
    
                this.didZoom = true;
    
                game.time.events.add(Phaser.Timer.SECOND * .15, function(){
                    this.didZoom = false;
                }, this);
    
            } else {            
                if(this.mapZoomStep>0)this.mapZoomStep-=this.mapZoomIncrement;            
                if(this.mapZoomStep<0)this.mapZoomStep+=this.mapZoomIncrement;            
    
                if(this.mapZoomStep>0 && this.mapZoomStep<this.mapZoomIncrement)this.mapZoomStep=0;            
                if(this.mapZoomStep<0 && this.mapZoomStep>this.mapZoomIncrement)this.mapZoomStep=0;
            }
            
            this.mapScrollX += this.mapScrollXStep/this.mapZoom;
            this.mapScrollY += this.mapScrollYStep/this.mapZoom;        
            
                    
            if(this.mapZoom>this.mapZoomMax) {
                this.mapZoom = this.mapZoomMax;
                this.mapZoomStep = 0;
            }
    
            if(this.mapZoom<this.mapZoomMin) {
                this.mapZoom = this.mapZoomMin;
                this.mapZoomStep = 0;
            }
                    
            if(this.mapZoom>=this.mapZoomMin && this.mapZoom<=this.mapZoomMax && this.mapZoomStep!=this.mapZoomCache) {
                this.mapZoom += this.mapZoomStep;
                this.mapZoomCache = this.mapZoomStep;
                
                this.mapScrollX += this.mapScrollX*(this.mapZoom/2);
            }
            this.drawMap();
        }
    }
    
    cleanup(){
        this.plusKey = null;
        this.minusKey = null;
        this.spaceKey.onUp.remove(this.setDestination, this);
        this.spaceKey = null;
    }
}



/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/planets/basicPlanet.js begins */
/* Merging js: app/gui/mapScreen.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




class MapScreen extends GuiScreen {
    constructor(game,group) {
        super(game,group);

        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromBottom;
        
        this.setupScreen();
                
        this.wrapper = group;
        this.wrapper.add(this.screen);
        this.wrapper.fixedToCamera = true;
        this.wrapper.visible = false;
        
        this.destination = null;
        this.destinationCache = null;
        
        this.map = new GalacticMap(this.game,{
            width : this.game.camera.width-this.game.hud.sidebarWidth,
            height : screenHeight-46-38,
            x : 0,
            y : 46,
            group : this.screen,
        });
    }
    
    setupKeys(){
        this.mKey = game.input.keyboard.addKey(Phaser.Keyboard.M);
        this.mKeyOnUp = function(){
            this.hide();
        }
        this.mKey.onUp.add(this.mKeyOnUp, this);
    }
    
    setupScreen(){
        this.screenWidth = this.game.camera.width-this.game.hud.sidebarWidth;

        this.bg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.tabBar = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.bottomBar = this.screen.add(new Phaser.Graphics(this.game.game,0,0));

        // Background
        this.bg.clear();
        this.bg.beginFill(0x111111);
        this.bg.drawRect(0,0,
            this.screenWidth,
            this.game.camera.height*2,
            0
        )
        this.bg.endFill();

        // Bottom Bar
        this.bottomBarHeight = 38;
        this.bottomBar.clear();
        this.bottomBar.beginFill(this.styles.darkGrey);
        this.bottomBar.drawRect(0,this.game.camera.height-this.bottomBarHeight,
            this.screenWidth,
            this.bottomBarHeight+100, // Overlap for animation
        )
        this.bottomBar.endFill();

        this.helpText = this.game.add.text(
            16,this.game.camera.height - 26, 
            '(ARROWS) Move Map   (SPACE) Select Destination    (+/-) Zoom', 
            { font: `12px ${FONT}`, fill: '#929292', align: 'left'},
            this.screen
        )


        // Tabs
        this.shipTab = new TabItem(this.game,'ship-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.shipTab.buttonX = 0;
        this.shipTab.buttonY = 0;
        this.shipTab.text = "Ship";
        this.screen.add(this.shipTab);
        
        this.inventoryTab = new TabItem(this.game,'inv-tab');
        this.inventoryTab.buttonX = this.shipTab.buttonWidth + 1;
        this.inventoryTab.buttonY = 0;
        this.inventoryTab.text = "Inventory";
        this.screen.add(this.inventoryTab);

        this.mapTab = new TabItem(this.game,'map-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.mapTab.buttonX = this.inventoryTab.buttonX + this.inventoryTab.buttonWidth + 1;
        this.mapTab.buttonY = 0;
        this.mapTab.text = "Map";
        this.mapTab.active = true;
        this.screen.add(this.mapTab);

        this.statsTab = new TabItem(this.game,'stats-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.statsTab.buttonX = this.mapTab.buttonX + this.mapTab.buttonWidth + 1;
        this.statsTab.buttonY = 0;
        this.statsTab.text = "Stats";
        this.screen.add(this.statsTab);

        this.tabBar.clear();
        this.tabBar.beginFill(0x3F3C46);
        this.tabBar.drawRect(0,45,
            this.screenWidth,
            1,
            0
        )
        this.tabBar.endFill();

    }
        
    show(){
        super.show();

        this.wrapper.visible = true;
        this.setupKeys();

        this.map.setupKeys();
        this.map.isActive = true;
        this.map.centerOnSystem(this.game.system);
    }

    didShow(){
        super.didShow();        
        this.game.player.controlMode = CONTROL_MODE.inventory;
    }
    
    hide(){
        super.hide();
        this.cleanup();

        this.map.isActive = false;
        this.map.cleanup();
    }

    didHide(){
        super.didHide();
        
        this.destination = this.map.navigationDestination;
        
        if(this.destination!=this.destinationCache && this.destination){
            this.game.hud.showFTLPanel();
        }

        this.destinationCache = this.destination;
    }
    
    cleanup(){
        this.mKey.onUp.remove(this.mKeyOnUp, this);
    }
}class BasicPlanet extends Planet {
    constructor(game,options) {
        super(game,options.x,options.y); 
                
        this.system = options.system;
        this.index = options.index;
        this.order = (this.index+1).toRoman()   

        // Basics
        this.stats = {
            culture  : this.determineIntegerBetween(0,10),
            industry : this.determineIntegerBetween(0,10),
            science  : this.determineIntegerBetween(0,10),
            trade    :  this.determineIntegerBetween(0,10),
        }
        var bestStat = Object.keys(this.stats)
                           .sort(function(a, b) {
                               return this.stats[b] - this.stats[a];
                           }.bind(this))[0];  
                                            
        var worstStat = Object.keys(this.stats)
                           .sort(function(a, b) {
                               return this.stats[b] + this.stats[a];
                           }.bind(this))[0];                   

        // Specialization - determines low demand things (less expensive)
        this.specialization = this.determineItemFromArray(PLANET_SPECIALIZATIONS[bestStat]);
       
        // Weakness - determines high demand things (more expensive)
        this.weakness = this.determineItemFromArray(PLANET_SPECIALIZATIONS[worstStat]);

        // Population is for passenger terminals
        this.population = this.determineIntegerBetween(0,100000000);

        this.name = `${this.system.name} ${this.order}`;
        this.description = "Class D Planet"
        this.welcomeTitle = "Terrestrial Planet";
        this.welcomeText = `${this.name} is a medium-sized terrestrial planet in the ${this.system.name} system. \nSpeciality ${this.specialization} \nScience ${this.stats.science} \nCulture ${this.stats.culture} \nIndustry ${this.stats.industry} \nTrade ${this.stats.trade}`;

        // Sprite
        this.spriteImage = this.determineItemFromArray(this.game.planetImages);        
        this.sprite = this.game.make.sprite(options.x,options.y, this.spriteImage);
        this.sprite.exists = false;
        this.setupSprite(options);
        
        // Economics
        this.game.economy.registerMarket(this);
    }

    update() {
        super.update();
    }
}




/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/economy/_economy.js begins */
/* Merging js: app/planets/basicMoon.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */




class BasicMoon extends Planet {
    constructor(game,x,y) {
        super(game,x,y);        
        this.sprite = this.game.add.sprite(x,y, 'moon-1');
        this.sprite.scale.setTo(1.3, 1.3);

        this.name = "Persicus"
        this.description = "Moon of Mosisia"
        this.welcomeText = "Persicus is an intermediately sized terrestrial moon in the Pavo system. A lot of the moon is comprised of frigid desert, while a smaller portion is frozen oceans. Plant and animal life on this planet is non existant. The moon has no atmosphere, and is breathable without advanced life support systems.";

        this.services = [
            PLANET_SERVICES.passengerTerminal,            
        ]

        this.setupSprite();
    }

    update() {
        super.update();
    }
}
class Economy {
    constructor(game) {
        this.game = game;    
        this.markets = [];

        // Updates
        this.game.time.events.loop(5000, this.updateAllMarkets, this);
    }
    
    // Markets
    registerMarket(market,restock = true){
        market['stockItem'] = this.stockItem;

        this.markets.push(market);
        if(restock) this.restockMarket(market);
    }
    restockMarket(market){
        // Based on certain properites, determine the items for sale in a given market.
        if(market.hasService(PLANET_SERVICES.fuelDepot)){
            market.stockItem('small_fuel_drum',tombola.range(1,2));
            market.stockItem('theta_crystal',tombola.range(1,5));
        }   
        if(market.hasService(PLANET_SERVICES.shipyard)){
            market.stockItem('med_repair_kit',tombola.range(1,2));
            market.stockItem('light_repair_kit',tombola.range(1,2));
            market.stockItem('basic_engine',tombola.range(0,1));
        }   


        

    }
    updateMarket(market){
        
    }
    updateAllMarkets(){

    }

    stockItem(itemKey, amount = 1){
        this.addItemsToInventory(amount, InventoryObject.make(itemKey,this.game));
    }
    
    // Fuel
    get globalFuelPrice(){
        return .033;
    }

    buyFuel(amount){
        if(amount>0){
            var purchaseCost = amount * this.globalFuelPrice;
            if(this.game.player.debitCredits(purchaseCost)){
                this.game.player.ship.addFuel(amount);
                
                var roundedAmt = numeral(amount).format('0.0a')
                var readablePrice = numeral(this.globalFuelPrice).format('$0,0.00')
                
                this.game.hud.purchaseReceipt('Auto Refuel',`${roundedAmt} units @ ${readablePrice}`,purchaseCost);
            } else {
                // Sorry
            }
        } else {
            // Nothing to buy
            return false;
        }
    }

    tick(){
        // Change prices of stuff
        // Spawn stuff   
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/ships/buoy.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Buoy extends Planet {
    constructor(game,x,y) {
        super(game,x,y);
        
        this.specs = {
            name : 'Navigation Buoy',
            description : '',
        }
        
        this.sprite = this.game.add.sprite(x,y, 'buoy');
        this.sprite.scale.setTo(1.3, 1.3);

        this.name = this.specs.name;
        this.description = this.specs.description;
        this.showInfoDistance = 120;
        
        this.canLand = false;
        this.isPlanet = false;
        
        this.setupSprite();

        var blink = this.sprite.animations.add('blink');
        this.sprite.animations.play('blink', 1, true);
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/player.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Player extends GameObject {
    constructor(game) {
        super(game);

        this.ship = new BasicMiner(game,this.game.world.centerX-350,this.game.world.centerY-200);
        this.sprite = this.ship.sprite;

        this.name = 'Dash Riprock';
        
        this._credits = 1000;
        
        // Settings
        this.settings = {};
        this.settings.autoRefuel = true;

        // Keys
        this.controlMode = CONTROL_MODE.play;

        // RCS
        this.rcsSoundCountdown = 1;
        this.rcsSound = game.add.audio('rcs-loop');
        this.rcsSound.onFadeComplete.add(this.rcsSoundFadeComplete, this);

        this.allowHissSound = true;
        this.allowHissSoundForReverse = true;
        this.hissSounds = [
            game.add.audio('hiss-1'),
            game.add.audio('hiss-2'),
            game.add.audio('hiss-3'),
            game.add.audio('hiss-4'),
            game.add.audio('hiss-5')
        ]


        this.cursors = this.game.input.keyboard.createCursorKeys();
        this.fireButton = this.game.input.keyboard.addKey(Phaser.KeyCode.SPACEBAR);  
        
        // Navigation
        var tabKey = game.input.keyboard.addKey(Phaser.Keyboard.TAB);
        tabKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.ship.nextNavigationTarget();
        }, this);

        // Landing
        var lKey = game.input.keyboard.addKey(Phaser.Keyboard.L);
        lKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.ship.attemptToLand();
        }, this);

        // Docking
        var dKey = game.input.keyboard.addKey(Phaser.Keyboard.D);
        dKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.ship.attemptToDock();
        }, this);

        // HyperDrive
        var jKey = game.input.keyboard.addKey(Phaser.Keyboard.J);
        jKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.ship.toggleHyperDrive();
        }, this);
        var aKey = game.input.keyboard.addKey(Phaser.Keyboard.A);
        aKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) {
                this.game.hud.abortFTL();
                this.ship.abortJump();
            }
        }, this);
        var hKey = game.input.keyboard.addKey(Phaser.Keyboard.H);
        hKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.game.hud.toggleFTLPanel();
        }, this);

        // Inventory
        var iKey = game.input.keyboard.addKey(Phaser.Keyboard.I);
        iKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.game.inventoryScreen.show();
        }, this);

        // Map
        var mKey = game.input.keyboard.addKey(Phaser.Keyboard.M);
        mKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.game.mapScreen.show();
        }, this);

        // Camera
        var cKey = game.input.keyboard.addKey(Phaser.Keyboard.C);
        cKey.onUp.add(function(){
            if(this.controlMode == CONTROL_MODE.play) this.game.toggleCameraMode();
        }, this);

    }

    enterDarkness(nebula){
        this.currentNebula = nebula;
        
        if(!this.inDarkness){
            // Wait a bit to hit the lights
            game.time.events.add(Phaser.Timer.SECOND * 2, function(){
                if(this.currentNebula)
                this.game.hud.title(
                    `${this.currentNebula.name}, ${this.game.system.name} System`,
                    moment(this.game.starDate).format('MMMM Do YYYY, HH:mm'),
                );
            }, this);

            game.time.events.add(Phaser.Timer.SECOND * 3, function(){
                if(this.currentNebula){
                    this.game.planets.mask = this.ship.lightMask;
                    this.game.asteroids.mask = this.ship.lightMask;
                    this.game.stars.mask = this.ship.lightMask;
                    // Hack to show only player ship
                    this.ship.sprite.visible = false;
                    this.game.ships.setAll('mask', this.ship.lightMask,false,true);
                    this.ship.sprite.visible = true;
                    this.ship.lightMask.visible = true;    
                }
            }, this);

            this.inDarkness = true;
        }
    }

    exitDarkness(nebula){
        if(this.inDarkness){
            game.time.events.add(Phaser.Timer.SECOND * 1, function(){
                this.game.planets.mask = null;
                this.game.asteroids.mask = null;
                this.game.stars.mask = null;
                this.game.ships.mask = null;
                this.ship.lightMask.visible = false;    
            }, this);

            this.currentNebula = null;
            this.inDarkness = false;
        }
    }
    
    get credits(){
        if(this._credits<999999){
            return CREDIT_PREFIX.short + numeral(this._credits).format('0,0');
        } else {
            return CREDIT_PREFIX.short + numeral(this._credits).format('(0.00 a)');
        }
    }

    debitCredits(amount){
        if(this._credits>=amount){
            this._credits-=amount;
            return true;
        } else {
            return false;
        }
    }

    addCredits(amount){
        this._credits+=amount;
        return true;
    }


    autoRefuel(){
        var fuelNeeded = this.ship.maxFuel - this.ship.fuelQuantity;
        this.game.economy.buyFuel(fuelNeeded);
    }
    
    buy(item, amount = 1){
        debugger;
    }
    
    sell(item, amount = 1){
        
    }
    
    stop(){
        // Used when landing etc.
        this.ship.sprite.body.setZeroVelocity();
        this.ship.sprite.body.setZeroRotation();
        this.ship.sprite.body.setZeroForce();
    }
    
    rcsSoundFadeComplete(){
        this.rcsSound.stop();
    }
    
    hiss(){
        if(this.allowHissSound) {
            if(!this.ship.hyperDriveEngaged && !this.ship.fuelQuanity){
                this.hissSounds[this.game.rnd.integerInRange(0,this.hissSounds.length-1)].play('',0,.4);
            }
        }        
        this.allowHissSound = false;
    }
    
    reverseHiss(){
        if(this.allowHissSoundForReverse) {
            if(!this.ship.hyperDriveEngaged && !this.ship.fuelQuanity){
                this.hissSounds[this.game.rnd.integerInRange(0,this.hissSounds.length-1)].play('',0,.4);            
            }
        }
        this.allowHissSoundForReverse = false;
    }
        
    update() {
        super.update();
        
        if(this.rcsSoundCountdown>=0){
            if(this.rcsSoundCountdown==0){
                this.rcsSound.fadeOut(30);
            } else {
                this.rcsSoundCountdown--;
            }
        }


        // Normal "Play" control mode"
        if(this.controlMode == CONTROL_MODE.play && !this.ship.isDocked){
            // Accel
            if (this.cursors.up.isDown && !this.ship.hyperDriveEngaged) {
                this.ship.accelerate();
            } else if(this.cursors.down.isDown && !this.ship.hyperDriveEngaged) {
                this.reverseHiss();
                this.rcsSoundCountdown = 1;
                if(!this.rcsSound.isPlaying && !this.ship.hyperDriveEngaged && this.ship.fuelQuanity) this.rcsSound.loopFull(.33);
                this.ship.goInReverse();
            } else {
                this.allowHissSoundForReverse = true;
                this.ship.deaccelerate();
            }
        
            // Turning / Strafing
            if (this.cursors.left.isDown) {
                this.hiss();

                this.rcsSoundCountdown = 1;
                if(!this.rcsSound.isPlaying && !this.ship.hyperDriveEngaged && this.ship.fuelQuanity) this.rcsSound.loopFull(.33);

                if(this.cursors.left.shiftKey){
                    this.ship.moveLeft();
                } else {
                    this.ship.turnLeft();
                }
            } else if (this.cursors.right.isDown) {
                this.hiss();

                this.rcsSoundCountdown = 1;
                if(!this.rcsSound.isPlaying && !this.ship.hyperDriveEngaged && this.ship.fuelQuanity) this.rcsSound.loopFull(.33);

                if(this.cursors.right.shiftKey){
                    this.ship.moveRight();
                } else {
                    this.ship.turnRight();
                }
            } else {
                this.allowHissSound = true;
                this.ship.deaccelerateTurning();
            }
            
            // Firing
            if (this.fireButton.isDown) {
                this.ship.firePrimaryWeapon();
            }
        }
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/hud.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class HUD {
    constructor(game) {
        this.game = game;
        this.group = this.game.hudGroup;
        this.group.fixedToCamera = true;
        var x = this.game.camera.width - 120;
        var y = 160;
        var lineHeight = 12;
        var padding = 8;
        var width = 100;
        var borderRadius = 5;

        this.tweens = {};

        this.masterAlarmSound = game.add.audio('master_alarm');
        this.titleNotificationSound = game.add.audio('title-notification');
        this.panelToggleSound = game.add.audio('panel-toggle');
        this.lowFuelSound = game.add.audio('low-fuel-warning');

        // Updaters
        game.time.events.loop(Phaser.Timer.SECOND * .35, this.slowUpdate, this);
        game.time.events.loop(Phaser.Timer.SECOND * 1, this.verySlowUpdate, this);

        // Sidebar
        this.sidebarWidth = 140;
        this.sidebar = this.group.add(new Phaser.Graphics(this.game.game,0,0));
        this.sidebar.beginFill(0x111111);
        this.sidebar.drawRect(
            x-20,
            0,
            this.sidebarWidth,
            this.game.camera.height,
            
        )
        this.sidebar.endFill();

        // Date
        this.stardateLabel = new Phaser.BitmapText(
            this.game.game, 
            this.game.camera.width-8-140,
            10,
            'pixelmix_8',
            this.game.starDate,
            5
        );
        this.stardateLabel.anchor.set(1,0);
        this.stardateLabel.tint = 0x948f9c;
        this.group.add(this.stardateLabel)

        // System 
        this.systemLabel = new Phaser.BitmapText(
            this.game.game, 
            x-8,
            10,
            'pixelmix_8',
            `${this.game.system.name}`,
            5
        );
        this.systemLabel.anchor.set(0,0);
        this.group.add(this.systemLabel)

        // Minimap        
        this.minimap = new Minimap(this.game,this);
        
        // Navigation
        this.navigationGroup = this.game.add.group()
        this.group.add(this.navigationGroup)

        this.navDestDisplay = new Phaser.BitmapText(
            this.game.game, 
            20,
            20,
            'pixelmix_8',
            'USS Ajax (Fuel Tanker)',
            5
        );  
        this.navigationGroup.add(this.navDestDisplay)

        // ETA
        this.navETALabel = new Phaser.BitmapText(
            this.game.game, 
            20,
            34,
            'pixelmix_8',
            'ETA',
            5
        );  
        this.navETALabel.tint = 0x948f9c;
        this.navigationGroup.add(this.navETALabel)

        this.navETADisplay = new Phaser.BitmapText(
            this.game.game, 
            70,
            34,
            'pixelmix_8',
            '59:59',
            5
        );  
        this.navETADisplay.anchor.set(1,0);
        this.navigationGroup.add(this.navETADisplay)

        // Distance
        this.navDistanceLabel = new Phaser.BitmapText(
            this.game.game, 
            90,
            34,
            'pixelmix_8',
            'Dist.',
            5
        );  
        this.navDistanceLabel.tint = 0x948f9c;
        this.navigationGroup.add(this.navDistanceLabel)

        this.navDistanceDisplay = new Phaser.BitmapText(
            this.game.game, 
            120,
            34,
            'pixelmix_8',
            '9999m',
            5
        );  
        this.navDistanceDisplay.anchor.set(0,0);
        this.navigationGroup.add(this.navDistanceDisplay)

        // EFI
        this.healthProgressBar = new ProgressBar(this.game,this,'HULL',x-8,y+8);
        this.fuelProgressBar = new ProgressBar(this.game,this,'FUEL',x-8,y+43);
        this.energyProgressBar = new ProgressBar(this.game,this,'ENERGY',x-8,y+78);


        // Credits
        this.creditsText = new Phaser.BitmapText(
            this.game.game, 
            x+108,
            this.energyProgressBar.y + this.energyProgressBar.height + 11,
            'pixelmix_8',
            '',
            5
        );  
        this.group.add(this.creditsText);
        this.creditsText.anchor.set(1,0);
        this.creditsLabel = new Phaser.BitmapText(
            this.game.game, 
            x-8,
            this.creditsText.y,
            'pixelmix_8',
            CREDIT_PREFIX.long.toUpperCase(),
            5
        );  
        this.creditsLabel.tint = 0x948f9c;
        this.group.add(this.creditsLabel)

        // Cargo
        this.cargoText = {};
        var cargoHeight = 0;
        this.cargoLabel = new Phaser.BitmapText(
            this.game.game, 
            x-8,
            y+142,
            'pixelmix_8',
            'CARGO (kg)',
            5
        );  
        this.cargoLabel.tint = 0x948f9c;
        this.group.add(this.cargoLabel)
        Object.keys(this.game.player.ship.specs.storage).forEach(function(key,index) {
            var cargoType = this.game.player.ship.specs.storage[key];
            this.cargoText[key] = new Phaser.BitmapText(
                this.game.game, 
                x+108,
                (this.cargoLabel.y+padding)+(lineHeight*index)+padding,
                'pixelmix_8',
                '0',
                5
            );
            
            this.group.add(this.cargoText[key]);
            this.cargoText[key].anchor.set(1,0);
    
            var cargoTypeLabel = new Phaser.BitmapText(
                this.game.game, 
                x-8,
                this.cargoText[key].y,
                'pixelmix_8',
                key.charAt(0).toUpperCase() + key.slice(1),
                5
            );
            cargoTypeLabel.tint = 0x948f9c;
            this.group.add(cargoTypeLabel);
            cargoHeight = (index*lineHeight)+padding*4;
        }.bind(this));

        // Equipment
        this.equipmentText = {};
        var eIndex = 0;
        var equipmentHeight = 0;
/*
        this.equipmentLabel = new Phaser.BitmapText(
            this.game.game, 
            x-8,
            this.cargoLabel.y + cargoHeight + padding,
            'pixelmix_8',
            'EQUIPMENT',
            5
        );  
        this.equipmentLabel.tint = 0x948f9c;
        this.group.add(this.equipmentLabel)
*/
        var equipmentList = this.game.player.ship.equipment.concat(this.game.player.ship.weapons);        
/*
        for (let equipment of equipmentList) {
            var name = equipment.name;
            if(equipment.equipped){
                var equipmentNameLabel = new Phaser.BitmapText(
                    this.game.game, 
                    x-8,
                    (this.equipmentLabel.y+padding)+(lineHeight*eIndex)+padding,
                    'pixelmix_8',
                    name,
                    5
                );
                this.group.add(equipmentNameLabel);
                equipmentNameLabel.anchor.set(0,0);
    
                var equipmentStatusLabel = new Phaser.BitmapText(
                    this.game.game, 
                    x+108,
                    equipmentNameLabel.y,
                    'pixelmix_8',
                    equipment.status,
                    5
                );
                equipmentStatusLabel.tint = 0x948f9c;
                this.group.add(equipmentStatusLabel);
                equipmentStatusLabel.anchor.set(1,0);
            }
            eIndex++;
        }
*/

        // Master Alarm
        this.masterAlarmSprite = this.game.add.sprite(this.game.camera.width-200,10, 'master-alarm');
        this.masterAlarmSprite.animations.add('blink');    
        this.masterAlarmSprite.animations.play('blink', 5, true);
        this.masterAlarmSprite.visible = false;
        this.masterAlarmSprite.inputEnabled = true;
        this.masterAlarmSprite.events.onInputUp.add(this.masterAlarmClicked, this);
        this.group.add(this.masterAlarmSprite);

        // O2
        this.o2gauge = this.game.add.group();
        this.group.add(this.o2gauge);
        
        this.o2gaugeBg = this.game.add.sprite(0,0, 'oxygen-gauge');
        this.o2gaugeArrow = this.game.add.sprite(0,0, 'gauge-arrow');
        this.group.add(this.o2gaugeBg);
        this.group.add(this.o2gaugeArrow);
        
        this.o2gaugeBg.x = 32 - 100
        this.o2gaugeArrow.x = this.o2gaugeBg.x + 8;
        this.o2gaugeBg.y = this.game.camera.height - this.o2gaugeBg.height - 100;
        this.o2gaugeArrow.y = this.o2gaugeBg.y + 29;

        // FTL
        this.ftlPanel = this.game.add.group();
        this.group.add(this.ftlPanel);
        this.ftlPanelBg = this.game.add.sprite(0,0, 'ftl-panel');
        this.ftlPanel.add(this.ftlPanelBg);

        this.ftlPanelText = new Phaser.BitmapText(
            this.game.game, 
            25,
            17,
            'pixelmix_8_leaded',
            '',
            5
        );
        this.ftlPanelText.tint = 0x15ae5c;
        this.ftlPanel.add(this.ftlPanelText);

        this.ftlPanelStatusText = new Phaser.BitmapText(
            this.game.game, 
            132,
            17,
            'pixelmix_8_leaded',
            '',
            5
        );
        
        this.ftlPanelStatusText.tint = 0x15ae5c;
        this.ftlPanel.add(this.ftlPanelStatusText);
        this.ftlPanelStatusBlink = game.add.tween(this.ftlPanelStatusText).to(
            { alpha:0 }, 1000, Phaser.Easing.Quadratic.InOut, false, 0, -1)
        this.ftlPanelHelpText = new Phaser.BitmapText(
            this.game.game, 
            18,
            135,
            'pixelmix_8',
            '(H) Hide',
            5
        );
        this.ftlPanel.add(this.ftlPanelHelpText);

        this.ftlPanelX = this.game.camera.width-150-this.ftlPanelBg.width;
        this.ftlPanelY = this.game.camera.height-this.ftlPanelBg.height-10+200;
        
        this.ftlPanel.y = this.ftlPanelY;
        this.ftlPanel.x = this.ftlPanelX;

        // Storage
        Object.keys(this.game.player.ship.specs.storage).forEach(function(key,index) {
            if(this.equipmentText[key]){
                var equipmentType = this.game.player.ship.specs.storage[key];    
                var equipmentTypeLabel = new Phaser.BitmapText(
                    this.game.game, 
                    x-8,
                    this.equipmentText[key].y,
                    'pixelmix_8',
                    key.charAt(0).toUpperCase() + key.slice(1),
                    5
                );
                equipmentTypeLabel.tint = 0x948f9c;
                this.group.add(equipmentTypeLabel);
                equipmentHeight = (index*lineHeight)+padding*4;
            }
        }.bind(this));


        // MESSAGES
        // Title
        this.message__title = this.game.add.text(
            0,0,
            '', 
            { font: `16px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
        );
        this.message__title.alpha = 0;
        this.group.add(this.message__title)
        
        // Subtitle
        this.message__subTitle = this.game.add.text(
            0,0, 
            '', 
            { font: `12px ${FONT}`, fill: '#FFFFFF', align: 'left' }, 
        );
        this.message__subTitle.alpha = 0;
        this.group.add(this.message__subTitle)
        
        // Nav Arrow
        this.navigationArrow = this.game.make.sprite(0,0, 'nav-arrow');
        this.navigationArrow.anchor.set(-10,.5);
        this.navArrowResetPostionTween = this.game.add.tween(this.navigationArrow).to({
            angle: 0,
            x: 0,
            y: 0,
        }, 300, "Quart.easeOut", false);

        this.group.add(this.navigationArrow);

        
        this.messageTextY = this.game.camera.height-100;
        this.messageText = this.game.add.text(
            0,
            0, 
            '', 
            { font: `14px ${FONT}`, fill: "#FFFFFF", align: 'center',  boundsAlignH: 'center' }, 
            this.group,
        );
        this.messageText.setTextBounds(0, 0, screenWidth-this.sidebarWidth, screenHeight);
        this.messageText.stroke = '#000000';
        this.messageText.strokeThickness = 3;
        this.messageText.alpha = 0;

        this.tweens.messageFadeIn = this.game.add.tween(this.messageText).to( { alpha: 1 }, 300, "Quart.easeOut", false);
    	this.tweens.messageMoveUp = this.game.add.tween(this.messageText).to( { y: '-30' }, 300, "Quart.easeOut", false);
        this.tweens.messageFadeOut = this.game.add.tween(this.messageText).to( { alpha: 0 }, 300, "Quart.easeOut", false, 2000);
    
        // Blinky
        this.blinkyMessageText = this.game.add.text(
            this.game.camera.width/2,
            this.game.camera.height-70, 
            '', 
            { font: `18px ${FONT}`, fill: "#FFFFFF", align: 'center' }, 
        );
        this.blinkyMessageText.anchor.x = .5;
        this.blinkyMessageText.fixedToCamera = true;
        this.blinkyMessageText.tint = 0xe74c3c;

        this.verySlowUpdate();
        this.slowUpdate();
    }
    
    title(message,submessage){
        this.titleNotificationSound.play();

        var delay = 2000;        
        
        this.message__title.x = 32;
        this.message__title.y = this.game.camera.height-50;
        this.message__subTitle.x = 32;
        this.message__subTitle.y = this.game.camera.height-25;
        
        this.message__title.setText(message);
        this.message__subTitle.setText(submessage);
                    
        var fadeIn1 = this.game.add.tween(this.message__title).to( { alpha: 1 }, 1000, "Quart.easeOut", false);
    	var moveUp1 = this.game.add.tween(this.message__title).to( { y: '-30' }, 300, "Quart.easeOut", true);
        var fadeOut1 = this.game.add.tween(this.message__title).to( { alpha: 0 }, 1500, "Quart.easeOut", false, delay);
        fadeIn1.chain(fadeOut1);
        fadeIn1.start();

        var submessageDelay = 300;
        var fadeIn2 = this.game.add.tween(this.message__subTitle).to( { alpha: 1 }, 1000, "Quart.easeOut", false, submessageDelay);
    	var moveUp2 = this.game.add.tween(this.message__subTitle).to( { y: '-30' }, 300, "Quart.easeOut", true, submessageDelay);
        var fadeOut2 = this.game.add.tween(this.message__subTitle).to( { alpha: 0 }, 1500, "Quart.easeOut", false, delay-submessageDelay);    
        fadeIn2.chain(fadeOut2);
        fadeIn2.start();
    }

    message(message){
        this.messageText.y =  this.messageTextY;
        this.messageText.setText(message);
    
        this.tweens.messageFadeIn.chain(this.tweens.messageFadeOut);
        this.tweens.messageFadeIn.start();
        this.tweens.messageMoveUp.start();
    }

    warning(message){
        var delay = 2000;
        var messageText = this.game.add.text(
            this.game.camera.width/2,
            this.game.camera.height-100, 
            message, 
            { font: `18px ${FONT}`, fill: "#FFFFFF", align: 'center' }, 
        );

        messageText.anchor.x = .5;
        messageText.fixedToCamera = true;
        messageText.alpha = 0;
    
        var fadeIn = this.game.add.tween(messageText).to( { alpha: 1 }, 300, "Quart.easeOut", false);
    	var moveUp = this.game.add.tween(messageText).to( { y: '-30' }, 300, "Quart.easeOut", true);
        var fadeOut = this.game.add.tween(messageText).to( { alpha: 0 }, 300, "Quart.easeOut", false, delay);
    
        fadeIn.chain(fadeOut);
        fadeIn.start();
    }
    blinkingWarning(message){
        var delay = 2000;
        this.blinkyMessageText.setText(message);
            
        var blink = this.game.add.tween(this.blinkyMessageText).to({
            alpha: .5,
        }, 300, "Quart.easeOut", true, 0, 0, true).loop(true);
    }
    
    updateNavigationDisplay(){
        if(this.navDestDisplay!=undefined){
            var player = this.game.player.ship;
            var target = player.navigationTarget;
            if(target==null){
                this.navDestDisplay.setText('Navigation Off');
                this.navigationGroup.visible = false;
                this.navigationArrow.visible = false;
            } else {
                this.navDestDisplay.setText(`> ${target.name} (${target.description})`);
                this.navETADisplay.setText(`${this.game.player.ship.formattedTimeToCurrentNavigationTarget}`);
                this.navDistanceDisplay.setText(`${this.game.player.ship.formattedDistanceToCurrentNavigationTarget}`);        
                this.navigationGroup.visible = true;
                            
                if(player.distanceToCurrentNavigationTarget>150){
                    this.navigationArrow.visible = true;
                    this.navigationArrow.angle = player.angleToCurrentNavigationTarget;
                    this.navigationArrow.x = this.game.player.ship.sprite.x - this.game.camera.x;
                    this.navigationArrow.y = this.game.player.ship.sprite.y - this.game.camera.y;                
                } else {        
                    this.game.add.tween(this.navigationArrow).to({
                        angle: 90,
                        x: target.sprite.x - this.game.camera.x,
                        y: ((target.sprite.y - target.sprite.height/2) - this.game.camera.y)-100,
                    }, 300, "Quart.easeOut", true);
                }
            }
        }
    }
    

    purchaseReceipt(title,message,amount){
        var notification = new Notification(this.game);
        notification.text = title;
        notification.subText = message;
        notification.accessoryText = numeral(-amount).format('$0,0[.]00');
        this.game.notificationGroup.add(notification);

        notification.show();
    }
    
    showSystemInfo(){
        this.title(`${this.game.system.name} System`,moment(this.game.starDate).format('MMMM Do YYYY, HH:mm'));
    }
    
    set masterAlarm(alarm){
        this.masterAlarmSprite.visible = alarm;
        if(alarm){
            this.masterAlarmSound.loopFull();
        } else {
            this.masterAlarmSound.stop();            
        }
    }
    
    masterAlarmClicked(){
        this.masterAlarm = false;
    }
    
    showO2Panel(){
        this.masterAlarm = true;
        game.add.tween(this.o2gaugeBg).to( {x: '+100'}, 600, "Quart.easeOut", true);
        game.add.tween(this.o2gaugeArrow).to( {x: '+100'}, 600, "Quart.easeOut", true);        
    }

    hideO2Panel(){
        this.masterAlarm = false;
        game.add.tween(this.o2gaugeBg).to( {x: '-100'}, 600, "Quart.easeOut", true);
        game.add.tween(this.o2gaugeArrow).to( {x: '-100'}, 600, "Quart.easeOut", true);        
    }

    
    set o2Percent(o2){
        this.o2gaugeArrow.y = (this.o2gaugeBg.y + 29) - (107*o2) + 107;
    }
    
    toggleFTLPanel(){
        if(this.ftlPanel.y == this.ftlPanelY){
            this.showFTLPanel();
        } else {
            this.hideFTLPanel();
        }
    }
    
    showFTLPanel(){
        this.updateFTLPanel(true);
        if(this.ftlPanel.y == this.ftlPanelY){
            this.panelToggleSound.play();
            this.ftlPanel.visible = true;
            var showPanelTween = game.add.tween(this.ftlPanel).to( {y: '-200'}, 400, "Quart.easeOut", true);
        }
    }

    hideFTLPanel(){
        this.updateFTLPanel(true);
        if(this.ftlPanel.y == this.ftlPanelY-200){
            this.panelToggleSound.play();
            var hidePanelTween = game.add.tween(this.ftlPanel).to( {y: '+200'}, 400, "Quart.easeOut", true);
            hidePanelTween.onComplete.add(function(){
                this.ftlPanel.visible = false;
            }, this);
        }
    }
    
    abortFTL(){
        if(this.game.mapScreen.map.currentPath){
            this.panelToggleSound.play();
            this.game.mapScreen.map.currentPath = false;
            this.game.mapScreen.map.navigationDestination = null;
            this.updateFTLPanel(true);
        }
    }
    
    lowFuel(){
        this.message("Low Fuel");
        this.lowFuelSound.loopFull();
    }
    
    hasFuel(){
        this.lowFuelSound.stop();
    }
        
    updateFTLPanel(force){
        if(this.ftlPanel.y == this.ftlPanelY-200 || force){ // If is showing
            var panelText = '';
            var path = this.game.mapScreen.map.currentPath
            if(!this.game.mapScreen.map.navigationDestination) path = false;
                if(path.length>0 || path!=false){
                    if(path.length==2) {
                        var destination = path[path.length-1];
                        var destinationName = destination.name.substring(0,12);
                        var formattedDistance = numeral(this.game.system.distanceToStarSystem(destination)*PIXEL_TO_LIGHTYEAR).format('0,0.0a');                    
                        panelText = `FTL DRIVE\nDESTINATION\n${destinationName} (${formattedDistance} ly)\n\nPRESS J TO JUMP`;
                    } else {
                        panelText = 'FTL DRIVE\nCOURSE SET\n';
                        for (var i = 0; i < path.length; i++) {
                            var system;
                            if(path[i+1]!=undefined) {
                                system = path[i+1];
                            } else {
                                system = false;
                            }
                            if(i<4 && system){
                                panelText += `${i+1}. ${system.name.substring(0,18)}\n`;                            
                            }
                            if(i==5){
                                panelText += `... ${path.length-i} more`;                            
                            }
                        }
                    }

                    this.ftlPanelHelpText.setText('(J) Jump  (A) Abort  (H) Hide')
                } else {
                    panelText = 'FTL DRIVE\n';
                    panelText += `NO DESTINATION\n\nPRESS M TO VIEW MAP`;

                    this.ftlPanelHelpText.setText('(H) Hide')
                }
            this.ftlPanelText.setText(panelText);
            this.ftlPanelStatusText.setText(`CHARGES: ${this.game.player.ship.jumpsRemaining}`);
            this.ftlPanelStatusText.x = 101;
        }
    }

    slowUpdate(){
        this.minimap.update();
    }

    verySlowUpdate(){
        // Credits
        this.creditsText.setText(`${this.game.player.credits}`);

        // Cargo
        Object.keys(this.game.player.ship.specs.storage).forEach(function(key,index) {
            var usedSpace = this.game.player.ship.usedSpaceForStorageClass(key);
            var maxSpace = this.game.player.ship.maxSpaceForStorageClass(key);
            this.cargoText[key].setText(`${usedSpace}/${maxSpace}`);
        }.bind(this));

        // FTL
        this.updateFTLPanel();
    
        // System
        this.systemLabel.setText(this.game.system.name);        
    }
    
    update() {
        // Navigation
        this.updateNavigationDisplay();

        // EFI
        if(this.healthValue_cache!=this.game.player.ship.health || this.healthMaxValue_cache!=this.game.player.ship.maxHealth){
            this.healthProgressBar.value = this.game.player.ship.health;
            this.healthProgressBar.max = this.game.player.ship.maxHealth;
        }
        this.healthValue_cache = this.healthProgressBar.value
        this.healthMaxValue_cache = this.healthProgressBar.max
        
        if(this.fuelPercentage_cache!=this.game.player.ship.fuelPercentage)
            this.fuelProgressBar.valuePercent = this.game.player.ship.fuelPercentage;
        
        if(this.energyPercentage_cache!=this.game.player.ship.energyPercentage)        
            this.energyProgressBar.valuePercent = this.game.player.ship.energyPercentage;
        
        this.fuelPercentage_cache = this.fuelProgressBar.valuePercent;
        this.energyPercentage_cache = this.energyProgressBar.valuePercent;

        // O2
        this.o2Percent = this.game.player.ship.o2Percent;
    }
}


/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/minimap.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Minimap {
    constructor(game,hud) {
        this.game = game;
        this.phaserGame = game.game;
        
        this.size = 116;
        this.width = this.size;
        this.height = this.size;
        this.x = this.game.camera.width - 128;
        this.y = 30;
        
        this.hud = hud;
        this.defaultScale = .03;
        this.scale = this.defaultScale;
        this.distanceFactor = 55;
            
        this.background = this.hud.group.create(this.x,this.y,'minimap-bg')
        this.background.width = this.size;
        this.background.height = this.size;
        this.background.tint = 0x1A1A1A;

        this.dotsBitmapData = this.phaserGame.add.bitmapData(this.width);
        
        this.phaserGame.cache.addBitmapData('minimap-display', this.dotsBitmapData);
        this.mapDots = this.hud.group.create(
            this.background.x,
            this.background.y,
            this.phaserGame.cache.getBitmapData('minimap-display')
        )
    }
    update(){
        this.dotsBitmapData.clear();
        this.game.system.stellarObjects.forEach(this.drawDotsForGameObject,this);
        this.game.system.planets.forEach(this.drawDotsForGameObject,this);
        this.dotsBitmapData.dirty = true;        
    }
    
    drawDotsForGameObject(gameObject){
        if(gameObject.sprite!=undefined){
            var distance = this.game.physics.arcade.distanceBetween(gameObject.sprite, this.game.player.sprite);
            if(distance<(this.distanceFactor/this.scale)){
                var x = ((gameObject.sprite.x-this.game.player.ship.sprite.x)*this.scale)+this.size/2;
                var y = ((gameObject.sprite.y-this.game.player.ship.sprite.y)*this.scale)+this.size/2;
                var size = 1; // Default dot size
                if(gameObject.minimapSize!=undefined){
                    size = gameObject.minimapSize;
                }
                var a = Math.abs(distance*(this.distanceFactor/100000)-1)+.1
                
                if(this.game.player.ship.navigationTarget == gameObject){
                    this.dotsBitmapData.circle(x,y,size+3,`rgba(255,255,255,${a})`);                            
                    this.dotsBitmapData.circle(x,y,size+2,`#3f3c46`);                            
                    this.dotsBitmapData.circle(x,y,size,`rgba(255,255,255,${a})`);                            
                } else {
                    this.dotsBitmapData.circle(x,y,size,`rgba(255,255,255,${a})`);                            
                }
                
                // Player
                this.dotsBitmapData.circle(this.size/2,this.size/2,1,`rgba(255,255,255,1)`);                            
            }
        }
    }
    
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/progressBar.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class ProgressBar {
    constructor(game,hud,title,x,y) {
        this.game = game;
        this.phaserGame = game.game;
        this.x = x;
        this.y = y;
        this.height = 26;
        
        this.hud = hud;

        this.valuePercent = 0;
        this._valuePercent = 0;
        this.value = null;
        this._value = null;
        this.max = 0;
        this._max = 0;
        this.displayTotal = false;
        this.title = title;

        this.barBitmapData = this.phaserGame.add.bitmapData(116);
        this.barBitmapData.ctx.fillStyle = '#EEEEEE';

        this.phaserGame.cache.addBitmapData('progbar', this.barBitmapData);
        this.barSprite = this.hud.group.create(
            x,
            y+12,
            this.phaserGame.cache.getBitmapData('progbar')
        )

        var label = new Phaser.BitmapText(
            this.game.game,
            x,
            y, 'pixelmix_8',
            this.title,
            5,
        );
        label.tint = 0x948f9c;
        this.hud.group.add(label)

        this.amountDisplay = new Phaser.BitmapText(
            this.game.game,
            x+116,
            label.y, 'pixelmix_8',
            '',
            5
        );
        this.amountDisplay.tint = 0xFFFFFF;
        this.amountDisplay.anchor.set(1,0);
        this.hud.group.add(this.amountDisplay)   
    }

    set valuePercent(valuePercent){
        this._valuePercent = valuePercent;
        this.draw();
    }
    
    get valuePercent(){
        return this._valuePercent;
    }

    set value(value){
        this._value = value;
        this.draw();
    }
    
    get value(){
        return this._value;
    }

    set max(max){
        this._max = max;
        this.draw();
    }
    
    get max(){
        return this._max;
    }

    draw(){
        if(this.barBitmapData!=undefined){
            this.barBitmapData.clear();
            this.barBitmapData.ctx.fillStyle = '#504d54';
            this.barBitmapData.rect(0,0,116,10);
            if(this.value){
                this.barBitmapData.ctx.fillStyle = '#EEEEEE';
                this.barBitmapData.rect(0,0,Math.round(((this.value/this.max)*100)*1.16),10);
                this.amountDisplay.setText(`${Math.round(this.value)}/${Math.round(this.max)}`); 
            } else {
                if(isNaN(this.valuePercent)) this.valuePercent = 0;
                this.barBitmapData.ctx.fillStyle = '#EEEEEE';
                this.barBitmapData.rect(0,0,Math.round(this.valuePercent*1.16),10);
                this.amountDisplay.setText(this.valuePercent+"%");
            }
    
            this.barBitmapData.dirty = true;                    
        }
    }

    update(){    
    
    }
    
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/_guiScreen.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class GuiScreen {
    constructor(game,group) {                
        this.game = game;
        this.screen = this.game.add.group();
    
        this.screen.visible = false;
        this.parentScreen = null;

        this.fontFamily = FONT;
        this.fontFamilyLarge = FONT;
        this.fontSizeOffset = 0;
        this.textResolution = 2;
        
        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromBottom; // Default
        
        this.collapseSound = game.add.audio('gui_collapse');
        this.expandSound = game.add.audio('gui_expand');
        
        this.styles = {
            borderRadius: 5,
            darkGrey: 0x282731,
            midGrey: 0x3f3c46,
            lightGrey: 0x4d4b56,
            veryLightGrey : 0x948f9c,
            red: 0xc03b2b,
            green: 0x1aae5c,
            baseText : { font: `${14+this.fontSizeOffset}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'left'},
            smallWhiteText : { font: `${13+this.fontSizeOffset}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'left'},
            smallGreyText : { font: `italic ${13+this.fontSizeOffset}px ${this.fontFamilyLarge}`, fill: '#948f9c', align: 'left'},
            title : { font: `${18}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'left'},
        }
    }
    
    // Showing
    show(){
        this.previousControlMode = this.game.player.controlMode;
        this.screen.visible = true;

        switch(this.transitionStyle) {
            case SCREEN_TRANSITION_STYLE.fromBottom:
                this.expandSound.play();
                this.screen.y = this.game.camera.height;
                var transition = this.game.add.tween(this.screen.position).to({y: 0}, 500, Phaser.Easing.Back.InOut, true);
                break;
            case SCREEN_TRANSITION_STYLE.fromRight:
                this.screen.x = this.game.camera.width;
                var transition = this.game.add.tween(this.screen.position).to({x: 0}, 500, "Quart.easeOut", true);
                break;
            default:
                // None
        }
        if(transition!=undefined) transition.onComplete.add(this.didShow, this);
    }

    didShow(){
        if(this.parentScreen) this.parentScreen.childScreenDidShow();
    }
    
    // Hiding
    hide(){
        switch(this.transitionStyle) {
            case SCREEN_TRANSITION_STYLE.fromBottom:
                this.collapseSound.play();
                var transition = this.game.add.tween(this.screen.position).to({y: this.game.camera.height}, 500, Phaser.Easing.Back.InOut, true);
                break;
            case SCREEN_TRANSITION_STYLE.fromRight:
                var transition = this.game.add.tween(this.screen.position).to({x: this.game.camera.width}, 500, "Quart.easeOut", true);
                break;
            default:
                // None
        }
        transition.onComplete.add(this.didHide, this);

        if(this.parentScreen) this.parentScreen.childScreenWillHide();
    }
 
    didHide(){
        this.screen.visible = false;        
        this.game.player.controlMode = this.previousControlMode;
        
        this.cleanup();

        if(this.parentScreen) this.parentScreen.childScreenDidHide();
    }
    
    cleanup(){
        
    }
    
    childScreenDidHide(){
        
    }

    childScreenWillHide(){
        
    }

    childScreenWillShow(){
        
    }

    childScreenDidShow(){
        
    }

    update(){

    }

}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/arrival.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class ArrivalScreen extends GuiScreen {
    constructor(game,group) {
        super(game,group);

        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromBottom;

        this._destination = null;
        this.serviceButtons = [];
        this.serviceScreens = {};      
        this.serviceSelectedIndex = null;
        
        this.setupKeys();
        this.setupScreen();
                
        this.wrapper = group;
        this.wrapper.add(this.screen);
        this.wrapper.fixedToCamera = true;
        this.wrapper.visible = false;

        this.controlGroup = this.game.add.group();
        this.screen.add(this.controlGroup);
    }
    
    setupKeys(){
        var upKey = game.input.keyboard.addKey(Phaser.Keyboard.UP);
        upKey.onUp.add(this.upKeyPressed, this);
        
        var downKey = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
        downKey.onUp.add(this.downKeyPressed, this);

        var leftKey = game.input.keyboard.addKey(Phaser.Keyboard.LEFT);
        leftKey.onUp.add(this.leftKeyPressed, this);

        var rightKey = game.input.keyboard.addKey(Phaser.Keyboard.RIGHT);
        rightKey.onUp.add(this.rightKeyPressed, this);

        var escKey = game.input.keyboard.addKey(Phaser.Keyboard.ESC);
        escKey.onUp.add(function(){
            if(this.game.player.controlMode == CONTROL_MODE.landed) this.hide();
        }, this);

        var lKey = game.input.keyboard.addKey(Phaser.Keyboard.L);
        lKey.onUp.add(function(){
            if(this.game.player.controlMode == CONTROL_MODE.landed) this.hide();
        }, this);
    }
    
    upKeyPressed(){
        // Later
    }
    
    downKeyPressed(){
        // Later
    }
    
    leftKeyPressed(){
        this.selectPreviousService();
    }
    
    rightKeyPressed(){
        this.selectNextService();
    }
    
    selectNextService(){
        if(this.serviceSelectedIndex==null){
            this.serviceSelectedIndex = 0;
            return;
        }

        this.serviceSelectedIndex++;
        this.serviceSelectedIndex = this.serviceSelectedIndex.clamp(0,this.destination.services.length-1);
    
        this.layout();
    }
    
    selectPreviousService(){
        if(this.serviceSelectedIndex==null){
            this.serviceSelectedIndex = 0;
            return;
        }
        
        this.serviceSelectedIndex--;
        this.serviceSelectedIndex = this.serviceSelectedIndex.clamp(0,this.destination.services.length-1);
    
        this.layout();
    }
    
    clickSelectedService(){
        
    }
    
    setupScreen(){
        // BG
        this.bg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.panelBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));

        // Background
        this.bg.clear();
        this.bg.beginFill(this.styles.darkGrey);
        this.bg.drawRect(0,0,
            this.game.camera.width,
            this.game.camera.height*2,
            0
        )
        this.bg.endFill();

        // Panel
        this.panelHeight = this.game.scale.height-126;
        this.panelTop = 94;
        this.panelBg.clear();
        this.panelBg.beginFill(this.styles.midGrey);
        this.panelBg.drawRoundedRect(36,this.panelTop,
            this.game.camera.width-(36*2),
            this.panelHeight,
            this.styles.borderRadius
        )
        this.panelBg.endFill();

        
        // Title / Details / Date
        this.destDesc = this.game.add.text(
            36,24, 
            '', 
            this.styles.smallGreyText, 
            this.screen
        )
        this.destDesc.resolution = this.textResolution;

        this.destName = this.game.add.text(
            36,43, 
            '', 
            this.styles.title, 
            this.screen
        )
        this.destName.resolution = this.textResolution;
 
        this.destBreadcrumb = this.game.add.text(
            -1,43, 
            '', 
            this.styles.title, 
            this.screen
        )
        this.destBreadcrumb.tint = 0x948f9c;
        this.destBreadcrumb.resolution = this.textResolution;

        
        this.currentDate = this.game.add.text(
            36,68, 
            '', 
            this.styles.smallWhiteText, 
            this.screen
        )
        this.currentDate.resolution = this.textResolution;

        // Exit button
        this.exitButton = new Button(this.game,'exit-button',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        { font: `${13+this.fontSizeOffset}px ${FONT}`, fill: '#FFFFFF', align: 'center'}
        );
        this.exitButton.buttonX = this.game.camera.width - this.exitButton.buttonWidth - 36;
        this.exitButton.buttonY = 24;
        this.exitButton.text = "Takeoff (L)";
        this.exitButton.color = this.styles.red;
        this.screen.add(this.exitButton);

        // Credits
        this.creditsLabel = this.game.add.text(
            this.game.camera.width-36,68, 
            '', 
            this.styles.baseText, 
            this.screen
        );
        this.creditsLabel.anchor.set(1,0);
        this.creditsLabel.addColor('#948f9c', 0);
        this.creditsLabel.addColor('#FFFFFF', 7);
        this.creditsLabel.resolution = this.textResolution;

        // Photo
        this.picture = this.game.add.sprite(36, this.panelTop, 'planet-arrival-1');
        var cropRect = new Phaser.Rectangle(0, 0, 300, this.panelHeight);
        this.picture.crop(cropRect);
        this.screen.add(this.picture);
        this.innerColX = this.picture.width+36+24

        // Message
        this.innerColWidth = this.game.camera.width - (this.picture.width+36+24) - 36-24; 
        this.welcomeText = this.game.add.text(
            this.innerColX,this.panelTop+16, 
            '', 
            { font: ` ${12+this.fontSizeOffset}px Fira Code`, fill: '#FFFFFF', align: 'left', wordWrap: true, wordWrapWidth: this.innerColWidth }, 
            this.screen
        );
        this.welcomeText.lineSpacing = -4;
        this.welcomeText.resolution = this.textResolution;        
    }
    
    layout(){        
        this.cleanup();
        
        console.log(this.serviceSelectedIndex);
        
        // Description
        this.destDesc.setText(this.destination.description);

        // Name
        this.destName.setText(this.destination.name);
        
        // Breadcrumb
        this.destBreadcrumb.setText('');
        this.destBreadcrumb.alpha = 0;
        this.destBreadcrumb.x = this.destName.x + this.destName.width + 10
        
        // Date
        this.currentDate.setText(moment(this.game.starDate).format('MMMM Do YYYY, HH:mm'));

        // Text
        this.welcomeText.setText(this.destination.welcomeText);      
    
        // Services Buttons/
        this.controlGroup.visible = true;
        var servicesIndex = 0;
        var serviceRow = 1;
        for (let service of this.destination.services) {
            var serviceButton = new TwoLineButton(this.game,'service-button');
            serviceButton.screen = this;
            serviceButton.service = service;

            if(servicesIndex==this.serviceSelectedIndex){
                serviceButton.over = true;
            }

            serviceButton.callbacks = {
                onDown : function() {
                    this.screen.serviceButtonClicked(this);
                }.bind(serviceButton)
            }

            serviceButton.buttonWidth = (this.innerColWidth/2)-8
            if(isEven(servicesIndex)){
                serviceButton.buttonX = this.innerColX;
            } else {
                serviceButton.buttonX = this.innerColX + serviceButton.buttonWidth+16;
            }
            
            serviceButton.buttonY = (this.panelHeight+this.panelTop)-((serviceButton.buttonHeight+16)*serviceRow);
            serviceButton.text = PLANET_SERVICES_TITLE[service];
            serviceButton.subText = PLANET_SERVICES_DESC[service];
            serviceButton.color = this.styles.lightGrey;
            this.controlGroup.add(serviceButton);            
            
            servicesIndex++;
            if(servicesIndex % 2 === 0) serviceRow++;
            this.serviceButtons.push(serviceButton);
        }            

        this.updateCredits();    
    }
        
    serviceButtonClicked(button){
        this.presentScreenForService(button.service)
    }
    
    presentScreenForService(service){
        // Present Screen
        if(service==PLANET_SERVICES.market){
            this.serviceScreens[PLANET_SERVICES.market] = new ExchangeScreen(this.game,this.screen,this.destination);
            this.serviceScreens[PLANET_SERVICES.market].parentScreen = this;
            this.screen.add(this.serviceScreens[PLANET_SERVICES.market].screen);            
        }

        var screenToPresent = this.serviceScreens[service]
        screenToPresent.show();          

        // Update Breadcrumb
        this.destBreadcrumb.setText('/ ' + PLANET_SERVICES_TITLE[service]);
        this.destBreadcrumb.alpha = 0;
        var transition = this.game.add.tween(this.destBreadcrumb).to({alpha: 1}, 600, "Quart.easeOut", true);

        // Disable buttons
        this.controlGroup.forEach(function(control){
            control.sprite.input.enabled = false;
        }, this)
    }

    childScreenWillHide(){
        super.childScreenWillHide();
        this.game.add.tween(this.destBreadcrumb).to({alpha: 0}, 600, "Quart.easeOut", true);

        // Enable buttons
        this.controlGroup.forEach(function(control){
            control.sprite.input.enabled = true;
        }, this)

        this.updateCredits();   
    }
    
    childScreenDidHide(){
        super.childScreenDidHide();
    }
    
    show(){
        super.show();

        this.wrapper.visible = true;
        
        // Arrival Specific 
        this.game.player.stop();                
    }

    didShow(){
        super.didShow();        
        this.game.player.controlMode = CONTROL_MODE.landed;
        this.controlGroup.visible = true;        
    }
    
    hide(){
        super.hide();

        // Arrivial Specific
        this.game.player.ship.takeOff();

        // Wait a second then show where we are.
        game.time.events.add(Phaser.Timer.SECOND * 1, function(){
            this.game.hud.showSystemInfo();
        }, this);
    }

    didHide(){
        super.didHide();
    }
    
    cleanup(){
        for (let button of this.serviceButtons) {
            button.destroy(true);
        }
        
        Object.keys(this.serviceScreens).forEach(function(key,index) {
            var screen = this.serviceScreens[key];
            screen.cleanup();
            screen.screen.destroy(true);
        }.bind(this));
    }
    
    get destination(){
        return this._destination;
    }

    set destination(destination){
        this._destination = destination;
        this.layout();
    }

    updateCredits(){
        this.creditsLabel.setText('CREDITS ' + this.game.player.credits);
    }


}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/inventory.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class InventoryScreen extends GuiScreen {
    constructor(game,group) {
        super(game,group);

        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromBottom;
        
        this.setupScreen();
                
        this.wrapper = group;
        this.wrapper.add(this.screen);
        this.wrapper.fixedToCamera = true;
        this.wrapper.visible = false;

        this.helpTexts = {
            default : '(UP/DOWN) Select Item   (J) Jettison',
            equipment : '(UP/DOWN) Select Item   (J) Jettison   (E) Equip/Unequip',
            consumable : '(UP/DOWN) Select Item   (J) Jettison   (SPACE) Use',
        }

        this.jettisonSound = game.add.audio('jettison');

    }
    
    setupKeys(){
        this.downKey = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);       
        this.downKeyOnUp = function(){
            this.myList.selectNextItem();
            this.update();
        }
        this.downKey.onUp.add(this.downKeyOnUp, this);

        this.upKey = game.input.keyboard.addKey(Phaser.Keyboard.UP);
        this.upKeyOnUp = function(){
            this.myList.selectPreviousItem();
            this.update();
        }
        this.upKey.onUp.add(this.upKeyOnUp, this);

        this.escKey = game.input.keyboard.addKey(Phaser.Keyboard.ESC);
        this.escKeyOnUp = function(){
            this.hide();
        }
        this.escKey.onUp.add(this.escKeyOnUp, this);

        this.iKey = game.input.keyboard.addKey(Phaser.Keyboard.I);
        this.iKeyOnUp = function(){
            this.hide();
        }
        this.iKey.onUp.add(this.iKeyOnUp, this);

        this.eKey = game.input.keyboard.addKey(Phaser.Keyboard.E);
        this.eKeyOnUp = function(){
            this.toggleEquipForSelectedItem();
        }
        this.eKey.onUp.add(this.eKeyOnUp, this);

        this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        this.spaceKeyOnUp = function(){
            this.consumeSelectedItem();
        }
        this.spaceKey.onUp.add(this.spaceKeyOnUp, this);

        this.jKey = game.input.keyboard.addKey(Phaser.Keyboard.J);
        this.jKeyOnUp = function(){
            this.jettisonSelectedItem();
        }
        this.jKey.onUp.add(this.jKeyOnUp, this);
    }
    
    setupScreen(){
        this.screenWidth = this.game.camera.width-this.game.hud.sidebarWidth;

        this.bg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.tabBar = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.bottomBar = this.screen.add(new Phaser.Graphics(this.game.game,0,0));

        // Background
        this.bg.clear();
        this.bg.beginFill(0x111111);
        this.bg.drawRect(0,0,
            this.screenWidth,
            this.game.camera.height*2,
            0
        )
        this.bg.endFill();
        
        // Tab Bar
        this.tabBarHeight = 45;
        this.tabBar.clear();
        this.tabBar.beginFill(0x111111);
        this.tabBar.drawRect(0,0,
            this.screenWidth,
            this.tabBarHeight,
        )
        this.bottomBar.endFill();

        // Tabs
        this.shipTab = new TabItem(this.game,'ship-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.shipTab.buttonX = 0;
        this.shipTab.buttonY = 0;
        this.shipTab.text = "Ship";
        this.screen.add(this.shipTab);
        
        this.inventoryTab = new TabItem(this.game,'inv-tab');
        this.inventoryTab.buttonX = this.shipTab.buttonWidth + 1;
        this.inventoryTab.buttonY = 0;
        this.inventoryTab.text = "Inventory";
        this.inventoryTab.active = true;
        this.screen.add(this.inventoryTab);

        this.mapTab = new TabItem(this.game,'map-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.mapTab.buttonX = this.inventoryTab.buttonX + this.inventoryTab.buttonWidth + 1;
        this.mapTab.buttonY = 0;
        this.mapTab.text = "Map";
        this.screen.add(this.mapTab);

        this.statsTab = new TabItem(this.game,'stats-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.statsTab.buttonX = this.mapTab.buttonX + this.mapTab.buttonWidth + 1;
        this.statsTab.buttonY = 0;
        this.statsTab.text = "Stats";
        this.screen.add(this.statsTab);

        // Bottom Bar
        this.bottomBarHeight = 38;
        this.bottomBar.clear();
        this.bottomBar.beginFill(this.styles.darkGrey);
        this.bottomBar.drawRect(0,this.game.camera.height-this.bottomBarHeight,
            this.screenWidth,
            this.bottomBarHeight+100, // Overlap for animation
        )
        this.bottomBar.endFill();

        this.helpText = this.game.add.text(
            16,this.game.camera.height - 26, 
            '', 
            { font: `12px ${FONT}`, fill: '#929292', align: 'left'},
            this.screen
        )

        // Lists
        this.myList = new GuiInventoryList(this.game,this.screen);
        this.myList.title = 'All Items'
        this.myList.x = 0;
        this.myList.y = this.tabBarHeight;
        this.myList.listWidth = this.screenWidth/2;
        this.myList.listHeight = this.game.camera.height-this.bottomBarHeight-this.tabBarHeight;
        this.myList.itemCursorStyle = INVENTORY_LIST_CURSOR_STYLE.flat;
        this.myList.focus = true;
        this.myList.itemsPerPage = 12;
        this.myList.allowFilter = true;
        this.screen.add(this.myList);

        // Item Info
        // Background
        this.infoMargin = 16;
        this.infoWidth = (this.screenWidth/2)-1;

        this.itemInfoBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.itemInfoTitleBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.infoTitleLabel = this.game.add.text(
            0,0, 
            'Item', 
            { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'},
            this.screen
        )
        this.infoTitleLabel.resolution = 2;

        this.infoSubtitleLabel = this.game.add.text(
            0,0, 
            'Item', 
            { font: `13px ${FONT}`, fill: '#929292', align: 'right'},
            this.screen
        )
        this.infoSubtitleLabel.anchor.set(1,0);
        this.infoSubtitleLabel.resolution = 2;


        this.infoDescription = this.game.add.text(
            0,0, 
            '', 
            { font: `12px Fira Code`, fill: '#FFFFFF', align: 'left', }, 
            this.screen
        );
        this.infoDescription.setStyle({ font: `12px Fira Code`, fill: '#FFFFFF', align: 'left', wordWrap: true, wordWrapWidth: this.infoWidth-(this.infoMargin*2) })
        this.infoDescription.lineSpacing = -4;
        this.infoDescription.resolution = this.textResolution;        
        
        // Props
        this.propsGroup = this.game.add.group();
        this.screen.add(this.propsGroup);
    
        this.update();
    }
    
    layout(){        
        this.cleanup();
    }

    update(){
        this.updateItemInfo();        
    }

    updateItemInfo(){                        
        var infoX = this.myList.x + this.myList.listWidth+1;
        var infoY = 45;

        // Properites
        this.itemInfoBg.clear();
        this.itemInfoTitleBg.clear();
        var infoBgHeight = 100;
        this.propsGroup.removeAll(true);

        if(this.myList.selectedItem){
            // HelpTexts
            this.helpText.setText(this.helpTexts.default);
            if(this.myList.selectedItem.isEquippable) this.helpText.setText(this.helpTexts.equipment);
            if(this.myList.selectedItem.isConsumable) this.helpText.setText(this.helpTexts.consumable);

            // Description
            if(this.myList.selectedItem.description!=undefined){
                this.infoDescription.x = infoX+this.infoMargin;
                this.infoDescription.y = infoY + 40;
                this.infoDescription.setText(this.myList.selectedItem.description)
            } else {
                this.infoDescription.setText('');                
            }

            var props = this.myList.selectedItem.infoFields
            var labels = this.myList.selectedItem.infoFieldLabels

            var propIndex = 0;
            var propLineHeight = 20;
            for (let prop of props) {
                var propY = (propIndex*propLineHeight)+infoY+40+this.infoDescription.height+16;
                
                var propTitle = this.game.add.text(
                    infoX+16,propY, 
                    labels[propIndex], 
                    { font: `13px ${FONT}`, fill: '#929292', align: 'left'},
                    this.propsGroup
                )
                propTitle.resolution = 2;
    
                var value = this.myList.selectedItem[props[propIndex]];
                if(props[propIndex]=='baseValue') value = CREDIT_PREFIX.short + numeral(value).format(`0,0[.]00`);
                if(props[propIndex]=='rarity') value = RARITY_NAMES[this.myList.selectedItem[props[propIndex]]];
                if(props[propIndex]=='storageClass') value = CARGO_STORAGE_CLASS_NAMES[this.myList.selectedItem[props[propIndex]]];
                if(props[propIndex]=='mass') value = this.myList.selectedItem.readableMass;
                if(props[propIndex]=='energyConsumption') value = `${numeral(value).format('0,0')} kW`;
                if(props[propIndex]=='fuelConsumption') value = `${numeral(value).format('0,0.0')} units/sec`;
                if(props[propIndex]=='thrust') value = `${numeral(value).format('0,0')} kN`;
                if(props[propIndex]=='range') value = `${numeral(value).format('0,0')} m`;
                if(props[propIndex]=='capacity') value = `${numeral(value).format('0,0')} kWh`;
                if(props[propIndex]=='fuelCapacity') value = `${numeral(value).format('0,0')} units`;
                if(props[propIndex]=='fuelAmount') value = `${numeral(value).format('0,0')} units`;
    
                var propValue = this.game.add.text(
                    infoX+this.infoWidth-16,propY,
                    value, 
                    { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'right'},
                    this.propsGroup
                )
                if(props[propIndex]=='rarity') propValue.tint = RARITY_COLOR[this.myList.selectedItem[props[propIndex]]];
                propValue.anchor.set(1,0);
                propValue.resolution = 2;
                
                propIndex++;
            };
            infoBgHeight = this.game.camera.height - 83;            
            this.infoTitleLabel.x = infoX+16;
            this.infoTitleLabel.y = infoY+8;
            this.infoTitleLabel.visible = true;
            this.infoTitleLabel.setText(this.myList.selectedItem.name);

            this.infoSubtitleLabel.x = infoX+this.infoWidth-16;
            this.infoSubtitleLabel.y = this.infoTitleLabel.y;

            if(this.myList.selectedItem.type!=undefined) this.infoSubtitleLabel.setText(this.myList.selectedItem.type);
            if(this.myList.selectedItem.equipped) this.infoSubtitleLabel.setText('Equipped');
            if(!this.myList.selectedItem.equipped) this.infoSubtitleLabel.setText('Unequipped');
            if(this.myList.selectedItem.isConsumable) this.infoSubtitleLabel.setText('Consumable');
            
        } else {
            // Item Empty
            this.infoTitleLabel.visible = false;
            this.infoDescription.setText('');
            infoBgHeight = this.game.camera.height-83;
        }

        this.itemInfoBg.beginFill(0x3F3C46);
        this.itemInfoBg.drawRect(infoX,infoY,
            this.infoWidth,
            infoBgHeight,
            0
        )
        this.itemInfoBg.endFill();

        this.itemInfoTitleBg.beginFill(0x4D4B56);
        this.itemInfoTitleBg.drawRect(infoX,infoY,
            this.itemInfoBg.width,
            30,
        )
        this.itemInfoTitleBg.endFill(); 
    }
    
    toggleEquipForSelectedItem(){
        if(this.myList.selectedItem.isEquippable){
            if(this.myList.selectedItem.equipped){
               this.myList.selectedItem.unequip(); 
            } else {
               this.myList.selectedItem.equipTo(this.game.player.ship); 
            }
        }
        this.update();
        this.myList.layout();
    }
    
    consumeSelectedItem(){        
        if(this.myList.selectedItem.isConsumable){
           this.myList.selectedItem.consume(); 
        }
        this.refreshItems();
        this.myList.layout();
    }

    jettisonSelectedItem(){        
        this.jettisonSound.play();
        this.myList.selectedItem.remove();         
        
        this.refreshItems();
        this.myList.layout();
    }
    
    refreshItems(){
        this.myList.items = this.game.player.ship.inventory;
    }

        
    show(){
        super.show();

        this.refreshItems();
        this.wrapper.visible = true;
        this.setupKeys();
        this.update();
    }

    didShow(){
        super.didShow();        
        this.game.player.controlMode = CONTROL_MODE.inventory;
    }
    
    hide(){
        super.hide();
        this.cleanup();
        game.time.events.add(Phaser.Timer.SECOND * 1, function(){
            this.game.hud.showSystemInfo();
        }, this);
    }

    didHide(){
        super.didHide();
    }
    
    cleanup(){
        this.escKey.onUp.remove(this.escKeyOnUp, this);
        this.upKey.onUp.remove(this.upKeyOnUp, this);
        this.downKey.onUp.remove(this.downKeyOnUp, this);
        this.iKey.onUp.remove(this.iKeyOnUp, this);
        this.eKey.onUp.remove(this.eKeyOnUp, this);
        this.spaceKey.onUp.remove(this.spaceKeyOnUp, this);
        this.jKey.onUp.remove(this.jKeyOnUp, this);
    }    
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/exchange.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class ExchangeScreen extends GuiScreen {
    constructor(game,group,destination) {
        super(game,group);

        this.destination = destination;
        this.serviceButtons = [];
      
        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromRight;

        this.setupKeys();

        this.insetX = 32;
        this.insetBottom = 32;
        this.top = 94;

        this.helpTexts = {
            default : '(UP/DOWN) Select Item   (SPACEBAR) Buy/Sell Item   (TAB) Switch List   (RETURN) Accept',
            shift : '(UP/DOWN) Select Item   (SHIFT+SPACEBAR) Buy/Sell All   (TAB) Switch List   (RETURN) Accept',
        }

        // BG
        this.bg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.panelBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));

        // Background
        this.bg.clear();
        this.bg.beginFill(this.styles.darkGrey);
        this.bg.drawRect(0,this.top,
            this.game.camera.width,
            this.game.camera.height,
            0
        )
        this.bg.endFill();
        
        // Lists
        this.myList = new GuiInventoryList(this.game,this.screen);
        this.myList.title = 'My Ship'
        this.myList.x = this.insetX;
        this.myList.y = this.top;
        this.myList.itemCursorStyle = INVENTORY_LIST_CURSOR_STYLE.right;
        
        this.exchangeList = new GuiInventoryList(this.game);
        this.exchangeList.title =  `${this.destination.name} ${PLANET_SERVICES_TITLE.market}` 
        this.exchangeList.x = (this.game.camera.width - this.insetX) - this.exchangeList.listWidth; 
        this.exchangeList.y = this.top;
        this.exchangeList.itemCursorStyle = INVENTORY_LIST_CURSOR_STYLE.left;
        
        this.screen.add(this.myList);
        this.screen.add(this.exchangeList);
        
        this.myListDelta = []
        this.exchangeListDelta = [];

        this.activeList = this.myList;
        this.activeList.focus = true;

        // Item Info
        // Background
        this.itemInfoBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.itemInfoTitleBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.infoTitleLabel = this.game.add.text(
            0,0, 
            'Item', 
            { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'},
            this.screen
        )
        this.infoTitleLabel.resolution = 2;
        
        // Props
        this.propsGroup = this.game.add.group();
        this.screen.add(this.propsGroup);

        // Back Button
        this.backButton = new Button(this.game,'back-button',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        { font: `${13+this.fontSizeOffset}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'center'}
        );
        this.backButton.buttonX = this.insetX;
        this.backButton.buttonY = this.myList.listHeight+this.top+16;
        this.backButton.text = `${String.fromCharCode(0x2190)} Back`;
        this.screen.add(this.backButton);

        // Help Text
        this.helpText = this.game.add.text(
            this.insetX,this.game.camera.height - this.insetBottom-16, 
            this.helpTexts.default, 
            { font: `12px ${FONT}`, fill: '#929292', align: 'left'},
            this.screen
        )
        this.helpText.resolution = 2;


        // Sale Amount
        // Background
        this.saleAmountBg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.saleTotalLabel = this.game.add.text(
            0,0,
            'Total', 
            { font: `14px ${FONT}`, fill: '#929292', align: 'left'},
            this.screen
        )
        this.saleTotalLabel.resolution = 2;

        this.saleAmountLabel = this.game.add.text(
            0,0,
            '', 
            { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'left'},
            this.screen
        )
        this.saleAmountLabel.anchor.set(1,0);
        this.saleAmountLabel.resolution = 2;

        this.acceptButton = new Button(this.game,'accept-button',{
            onReleased : function() {
                this.acceptTransaction();
            }.bind(this),
        },
        { font: `${13+this.fontSizeOffset}px ${this.fontFamily}`, fill: '#FFFFFF', align: 'center'}
        );
        this.screen.add(this.acceptButton);
    }

    update(){
        super.update();
        this.updateItemInfo();        
    }
    
    updateSaleAmount(){
        var saleAmountMargin = 16;
        var saleAmountHeight = 70;
        var saleAmountX = this.myList.x+this.myList.listWidth+saleAmountMargin;
        var saleAmountY = this.exchangeList.listHeight + this.top - saleAmountHeight;
        var saleAmountWidth = this.game.camera.width-(this.exchangeList.listWidth*2)-(this.insetX*2)-(saleAmountMargin*2);
            
        // Labels
        this.saleTotalLabel.x = saleAmountX + 8;
        this.saleTotalLabel.y = saleAmountY + 8;

        this.saleAmountLabel.x = saleAmountX - 8 + saleAmountWidth;
        this.saleAmountLabel.y = saleAmountY + 8;
        
        var saleAmount = this.calculateSaleAmount();

        var formattedSaleAmount = CREDIT_PREFIX.short + numeral(Math.abs(saleAmount)).format('0,0');
        if(saleAmount>0) formattedSaleAmount = '+' + formattedSaleAmount
        if(saleAmount<0) formattedSaleAmount = '-' + formattedSaleAmount
        if(saleAmount!=0){
            // BG
            this.saleAmountBg.clear();
            this.saleAmountBg.beginFill(0x3F3C46);
            this.saleAmountBg.drawRect(saleAmountX,saleAmountY,
                saleAmountWidth,
                saleAmountHeight,
                0
            )
            this.saleAmountBg.endFill();
            this.saleTotalLabel.visible = true;
            this.saleAmountBg.visible = true;
            this.acceptButton.visible = true;
        } else {
            this.saleTotalLabel.visible = false;
            this.saleAmountBg.visible = false;
            this.acceptButton.visible = false;
        }
        
        // Is there enough room?
        this.hasEnoughSpace = true;
        this.massNeeded = {};
        if(this.myListDelta.length>0){
            // Zero each type of storage
            Object.keys(CARGO_STORAGE_CLASS).forEach(function(key,index) {
                this.massNeeded[key] = 0
            }.bind(this));

            // Add mass per storage class
            for (let item of this.myListDelta) {
                this.massNeeded[item.storageClass] += this.massNeeded[item.storageClass] + item.mass;
            }

            // Verify for each storage class there is enough room
            for (let storageClass of Object.keys(CARGO_STORAGE_CLASS)) {
                var massNeeded = this.massNeeded[storageClass];
                if(massNeeded>0){
                    if(!this.game.player.ship.hasEnoughSpaceForItemOfStorageClassWithMass(storageClass,massNeeded))
                        this.hasEnoughSpace = false;
                }
            }
        }

        // Button setup
        this.acceptButton.buttonX = saleAmountX + 8;
        this.acceptButton.buttonY = saleAmountY + 8 + 24;
        this.acceptButton.buttonWidth = saleAmountWidth-16;

        if(this.hasEnoughSpace){
            this.acceptButton.text = `Accept ${formattedSaleAmount}`;
            this.acceptButton.color = this.styles.green;
        } else {
            this.acceptButton.text = `Not Enough Space`;
            this.acceptButton.color = this.styles.red;
        }
        

        
    }
    
    calculateSaleAmount(){
        var myListDeltaTotal = 0;
        var exchangeListDeltaTotal = 0;
        for (let item of this.myListDelta) {
            if(item.containedIn == this.destination){
                myListDeltaTotal += item.buyValue
            } else {
                myListDeltaTotal += item.baseValue
            }               
        } 

        for (let item of this.exchangeListDelta) {
            if(item.containedIn == this.destination){
                exchangeListDeltaTotal += item.buyValue;
            } else {
                exchangeListDeltaTotal += item.baseValue;
            }               
        } 


        return exchangeListDeltaTotal - myListDeltaTotal;        
    }
    
    updateItemInfo(){
        var item = this.activeList.selectedItem;
                        
        var infoMargin = 16;
        var infoWidth = this.game.camera.width-(this.exchangeList.listWidth*2)-(this.insetX*2)-(infoMargin*2)
        var infoX = this.myList.x+this.myList.listWidth+infoMargin;
        var infoY = this.top;

        // Properites
        this.itemInfoBg.clear();
        this.itemInfoTitleBg.clear();
        var infoBgHeight = 100;
        this.propsGroup.removeAll(true);
        if(item){
            var props = ['baseValue','mass','rarity','storageClass'];
            var labels = ['Value','Weight','Rarity','Container'];
            var propIndex = 0;
            var propLineHeight = 20;
            for (let prop of props) {
                var propY = (propIndex*propLineHeight)+infoY+40;
                if(item[prop]==undefined) return;
                
                var propTitle = this.game.add.text(
                    infoX+8,propY, 
                    labels[propIndex], 
                    { font: `13px ${FONT}`, fill: '#929292', align: 'left'},
                    this.propsGroup
                )
                propTitle.resolution = 2;
    
                var value = item[props[propIndex]];
                if(props[propIndex]=='baseValue') {
                    if(item.containedIn == this.destination){
                        // Prices are higher when buying ;)
                        value = CREDIT_PREFIX.short + numeral(item.buyValue).format(`0,0[.]00`);
                    } else {
                        value = CREDIT_PREFIX.short + numeral(value).format(`0,0[.]00`);
                    }   
                }
                if(props[propIndex]=='rarity') value = RARITY_NAMES[item[props[propIndex]]];
                if(props[propIndex]=='storageClass') value = CARGO_STORAGE_CLASS_NAMES[item[props[propIndex]]];
                if(props[propIndex]=='mass') value = item.readableMass;
    
                var propValue = this.game.add.text(
                    infoX+infoWidth-8,propY,
                    value, 
                    { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'right'},
                    this.propsGroup
                )
                if(props[propIndex]=='rarity') propValue.tint = RARITY_COLOR[item[props[propIndex]]];
                propValue.anchor.set(1,0);
                propValue.resolution = 2;
                
                propIndex++;
            };
            infoBgHeight = propIndex*propLineHeight+30+16

            this.itemInfoBg.beginFill(0x3F3C46);
            this.itemInfoBg.drawRect(infoX,infoY,
                infoWidth,
                infoBgHeight,
                0
            )
            this.itemInfoBg.endFill();
    
            this.itemInfoTitleBg.beginFill(0x4D4B56);
            this.itemInfoTitleBg.drawRect(infoX,infoY,
                this.itemInfoBg.width,
                30,
            )
            this.itemInfoTitleBg.endFill(); 
            
            this.infoTitleLabel.x = infoX+8;
            this.infoTitleLabel.y = infoY+8;
            this.infoTitleLabel.visible = true;
            this.infoTitleLabel.setText(item.name);
        } else {
            // Item Empty
            this.infoTitleLabel.visible = false;
        }

        this.updateSaleAmount();
    }
    
    transferAllOfSelectedItem(){
        var amount = this.activeList.amountOfSelectedItem;
        for (var i = 0; i < amount; i++) { 
            this.transferSelectedItem();
        }
    }
    
    transferSelectedItem(){
        var item = this.activeList.selectedItem; 
               
        if(item) {
            if(this.activeList==this.myList){
                this.exchangeList.addItem(item);
                this.exchangeListDelta.push(item);
                
                this.myList.removeItem(item);

                var index = this.myListDelta.indexOf(item);
                if (index > -1) this.myListDelta.splice(index, 1);
            }
            if(this.activeList==this.exchangeList){
                this.myList.addItem(item);
                this.myListDelta.push(item);
                
                this.exchangeList.removeItem(item);

                var index = this.exchangeListDelta.indexOf(item);
                if (index > -1) this.exchangeListDelta.splice(index, 1);
            }
        }        
    }
    
    toggleActiveList(){
        this.activeList.focus = false;
        if(this.activeList==this.myList){
            this.activeList=this.exchangeList
        } else {
            this.activeList=this.myList            
        }
        this.activeList.focus = true;
        this.update();
    }
    
    acceptTransaction(){
        if(!this.hasEnoughSpace) {
            this.showNotEnoughSpaceNotification();
            return;
        }

        var saleAmount = this.calculateSaleAmount();
        if(saleAmount!=0){
            if(saleAmount<0){
                // Buy. We will deduct credits.
                if(this.game.player.debitCredits(Math.abs(saleAmount))){
                    // Valid transaction
                    this.completeTransaction(saleAmount);
                } else {
                    // Not Enough.
                    this.showNotEnoughCreditsNotification();
                }
            }
            if(saleAmount>0){
                // Sell. We will add credits.
                this.game.player.addCredits(Math.abs(saleAmount))
                this.completeTransaction(saleAmount);
            }
        }
    }

    completeTransaction(saleAmount){
        
        var myItems = [].concat.apply([], this.myList.items);
        this.game.player.ship.emptyCargoHold();        
        for (let item of myItems) {
            this.game.player.ship.addItemsToInventory(1,item);
        }
    
        var destinationItems = [].concat.apply([], this.exchangeList.items);
        this.destination.emptyCargoHold();
        for (let item of destinationItems) {
            item.equipped = false;
            this.destination.addItemsToInventory(1,item);
        }
        
        // Clear deltas
        this.myListDelta = [];
        this.exchangeListDelta = [];
        
        // Notify
        this.showPurchaseNotification(saleAmount);

        // Cleanup
        this.hide();        
    }
    

    showPurchaseNotification(amount){
        var notification = new Notification(this.game);
        notification.text = 'Transaction Complete';
        notification.subText = 'Items have been transferred.';
        notification.accessoryText = numeral(amount).format('$0,0[.]00');
        notification.show();
    }

    showNotEnoughCreditsNotification(){
        var notification = new Notification(this.game);
        notification.text = 'Not Enough Credits';
        notification.subText = 'Cannot accept this transaction.';
        notification.show();
    }

    showNotEnoughSpaceNotification(){
        var notification = new Notification(this.game);
        notification.text = 'Not Enough Cargo Space';
        notification.subText = 'Free up space in your cargo hold.';
        notification.show();
    }
    
    setupKeys(){
        this.downKey = game.input.keyboard.addKey(Phaser.Keyboard.DOWN);
        this.upKey = game.input.keyboard.addKey(Phaser.Keyboard.UP);
        this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        this.tabKey = game.input.keyboard.addKey(Phaser.Keyboard.TAB);
        this.enterKey = game.input.keyboard.addKey(Phaser.Keyboard.ENTER);
        this.shiftKey = game.input.keyboard.addKey(Phaser.Keyboard.SHIFT);

        this.downKeyOnUp = function(){
            this.activeList.selectNextItem();
            this.update();
        }
        this.downKey.onUp.add(this.downKeyOnUp, this);

        this.upKeyOnUp = function(){
            this.activeList.selectPreviousItem();
            this.update();
        }
        this.upKey.onUp.add(this.upKeyOnUp, this);

        this.spaceKeyOnUp = function(){
            if(this.spaceKey.shiftKey){
                this.transferAllOfSelectedItem();
            } else {
                this.transferSelectedItem();
            }
            this.update();
        }
        this.spaceKey.onUp.add(this.spaceKeyOnUp, this);

        this.tabKeyOnUp = function(){
            this.toggleActiveList();
            this.update();
        }
        this.tabKey.onUp.add(this.tabKeyOnUp, this);

        this.enterKeyOnUp = function(){
            this.acceptTransaction();
            this.update();
        }
        this.enterKey.onUp.add(this.enterKeyOnUp, this);

        // Help Text Changes with shift key
        this.shiftKeyOnDown = function(){
            this.helpText.setText(this.helpTexts.shift)
        }
        this.shiftKey.onDown.add(this.shiftKeyOnDown, this);
        this.shiftKeyOnUp = function(){
            this.helpText.setText(this.helpTexts.default);
        }
        this.shiftKey.onUp.add(this.shiftKeyOnUp, this);
    }
        
    layout(){        
        this.cleanup();
    }
    
    show(){
        super.show();

        this.myList.items = this.game.player.ship.inventory.slice(0);
        this.exchangeList.items = this.destination.inventory.slice(0);

        this.update();        
    }

    didShow(){
        super.didShow();        

        this.game.player.controlMode = CONTROL_MODE.exchange;
    }
    
    hide(){
        super.hide();
    }

    didHide(){
        super.didHide();
    }    
    
    cleanup(){
        this.downKey.onUp.remove(this.downKeyOnUp, this);
        this.upKey.onUp.remove(this.upKeyOnUp, this);
        this.spaceKey.onUp.remove(this.spaceKeyOnUp, this);
        this.tabKey.onUp.remove(this.tabKeyOnUp, this);
        this.enterKey.onUp.remove(this.enterKeyOnUp, this);

        this.shiftKey.onUp.remove(this.shiftKeyOnUp, this);
        this.shiftKey.onDown.remove(this.shiftKeyOnDown, this);
   }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/button.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Button extends Phaser.Group {
    constructor(game,key,callbacks,textStyle = null) {
        super(game.game);
        this.phaserGame = game.game;
        this.callbacks = callbacks;
            
        this.bg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.label = this.phaserGame.add.text(
            0,0, 
            this._text, 
            this.buttonTextStyle,
            this
        )
        this.label.resolution = 2;
        this.label.anchor.set(0.5)

        this.subLabel = this.phaserGame.add.text(
            0,0, 
            this._subText, 
            this.buttonTextStyle,
            this
        )
        this.subLabel.resolution = 2;
        this.subLabel.anchor.set(0.5)

        this._text = '';
        this._subText = '';
        this._buttonX = 0;
        this._buttonY = 0;
        this._color = 0x4d4b56;

        this.buttonWidth = 100;
        this.buttonHeight = 27;
        this.lineHeight = 3;
        this.padding = 8;

        this.key = 'button_'+key;

        this.buttonTextStyle = textStyle || { font: `12px ${FONT}`, fill: '#FFFFFF', align: 'center'};

        this.sprite = this.create(this.buttonX,this.buttonY,'null') 
        this.sprite.inputEnabled = true;
        this.sprite.events.onInputUp.add(this.onReleased, this);
        this.sprite.events.onInputDown.add(this.onDown, this);
        this.sprite.events.onInputOver.add(this.onOver, this);
        this.sprite.events.onInputOut.add(this.onOut, this);
    }
    
    onOver(){
        this.over = true;   
        this.layout();
    }

    onOut(){
        this.over = false;
        this.layout();
    }
    
    onDown() {
        if(this.callbacks.onDown) this.callbacks.onDown(this);
    }

    onReleased() {
        if(this.callbacks.onReleased) this.callbacks.onReleased(this);
    }
    
    set buttonX(x){
        this._buttonX = x
        this.layout();
    }

    set buttonY(y){
        this._buttonY = y
        this.layout();
    }

    get buttonX(){
        return this._buttonX;
    }

    get buttonY(){
        return this._buttonY;
    }

    set text(text){
        this._text = text;
        this.layout();
    }
    
    get text(){
        return this._text;
    }

    set subText(subText){
        this._subText = subText;
        this.layout();
    }
    
    get subText(){
        return this._subText;
    }

    set color(color){
        this._color = color;
        this.layout();
    }
    
    get color(){
        return this._color;
    }
        
    layout(){
        this.bg.clear();
        if(this.over){
            var c = tinycolor(this._color.toString(16)).darken().toHex();
            this.bg.beginFill(parseInt(c,16));
        } else {
            this.bg.beginFill(this.color);
        }
        this.bg.drawRoundedRect(this.buttonX,this.buttonY,
            this.buttonWidth,
            this.buttonHeight,
            5
        )
        this.bg.endFill();  

        this.sprite.width = this.buttonWidth;
        this.sprite.height = this.buttonHeight;
        this.sprite.x = this.buttonX;
        this.sprite.y = this.buttonY;
        
        this.label.x = this.buttonX+this.buttonWidth/2;
        this.label.y = this.buttonY+this.buttonHeight/2+this.lineHeight
        this.label.setStyle(this.buttonTextStyle)
        this.label.setText(this.text);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/tabItem.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class TabItem extends Phaser.Group {
    constructor(game,key,callbacks,textStyle = null) {
        super(game.game);
        this.phaserGame = game.game;
        this.callbacks = callbacks;
            
        this.bg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.label = this.phaserGame.add.text(
            0,0, 
            this._text, 
            this.buttonTextStyle,
            this
        )
        this.label.resolution = 2;
        this.label.anchor.set(0.5)

        this._text = '';
        this._active = false;
        this._buttonX = 0;
        this._buttonY = 0;
        this.color = 0x282731;
        this.activeColor = 0x3F3C46;

        this.buttonWidth = 100;
        this.buttonHeight = 45;
        this.lineHeight = 3;
        this.padding = 8;

        this.key = 'tab_item'+key;

        this.buttonTextStyle = textStyle || { font: `14px ${FONT}`, fill: '#FFFFFF', align: 'center'};

        this.sprite = this.create(this.buttonX,this.buttonY,'null') 
        this.sprite.inputEnabled = true;
        this.sprite.events.onInputUp.add(this.onReleased, this);
        this.sprite.events.onInputDown.add(this.onDown, this);
        this.sprite.events.onInputOver.add(this.onOver, this);
        this.sprite.events.onInputOut.add(this.onOut, this);
    }
    
    onOver(){
        this.over = true;   
        this.layout();
    }

    onOut(){
        this.over = false;
        this.layout();
    }
    
    onDown() {
        if(this.callbacks.onDown) this.callbacks.onDown(this);
    }

    onReleased() {
        if(this.callbacks.onReleased) this.callbacks.onReleased(this);
    }
    
    set buttonX(x){
        this._buttonX = x
        this.layout();
    }

    set buttonY(y){
        this._buttonY = y
        this.layout();
    }

    get buttonX(){
        return this._buttonX;
    }

    get buttonY(){
        return this._buttonY;
    }

    set text(text){
        this._text = text;
        this.layout();
    }
    
    get text(){
        return this._text;
    }

    set active(active){
        this._active = active;
        this.layout();
    }
    
    get active(){
        return this._active;
    }
        
    layout(){
        this.bg.clear();
        if(!this.active){
            if(this.over){
                this.bg.beginFill(this.activeColor);
            } else {
                this.bg.beginFill(this.color);
            }            
        } else {
            this.bg.beginFill(this.activeColor);
        }

        this.bg.drawRect(this.buttonX,this.buttonY,
            this.buttonWidth,
            this.buttonHeight,
        )
        this.bg.endFill();  

        this.sprite.width = this.buttonWidth;
        this.sprite.height = this.buttonHeight;
        this.sprite.x = this.buttonX;
        this.sprite.y = this.buttonY;
        
        this.label.x = this.buttonX+this.buttonWidth/2;
        this.label.y = this.buttonY+this.buttonHeight/2+this.lineHeight
        this.label.setStyle(this.buttonTextStyle)
        this.label.setText(this.text);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/twoLineButton.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class TwoLineButton extends Button {
    constructor(game,key,callbacks,textStyle = null) {        
        super(game,key,callbacks,textStyle);
        this.buttonHeight = 50;
    }
            
    layout(){
        this.bg.clear();
        if(this.over){
            var c = tinycolor(this._color.toString(16)).darken().toHex();
            this.bg.beginFill(parseInt(c,16));
        } else {
            this.bg.beginFill(this.color);
        }
        this.bg.drawRoundedRect(this.buttonX,this.buttonY,
            this.buttonWidth,
            this.buttonHeight,
            5
        )
        this.bg.endFill();  

        this.sprite.width = this.buttonWidth;
        this.sprite.height = this.buttonHeight;
        this.sprite.x = this.buttonX;
        this.sprite.y = this.buttonY;
        
        this.label.x = this.buttonX+this.padding;
        this.label.y = this.buttonY+this.padding;
        this.label.setStyle({ font: `14px ${FONT}`, fill: '#FFFFFF', align: 'left'})
        this.label.setText(this.text);
        this.label.anchor.set(0);

        this.subLabel.x = this.buttonX+this.padding;
        this.subLabel.y = this.buttonY+this.buttonHeight/2+this.lineHeight
        this.subLabel.setStyle({ font: `11px ${FONT}`, fill: '#948f9c', align: 'left'})
        this.subLabel.setText(this.subText);
        this.subLabel.anchor.set(0);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/notification.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Notification extends Phaser.Group {
    constructor(game) {
        super(game.game);
        this.phaserGame = game.game;
        game.notificationGroup.add(this)
        
        this.sound = game.add.audio('success');

        this.buttonTextStyle = {font: `12px ${FONT}`, fill: '#FFFFFF', align: 'center'};

        this.bg2 = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.bg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
                
        this.label = this.phaserGame.add.text(
            0,0, 
            '', 
            this.buttonTextStyle,
            this
        )
        this.label.resolution = 2;

        this.subLabel = this.phaserGame.add.text(
            0,0, 
            '', 
            this.buttonTextStyle,
            this
        )
        this.subLabel.resolution = 2;

        this.accessoryLabel = this.phaserGame.add.text(
            0,0, 
            '', 
            this.buttonTextStyle,
            this
        )
        this.accessoryLabel.resolution = 2;

        this._text = '';
        this._subText = '';
        this._accessoryText = '';
        this._color = 0x4d4b56;

        this.notificationWidth = 250;
        this.notificationHeight = 50;
        this.lineHeight = 3;
        this.padding = 8;

        this._notificationX = (this.game.camera.width/2)-(this.notificationWidth/2);
        this._notificationY = 0;
    }

    set text(text){
        this._text = text;
        this.layout();
    }
    
    get text(){
        return this._text;
    }

    set subText(subText){
        this._subText = subText;
        this.layout();
    }
    
    get subText(){
        return this._subText;
    }

    set accessoryText(accessoryText){
        this._accessoryText = accessoryText;
        this.layout();
    }
    
    get accessoryText(){
        return this._accessoryText;
    }

    show(){
        var delay = 3000;
        
        var fadeIn = this.game.add.tween(this).to( { alpha: 1 }, 300, "Quart.easeOut", false);
    	var moveUp = this.game.add.tween(this).to( { y: '+'+this.notificationHeight/2 }, 300, "Quart.easeOut", true);
        var fadeOut = this.game.add.tween(this).to( { alpha: 0 }, 300, "Quart.easeOut", false, delay);
    
        fadeIn.chain(fadeOut);
        fadeIn.start();

        game.time.events.add(Phaser.Timer.SECOND * 5, this.destroy, this);
        
        this.sound.play();
    }

    destroyObject(){
        this.destroy();        
    } 

    layout(){
        this.bg2.clear();
        this.bg2.beginFill(0x948f9c);
        this.bg2.drawRoundedRect(this._notificationX-1,this._notificationY-1,
            this.notificationWidth+2,
            this.notificationHeight+2,
            5
        )
        this.bg2.endFill();  

        this.bg.clear();
        this.bg.beginFill(this._color);
        this.bg.drawRoundedRect(this._notificationX,this._notificationY,
            this.notificationWidth,
            this.notificationHeight,
            5
        )
        this.bg.endFill();  

        this.label.x = this._notificationX+this.padding;
        this.label.y = this._notificationY+this.padding;
        this.label.setStyle({ font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'})
        this.label.setText(this.text);
        this.label.anchor.set(0);

        this.subLabel.x = this._notificationX+this.padding;
        this.subLabel.y = this._notificationY+this.padding+20;
        this.subLabel.setStyle({ font: `11px ${FONT}`, fill: '#FFFFFF', align: 'left'})
        this.subLabel.setText(this.subText);
        this.subLabel.anchor.set(0);

        this.accessoryLabel.x = this._notificationX + this.notificationWidth - this.padding;
        this.accessoryLabel.y = this._notificationY + 3 + this.notificationHeight/2;
        this.accessoryLabel.setStyle({ font: `15px ${FONT}`, fill: '#FFFFFF', align: 'right'})
        this.accessoryLabel.setText(this.accessoryText);
        this.accessoryLabel.anchor.set(1,.5);

    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/inventoryList.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class GuiInventoryList extends Phaser.Group {
    constructor(game) {
        super(game.game);
        this.phaserGame = game.game;

        this._title = '';
        this._items = [];
        this._focus = false;
        this._allowFilter = false;
        this._listWidth = 250;

        this.clickSound = game.add.audio('gui_click_soft');
        this.txSound = game.add.audio('gui_click');

        this.selectedItemIndex = 0;
        this.currentPage = 1;
        this.itemsPerPage = 8;

        this.itemCursorHeight = 32;
        this.listHeight = this.itemCursorHeight*(this.itemsPerPage+1);
        this.headerHeight = 30;

        // Background            
        this.bg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        
        // Title Label
        this.titleBg = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.titleLabel = this.phaserGame.add.text(
            16,8, 
            '', 
            { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'},
            this
        )
        this.titleLabel.resolution = 2;

        // Empty Label
        this.emptyLabel = this.phaserGame.add.text(
            0,0,
            'No Items', 
            { font: `16px ${FONT}`, fill: '#948f9c', align: 'center'},
            this
        )
        this.emptyLabel.resolution = 2;
        this.add(this.emptyLabel);

        // Cursor
        this.itemCursor = this.add(new Phaser.Graphics(this.phaserGame,0,0));
        this.setupCursors();
        
        // Lables
        this.labels = this.game.add.group();
        this.add(this.labels);

        this.layout();
    }
    setupCursors(){
        this.itemCursorLeftPolygon = new Phaser.Polygon(
            0,0,
            -8,this.itemCursorHeight/2, 
            0,this.itemCursorHeight,
            0,this.itemCursorHeight,
            this.listWidth,this.itemCursorHeight,
            this.listWidth,0,
        );
        this.itemCursorRightPolygon = new Phaser.Polygon(
            0,0,
            this.listWidth,0, 
            this.listWidth+8,this.itemCursorHeight/2,
            this.listWidth,this.itemCursorHeight,
            0,this.itemCursorHeight,
        );
        this.itemCursorFlatPolygon = new Phaser.Polygon(
            0,0,
            this.listWidth,0, 
            this.listWidth,this.itemCursorHeight,
            0,this.itemCursorHeight,
        );
    }
    set listWidth(listWidth){
        this._listWidth = listWidth;
        this.setupCursors();
        this.layout();
    }

    get listWidth(){
        return this._listWidth;
    }

    set focus(focus){ 
        if(focus) this.clickSound.play();
               
        this._focus = focus
        this.selectedItemIndex = 0;
        this.layout();
    }

    get focus(){
        return this._focus;
    }
        
    set title(title){
        this._title = title
        this.layout();
    }

    get title(){
        return this._title;
    }

    set allowFilter(allowFilter){
        this._allowFilter = allowFilter
        this.layout();
    }

    get allowFilter(){
        return this._allowFilter;
    }

    set items(items){
        this._items = [];
        items.sort((a, b) => a.name.localeCompare(b.name));
        
        this._groupedItems = _.groupBy(items, item => item.key);
        Object.keys(this._groupedItems).forEach(function(key,index) {
            var group = this._groupedItems[key];
            this._items.push(group)
        }.bind(this));

        this.layout();
    }

    get items(){
        return this._items;
    }
    
    get valueOfAllItems(){
        var totalValue = 0;
        if(this._items.length>0){
            for (let item of this._items) {
                totalValue += item.baseValue;
            }
        }
        return totalValue;
    }
    
    addItem(addedItem){
        this.txSound.play();

        var allItems = [].concat.apply([], this._items); // Flatten
        allItems.push(addedItem);
        this.items = allItems;
        
        this.layout();
    }

    removeItem(item){
        // Find + Remove Item
        var allItems = [].concat.apply([], this._items); // Flatten

        var index = allItems.indexOf(item);
        if (index > -1) allItems.splice(index, 1);

        this.items = allItems;        
        
        // Update Selected Index for last item
        if(this.selectedItemIndex == this._items.length) this.selectedItemIndex--;
        
        this.layout();
    }
    
    get selectedItem(){
        if(this.items.length>0) {
            try{
                if(this.currentPage>1){
                    return this._items[(this.selectedItemIndex+this.itemsPerPage*(this.currentPage-1))-2][0]                            
                } else {
                    return this._items[this.selectedItemIndex][0]            
                }                
            } catch(e){
                return null;
            }
            
        } else {
            return null;
        }
    }

    get amountOfSelectedItem(){
        return this._groupedItems[this.selectedItem.key].length;
    }


    get colorForSelectedItem(){
        if(this.selectedItem) return RARITY_COLOR[this.selectedItem.rarity];
    }
    
    selectNextItem(){
        this.clickSound.play();

        try {
            if(this.selectedItem==this.items[this.items.length-1][0]) return;
        } catch(e){}
            
        if(this.selectedItemIndex<=this.items.length) this.selectedItemIndex++;
        if(this.selectedItemIndex>=this.itemsPerPage-1) {
            this.currentPage++;
            this.selectedItemIndex=0;
        }
        
        this.layout();
    }

    selectPreviousItem(){
        this.clickSound.play();
        
        if(this.selectedItemIndex>0) this.selectedItemIndex--;
        if(this.selectedItemIndex==0 && this.currentPage>1){
            this.selectedItemIndex=this.itemsPerPage-2;
            this.currentPage--;
        }
        if(this.selectedItemIndex==0 && this.currentPage==1){
            this.selectedItemIndex=0;
        }
        this.layout();
    }
       
    updateCursorPosition(){
        if(this.currentPage>1 && this.selectedItemIndex==0){
            this.selectedItemIndex++;
        }

        this.itemCursor.clear();
        this.itemCursor.beginFill(this.colorForSelectedItem);
        if(this.itemCursorStyle == INVENTORY_LIST_CURSOR_STYLE.left){
            this.itemCursor.drawPolygon(this.itemCursorLeftPolygon);
        }
        if(this.itemCursorStyle == INVENTORY_LIST_CURSOR_STYLE.right){
            this.itemCursor.drawPolygon(this.itemCursorRightPolygon);
        }
        if(this.itemCursorStyle == INVENTORY_LIST_CURSOR_STYLE.flat){
            this.itemCursor.drawPolygon(this.itemCursorFlatPolygon);
        }
        this.itemCursor.endFill();
        this.itemCursor.visible = true;
    
        this.itemCursor.y = this.itemCursorHeight*this.selectedItemIndex + this.headerHeight;        
    }
    
    layout(){    
        // BG
        this.bg.clear();
        this.bg.beginFill(0x3F3C46);
        this.bg.drawRect(0,0,
            this.listWidth,
            this.listHeight,
        )
        this.bg.endFill();  
                
        // Title
        this.titleBg.clear();
        this.titleBg.beginFill(0x4D4B56);
        this.titleBg.drawRect(0,0,
            this.listWidth,
            this.headerHeight,
        )
        this.titleBg.endFill();

        // Title Label
        if(!this.allowFilter){
            this.titleLabel.setText(this._title);
        } else {
            this.titleLabel.setText(`${String.fromCharCode(0x2039)} ${this._title} ${String.fromCharCode(0x203a)}`);            
        }
        
        // Items
        this.labels.removeAll(true);
        var index = 0;

        // Cursor
        if(this.selectedItem && this.focus){
            this.updateCursorPosition();
        } else {
            this.itemCursor.visible = false;
        }

        // Empty Label
        this.emptyLabel.visible = false;
        if(this.items.length==0) this.emptyLabel.visible = true;
        this.emptyLabel.x = (this.listWidth/2)-(this.emptyLabel.width/2);
        this.emptyLabel.y = (this.listHeight/2)-(this.emptyLabel.height/2);

        var indexStart = (this.currentPage-1)*this.itemsPerPage;
        var indexEnd = this.currentPage*this.itemsPerPage;
        var indexOffset = 0;

        if(this.items.length>this.itemsPerPage){
            //indexEnd--;
        }
        if(this.currentPage>1){
            indexOffset =-2;
            indexStart-=2
            indexEnd-=2;
        }

        // Items
        for (var i = indexStart; i < indexEnd; i++) {
            if(this.items[i]!=undefined){
                var text = this.items[i][0].name

                if(this.items[i][0].isEquippable) {                    
                    if(this.items[i][0].equipped) {
                        text = `${String.fromCharCode(0x25cf)} ${this.items[i][0].name}`;
                    } else {
                        text = `${String.fromCharCode(0x25cb)} ${this.items[i][0].name}`                    
                    }
                }

                if(this.items[i].length>1){
                    text += ` (${this.items[i].length})`;
                }
                
                var arrow = false;
        
                // Arrows
                if(index==this.itemsPerPage-1){
                    text = String.fromCharCode(0x2193);
                    arrow = true;
                }
                if(index==0 && this.currentPage>1){
                    text = String.fromCharCode(0x2191);
                    arrow = true;
                }
                
                // Label
                var itemLabel = this.phaserGame.add.text(
                    16,this.itemCursorHeight*(index) + this.headerHeight + 8, 
                    text, 
                    { font: `13px ${FONT}`, fill: '#FFFFFF', align: 'left'},
                    this
                )
                this.labels.add(itemLabel);
                
                if(index==this.selectedItemIndex && this.focus){
                    itemLabel.addColor("#000000", 0)
                } else {
                    if(!arrow) itemLabel.tint = RARITY_COLOR[this.items[i][0].rarity];
                }
                
                if(!arrow) itemLabel.tint = RARITY_COLOR[this.items[i][0].rarity];
                itemLabel.resolution = 2;
                index++;
            }
       }
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/map.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class GalacticMap extends GameObject{
    constructor(game,options) {
        super(game);
        
        this.x = options.x || 0;
        this.y = options.y || 0;
        this.width = options.width || screenWidth;
        this.height = options.height || screenHeight;
        this.isActive = false;
        
        // Navigation
        this.starSystems = this.game.galaxy.starSystems;
        this.currentPath = [];
        this.navigationTarget = null;
        this.navigationTargetCache = null;
        this.navigationDestination = null;
        this.navArrow = game.make.sprite(0, 0, 'nav-arrow');
        this.navArrow.angle = 90;
        this.navArrow.anchor.set(1,.5);
        
        // Zooming
        this.mapZoom = 1;
        this.mapZoomCache = 0;
        this.mapZoomIncrement = .0025;
        this.mapZoomStep = 0;
        this.mapZoomMax = 2;
        this.mapZoomMin = .5;
        this.didZoom = false;
        
        // Scrolling
        this.mapScrollIncrement = .5;
        this.mapScrollDecay = 1.0;
        this.mapScrollMax = 1;
        this.mapScrollXStep = 0;
        this.mapScrollYStep = 0;
        this.mapScrollX = 0;
        this.mapScrollY = 0;
        this.mapScrollOffsetX = 0;
        this.mapScrollOffsetY = 0;

        // Sprite / Bitmap data
        this.bmd = game.add.bitmapData(this.width, this.height);    
        this.sprite = game.add.sprite(this.x, this.y, this.bmd);
        if(options.group) options.group.add(this.sprite);

        // Sounds
        this.navTargetChangedSound = game.add.audio('blorp');
        this.navDestinationAddedSound = game.add.audio('beep-beep');
        this.navDestinationClearedSound = game.add.audio('cancel');
        this.navTargetInvalidSound = game.add.audio('invalid');
    }
    
    setupKeys(){
        // Keys
        this.cursors = this.game.input.keyboard.createCursorKeys();
        this.plusKey = game.input.keyboard.addKey(Phaser.Keyboard.EQUALS);
        this.minusKey = game.input.keyboard.addKey(Phaser.Keyboard.UNDERSCORE);
        this.spaceKey = game.input.keyboard.addKey(Phaser.Keyboard.SPACEBAR);
        this.spaceKey.onUp.add(this.setDestination,this);
    }
    
    centerOnSystem(system){
        this.mapScrollX = ((this.width/this.mapZoom)/2)-system.position.x;
        this.mapScrollY = ((this.height/this.mapZoom)/2)-system.position.y;    
    }
    
    findPathFromSystemToSystem(originSystem,destinationSystem){
        var path = [originSystem];
        var maxJumpDistance = 150;
        var angleToDestination = originSystem.angleToStarSystem(destinationSystem);
        var distanceToDestination = originSystem.distanceToStarSystem(destinationSystem);

        var validatePath = function(){
            if(path[path.length-1]!=destinationSystem) {
                getNextJump();
            }
        }

        var getNextJump = function(){
            if(path[path.length-1]){
                var nextJump = path[path.length-1].systemWithinRangeTowardsSystem(maxJumpDistance,destinationSystem);
                if(path.includes(nextJump)) return null;
                path.push(nextJump);
                validatePath();                
            } else {
                return null;
            }
        }

        if(distanceToDestination<=maxJumpDistance){
            // Destination is within one jump away. 
            path.push(destinationSystem);
        } else {
            getNextJump();
        }
         
        path.clean(null); // remove all nulls;
                
        return path;        
    }
    
    distanceOfPath(path){
        var distance = 0;
        var previousSystem = null;

        for(let system of path){
            if(previousSystem && system!=null){
                distance+= system.distanceToStarSystem(previousSystem);
            }
            previousSystem = system;
        }        
        
        return distance;
    }
    
    setDestination(){
        // Makes current target the destination.
        if(this.navigationDestination){
            this.navigationDestination = null;
            this.navDestinationClearedSound.play();
        } else {            
            this.navigationDestination = this.navigationTarget;
            this.navDestinationAddedSound.play();
        }
    }
    
    drawMap(){      
        this.bmd.ctx.clearRect(0,0,this.width,this.height);
        var zoom = this.mapZoom;        
        // Lines
        for(let system of this.starSystems){
            // Save distnce for later
            system.distanceFromMapCenter = Math.sqrt(
                Math.pow(
                    ((system.position.x+this.mapScrollX)*zoom)-this.width/2,
                2) + 
                Math.pow(
                    ((system.position.y+this.mapScrollY)*zoom)-this.height/2,
                2)
            );

            if(system.neighbors.length>0){
                for(let neighbor of system.neighbors){
                    if(neighbor!=null){
                    	this.bmd.ctx.strokeStyle = "#ffffff";
                    	this.bmd.ctx.lineWidth = 1;
                    	this.bmd.ctx.beginPath();
                    	this.bmd.ctx.moveTo((system.position.x+this.mapScrollX)*zoom, (system.position.y+this.mapScrollY)*zoom);
                    	this.bmd.ctx.lineTo((neighbor.position.x+this.mapScrollX)*zoom,(neighbor.position.y+this.mapScrollY)*zoom);
                    	this.bmd.ctx.stroke();
                    }
            	}
            }
        }

        this.drawGridLines({
            major : 100,
            minor : 25,
            color : '#333333',
        })

        for (var i = 0; i < this.currentPath.length; i++) {
            if(i<this.currentPath.length-1){
            	this.bmd.ctx.strokeStyle = "#1aae5c";
            	this.bmd.ctx.lineWidth = 4;
            	this.bmd.ctx.beginPath();
            	this.bmd.ctx.moveTo((this.currentPath[i].position.x+this.mapScrollX)*zoom, (this.currentPath[i].position.y+this.mapScrollY)*zoom);
            	this.bmd.ctx.lineTo((this.currentPath[i+1].position.x+this.mapScrollX)*zoom,(this.currentPath[i+1].position.y+this.mapScrollY)*zoom);
            	this.bmd.ctx.stroke();
            }
        }

        // Stars
        for(let system of this.starSystems){                  
            // Black Space
            this.bmd.ctx.fillStyle='#111111'
            this.bmd.ctx.beginPath();
            this.bmd.ctx.arc((system.position.x+this.mapScrollX)*zoom,(system.position.y+this.mapScrollY)*zoom,system.size+5,0,2*Math.PI);
            this.bmd.ctx.fill();

            // Current System Highlight
            if(system.isCurrentSystem || system==this.navigationDestination){
                this.bmd.ctx.strokeStyle='#1aae5c';
                this.bmd.ctx.lineWidth = 1.5;
                this.bmd.ctx.beginPath();
                this.bmd.ctx.arc((system.position.x+this.mapScrollX)*zoom,(system.position.y+this.mapScrollY)*zoom,system.size+5,0,2*Math.PI);
                this.bmd.ctx.stroke();  
            }

            // Star
            this.bmd.ctx.lineWidth = 1.5;
            this.bmd.ctx.beginPath();
            this.bmd.ctx.arc((system.position.x+this.mapScrollX)*zoom,(system.position.y+this.mapScrollY)*zoom,system.size,0,2*Math.PI);
            if(system.planetCount>0) {
                this.bmd.ctx.fillStyle = system.type.color;
	            this.bmd.ctx.fill();
            } else {
                this.bmd.ctx.strokeStyle='#AAAAAA';
	            this.bmd.ctx.stroke();
            }
            
            // Navigation Arrow
            if(system==this.navigationTarget) {
                this.bmd.draw(this.navArrow, (system.position.x+this.mapScrollX)*zoom, (system.position.y+this.mapScrollY)*zoom-10 );
            }
        }

        // Names/Labels
        for(let system of this.starSystems){
            var textMarginX = system.size+8;
            var textMarginY = 3;
            var lineSpacing = 15;
            
            var labelString = `${system.name}`
            this.bmd.ctx.font = `12px ${FONT}`;
            this.bmd.ctx.strokeStyle='#111111'
            this.bmd.ctx.fillStyle='#FFFFFF'
            this.bmd.ctx.lineWidth = 3;
            
            var labelX = ((system.position.x+this.mapScrollX)*zoom)+textMarginX;
            var labelY = ((system.position.y+this.mapScrollY)*zoom)+textMarginY;

            this.drawShadowText(labelString, labelX, labelY);
            
            // Subtext
            this.bmd.ctx.font = `10px ${FONT}`;
            if(system.isCurrentSystem){
                this.bmd.ctx.fillStyle='#1aae5c'
                this.drawShadowText('Current System', labelX, labelY+lineSpacing);
            }
            
            if(this.currentPath){
                if(system==this.currentPath.lastItem() && !system.isCurrentSystem){
                    if(system==this.navigationDestination){
                        this.bmd.ctx.fillStyle='#1aae5c'
                    } else {
                        this.bmd.ctx.fillStyle='#FFFFFF'
                    }
                    var formattedDistance = numeral(this.distanceToNavigationTarget*PIXEL_TO_LIGHTYEAR).format('0,0.0a');                    
                    if(this.currentPath.length==2){
                        var jumpText = 'Jump'
                    } else {
                        var jumpText = 'Jumps'
                    }
                    
                    this.drawShadowText(`${this.currentPath.length-1} ${jumpText} / ${formattedDistance} ly`, labelX, labelY+lineSpacing);
                } else if(system==this.navigationTarget) {
                    this.bmd.ctx.fillStyle='#c03b2b'
                    this.drawShadowText(`Out of Range`, labelX, labelY+lineSpacing);
                    
                }
            }
        }        
    }

    updateNavigation(){
        if(!this.navigationDestination){
            // 'Cursor' sort of...
            // Find the star closest to the center of the screen
            var lowest = Number.POSITIVE_INFINITY;
            var tmp;
            for (var i=this.starSystems.length-1; i>=0; i--) {
                tmp = this.starSystems[i].distanceFromMapCenter;
                if (tmp < lowest) {
                    lowest = tmp;
                    this.navigationTarget = this.starSystems[i];
                }
            }
            if(this.game.system!=this.navigationTarget){
                if(this.navigationTarget!=this.navigationTargetCache){
                    this.currentPath = this.findPathFromSystemToSystem(this.game.system,this.navigationTarget);
                    this.distanceToNavigationTarget = this.distanceOfPath(this.currentPath)
                    
                    if(this.currentPath.includes(this.navigationTarget)){
                        this.navTargetChangedSound.play();
                    } else {
                        this.navTargetInvalidSound.play();
                    }
                }
            } else {
                this.currentPath = false;
            }
            this.navigationTargetCache = this.navigationTarget;
        }
    }
    
    
    drawShadowText(text,x,y){
        this.bmd.ctx.strokeText(text,x,y);
        this.bmd.ctx.fillText(text,x,y);            
    }
    
    drawGridLines(options){
        var zoom = this.mapZoom;
        var major = options.major || 100*zoom;
        var minor = options.minor || 25*zoom;            
    	this.bmd.ctx.strokeStyle = options.color || "#333333";
    	
        // Verticle
        for (var x = 0; x <= this.game.galaxy.settings.mapWidth; x+=minor) {
            if (x % major == 0) {
                this.bmd.ctx.lineWidth = 2;
            } else {
                this.bmd.ctx.lineWidth = 1;                
            }
        	this.bmd.ctx.beginPath();
        	this.bmd.ctx.moveTo((x+this.mapScrollX)*zoom,this.mapScrollY*zoom);
        	this.bmd.ctx.lineTo((x+this.mapScrollX)*zoom,(this.mapScrollY*zoom)+(this.game.galaxy.settings.mapHeight*zoom));
            this.bmd.ctx.stroke();
        }


        // Horizontal
        for (var y = 0; y <= this.game.galaxy.settings.mapHeight; y+=minor) {
            if (y % major == 0) {
                this.bmd.ctx.lineWidth = 2;
            } else {
                this.bmd.ctx.lineWidth = 1;                
            }
        	this.bmd.ctx.beginPath();
        	this.bmd.ctx.moveTo(this.mapScrollX*zoom,(y+this.mapScrollY)*zoom);
        	this.bmd.ctx.lineTo((this.mapScrollX*zoom)+(this.game.galaxy.settings.mapWidth*zoom),(y+this.mapScrollY)*zoom);
            this.bmd.ctx.stroke();
        }
    }
    
    update(){
        if(this.isActive){
            this.updateNavigation();
    
            if (this.cursors.up.isDown) {
                this.mapScrollYStep+=this.mapScrollIncrement;
            } else if(this.cursors.down.isDown){
                this.mapScrollYStep-=this.mapScrollIncrement;            
            } else {
                // Y
                if(this.mapScrollYStep>0)this.mapScrollYStep-=this.mapScrollDecay;
                if(this.mapScrollYStep<0)this.mapScrollYStep+=this.mapScrollDecay;
                if(Math.abs(this.mapScrollYStep)<this.mapScrollDecay) this.mapScrollYStep=0;
            }
    
            if (this.cursors.left.isDown) {
                this.mapScrollXStep+=this.mapScrollIncrement;
            } else if(this.cursors.right.isDown){
                this.mapScrollXStep-=this.mapScrollIncrement;            
            } else {
                // X
                if(this.mapScrollXStep>0)this.mapScrollXStep-=this.mapScrollDecay;
                if(this.mapScrollXStep<0)this.mapScrollXStep+=this.mapScrollDecay;
                if(Math.abs(this.mapScrollXStep)<this.mapScrollDecay) this.mapScrollXStep=0;
            }
    
            if (this.plusKey.isDown && this.didZoom==false) {
                if(this.mapZoom==.5){
                    this.mapZoom = 1
                    this.mapScrollX -= (this.width/2);
                    this.mapScrollY -= (this.height/2);
                } else if(this.mapZoom==1) {
                    this.mapZoom = 2
                    this.mapScrollX -= (this.width/4);
                    this.mapScrollY -= (this.height/4);
                }
    
                this.didZoom = true;
    
                game.time.events.add(Phaser.Timer.SECOND * .15, function(){
                    this.didZoom = false;
                }, this);
    
            } else if(this.minusKey.isDown && this.didZoom==false){
                if(this.mapZoom==1){
                    this.mapZoom = .5
                    this.mapScrollX += (this.width/2);
                    this.mapScrollY += (this.height/2);
                } else if(this.mapZoom==2) {
                    this.mapZoom = 1
                    this.mapScrollX += (this.width/4);
                    this.mapScrollY += (this.height/4);
                }
    
                this.didZoom = true;
    
                game.time.events.add(Phaser.Timer.SECOND * .15, function(){
                    this.didZoom = false;
                }, this);
    
            } else {            
                if(this.mapZoomStep>0)this.mapZoomStep-=this.mapZoomIncrement;            
                if(this.mapZoomStep<0)this.mapZoomStep+=this.mapZoomIncrement;            
    
                if(this.mapZoomStep>0 && this.mapZoomStep<this.mapZoomIncrement)this.mapZoomStep=0;            
                if(this.mapZoomStep<0 && this.mapZoomStep>this.mapZoomIncrement)this.mapZoomStep=0;
            }
            
            this.mapScrollX += this.mapScrollXStep/this.mapZoom;
            this.mapScrollY += this.mapScrollYStep/this.mapZoom;        
            
                    
            if(this.mapZoom>this.mapZoomMax) {
                this.mapZoom = this.mapZoomMax;
                this.mapZoomStep = 0;
            }
    
            if(this.mapZoom<this.mapZoomMin) {
                this.mapZoom = this.mapZoomMin;
                this.mapZoomStep = 0;
            }
                    
            if(this.mapZoom>=this.mapZoomMin && this.mapZoom<=this.mapZoomMax && this.mapZoomStep!=this.mapZoomCache) {
                this.mapZoom += this.mapZoomStep;
                this.mapZoomCache = this.mapZoomStep;
                
                this.mapScrollX += this.mapScrollX*(this.mapZoom/2);
            }
            this.drawMap();
        }
    }
    
    cleanup(){
        this.plusKey = null;
        this.minusKey = null;
        this.spaceKey.onUp.remove(this.setDestination, this);
        this.spaceKey = null;
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/gui/mapScreen.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class MapScreen extends GuiScreen {
    constructor(game,group) {
        super(game,group);

        this.transitionStyle = SCREEN_TRANSITION_STYLE.fromBottom;
        
        this.setupScreen();
                
        this.wrapper = group;
        this.wrapper.add(this.screen);
        this.wrapper.fixedToCamera = true;
        this.wrapper.visible = false;
        
        this.destination = null;
        this.destinationCache = null;
        
        this.map = new GalacticMap(this.game,{
            width : this.game.camera.width-this.game.hud.sidebarWidth,
            height : screenHeight-46-38,
            x : 0,
            y : 46,
            group : this.screen,
        });
    }
    
    setupKeys(){
        this.mKey = game.input.keyboard.addKey(Phaser.Keyboard.M);
        this.mKeyOnUp = function(){
            this.hide();
        }
        this.mKey.onUp.add(this.mKeyOnUp, this);
    }
    
    setupScreen(){
        this.screenWidth = this.game.camera.width-this.game.hud.sidebarWidth;

        this.bg = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.tabBar = this.screen.add(new Phaser.Graphics(this.game.game,0,0));
        this.bottomBar = this.screen.add(new Phaser.Graphics(this.game.game,0,0));

        // Background
        this.bg.clear();
        this.bg.beginFill(0x111111);
        this.bg.drawRect(0,0,
            this.screenWidth,
            this.game.camera.height*2,
            0
        )
        this.bg.endFill();

        // Bottom Bar
        this.bottomBarHeight = 38;
        this.bottomBar.clear();
        this.bottomBar.beginFill(this.styles.darkGrey);
        this.bottomBar.drawRect(0,this.game.camera.height-this.bottomBarHeight,
            this.screenWidth,
            this.bottomBarHeight+100, // Overlap for animation
        )
        this.bottomBar.endFill();

        this.helpText = this.game.add.text(
            16,this.game.camera.height - 26, 
            '(ARROWS) Move Map   (SPACE) Select Destination    (+/-) Zoom', 
            { font: `12px ${FONT}`, fill: '#929292', align: 'left'},
            this.screen
        )


        // Tabs
        this.shipTab = new TabItem(this.game,'ship-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.shipTab.buttonX = 0;
        this.shipTab.buttonY = 0;
        this.shipTab.text = "Ship";
        this.screen.add(this.shipTab);
        
        this.inventoryTab = new TabItem(this.game,'inv-tab');
        this.inventoryTab.buttonX = this.shipTab.buttonWidth + 1;
        this.inventoryTab.buttonY = 0;
        this.inventoryTab.text = "Inventory";
        this.screen.add(this.inventoryTab);

        this.mapTab = new TabItem(this.game,'map-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.mapTab.buttonX = this.inventoryTab.buttonX + this.inventoryTab.buttonWidth + 1;
        this.mapTab.buttonY = 0;
        this.mapTab.text = "Map";
        this.mapTab.active = true;
        this.screen.add(this.mapTab);

        this.statsTab = new TabItem(this.game,'stats-tab',{
            onReleased : function() {
                this.hide();
            }.bind(this),
        },
        );
        this.statsTab.buttonX = this.mapTab.buttonX + this.mapTab.buttonWidth + 1;
        this.statsTab.buttonY = 0;
        this.statsTab.text = "Stats";
        this.screen.add(this.statsTab);

        this.tabBar.clear();
        this.tabBar.beginFill(0x3F3C46);
        this.tabBar.drawRect(0,45,
            this.screenWidth,
            1,
            0
        )
        this.tabBar.endFill();

    }
        
    show(){
        super.show();

        this.wrapper.visible = true;
        this.setupKeys();

        this.map.setupKeys();
        this.map.isActive = true;
        this.map.centerOnSystem(this.game.system);
    }

    didShow(){
        super.didShow();        
        this.game.player.controlMode = CONTROL_MODE.inventory;
    }
    
    hide(){
        super.hide();
        this.cleanup();

        this.map.isActive = false;
        this.map.cleanup();
    }

    didHide(){
        super.didHide();
        
        this.destination = this.map.navigationDestination;
        
        if(this.destination!=this.destinationCache && this.destination){
            this.game.hud.showFTLPanel();
        }

        this.destinationCache = this.destination;
    }
    
    cleanup(){
        this.mKey.onUp.remove(this.mKeyOnUp, this);
    }
}

/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */
/* Merging js: app/economy/_economy.js begins */
/*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */


class Economy {
    constructor(game) {
        this.game = game;    
        this.markets = [];

        // Updates
        this.game.time.events.loop(5000, this.updateAllMarkets, this);
    }
    
    // Markets
    registerMarket(market,restock = true){
        market['stockItem'] = this.stockItem;

        this.markets.push(market);
        if(restock) this.restockMarket(market);
    }
    restockMarket(market){
        // Based on certain properites, determine the items for sale in a given market.
        if(market.hasService(PLANET_SERVICES.fuelDepot)){
            market.stockItem('small_fuel_drum',tombola.range(1,2));
            market.stockItem('theta_crystal',tombola.range(1,5));
        }   
        if(market.hasService(PLANET_SERVICES.shipyard)){
            market.stockItem('med_repair_kit',tombola.range(1,2));
            market.stockItem('light_repair_kit',tombola.range(1,2));
            market.stockItem('basic_engine',tombola.range(0,1));
        }   


        

    }
    updateMarket(market){
        
    }
    updateAllMarkets(){

    }

    stockItem(itemKey, amount = 1){
        this.addItemsToInventory(amount, InventoryObject.make(itemKey,this.game));
    }
    
    // Fuel
    get globalFuelPrice(){
        return .033;
    }

    buyFuel(amount){
        if(amount>0){
            var purchaseCost = amount * this.globalFuelPrice;
            if(this.game.player.debitCredits(purchaseCost)){
                this.game.player.ship.addFuel(amount);
                
                var roundedAmt = numeral(amount).format('0.0a')
                var readablePrice = numeral(this.globalFuelPrice).format('$0,0.00')
                
                this.game.hud.purchaseReceipt('Auto Refuel',`${roundedAmt} units @ ${readablePrice}`,purchaseCost);
            } else {
                // Sorry
            }
        } else {
            // Nothing to buy
            return false;
        }
    }

    tick(){
        // Change prices of stuff
        // Spawn stuff   
    }
}